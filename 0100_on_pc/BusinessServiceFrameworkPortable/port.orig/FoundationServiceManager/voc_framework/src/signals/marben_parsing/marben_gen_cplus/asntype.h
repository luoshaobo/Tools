/*
Copyright (C) 1999-2011 Marben Products. All rights reserved.

THIS FILE IS PROPRIETARY MATERIAL OF MARBEN PRODUCTS.
AND MAY BE USED ONLY BY DIRECT LICENSEES OF ASNSDK PRODUCT.
THIS FILE MAY NOT BE DISTRIBUTED.

===========================================================================

asntype.h: C++ API declarations

Generated by ASNSDK TCE-C++ ASN.1 Compiler v6.0 - REF_8.55 - REF_8.41

===========================================================================
*/

/**@file
 * C++ API declarations
 */



#include <aipupinc.h>

/*
 * prototype(s) for init function(s) that calculates
 * all C++ api offset. This function(s) is(are) used when
 * asnCodNonPodOffsetof is not defined
 */
#ifndef asnNonPodOffsetof
asnFGlobal asnFVoid asnMNAAbstractSyntaxInit asnNOPARMS;
#endif

/*  Don't panic : 
      the "unrecognized" quality is specific to this function
      all the listed types are valid PDU types */

/* PDU Types recognized or not by createBERvalue */
/*
VDServiceRequest recognized
*/


/*  Don't panic : 
      the "unrecognized" quality is specific to this function
      all the listed types are valid PDU types */

/* PDU Types recognized or not by createXERvalue */
/*
VDServiceRequest recognized
*/

#define AbstractSyntax (asnZNAAbstractSyntax[0])
extern asnTOCTypeAssignment asnZOCTypeAssignment[];
extern asnTOIBoolean asnZOIBoolean[];
extern asnTOFByte asnZOFByte[];
extern asnTOHNull asnZOHNull[];
extern asnTPENonKnownMultiplierCharacterString asnZPENonKnownMultiplierCharacterString[];
extern asnTPFKnownMultiplierCharacterString asnZPFKnownMultiplierCharacterString[];
extern asnTPHBitString asnZPHBitString[];
extern asnTPINamedBit asnZPINamedBit[];
extern asnTPGOctetString asnZPGOctetString[];
extern asnTPBSequenceOf asnZPBSequenceOf[];
extern asnTSWSetSeqOfNamedType asnZSWSetSeqOfNamedType[];
extern asnTPCSetOf asnZPCSetOf[];
extern asnTPNInteger asnZPNInteger[];
extern asnTPPEnumerated asnZPPEnumerated[];
extern asnTPQNamedEnumerated asnZPQNamedEnumerated[];
extern asnTPVNumberInterval asnZPVNumberInterval[];
extern asnTOLSequence asnZOLSequence[];
extern asnTONSetSeqNamedType asnZONSetSeqNamedType[];
extern asnTOBMINUINT asnZOBMINUINT[];
extern asnTPRChoice asnZPRChoice[];
extern asnTPSChoiceNamedType asnZPSChoiceNamedType[];
extern asnTNAAbstractSyntax asnZNAAbstractSyntax[];
extern asnTOGTag asnZOGTag[];
extern asnTOXTagMap asnZOXTagMap[];
extern asnTNBTagTypeAssMap asnZNBTagTypeAssMap[];

#ifdef asnCodCPER
extern asnTPJPerEffectiveKnownMultiplierCharacterStringConstraint asnZPJPerEffectiveKnownMultiplierCharacterStringConstraint[];

#endif

#ifdef asnCodCPER
extern asnTPKPerAlphabetInterval asnZPKPerAlphabetInterval[];

#endif

#ifdef asnCodCPER
extern asnTPTPerEffectiveNumberConstraint asnZPTPerEffectiveNumberConstraint[];

#endif

#ifdef asnCodFPER
extern asnTORPerSetSeqCoding asnZORPerSetSeqCoding[];

#endif

#ifdef asnCodCPER
extern asnTPLPerEffectiveLengthConstraint asnZPLPerEffectiveLengthConstraint[];

#endif

#ifdef asnCodXTAG
extern asnTNEXerTag asnZNEXerTag[];

#endif
extern asnTNDXerTagMap asnZNDXerTagMap[];
extern asnTNCXerTagTypeAssMap asnZNCXerTagTypeAssMap[];
class RequestBody;
class asncserviceParameterss;
class asncattributess;
class asncpoiss;
class asncConfigurationItem__parameterss;
class asncitemss;
class asncAdditionalVehicleStatus__signalss;
class asncrecentPositionss;
class asncOEMMSD__signalss;
class asncdtcss;
class asncNotification__parameterss;
class asnctrackpointss;
class asncwaypointss;
class asnctripFragmentss;
class asnctrackPointss;
class asncdidDatas;
class asncdtcDatas;
class asncdatas;
class asncconditionss;
class RequestHeader;
class TimeStamp;
class VDServiceRequest;
class DIDData;
class DTCData;
class ECUData;
class EcuData__C;
class asncnoDiagData;
class asncEcuData__data;
class EcuData;
class NEVCoordinatesLongLat;
class NEVDRPositionData;
class NEVDRVehiclePosition__C;
class asncnoValidData;
class asncdrPosition;
class NEVDRVehiclePosition;
class NEVDateTime;
class NEVServiceData;
class Configuration;
class ConfigurationItem;
class ContactInfo;
class Error;
class EventAction;
class EventRule;
class GeneralMessage__C;
class asncGeneralMessage__message;
class asncocetMessage;
class GeneralMessage;
class Notification;
class OTA;
class PointOfInterest;
class Position;
class PostAddress;
class RuleCondition;
class ServiceData;
class ServiceParameter;
class ServiceResult;
class ServiceStatus;
class ServiceTrigger;
class TrackPoint;
class Trip;
class TripFragment;
class AdditionalVehicleStatus;
class BasicVehicleStatus;
class BatteryStatus;
class CarConfig;
class ClimateStatus;
class ConfigurationAndIdentity;
class DiagnosticTroubleCode;
class DrivingBehaviourStatus;
class DrivingSafetyStatus;
class ECUDiagnostic;
class asncECUDiagnosticss;
class ECUDiagnostics;
class asncEcuWarningMessagess;
class EcuWarningMessages;
class ElectricVehicleStatus;
class GenericVehicleSignal;
class MaintenanceStatus;
class NetworkAccessStatus;
class OEMMSD;
class PollutionStatus;
class RunningStatus;
class SIMInfo;
class TEMStatus;
class TheftNotification;
class VehicleStatus;
#ifndef asnNonPodOffsetof
/**
 * To call automatically the generated init function, the constructor
 * of the following C++ class is used.
 * Note that in some platfoms the instanciation of this class as global
 * variable do not call the constructor automatically. In this case 
 * please instanciate this class in the user application
 */
class asnAbstractSyntaxInitClass
{
   public :
   /**
    * Default constructor.
    */
   asnAbstractSyntaxInitClass()
   {
     if ( asnFALSE == asnZNAAbstractSyntax[0].isOffsetCalculated )
     {
       (asnZNAAbstractSyntax[0].tableInitiator)();
       asnZNAAbstractSyntax[0].isOffsetCalculated = asnTRUE;
     }
   }
};

#endif

/**
 * The value of the enumerated element ecu.
 */
enum{ecu = 0};
/**
 * The value of the enumerated element cvc.
 */
enum{cvc = 1};



/**
 * The value of the enumerated element serviceRequest.
 */
enum{serviceRequest = 0};
/**
 * The value of the enumerated element ack.
 */
enum{ack = 1};

/**
 * The value of the enumerated element periodicTrg.
 */
enum{periodicTrg = 1};
/**
 * The value of the enumerated element umChangeTrg.
 */
enum{umChangeTrg = 2};
/**
 * The value of the enumerated element chargeStartTrg.
 */
enum{chargeStartTrg = 3};
/**
 * The value of the enumerated element chargeStopTrg.
 */
enum{chargeStopTrg = 4};
/**
 * The value of the enumerated element disableRmsTrg.
 */
enum{disableRmsTrg = 5};

/**
 * The value of the integer element incorrectState.
 */
enum{incorrectState = ((asnMAXSINT)1U)};
/**
 * The value of the integer element invalidData.
 */
enum{invalidData = ((asnMAXSINT)2U)};
/**
 * The value of the integer element invalidFormat.
 */
enum{invalidFormat = ((asnMAXSINT)3U)};
/**
 * The value of the integer element powderModeNotCorrect.
 */
enum{powderModeNotCorrect = ((asnMAXSINT)4U)};
/**
 * The value of the integer element conditionsNotCorrect.
 */
enum{conditionsNotCorrect = ((asnMAXSINT)5U)};
/**
 * The value of the integer element executionFailure.
 */
enum{executionFailure = ((asnMAXSINT)6U)};
/**
 * The value of the integer element permissionDenied.
 */
enum{permissionDenied = ((asnMAXSINT)7U)};
/**
 * The value of the integer element timeout.
 */
enum{timeout = ((asnMAXSINT)8U)};
/**
 * The value of the integer element backupBatteryUsage.
 */
enum{backupBatteryUsage = ((asnMAXSINT)9U)};

/**
 * The value of the integer element door_unlock.
 */
enum{door_unlock = ((asnMAXSINT)0U)};
/**
 * The value of the integer element event_trigger.
 */
enum{event_trigger = ((asnMAXSINT)1U)};

/**
 * The value of the integer element startService.
 */
enum{startService = ((asnMAXSINT)0U)};
/**
 * The value of the integer element requestData.
 */
enum{requestData = ((asnMAXSINT)1U)};
/**
 * The value of the integer element responseData.
 */
enum{responseData = ((asnMAXSINT)2U)};
/**
 * The value of the integer element executionAction.
 */
enum{executionAction = ((asnMAXSINT)4U)};
/**
 * The value of the integer element terminateService.
 */
enum{terminateService = ((asnMAXSINT)20U)};

/**
 * The value of the integer element mtp.
 */
enum{mtp = ((asnMAXSINT)1U)};
/**
 * The value of the integer element mtu.
 */
enum{mtu = ((asnMAXSINT)2U)};
/**
 * The value of the integer element mcu.
 */
enum{mcu = ((asnMAXSINT)4U)};
/**
 * The value of the integer element mpm.
 */
enum{mpm = ((asnMAXSINT)5U)};
/**
 * The value of the integer element mta.
 */
enum{mta = ((asnMAXSINT)6U)};
/**
 * The value of the integer element mul.
 */
enum{mul = ((asnMAXSINT)7U)};
/**
 * The value of the integer element mrs.
 */
enum{mrs = ((asnMAXSINT)8U)};
/**
 * The value of the integer element rin.
 */
enum{rin = ((asnMAXSINT)11U)};
/**
 * The value of the integer element rdl.
 */
enum{rdl = ((asnMAXSINT)13U)};
/**
 * The value of the integer element rdu.
 */
enum{rdu = ((asnMAXSINT)14U)};
/**
 * The value of the integer element rtl.
 */
enum{rtl = ((asnMAXSINT)15U)};
/**
 * The value of the integer element rtu.
 */
enum{rtu = ((asnMAXSINT)16U)};
/**
 * The value of the integer element res.
 */
enum{res = ((asnMAXSINT)17U)};
/**
 * The value of the integer element rvi.
 */
enum{rvi = ((asnMAXSINT)18U)};
/**
 * The value of the integer element rcc.
 */
enum{rcc = ((asnMAXSINT)19U)};
/**
 * The value of the integer element rce.
 */
enum{rce = ((asnMAXSINT)20U)};
/**
 * The value of the integer element rhl.
 */
enum{rhl = ((asnMAXSINT)21U)};
/**
 * The value of the integer element rsh.
 */
enum{rsh = ((asnMAXSINT)22U)};
/**
 * The value of the integer element rws.
 */
enum{rws = ((asnMAXSINT)23U)};
/**
 * The value of the integer element rpc.
 */
enum{rpc = ((asnMAXSINT)24U)};
/**
 * The value of the integer element rpp.
 */
enum{rpp = ((asnMAXSINT)25U)};
/**
 * The value of the integer element ren.
 */
enum{ren = ((asnMAXSINT)26U)};
/**
 * The value of the integer element rec.
 */
enum{rec = ((asnMAXSINT)27U)};
/**
 * The value of the integer element cec.
 */
enum{cec = ((asnMAXSINT)31U)};
/**
 * The value of the integer element cep.
 */
enum{cep = ((asnMAXSINT)32U)};
/**
 * The value of the integer element cbc.
 */
enum{cbc = ((asnMAXSINT)33U)};
/**
 * The value of the integer element cic.
 */
enum{cic = ((asnMAXSINT)34U)};
/**
 * The value of the integer element svt.
 */
enum{svt = ((asnMAXSINT)41U)};
/**
 * The value of the integer element stn.
 */
enum{stn = ((asnMAXSINT)44U)};
/**
 * The value of the integer element rvs.
 */
enum{rvs = ((asnMAXSINT)51U)};
/**
 * The value of the integer element trs.
 */
enum{trs = ((asnMAXSINT)52U)};
/**
 * The value of the integer element jou.
 */
enum{jou = ((asnMAXSINT)61U)};
/**
 * The value of the integer element hec.
 */
enum{hec = ((asnMAXSINT)62U)};
/**
 * The value of the integer element dia.
 */
enum{dia = ((asnMAXSINT)63U)};
/**
 * The value of the integer element ServiceId__ota.
 */
enum{ServiceId__ota = ((asnMAXSINT)67U)};
/**
 * The value of the integer element osc.
 */
enum{osc = ((asnMAXSINT)68U)};
/**
 * The value of the integer element vun.
 */
enum{vun = ((asnMAXSINT)69U)};
/**
 * The value of the integer element dkb.
 */
enum{dkb = ((asnMAXSINT)80U)};
/**
 * The value of the integer element bks.
 */
enum{bks = ((asnMAXSINT)89U)};
/**
 * The value of the integer element bdc.
 */
enum{bdc = ((asnMAXSINT)90U)};
/**
 * The value of the integer element wcr.
 */
enum{wcr = ((asnMAXSINT)71U)};
/**
 * The value of the integer element rsv.
 */
enum{rsv = ((asnMAXSINT)72U)};
/**
 * The value of the integer element mcp.
 */
enum{mcp = ((asnMAXSINT)101U)};
/**
 * The value of the integer element msr.
 */
enum{msr = ((asnMAXSINT)102U)};
/**
 * The value of the integer element rms.
 */
enum{rms = ((asnMAXSINT)500U)};

/**
 * The rank of the named bit testFailed in the named bit table.
 */
enum{testFailed = 0};
/**
 * The rank of the named bit testFailedThisOperationCycle in the named bit table.
 */
enum{testFailedThisOperationCycle = 1};
/**
 * The rank of the named bit pendingDTC in the named bit table.
 */
enum{pendingDTC = 2};
/**
 * The rank of the named bit confirmedDTC in the named bit table.
 */
enum{confirmedDTC = 3};
/**
 * The rank of the named bit testNotCompletedSinceLastClear in the named bit table.
 */
enum{testNotCompletedSinceLastClear = 4};
/**
 * The rank of the named bit testFailedSinceLastClear in the named bit table.
 */
enum{testFailedSinceLastClear = 5};
/**
 * The rank of the named bit testNotCompletedThisOperationCycle in the named bit table.
 */
enum{testNotCompletedThisOperationCycle = 6};
/**
 * The rank of the named bit warningIndicatorRequested in the named bit table.
 */
enum{warningIndicatorRequested = 7};

/**
 * The value of the enumerated element unblocked.
 */
enum{unblocked = 0};
/**
 * The value of the enumerated element blocked.
 */
enum{blocked = 1};

/**
 * The value of the integer element engine_running.
 */
enum{engine_running = ((asnMAXSINT)0U)};
/**
 * The value of the integer element engine_off.
 */
enum{engine_off = ((asnMAXSINT)1U)};
/**
 * The value of the integer element EngineStatus__unknown.
 */
enum{EngineStatus__unknown = ((asnMAXSINT)2U)};

/**
 * The value of the integer element petrol.
 */
enum{petrol = ((asnMAXSINT)0U)};
/**
 * The value of the integer element diesel.
 */
enum{diesel = ((asnMAXSINT)1U)};
/**
 * The value of the integer element petrolHybrid.
 */
enum{petrolHybrid = ((asnMAXSINT)2U)};
/**
 * The value of the integer element dieselHybrid.
 */
enum{dieselHybrid = ((asnMAXSINT)3U)};
/**
 * The value of the integer element ev.
 */
enum{ev = ((asnMAXSINT)4U)};
/**
 * The value of the integer element hydrogenFuelcellEV.
 */
enum{hydrogenFuelcellEV = ((asnMAXSINT)5U)};
/**
 * The value of the integer element compressedGas.
 */
enum{compressedGas = ((asnMAXSINT)6U)};
/**
 * The value of the integer element liquefiedPropaneGas.
 */
enum{liquefiedPropaneGas = ((asnMAXSINT)7U)};
/**
 * The value of the integer element FuelType__invalid.
 */
enum{FuelType__invalid = ((asnMAXSINT)8U)};

/**
 * The value of the integer element ok.
 */
enum{ok = ((asnMAXSINT)0U)};
/**
 * The value of the integer element faulty.
 */
enum{faulty = ((asnMAXSINT)1U)};
/**
 * The value of the integer element HealthStatus__unknown.
 */
enum{HealthStatus__unknown = ((asnMAXSINT)2U)};
/**
 * The value of the integer element HealthStatus__invalid.
 */
enum{HealthStatus__invalid = ((asnMAXSINT)3U)};

/**
 * The value of the integer element no_key_inserted.
 */
enum{no_key_inserted = ((asnMAXSINT)0U)};
/**
 * The value of the integer element key_inserted.
 */
enum{key_inserted = ((asnMAXSINT)1U)};
/**
 * The value of the integer element KeyStatus__unknown.
 */
enum{KeyStatus__unknown = ((asnMAXSINT)2U)};

/**
 * The value of the integer element mainBattery.
 */
enum{mainBattery = ((asnMAXSINT)0U)};
/**
 * The value of the integer element PowerSource__backupBattery.
 */
enum{PowerSource__backupBattery = ((asnMAXSINT)1U)};

/**
 * The value of the enumerated element no_srs_info.
 */
enum{no_srs_info = 0};
/**
 * The value of the enumerated element srs_not_deployed.
 */
enum{srs_not_deployed = 1};
/**
 * The value of the enumerated element srs_deployed.
 */
enum{srs_deployed = 2};

/**
 * The value of the enumerated element calendar.
 */
enum{calendar = 0};
/**
 * The value of the enumerated element distance.
 */
enum{distance = 1};
/**
 * The value of the enumerated element engineHours.
 */
enum{engineHours = 2};
/**
 * The value of the enumerated element engineRequest.
 */
enum{engineRequest = 3};
/**
 * The value of the enumerated element other.
 */
enum{other = 4};

/**
 * The value of the enumerated element normal.
 */
enum{normal = 0};
/**
 * The value of the enumerated element standby.
 */
enum{standby = 1};
/**
 * The value of the enumerated element sleep_poll.
 */
enum{sleep_poll = 2};
/**
 * The value of the enumerated element off.
 */
enum{off = 3};


/**
 * The value of the integer element passengerVehicle.
 */
enum{passengerVehicle = ((asnMAXSINT)0U)};
/**
 * The value of the integer element bus.
 */
enum{bus = ((asnMAXSINT)1U)};
/**
 * The value of the integer element cargo.
 */
enum{cargo = ((asnMAXSINT)2U)};
/**
 * The value of the integer element motorCycle.
 */
enum{motorCycle = ((asnMAXSINT)3U)};

/**
 * The flag to mark the presence of the element serviceId in the optional field.
 */
enum{asn_serviceId = 0};
/**
 * The flag to mark the presence of the element serviceData in the optional field.
 */
enum{asn_serviceData = 1};
/**
 * The flag to mark the presence of the element seq in the optional field.
 */
enum{asn_seq = 2};
/**
 * Class representing the RequestBody type.
 */
class RequestBody : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An INTEGER value.
       * Use the following values :
       * <BR>{@link #mtp}
       * <BR>{@link #mtu}
       * <BR>{@link #mcu}
       * <BR>{@link #mpm}
       * <BR>{@link #mta}
       * <BR>{@link #mul}
       * <BR>{@link #mrs}
       * <BR>{@link #rin}
       * <BR>{@link #rdl}
       * <BR>{@link #rdu}
       * <BR>{@link #rtl}
       * <BR>{@link #rtu}
       * <BR>{@link #res}
       * <BR>{@link #rvi}
       * <BR>{@link #rcc}
       * <BR>{@link #rce}
       * <BR>{@link #rhl}
       * <BR>{@link #rsh}
       * <BR>{@link #rws}
       * <BR>{@link #rpc}
       * <BR>{@link #rpp}
       * <BR>{@link #ren}
       * <BR>{@link #rec}
       * <BR>{@link #cec}
       * <BR>{@link #cep}
       * <BR>{@link #cbc}
       * <BR>{@link #cic}
       * <BR>{@link #svt}
       * <BR>{@link #stn}
       * <BR>{@link #rvs}
       * <BR>{@link #trs}
       * <BR>{@link #jou}
       * <BR>{@link #hec}
       * <BR>{@link #dia}
       * <BR>{@link #ServiceId__ota}
       * <BR>{@link #osc}
       * <BR>{@link #vun}
       * <BR>{@link #dkb}
       * <BR>{@link #bks}
       * <BR>{@link #bdc}
       * <BR>{@link #wcr}
       * <BR>{@link #rsv}
       * <BR>{@link #mcp}
       * <BR>{@link #msr}
       * <BR>{@link #rms}
       * <BR>Optional field: use {@link #asn_serviceId} to set the presence in the optional field.
       */
      asnMAXSINT serviceId;
      /**
       * <BR> Determines the service that is being executed (defined in service specific
       *  ASN.1 file)
       * <br>A SEQUENCE value.
       * See {@link ServiceData} for more informations.
       * <BR>Optional field: use {@link #asn_serviceData} to set the presence in the optional field.
       */
      ServiceData * serviceData;
      /**
       * <BR> Service specific data (defined in service specific ASN.1 file)
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_seq} to set the presence in the optional field.
       */
      asnMAXSINT seq;

      /**
       * Default constructor.
       */
      RequestBody();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const RequestBody&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      RequestBody(const RequestBody& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      RequestBody(const RequestBody& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : RequestBody
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~RequestBody();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[0]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asncserviceParameterss : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString key;
      /**
       * <BR> different type of values, support int, string, boolean and timestamp
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_intVal} to set the presence in the optional field.
       */
      asnMAXSINT intVal;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__stringVal} to set the presence in the optional field.
       */
      asnOctetString stringVal;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__boolVal} to set the presence in the optional field.
       */
      asnBOOL boolVal;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_ServiceParameter__timestampVal} to set the presence in the optional field.
       */
      TimeStamp * timestampVal;
      /**
       * <br>An OCTET STRING value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__dataVal} to set the presence in the optional field.
       */
      asnOctetString dataVal;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asncserviceParameterss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncserviceParameterss(const asncserviceParameterss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncserviceParameterss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncserviceParameterss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncserviceParameterss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncserviceParameterss(const asncserviceParameterss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asncattributess : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString key;
      /**
       * <BR> different type of values, support int, string, boolean and timestamp
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_intVal} to set the presence in the optional field.
       */
      asnMAXSINT intVal;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__stringVal} to set the presence in the optional field.
       */
      asnOctetString stringVal;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__boolVal} to set the presence in the optional field.
       */
      asnBOOL boolVal;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_ServiceParameter__timestampVal} to set the presence in the optional field.
       */
      TimeStamp * timestampVal;
      /**
       * <br>An OCTET STRING value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__dataVal} to set the presence in the optional field.
       */
      asnOctetString dataVal;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asncattributess();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncattributess(const asncattributess& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncattributess();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncattributess
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncattributess&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncattributess(const asncattributess& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SET OF type
 */
class asncpoiss : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An UTF8String value.
       */
      asnOctetString name;
      /**
       * <br>A SEQUENCE value.
       * See {@link Position} for more informations.
       * <BR>Optional field: use {@link #asn_position} to set the presence in the optional field.
       */
      Position * position;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_type} to set the presence in the optional field.
       */
      asnOctetString type;
      /**
       * <br>A SEQUENCE value.
       * See {@link ContactInfo} for more informations.
       * <BR>Optional field: use {@link #asn_contactInfo} to set the presence in the optional field.
       */
      ContactInfo * contactInfo;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_url} to set the presence in the optional field.
       */
      asnOctetString url;
      /**
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncattributess}.
       * <BR>Optional field: use {@link #asn_attributes} to set the presence in the optional field.
       */
      asnList attributes; //elements are of class asncattributess

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asncpoiss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncpoiss(const asncpoiss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncpoiss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncpoiss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncpoiss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncpoiss(const asncpoiss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asncConfigurationItem__parameterss : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString key;
      /**
       * <BR> different type of values, support int, string, boolean and timestamp
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_intVal} to set the presence in the optional field.
       */
      asnMAXSINT intVal;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__stringVal} to set the presence in the optional field.
       */
      asnOctetString stringVal;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__boolVal} to set the presence in the optional field.
       */
      asnBOOL boolVal;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_ServiceParameter__timestampVal} to set the presence in the optional field.
       */
      TimeStamp * timestampVal;
      /**
       * <br>An OCTET STRING value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__dataVal} to set the presence in the optional field.
       */
      asnOctetString dataVal;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asncConfigurationItem__parameterss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncConfigurationItem__parameterss(const asncConfigurationItem__parameterss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncConfigurationItem__parameterss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncConfigurationItem__parameterss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncConfigurationItem__parameterss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncConfigurationItem__parameterss(const asncConfigurationItem__parameterss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SET OF type
 */
class asncitemss : public asnListElement
{
   public :
      /**
       * <br>A PrintableString value.
       */
      asnOctetString name;
      /**
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncConfigurationItem__parameterss}.
       */
      asnList parameters; //elements are of class asncConfigurationItem__parameterss


      /**
       * Default constructor.
       */
      asncitemss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncitemss(const asncitemss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncitemss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncitemss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncitemss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncitemss(const asncitemss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SET OF type
 */
class asncAdditionalVehicleStatus__signalss : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString key;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_collectTime} to set the presence in the optional field.
       */
      TimeStamp * collectTime;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_value} to set the presence in the optional field.
       */
      asnMAXSINT value;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_GenericVehicleSignal__stringVal} to set the presence in the optional field.
       */
      asnOctetString stringVal;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_GenericVehicleSignal__boolVal} to set the presence in the optional field.
       */
      asnBOOL boolVal;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_GenericVehicleSignal__timestampVal} to set the presence in the optional field.
       */
      TimeStamp * timestampVal;
      /**
       * <br>An OCTET STRING value.
       * <BR>Optional field: use {@link #asn_GenericVehicleSignal__dataVal} to set the presence in the optional field.
       */
      asnOctetString dataVal;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asncAdditionalVehicleStatus__signalss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncAdditionalVehicleStatus__signalss(const asncAdditionalVehicleStatus__signalss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncAdditionalVehicleStatus__signalss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncAdditionalVehicleStatus__signalss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncAdditionalVehicleStatus__signalss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncAdditionalVehicleStatus__signalss(const asncAdditionalVehicleStatus__signalss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asncrecentPositionss : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <BR> format: milliarcsecond <=> degree * 3600000
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_latitude} to set the presence in the optional field.
       */
      asnMAXSINT latitude;
      /**
       * <BR> 32 bits
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_longitude} to set the presence in the optional field.
       */
      asnMAXSINT longitude;
      /**
       * <BR> 32 bits
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_altitude} to set the presence in the optional field.
       */
      asnMAXSINT altitude;
      /**
       * <BR> the altitude in meter
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_posCanBeTrusted} to set the presence in the optional field.
       */
      asnBOOL posCanBeTrusted;
      /**
       * <BR> false means TEM use last position instead of GPS, default is true
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_carLocatorStatUploadEn} to set the presence in the optional field.
       */
      asnBOOL carLocatorStatUploadEn;
      /**
       * <BR> can TEM upload position, user can enable/disable through IHU, default is true
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_marsCoordinates} to set the presence in the optional field.
       */
      asnBOOL marsCoordinates;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asncrecentPositionss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncrecentPositionss(const asncrecentPositionss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncrecentPositionss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncrecentPositionss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncrecentPositionss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncrecentPositionss(const asncrecentPositionss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SET OF type
 */
class asncOEMMSD__signalss : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString key;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_collectTime} to set the presence in the optional field.
       */
      TimeStamp * collectTime;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_value} to set the presence in the optional field.
       */
      asnMAXSINT value;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_GenericVehicleSignal__stringVal} to set the presence in the optional field.
       */
      asnOctetString stringVal;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_GenericVehicleSignal__boolVal} to set the presence in the optional field.
       */
      asnBOOL boolVal;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_GenericVehicleSignal__timestampVal} to set the presence in the optional field.
       */
      TimeStamp * timestampVal;
      /**
       * <br>An OCTET STRING value.
       * <BR>Optional field: use {@link #asn_GenericVehicleSignal__dataVal} to set the presence in the optional field.
       */
      asnOctetString dataVal;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asncOEMMSD__signalss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncOEMMSD__signalss(const asncOEMMSD__signalss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncOEMMSD__signalss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncOEMMSD__signalss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncOEMMSD__signalss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncOEMMSD__signalss(const asncOEMMSD__signalss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SET OF type
 */
class asncdtcss : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString dtc;
      /**
       * <BR>ID of the trouble code. OEM specific,
       * <br>A BIT STRING value.
       * Use the following values :
       * <BR>{@link #testFailed}
       * <BR>{@link #testFailedThisOperationCycle}
       * <BR>{@link #pendingDTC}
       * <BR>{@link #confirmedDTC}
       * <BR>{@link #testNotCompletedSinceLastClear}
       * <BR>{@link #testFailedSinceLastClear}
       * <BR>{@link #testNotCompletedThisOperationCycle}
       * <BR>{@link #warningIndicatorRequested}
       */
      asnNamedBitString status;
      /**
       * <BR>status of the DTC. Follows ISO 14229
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_failureCount} to set the presence in the optional field.
       */
      asnMAXSINT failureCount;
      /**
       * <BR>Failure counter.
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_lastFail} to set the presence in the optional field.
       */
      TimeStamp * lastFail;
      /**
       * <BR>Time of last failure
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_firtFail} to set the presence in the optional field.
       */
      TimeStamp * firtFail;
      /**
       * <BR>Time of first failure
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_firstFailureOdometer} to set the presence in the optional field.
       */
      asnMAXSINT firstFailureOdometer;
      /**
       * <BR>the odometer at the first failure
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_firstFailureBatteryVoltage} to set the presence in the optional field.
       */
      asnMAXSINT firstFailureBatteryVoltage;
      /**
       * <BR>the battery voltage at the first failure
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_firstFailureVehicleSpeed} to set the presence in the optional field.
       */
      asnMAXSINT firstFailureVehicleSpeed;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asncdtcss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncdtcss(const asncdtcss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncdtcss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncdtcss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncdtcss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncdtcss(const asncdtcss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asncNotification__parameterss : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString key;
      /**
       * <BR> different type of values, support int, string, boolean and timestamp
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_intVal} to set the presence in the optional field.
       */
      asnMAXSINT intVal;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__stringVal} to set the presence in the optional field.
       */
      asnOctetString stringVal;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__boolVal} to set the presence in the optional field.
       */
      asnBOOL boolVal;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_ServiceParameter__timestampVal} to set the presence in the optional field.
       */
      TimeStamp * timestampVal;
      /**
       * <br>An OCTET STRING value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__dataVal} to set the presence in the optional field.
       */
      asnOctetString dataVal;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asncNotification__parameterss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncNotification__parameterss(const asncNotification__parameterss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncNotification__parameterss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncNotification__parameterss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncNotification__parameterss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncNotification__parameterss(const asncNotification__parameterss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asnctrackpointss : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       */
      TimeStamp * systemTime;
      /**
       * <br>A SEQUENCE value.
       * See {@link Position} for more informations.
       */
      Position * position;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT speed;
      /**
       * <BR> kmph
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_TrackPoint__direction} to set the presence in the optional field.
       */
      asnMAXSINT direction;
      /**
       * <BR> 0 means North, clockwise    
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_isSVT} to set the presence in the optional field.
       */
      asnBOOL isSVT;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_TrackPoint__odometer} to set the presence in the optional field.
       */
      asnMAXSINT odometer;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_travelDistanceSinceLastWaypoint} to set the presence in the optional field.
       */
      asnMAXSINT travelDistanceSinceLastWaypoint;
      /**
       * <BR>Consumed fuel since trip start/last waypoint . 
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_fuelConsumptionSinceLastWaypoint} to set the presence in the optional field.
       */
      asnMAXSINT fuelConsumptionSinceLastWaypoint;
      /**
       * <BR>Electrical consumption since last sample.
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_electricConsumptionSinceLastSample} to set the presence in the optional field.
       */
      asnMAXSINT electricConsumptionSinceLastSample;
      /**
       * <BR>Electrical regeneration since last sample. 
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_electricRegenerationSinceLastSample} to set the presence in the optional field.
       */
      asnMAXSINT electricRegenerationSinceLastSample;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asnctrackpointss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asnctrackpointss(const asnctrackpointss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asnctrackpointss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asnctrackpointss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asnctrackpointss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asnctrackpointss(const asnctrackpointss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asncwaypointss : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <BR> format: milliarcsecond <=> degree * 3600000
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_latitude} to set the presence in the optional field.
       */
      asnMAXSINT latitude;
      /**
       * <BR> 32 bits
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_longitude} to set the presence in the optional field.
       */
      asnMAXSINT longitude;
      /**
       * <BR> 32 bits
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_altitude} to set the presence in the optional field.
       */
      asnMAXSINT altitude;
      /**
       * <BR> the altitude in meter
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_posCanBeTrusted} to set the presence in the optional field.
       */
      asnBOOL posCanBeTrusted;
      /**
       * <BR> false means TEM use last position instead of GPS, default is true
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_carLocatorStatUploadEn} to set the presence in the optional field.
       */
      asnBOOL carLocatorStatUploadEn;
      /**
       * <BR> can TEM upload position, user can enable/disable through IHU, default is true
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_marsCoordinates} to set the presence in the optional field.
       */
      asnBOOL marsCoordinates;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asncwaypointss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncwaypointss(const asncwaypointss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncwaypointss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncwaypointss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncwaypointss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncwaypointss(const asncwaypointss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asnctripFragmentss : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       */
      TimeStamp * startTime;
      /**
       * <br>A SEQUENCE value.
       * See {@link Position} for more informations.
       * <BR>Optional field: use {@link #asn_startPosition} to set the presence in the optional field.
       */
      Position * startPosition;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_TripFragment__startOdometer} to set the presence in the optional field.
       */
      asnMAXSINT startOdometer;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_startFuelLevel} to set the presence in the optional field.
       */
      asnMAXSINT startFuelLevel;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_startElectricConsumption} to set the presence in the optional field.
       */
      asnMAXSINT startElectricConsumption;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_startElectricRegeneration} to set the presence in the optional field.
       */
      asnMAXSINT startElectricRegeneration;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_TripFragment__endTime} to set the presence in the optional field.
       */
      TimeStamp * endTime;
      /**
       * <br>A SEQUENCE value.
       * See {@link Position} for more informations.
       * <BR>Optional field: use {@link #asn_endPosition} to set the presence in the optional field.
       */
      Position * endPosition;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_TripFragment__endOdometer} to set the presence in the optional field.
       */
      asnMAXSINT endOdometer;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_endFuelLevel} to set the presence in the optional field.
       */
      asnMAXSINT endFuelLevel;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_endElectricConsumption} to set the presence in the optional field.
       */
      asnMAXSINT endElectricConsumption;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_endElectricRegeneration} to set the presence in the optional field.
       */
      asnMAXSINT endElectricRegeneration;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[2];

      /**
       * Default constructor.
       */
      asnctripFragmentss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asnctripFragmentss(const asnctripFragmentss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asnctripFragmentss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asnctripFragmentss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asnctripFragmentss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asnctripFragmentss(const asnctripFragmentss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asnctrackPointss : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       */
      TimeStamp * systemTime;
      /**
       * <br>A SEQUENCE value.
       * See {@link Position} for more informations.
       */
      Position * position;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT speed;
      /**
       * <BR> kmph
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_TrackPoint__direction} to set the presence in the optional field.
       */
      asnMAXSINT direction;
      /**
       * <BR> 0 means North, clockwise    
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_isSVT} to set the presence in the optional field.
       */
      asnBOOL isSVT;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_TrackPoint__odometer} to set the presence in the optional field.
       */
      asnMAXSINT odometer;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_travelDistanceSinceLastWaypoint} to set the presence in the optional field.
       */
      asnMAXSINT travelDistanceSinceLastWaypoint;
      /**
       * <BR>Consumed fuel since trip start/last waypoint . 
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_fuelConsumptionSinceLastWaypoint} to set the presence in the optional field.
       */
      asnMAXSINT fuelConsumptionSinceLastWaypoint;
      /**
       * <BR>Electrical consumption since last sample.
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_electricConsumptionSinceLastSample} to set the presence in the optional field.
       */
      asnMAXSINT electricConsumptionSinceLastSample;
      /**
       * <BR>Electrical regeneration since last sample. 
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_electricRegenerationSinceLastSample} to set the presence in the optional field.
       */
      asnMAXSINT electricRegenerationSinceLastSample;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asnctrackPointss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asnctrackPointss(const asnctrackPointss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asnctrackPointss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asnctrackPointss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asnctrackPointss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asnctrackPointss(const asnctrackPointss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SET OF type
 */
class asncdidDatas : public asnListElement
{
   public :
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT id;
      /**
       * <BR> ID for the specific DID
       * <br>An OCTET STRING value.
       */
      asnOctetString data;


      /**
       * Default constructor.
       */
      asncdidDatas();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncdidDatas(const asncdidDatas& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncdidDatas();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncdidDatas
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncdidDatas&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncdidDatas(const asncdidDatas& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SET OF type
 */
class asncdtcDatas : public asnListElement
{
   public :
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT id;
      /**
       * <BR> ID for the specific DTC
       * <br>An OCTET STRING value.
       */
      asnOctetString data;


      /**
       * Default constructor.
       */
      asncdtcDatas();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncdtcDatas(const asncdtcDatas& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncdtcDatas();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncdtcDatas
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncdtcDatas&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncdtcDatas(const asncdtcDatas& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SET OF type
 */
class asncdatas : public asnListElement
{
   public :
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT ecu;
      /**
       * <BR> The ECU ID 
       * <br>A PrintableString value.
       */
      asnOctetString diagnosticNumber;
      /**
       * <BR> Diagnostic Part number  
       * <br>Elements of this SET OF type.
       * <BR>Elements are of class {@link #asncdidDatas}.
       */
      asnList didData; //elements are of class asncdidDatas
      /**
       * <br>Elements of this SET OF type.
       * <BR>Elements are of class {@link #asncdtcDatas}.
       */
      asnList dtcData; //elements are of class asncdtcDatas


      /**
       * Default constructor.
       */
      asncdatas();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncdatas(const asncdatas& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncdatas();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncdatas
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncdatas&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncdatas(const asncdatas& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SET OF type
 */
class asncconditionss : public asnListElement
{
   public :
      /**
       * <br>A PrintableString value.
       */
      asnOctetString condition;


      /**
       * Default constructor.
       */
      asncconditionss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncconditionss(const asncconditionss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncconditionss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncconditionss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncconditionss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncconditionss(const asncconditionss& object);
#endif // asnCodCopytor
};


/**
 * The flag to mark the presence of the element eventId in the optional field.
 */
enum{asn_eventId = 0};
/**
 * The flag to mark the presence of the element creatorId in the optional field.
 */
enum{asn_creatorId = 1};
/**
 * The flag to mark the presence of the element messageTTL in the optional field.
 */
enum{asn_messageTTL = 2};
/**
 * The flag to mark the presence of the element requestType in the optional field.
 */
enum{asn_requestType = 3};
/**
 * The flag to mark the presence of the element ackRequired in the optional field.
 */
enum{asn_ackRequired = 4};
/**
 * Class representing the RequestHeader type.
 * <BR> A request body specific for the type of service being executed
 */
class RequestHeader : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT requestid;
      /**
       * <BR> An identifier of this request, must be unique to the sending party. If this
       *  request is an ACK, this is the identifier of the request being acknowledged
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       */
      TimeStamp * timeStamp;
      /**
       * <BR> The time when this message was created
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_eventId} to set the presence in the optional field.
       */
      TimeStamp * eventId;
      /**
       * <BR> Identifier of the service event that is being executed, the value is the time
       *  when the event is created
       * <br>An ENUMERATED value.
       * Use the following enumeration values :
       * <BR>{@link #ecu}
       * <BR>{@link #cvc}
       * <BR>Optional field: use {@link #asn_creatorId} to set the presence in the optional field.
       */
      asnMAXSINT creatorId;
      /**
       * <BR> Identifies if this event was created by a TEM unit or CVC back-end
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_messageTTL} to set the presence in the optional field.
       */
      asnMAXSINT messageTTL;
      /**
       * <BR> Message time-to-live after which this request message should be discarded, no
       *  present means no limit
       * <br>An ENUMERATED value.
       * Use the following enumeration values :
       * <BR>{@link #serviceRequest}
       * <BR>{@link #ack}
       * <BR>Optional field: use {@link #asn_requestType} to set the presence in the optional field.
       */
      asnMAXSINT requestType;
      /**
       * <BR> Identifies the type of message, no presents means serviceRequest
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_ackRequired} to set the presence in the optional field.
       */
      asnBOOL ackRequired;

      /**
       * Default constructor.
       */
      RequestHeader();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const RequestHeader&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      RequestHeader(const RequestHeader& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      RequestHeader(const RequestHeader& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : RequestHeader
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~RequestHeader();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[55]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element milliseconds in the optional field.
 */
enum{asn_milliseconds = 0};
/**
 * Class representing the TimeStamp type.
 */
class TimeStamp : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT seconds;
      /**
       * <BR> UTC Timestamp
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_milliseconds} to set the presence in the optional field.
       */
      asnMAXSINT milliseconds;

      /**
       * Default constructor.
       */
      TimeStamp();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const TimeStamp&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      TimeStamp(const TimeStamp& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      TimeStamp(const TimeStamp& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : TimeStamp
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~TimeStamp();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[3]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element body in the optional field.
 */
enum{asn_body = 0};
/**
 * Class representing the VDServiceRequest type.
 */
class VDServiceRequest : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A SEQUENCE value.
       * See {@link RequestHeader} for more informations.
       */
      RequestHeader * header;
      /**
       * <BR> A request header, common for all requests
       * <br>A SEQUENCE value.
       * See {@link RequestBody} for more informations.
       * <BR>Optional field: use {@link #asn_body} to set the presence in the optional field.
       */
      RequestBody * body;

      /**
       * Default constructor.
       */
      VDServiceRequest();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const VDServiceRequest&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      VDServiceRequest(const VDServiceRequest& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      VDServiceRequest(const VDServiceRequest& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : VDServiceRequest
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~VDServiceRequest();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[56]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * Class representing the DIDData type.
 */
class DIDData : public asntype
{
   public:
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT id;
      /**
       * <BR> ID for the specific DID
       * <br>An OCTET STRING value.
       */
      asnOctetString data;

      /**
       * Default constructor.
       */
      DIDData();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const DIDData&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      DIDData(const DIDData& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      DIDData(const DIDData& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : DIDData
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~DIDData();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[50]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * Class representing the DTCData type.
 * <BR> DID READOUT
 */
class DTCData : public asntype
{
   public:
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT id;
      /**
       * <BR> ID for the specific DTC
       * <br>An OCTET STRING value.
       */
      asnOctetString data;

      /**
       * Default constructor.
       */
      DTCData();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const DTCData&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      DTCData(const DTCData& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      DTCData(const DTCData& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : DTCData
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~DTCData();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[51]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * Class representing the ECUData type.
 */
class ECUData : public asntype
{
   public:
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT ecu;
      /**
       * <BR> The ECU ID 
       * <br>A PrintableString value.
       */
      asnOctetString diagnosticNumber;
      /**
       * <BR> Diagnostic Part number  
       * <br>Elements of this SET OF type.
       * <BR>Elements are of class {@link #asncdidDatas}.
       */
      asnList didData; //elements are of class asncdidDatas
      /**
       * <br>Elements of this SET OF type.
       * <BR>Elements are of class {@link #asncdtcDatas}.
       */
      asnList dtcData; //elements are of class asncdtcDatas

      /**
       * Default constructor.
       */
      ECUData();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const ECUData&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      ECUData(const ECUData& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      ECUData(const ECUData& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : ECUData
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~ECUData();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[49]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * Class representing all CHOICE alternative classes
 * for EcuData type.
 * Use the following subclasses to set the alternative value :
 * <BR>&nbsp;{@link asncnoDiagData}
 * <BR>&nbsp;{@link asncEcuData__data}
 */
class EcuData__C : public asnChoice
{
   public:
      /**
       * Constructor.
       */
      EcuData__C(asnMAXUINT asnpAlt);
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      virtual ~EcuData__C();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : EcuData__C
       *    Operator ==
       */
      virtual asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};

/**
 * The identification number for the alternative noDiagData.
 * @see EcuData__C
 */
enum{asn_noDiagData = 0};

/**
 * Class representing the "noDiagData" alternative value.
 * <br>The alternative field takes the value asn_noDiagData.
 * @see EcuData__C
 * @see asn_noDiagData
 */
class asncnoDiagData: public EcuData__C

{
   public:
      /**
       * <br>A NULL value.
       * <br>UNUSED
       */
      asnbyte noDiagData;

      /**
       * Default constructor.
       */
      asncnoDiagData();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncnoDiagData(const asncnoDiagData& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncnoDiagData();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : EcuData__C
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncnoDiagData&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncnoDiagData(const asncnoDiagData& object);
#endif // asnCodCopytor
};

/**
 * The identification number for the alternative EcuData__data.
 * <BR> No diagnostic data included in the MDP due to Charging, end of driving cycle or
 *  tester with higher priority is present. 
 * @see EcuData__C
 */
enum{asn_EcuData__data = 1};

/**
 * Class representing the "data" alternative value.
 * <br>The alternative field takes the value asn_EcuData__data.
 * @see EcuData__C
 * @see asn_EcuData__data
 */
class asncEcuData__data: public EcuData__C

{
   public:
      /**
       * <br>Elements of this SET OF type.
       * <BR>Elements are of class {@link #asncdatas}.
       */
      asnList data; //elements are of class asncdatas

      /**
       * Default constructor.
       */
      asncEcuData__data();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncEcuData__data(const asncEcuData__data& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncEcuData__data();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : EcuData__C
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncEcuData__data&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncEcuData__data(const asncEcuData__data& object);
#endif // asnCodCopytor
};

/**
 * Class representing the EcuData type.
 */
class EcuData : public asntype
{
   public:
      /**
       * <br>The value of this CHOICE type is an instance of 
       * a subclass of {@link #EcuData__C}.
       * Use the following subclasses to set the alternative value :
       * <BR>&nbsp;{@link asncnoDiagData}
       * <BR>&nbsp;{@link asncEcuData__data}
       */
      EcuData__C * value;
      /**
       * Default constructor.
       */
      EcuData();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const EcuData&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      EcuData(const EcuData& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      EcuData(const EcuData& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : EcuData
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~EcuData();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[48]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * Class representing the NEVCoordinatesLongLat type.
 * <BR>Coordinates in degrees/360*2^32. Positive values are North and East 
 */
class NEVCoordinatesLongLat : public asntype
{
   public:
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT longitude;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT latitude;

      /**
       * Default constructor.
       */
      NEVCoordinatesLongLat();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const NEVCoordinatesLongLat&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      NEVCoordinatesLongLat(const NEVCoordinatesLongLat& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      NEVCoordinatesLongLat(const NEVCoordinatesLongLat& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : NEVCoordinatesLongLat
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~NEVCoordinatesLongLat();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[46]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * Class representing the NEVDRPositionData type.
 */
class NEVDRPositionData : public asntype
{
   public:
      /**
       * <br>A SEQUENCE value.
       * See {@link NEVCoordinatesLongLat} for more informations.
       */
      NEVCoordinatesLongLat * longLat;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT heading;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT speedKmph;
      /**
       * <BR>255=unknown 
       * <br>An INTEGER value.
       */
      asnMAXSINT hdopX10;
      /**
       * <BR>HDOP multiplied by 10. 255=unknown 
       * <br>An INTEGER value.
       */
      asnMAXSINT numSat;
      /**
       * <BR>Number of satellites used in fix. 127=unknown 
       * <br>A SEQUENCE value.
       * See {@link NEVDateTime} for more informations.
       */
      NEVDateTime * fixTime;
      /**
       * <BR>GPS time received with the fix 
       * <br>An ENUMERATED value.
       * Use the following enumeration values :
       * <BR>{@link #notAvailable}
       * <BR>{@link #noFix}
       * <BR>{@link #fix2D}
       * <BR>{@link #fix3D}
       * <BR>{@link #startupMode}
       */
      asnMAXSINT fixType;
      /**
       * <BR>Specifies the current GNSS fix, not regarding DR 
       * <br>An ENUMERATED value.
       * Use the following enumeration values :
       * <BR>{@link #noDr}
       * <BR>{@link #drNoMapMatch}
       * <BR>{@link #drMapMatched}
       */
      asnMAXSINT drType;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT drDistance;

      /**
       * Default constructor.
       */
      NEVDRPositionData();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const NEVDRPositionData&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      NEVDRPositionData(const NEVDRPositionData& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      NEVDRPositionData(const NEVDRPositionData& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : NEVDRPositionData
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~NEVDRPositionData();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[45]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * Class representing all CHOICE alternative classes
 * for NEVDRVehiclePosition type.
 * Use the following subclasses to set the alternative value :
 * <BR>&nbsp;{@link asncnoValidData}
 * <BR>&nbsp;{@link asncdrPosition}
 */
class NEVDRVehiclePosition__C : public asnChoice
{
   public:
      /**
       * Constructor.
       */
      NEVDRVehiclePosition__C(asnMAXUINT asnpAlt);
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      virtual ~NEVDRVehiclePosition__C();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : NEVDRVehiclePosition__C
       *    Operator ==
       */
      virtual asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};

/**
 * The identification number for the alternative noValidData.
 * @see NEVDRVehiclePosition__C
 */
enum{asn_noValidData = 0};

/**
 * Class representing the "noValidData" alternative value.
 * <br>The alternative field takes the value asn_noValidData.
 * @see NEVDRVehiclePosition__C
 * @see asn_noValidData
 */
class asncnoValidData: public NEVDRVehiclePosition__C

{
   public:
      /**
       * <br>A NULL value.
       * <br>UNUSED
       */
      asnbyte noValidData;

      /**
       * Default constructor.
       */
      asncnoValidData();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncnoValidData(const asncnoValidData& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncnoValidData();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : NEVDRVehiclePosition__C
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncnoValidData&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncnoValidData(const asncnoValidData& object);
#endif // asnCodCopytor
};

/**
 * The identification number for the alternative drPosition.
 * <BR>Used if the server can not provide a position of sufficient quality 
 * @see NEVDRVehiclePosition__C
 */
enum{asn_drPosition = 1};

/**
 * Class representing the "drPosition" alternative value.
 * <br>The alternative field takes the value asn_drPosition.
 * @see NEVDRVehiclePosition__C
 * @see asn_drPosition
 */
class asncdrPosition: public NEVDRVehiclePosition__C

{
   public:
      /**
       * <br>A SEQUENCE value.
       * See {@link NEVCoordinatesLongLat} for more informations.
       */
      NEVCoordinatesLongLat * longLat;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT heading;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT speedKmph;
      /**
       * <BR>255=unknown 
       * <br>An INTEGER value.
       */
      asnMAXSINT hdopX10;
      /**
       * <BR>HDOP multiplied by 10. 255=unknown 
       * <br>An INTEGER value.
       */
      asnMAXSINT numSat;
      /**
       * <BR>Number of satellites used in fix. 127=unknown 
       * <br>A SEQUENCE value.
       * See {@link NEVDateTime} for more informations.
       */
      NEVDateTime * fixTime;
      /**
       * <BR>GPS time received with the fix 
       * <br>An ENUMERATED value.
       * Use the following enumeration values :
       * <BR>{@link #notAvailable}
       * <BR>{@link #noFix}
       * <BR>{@link #fix2D}
       * <BR>{@link #fix3D}
       * <BR>{@link #startupMode}
       */
      asnMAXSINT fixType;
      /**
       * <BR>Specifies the current GNSS fix, not regarding DR 
       * <br>An ENUMERATED value.
       * Use the following enumeration values :
       * <BR>{@link #noDr}
       * <BR>{@link #drNoMapMatch}
       * <BR>{@link #drMapMatched}
       */
      asnMAXSINT drType;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT drDistance;


      /**
       * Default constructor.
       */
      asncdrPosition();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncdrPosition(const asncdrPosition& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncdrPosition();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : NEVDRVehiclePosition__C
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncdrPosition&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncdrPosition(const asncdrPosition& object);
#endif // asnCodCopytor
};

/**
 * Class representing the NEVDRVehiclePosition type.
 */
class NEVDRVehiclePosition : public asntype
{
   public:
      /**
       * <br>The value of this CHOICE type is an instance of 
       * a subclass of {@link #NEVDRVehiclePosition__C}.
       * Use the following subclasses to set the alternative value :
       * <BR>&nbsp;{@link asncnoValidData}
       * <BR>&nbsp;{@link asncdrPosition}
       */
      NEVDRVehiclePosition__C * value;
      /**
       * Default constructor.
       */
      NEVDRVehiclePosition();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const NEVDRVehiclePosition&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      NEVDRVehiclePosition(const NEVDRVehiclePosition& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      NEVDRVehiclePosition(const NEVDRVehiclePosition& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : NEVDRVehiclePosition
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~NEVDRVehiclePosition();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[44]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * Class representing the NEVDateTime type.
 * <BR> ECU data
 */
class NEVDateTime : public asntype
{
   public:
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT year;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT month;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT day;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT hour;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT minute;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT second;

      /**
       * Default constructor.
       */
      NEVDateTime();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const NEVDateTime&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      NEVDateTime(const NEVDateTime& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      NEVDateTime(const NEVDateTime& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : NEVDateTime
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~NEVDateTime();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[47]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * Class representing the NEVServiceData type.
 */
class NEVServiceData : public asntype
{
   public:
      /**
       * <br>A PrintableString value.
       */
      asnOctetString vehicleVin;
      /**
       * <br>A BOOLEAN value.
       */
      asnBOOL testVehicle;
      /**
       * <BR> TRUE=test vehicle, FALSE=customer vehicle
       * <br>An ENUMERATED value.
       * Use the following enumeration values :
       * <BR>{@link #periodicTrg}
       * <BR>{@link #umChangeTrg}
       * <BR>{@link #chargeStartTrg}
       * <BR>{@link #chargeStopTrg}
       * <BR>{@link #disableRmsTrg}
       */
      asnMAXSINT rvdcTriggerCondition;
      /**
       * <BR> periodicTrg (1) UM Driving (periodic MDP), umChangeTrg (2) UM Driving -> UM !=
       *  Driving (1 MDP), chargeStartTrg (3) Charging start (1 MDP), chargeStopTrg (4)
       *  Charging Stop (1 MDP), disableRmsTrg (5) Rms disabled
       * <br>An INTEGER value.
       */
      asnMAXUINT mdpID;
      /**
       * <BR>Increase by one by each measurement cycle. Starting from 0. 
       * <br>A PrintableString value.
       */
      asnOctetString maID;
      /**
       * <BR>Partnumber for MA file
       * <br>The value of this CHOICE type is an instance of
       * a subclass of {@link #NEVDRVehiclePosition__C}.
       * Use the following subclasses to set the alternative value :
       * <BR>&nbsp;{@link asncnoValidData}
       * <BR>&nbsp;{@link asncdrPosition}
       */
      NEVDRVehiclePosition__C * position;
      /**
       * <BR>GPS Data
       * <br>The value of this CHOICE type is an instance of
       * a subclass of {@link #EcuData__C}.
       * Use the following subclasses to set the alternative value :
       * <BR>&nbsp;{@link asncnoDiagData}
       * <BR>&nbsp;{@link asncEcuData__data}
       */
      EcuData__C * ecuData;

      /**
       * Default constructor.
       */
      NEVServiceData();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const NEVServiceData&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      NEVServiceData(const NEVServiceData& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      NEVServiceData(const NEVServiceData& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : NEVServiceData
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~NEVServiceData();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[43]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * Class representing the Configuration type.
 * <BR> true means GCJ-02 coordinaes, false means WGS-84, defult is false
 */
class Configuration : public asntype
{
   public:
      /**
       * <br>A PrintableString value.
       */
      asnOctetString version;
      /**
       * <br>Elements of this SET OF type.
       * <BR>Elements are of class {@link #asncitemss}.
       */
      asnList items; //elements are of class asncitemss

      /**
       * Default constructor.
       */
      Configuration();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const Configuration&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      Configuration(const Configuration& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      Configuration(const Configuration& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : Configuration
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~Configuration();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[13]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * Class representing the ConfigurationItem type.
 * <BR> configuration is a list of key:value pairs
 */
class ConfigurationItem : public asntype
{
   public:
      /**
       * <br>A PrintableString value.
       */
      asnOctetString name;
      /**
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncConfigurationItem__parameterss}.
       */
      asnList parameters; //elements are of class asncConfigurationItem__parameterss

      /**
       * Default constructor.
       */
      ConfigurationItem();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const ConfigurationItem&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      ConfigurationItem(const ConfigurationItem& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      ConfigurationItem(const ConfigurationItem& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : ConfigurationItem
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~ConfigurationItem();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[14]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * The flag to mark the presence of the element email in the optional field.
 */
enum{asn_email = 0};
/**
 * The flag to mark the presence of the element address in the optional field.
 */
enum{asn_address = 1};
/**
 * The flag to mark the presence of the element phone1 in the optional field.
 */
enum{asn_phone1 = 2};
/**
 * The flag to mark the presence of the element phone2 in the optional field.
 */
enum{asn_phone2 = 3};
/**
 * Class representing the ContactInfo type.
 */
class ContactInfo : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_email} to set the presence in the optional field.
       */
      asnOctetString email;
      /**
       * <br>A SEQUENCE value.
       * See {@link PostAddress} for more informations.
       * <BR>Optional field: use {@link #asn_address} to set the presence in the optional field.
       */
      PostAddress * address;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_phone1} to set the presence in the optional field.
       */
      asnOctetString phone1;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_phone2} to set the presence in the optional field.
       */
      asnOctetString phone2;

      /**
       * Default constructor.
       */
      ContactInfo();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const ContactInfo&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      ContactInfo(const ContactInfo& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      ContactInfo(const ContactInfo& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : ContactInfo
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~ContactInfo();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[11]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element vehicleErrorCode in the optional field.
 */
enum{asn_vehicleErrorCode = 0};
/**
 * The flag to mark the presence of the element Error__message in the optional field.
 */
enum{asn_Error__message = 1};
/**
 * Class representing the Error type.
 */
class Error : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An INTEGER value.
       * Use the following values :
       * <BR>{@link #incorrectState}
       * <BR>{@link #invalidData}
       * <BR>{@link #invalidFormat}
       * <BR>{@link #powderModeNotCorrect}
       * <BR>{@link #conditionsNotCorrect}
       * <BR>{@link #executionFailure}
       * <BR>{@link #permissionDenied}
       * <BR>{@link #timeout}
       * <BR>{@link #backupBatteryUsage}
       */
      asnMAXSINT code;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_vehicleErrorCode} to set the presence in the optional field.
       */
      asnMAXSINT vehicleErrorCode;
      /**
       * <BR> the error code from vehicle/TEM, OEM specific
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_Error__message} to set the presence in the optional field.
       */
      asnOctetString message;

      /**
       * Default constructor.
       */
      Error();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const Error&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      Error(const Error& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      Error(const Error& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : Error
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~Error();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[6]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element triggerTimes in the optional field.
 */
enum{asn_triggerTimes = 0};
/**
 * The flag to mark the presence of the element notifyInterval in the optional field.
 */
enum{asn_notifyInterval = 1};
/**
 * Class representing the EventAction type.
 * <BR> format: <vehicle_status> <operator> <target>
 */
class EventAction : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_triggerTimes} to set the presence in the optional field.
       */
      asnMAXSINT triggerTimes;
      /**
       * <BR> Trigger notification times, 0 means always trigger
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_notifyInterval} to set the presence in the optional field.
       */
      asnMAXSINT notifyInterval;

      /**
       * Default constructor.
       */
      EventAction();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const EventAction&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      EventAction(const EventAction& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      EventAction(const EventAction& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : EventAction
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~EventAction();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[54]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element startTime in the optional field.
 */
enum{asn_startTime = 0};
/**
 * The flag to mark the presence of the element EventRule__endTime in the optional field.
 */
enum{asn_EventRule__endTime = 1};
/**
 * The flag to mark the presence of the element conditions in the optional field.
 */
enum{asn_conditions = 2};
/**
 * The flag to mark the presence of the element EventRule__interval in the optional field.
 */
enum{asn_EventRule__interval = 3};
/**
 * The flag to mark the presence of the element action in the optional field.
 */
enum{asn_action = 4};
/**
 * Class representing the EventRule type.
 */
class EventRule : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT ruleId;
      /**
       * <BR> Rule identity
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_startTime} to set the presence in the optional field.
       */
      TimeStamp * startTime;
      /**
       * <BR> Rule should be effective since this time in TEM
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_EventRule__endTime} to set the presence in the optional field.
       */
      TimeStamp * endTime;
      /**
       * <BR> Rule should not be effective after this time in TEM
       * <br>Elements of this SET OF type.
       * <BR>Elements are of class {@link #asncconditionss}.
       * <BR>Optional field: use {@link #asn_conditions} to set the presence in the optional field.
       */
      asnList conditions; //elements are of class asncconditionss
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_EventRule__interval} to set the presence in the optional field.
       */
      asnMAXSINT interval;
      /**
       * <BR> Unit is second
       * <br>A SEQUENCE value.
       * See {@link EventAction} for more informations.
       * <BR>Optional field: use {@link #asn_action} to set the presence in the optional field.
       */
      EventAction * action;

      /**
       * Default constructor.
       */
      EventRule();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const EventRule&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      EventRule(const EventRule& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      EventRule(const EventRule& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : EventRule
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~EventRule();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[52]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * Class representing all CHOICE alternative classes
 * for GeneralMessage type.
 * Use the following subclasses to set the alternative value :
 * <BR>&nbsp;{@link asncGeneralMessage__message}
 * <BR>&nbsp;{@link asncocetMessage}
 */
class GeneralMessage__C : public asnChoice
{
   public:
      /**
       * Constructor.
       */
      GeneralMessage__C(asnMAXUINT asnpAlt);
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      virtual ~GeneralMessage__C();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : GeneralMessage__C
       *    Operator ==
       */
      virtual asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};

/**
 * The identification number for the alternative GeneralMessage__message.
 * @see GeneralMessage__C
 */
enum{asn_GeneralMessage__message = 0};

/**
 * Class representing the "message" alternative value.
 * <br>The alternative field takes the value asn_GeneralMessage__message.
 * @see GeneralMessage__C
 * @see asn_GeneralMessage__message
 */
class asncGeneralMessage__message: public GeneralMessage__C

{
   public:
      /**
       * <br>An UTF8String value.
       */
      asnOctetString message;

      /**
       * Default constructor.
       */
      asncGeneralMessage__message();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncGeneralMessage__message(const asncGeneralMessage__message& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncGeneralMessage__message();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : GeneralMessage__C
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncGeneralMessage__message&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncGeneralMessage__message(const asncGeneralMessage__message& object);
#endif // asnCodCopytor
};

/**
 * The identification number for the alternative ocetMessage.
 * @see GeneralMessage__C
 */
enum{asn_ocetMessage = 1};

/**
 * Class representing the "ocetMessage" alternative value.
 * <br>The alternative field takes the value asn_ocetMessage.
 * @see GeneralMessage__C
 * @see asn_ocetMessage
 */
class asncocetMessage: public GeneralMessage__C

{
   public:
      /**
       * <br>An OCTET STRING value.
       */
      asnOctetString ocetMessage;

      /**
       * Default constructor.
       */
      asncocetMessage();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncocetMessage(const asncocetMessage& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncocetMessage();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : GeneralMessage__C
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncocetMessage&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncocetMessage(const asncocetMessage& object);
#endif // asnCodCopytor
};

/**
 * Class representing the GeneralMessage type.
 */
class GeneralMessage : public asntype
{
   public:
      /**
       * <br>The value of this CHOICE type is an instance of 
       * a subclass of {@link #GeneralMessage__C}.
       * Use the following subclasses to set the alternative value :
       * <BR>&nbsp;{@link asncGeneralMessage__message}
       * <BR>&nbsp;{@link asncocetMessage}
       */
      GeneralMessage__C * value;
      /**
       * Default constructor.
       */
      GeneralMessage();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const GeneralMessage&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      GeneralMessage(const GeneralMessage& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      GeneralMessage(const GeneralMessage& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : GeneralMessage
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~GeneralMessage();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[8]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * The flag to mark the presence of the element parameters in the optional field.
 */
enum{asn_parameters = 0};
/**
 * Class representing the Notification type.
 */
class Notification : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An INTEGER value.
       * Use the following values :
       * <BR>{@link #door_unlock}
       * <BR>{@link #event_trigger}
       */
      asnMAXSINT reason;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       */
      TimeStamp * time;
      /**
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncNotification__parameterss}.
       * <BR>Optional field: use {@link #asn_parameters} to set the presence in the optional field.
       */
      asnList parameters; //elements are of class asncNotification__parameterss

      /**
       * Default constructor.
       */
      Notification();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const Notification&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      Notification(const Notification& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      Notification(const Notification& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : Notification
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~Notification();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[38]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element swModel in the optional field.
 */
enum{asn_swModel = 0};
/**
 * The flag to mark the presence of the element OTA__swVersion in the optional field.
 */
enum{asn_OTA__swVersion = 1};
/**
 * The flag to mark the presence of the element verificationCode in the optional field.
 */
enum{asn_verificationCode = 2};
/**
 * Class representing the OTA type.
 */
class OTA : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_swModel} to set the presence in the optional field.
       */
      asnOctetString swModel;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_OTA__swVersion} to set the presence in the optional field.
       */
      asnOctetString swVersion;
      /**
       * <BR> 0 means no version information
       * <br>An UTF8String value.
       */
      asnOctetString downloadUrl;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_verificationCode} to set the presence in the optional field.
       */
      asnOctetString verificationCode;

      /**
       * Default constructor.
       */
      OTA();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const OTA&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      OTA(const OTA& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      OTA(const OTA& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : OTA
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~OTA();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[39]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element position in the optional field.
 */
enum{asn_position = 0};
/**
 * The flag to mark the presence of the element type in the optional field.
 */
enum{asn_type = 1};
/**
 * The flag to mark the presence of the element contactInfo in the optional field.
 */
enum{asn_contactInfo = 2};
/**
 * The flag to mark the presence of the element url in the optional field.
 */
enum{asn_url = 3};
/**
 * The flag to mark the presence of the element attributes in the optional field.
 */
enum{asn_attributes = 4};
/**
 * Class representing the PointOfInterest type.
 */
class PointOfInterest : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An UTF8String value.
       */
      asnOctetString name;
      /**
       * <br>A SEQUENCE value.
       * See {@link Position} for more informations.
       * <BR>Optional field: use {@link #asn_position} to set the presence in the optional field.
       */
      Position * position;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_type} to set the presence in the optional field.
       */
      asnOctetString type;
      /**
       * <br>A SEQUENCE value.
       * See {@link ContactInfo} for more informations.
       * <BR>Optional field: use {@link #asn_contactInfo} to set the presence in the optional field.
       */
      ContactInfo * contactInfo;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_url} to set the presence in the optional field.
       */
      asnOctetString url;
      /**
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncattributess}.
       * <BR>Optional field: use {@link #asn_attributes} to set the presence in the optional field.
       */
      asnList attributes; //elements are of class asncattributess

      /**
       * Default constructor.
       */
      PointOfInterest();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const PointOfInterest&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      PointOfInterest(const PointOfInterest& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      PointOfInterest(const PointOfInterest& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : PointOfInterest
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~PointOfInterest();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[9]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element latitude in the optional field.
 */
enum{asn_latitude = 0};
/**
 * The flag to mark the presence of the element longitude in the optional field.
 */
enum{asn_longitude = 1};
/**
 * The flag to mark the presence of the element altitude in the optional field.
 */
enum{asn_altitude = 2};
/**
 * The flag to mark the presence of the element posCanBeTrusted in the optional field.
 */
enum{asn_posCanBeTrusted = 3};
/**
 * The flag to mark the presence of the element carLocatorStatUploadEn in the optional field.
 */
enum{asn_carLocatorStatUploadEn = 4};
/**
 * The flag to mark the presence of the element marsCoordinates in the optional field.
 */
enum{asn_marsCoordinates = 5};
/**
 * Class representing the Position type.
 */
class Position : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <BR> format: milliarcsecond <=> degree * 3600000
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_latitude} to set the presence in the optional field.
       */
      asnMAXSINT latitude;
      /**
       * <BR> 32 bits
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_longitude} to set the presence in the optional field.
       */
      asnMAXSINT longitude;
      /**
       * <BR> 32 bits
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_altitude} to set the presence in the optional field.
       */
      asnMAXSINT altitude;
      /**
       * <BR> the altitude in meter
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_posCanBeTrusted} to set the presence in the optional field.
       */
      asnBOOL posCanBeTrusted;
      /**
       * <BR> false means TEM use last position instead of GPS, default is true
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_carLocatorStatUploadEn} to set the presence in the optional field.
       */
      asnBOOL carLocatorStatUploadEn;
      /**
       * <BR> can TEM upload position, user can enable/disable through IHU, default is true
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_marsCoordinates} to set the presence in the optional field.
       */
      asnBOOL marsCoordinates;

      /**
       * Default constructor.
       */
      Position();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const Position&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      Position(const Position& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      Position(const Position& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : Position
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~Position();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[10]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element street in the optional field.
 */
enum{asn_street = 0};
/**
 * The flag to mark the presence of the element houseNumber in the optional field.
 */
enum{asn_houseNumber = 1};
/**
 * The flag to mark the presence of the element city in the optional field.
 */
enum{asn_city = 2};
/**
 * The flag to mark the presence of the element region in the optional field.
 */
enum{asn_region = 3};
/**
 * The flag to mark the presence of the element postcode in the optional field.
 */
enum{asn_postcode = 4};
/**
 * The flag to mark the presence of the element country in the optional field.
 */
enum{asn_country = 5};
/**
 * Class representing the PostAddress type.
 */
class PostAddress : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_street} to set the presence in the optional field.
       */
      asnOctetString street;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_houseNumber} to set the presence in the optional field.
       */
      asnOctetString houseNumber;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_city} to set the presence in the optional field.
       */
      asnOctetString city;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_region} to set the presence in the optional field.
       */
      asnOctetString region;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_postcode} to set the presence in the optional field.
       */
      asnOctetString postcode;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_country} to set the presence in the optional field.
       */
      asnOctetString country;

      /**
       * Default constructor.
       */
      PostAddress();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const PostAddress&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      PostAddress(const PostAddress& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      PostAddress(const PostAddress& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : PostAddress
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~PostAddress();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[12]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * Class representing the RuleCondition type.
 */
class RuleCondition : public asntype
{
   public:
      /**
       * <br>A PrintableString value.
       */
      asnOctetString condition;

      /**
       * Default constructor.
       */
      RuleCondition();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const RuleCondition&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      RuleCondition(const RuleCondition& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      RuleCondition(const RuleCondition& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : RuleCondition
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~RuleCondition();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[53]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * The flag to mark the presence of the element serviceTrigger in the optional field.
 */
enum{asn_serviceTrigger = 0};
/**
 * The flag to mark the presence of the element serviceParameters in the optional field.
 */
enum{asn_serviceParameters = 1};
/**
 * The flag to mark the presence of the element serviceCommand in the optional field.
 */
enum{asn_serviceCommand = 2};
/**
 * The flag to mark the presence of the element serviceResult in the optional field.
 */
enum{asn_serviceResult = 3};
/**
 * The flag to mark the presence of the element serviceStatus in the optional field.
 */
enum{asn_serviceStatus = 4};
/**
 * The flag to mark the presence of the element ServiceData__message in the optional field.
 */
enum{asn_ServiceData__message = 5};
/**
 * The flag to mark the presence of the element pois in the optional field.
 */
enum{asn_pois = 6};
/**
 * The flag to mark the presence of the element configuration in the optional field.
 */
enum{asn_configuration = 7};
/**
 * The flag to mark the presence of the element vehicleStatus in the optional field.
 */
enum{asn_vehicleStatus = 8};
/**
 * The flag to mark the presence of the element ServiceData__ota in the optional field.
 */
enum{asn_ServiceData__ota = 9};
/**
 * The flag to mark the presence of the element trip in the optional field.
 */
enum{asn_trip = 10};
/**
 * The flag to mark the presence of the element tripFragments in the optional field.
 */
enum{asn_tripFragments = 11};
/**
 * The flag to mark the presence of the element trackPoints in the optional field.
 */
enum{asn_trackPoints = 12};
/**
 * The flag to mark the presence of the element nevServiceData in the optional field.
 */
enum{asn_nevServiceData = 13};
/**
 * The flag to mark the presence of the element eventRule in the optional field.
 */
enum{asn_eventRule = 14};
/**
 * Class representing the ServiceData type.
 */
class ServiceData : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <BR> the following are service control related parameters
       * <br>A SEQUENCE value.
       * See {@link ServiceTrigger} for more informations.
       * <BR>Optional field: use {@link #asn_serviceTrigger} to set the presence in the optional field.
       */
      ServiceTrigger * serviceTrigger;
      /**
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncserviceParameterss}.
       * <BR>Optional field: use {@link #asn_serviceParameters} to set the presence in the optional field.
       */
      asnList serviceParameters; //elements are of class asncserviceParameterss
      /**
       * <BR> generic service parameters used for extension
       * <br>An INTEGER value.
       * Use the following values :
       * <BR>{@link #startService}
       * <BR>{@link #requestData}
       * <BR>{@link #responseData}
       * <BR>{@link #executionAction}
       * <BR>{@link #terminateService}
       * <BR>Optional field: use {@link #asn_serviceCommand} to set the presence in the optional field.
       */
      asnMAXSINT serviceCommand;
      /**
       * <BR> the service operation result
       * <br>A SEQUENCE value.
       * See {@link ServiceResult} for more informations.
       * <BR>Optional field: use {@link #asn_serviceResult} to set the presence in the optional field.
       */
      ServiceResult * serviceResult;
      /**
       * <BR> the service status in system
       * <br>A SEQUENCE value.
       * See {@link ServiceStatus} for more informations.
       * <BR>Optional field: use {@link #asn_serviceStatus} to set the presence in the optional field.
       */
      ServiceStatus * serviceStatus;
      /**
       * <BR> the data pushed to device  (downlink)
       * <br>The value of this CHOICE type is an instance of
       * a subclass of {@link #GeneralMessage__C}.
       * Use the following subclasses to set the alternative value :
       * <BR>&nbsp;{@link asncGeneralMessage__message}
       * <BR>&nbsp;{@link asncocetMessage}
       * <BR>Optional field: use {@link #asn_ServiceData__message} to set the presence in the optional field.
       */
      GeneralMessage__C * message;
      /**
       * <BR> The general message used to push notificaton
       * <br>Elements of this SET OF type.
       * <BR>Elements are of class {@link #asncpoiss}.
       * <BR>Optional field: use {@link #asn_pois} to set the presence in the optional field.
       */
      asnList pois; //elements are of class asncpoiss
      /**
       * <br>A SEQUENCE value.
       * See {@link Configuration} for more informations.
       * <BR>Optional field: use {@link #asn_configuration} to set the presence in the optional field.
       */
      Configuration * configuration;
      /**
       * <BR> the device status reported to cloud (uplink)
       * <br>A SEQUENCE value.
       * See {@link VehicleStatus} for more informations.
       * <BR>Optional field: use {@link #asn_vehicleStatus} to set the presence in the optional field.
       */
      VehicleStatus * vehicleStatus;
      /**
       * <BR> defined in specific device status ASN.1 file)
       * <br>A SEQUENCE value.
       * See {@link OTA} for more informations.
       * <BR>Optional field: use {@link #asn_ServiceData__ota} to set the presence in the optional field.
       */
      OTA * ota;
      /**
       * <BR> trip information from the vehicle
       * <br>A SEQUENCE value.
       * See {@link Trip} for more informations.
       * <BR>Optional field: use {@link #asn_trip} to set the presence in the optional field.
       */
      Trip * trip;
      /**
       * <BR> trip information from the vehicle FOR non-CMA 
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asnctripFragmentss}.
       * <BR>Optional field: use {@link #asn_tripFragments} to set the presence in the optional field.
       */
      asnList tripFragments; //elements are of class asnctripFragmentss
      /**
       * <BR> track points, can be used in SVT and Journey log
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asnctrackPointss}.
       * <BR>Optional field: use {@link #asn_trackPoints} to set the presence in the optional field.
       */
      asnList trackPoints; //elements are of class asnctrackPointss
      /**
       * <BR> NEV RMS service data
       * <br>A SEQUENCE value.
       * See {@link NEVServiceData} for more informations.
       * <BR>Optional field: use {@link #asn_nevServiceData} to set the presence in the optional field.
       */
      NEVServiceData * nevServiceData;
      /**
       * <BR> Event notification, rule
       * <br>A SEQUENCE value.
       * See {@link EventRule} for more informations.
       * <BR>Optional field: use {@link #asn_eventRule} to set the presence in the optional field.
       */
      EventRule * eventRule;

      /**
       * Default constructor.
       */
      ServiceData();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const ServiceData&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      ServiceData(const ServiceData& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      ServiceData(const ServiceData& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : ServiceData
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~ServiceData();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[1]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[2];
};


/**
 * The flag to mark the presence of the element intVal in the optional field.
 */
enum{asn_intVal = 0};
/**
 * The flag to mark the presence of the element ServiceParameter__stringVal in the optional field.
 */
enum{asn_ServiceParameter__stringVal = 1};
/**
 * The flag to mark the presence of the element ServiceParameter__boolVal in the optional field.
 */
enum{asn_ServiceParameter__boolVal = 2};
/**
 * The flag to mark the presence of the element ServiceParameter__timestampVal in the optional field.
 */
enum{asn_ServiceParameter__timestampVal = 3};
/**
 * The flag to mark the presence of the element ServiceParameter__dataVal in the optional field.
 */
enum{asn_ServiceParameter__dataVal = 4};
/**
 * Class representing the ServiceParameter type.
 */
class ServiceParameter : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString key;
      /**
       * <BR> different type of values, support int, string, boolean and timestamp
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_intVal} to set the presence in the optional field.
       */
      asnMAXSINT intVal;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__stringVal} to set the presence in the optional field.
       */
      asnOctetString stringVal;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__boolVal} to set the presence in the optional field.
       */
      asnBOOL boolVal;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_ServiceParameter__timestampVal} to set the presence in the optional field.
       */
      TimeStamp * timestampVal;
      /**
       * <br>An OCTET STRING value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__dataVal} to set the presence in the optional field.
       */
      asnOctetString dataVal;

      /**
       * Default constructor.
       */
      ServiceParameter();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const ServiceParameter&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      ServiceParameter(const ServiceParameter& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      ServiceParameter(const ServiceParameter& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : ServiceParameter
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~ServiceParameter();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[4]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element error in the optional field.
 */
enum{asn_error = 0};
/**
 * Class representing the ServiceResult type.
 */
class ServiceResult : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A BOOLEAN value.
       */
      asnBOOL operationSucceeded;
      /**
       * <br>A SEQUENCE value.
       * See {@link Error} for more informations.
       * <BR>Optional field: use {@link #asn_error} to set the presence in the optional field.
       */
      Error * error;

      /**
       * Default constructor.
       */
      ServiceResult();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const ServiceResult&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      ServiceResult(const ServiceResult& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      ServiceResult(const ServiceResult& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : ServiceResult
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~ServiceResult();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[5]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * Class representing the ServiceStatus type.
 * <BR> should this be removed???
 */
class ServiceStatus : public asntype
{
   public:
      /**
       * <br>A BOOLEAN value.
       */
      asnBOOL remoteControlInhibited;

      /**
       * Default constructor.
       */
      ServiceStatus();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const ServiceStatus&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      ServiceStatus(const ServiceStatus& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      ServiceStatus(const ServiceStatus& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : ServiceStatus
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~ServiceStatus();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[7]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * The flag to mark the presence of the element scheduledTime in the optional field.
 */
enum{asn_scheduledTime = 0};
/**
 * The flag to mark the presence of the element recurrentOperation in the optional field.
 */
enum{asn_recurrentOperation = 1};
/**
 * The flag to mark the presence of the element duration in the optional field.
 */
enum{asn_duration = 2};
/**
 * The flag to mark the presence of the element ServiceTrigger__interval in the optional field.
 */
enum{asn_ServiceTrigger__interval = 3};
/**
 * The flag to mark the presence of the element occurs in the optional field.
 */
enum{asn_occurs = 4};
/**
 * The flag to mark the presence of the element ServiceTrigger__endTime in the optional field.
 */
enum{asn_ServiceTrigger__endTime = 5};
/**
 * Class representing the ServiceTrigger type.
 */
class ServiceTrigger : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <BR> no value means the service will be performed immediately
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_scheduledTime} to set the presence in the optional field.
       */
      TimeStamp * scheduledTime;
      /**
       * <BR> To indicate whether it's recurrent or one-time opperation, default is one-time
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_recurrentOperation} to set the presence in the optional field.
       */
      asnBOOL recurrentOperation;
      /**
       * <BR> Time in 10s increment, maxium 1 year
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_duration} to set the presence in the optional field.
       */
      asnMAXSINT duration;
      /**
       * <BR> Time in 10s increment, maxium 10 days
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_ServiceTrigger__interval} to set the presence in the optional field.
       */
      asnMAXSINT interval;
      /**
       * <BR> number of time occurs, -1 indicates no limtes
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_occurs} to set the presence in the optional field.
       */
      asnMAXSINT occurs;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_ServiceTrigger__endTime} to set the presence in the optional field.
       */
      TimeStamp * endTime;

      /**
       * Default constructor.
       */
      ServiceTrigger();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const ServiceTrigger&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      ServiceTrigger(const ServiceTrigger& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      ServiceTrigger(const ServiceTrigger& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : ServiceTrigger
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~ServiceTrigger();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[2]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element TrackPoint__direction in the optional field.
 */
enum{asn_TrackPoint__direction = 0};
/**
 * The flag to mark the presence of the element isSVT in the optional field.
 */
enum{asn_isSVT = 1};
/**
 * The flag to mark the presence of the element TrackPoint__odometer in the optional field.
 */
enum{asn_TrackPoint__odometer = 2};
/**
 * The flag to mark the presence of the element travelDistanceSinceLastWaypoint in the optional field.
 */
enum{asn_travelDistanceSinceLastWaypoint = 3};
/**
 * The flag to mark the presence of the element fuelConsumptionSinceLastWaypoint in the optional field.
 */
enum{asn_fuelConsumptionSinceLastWaypoint = 4};
/**
 * The flag to mark the presence of the element electricConsumptionSinceLastSample in the optional field.
 */
enum{asn_electricConsumptionSinceLastSample = 5};
/**
 * The flag to mark the presence of the element electricRegenerationSinceLastSample in the optional field.
 */
enum{asn_electricRegenerationSinceLastSample = 6};
/**
 * Class representing the TrackPoint type.
 */
class TrackPoint : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       */
      TimeStamp * systemTime;
      /**
       * <br>A SEQUENCE value.
       * See {@link Position} for more informations.
       */
      Position * position;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT speed;
      /**
       * <BR> kmph
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_TrackPoint__direction} to set the presence in the optional field.
       */
      asnMAXSINT direction;
      /**
       * <BR> 0 means North, clockwise    
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_isSVT} to set the presence in the optional field.
       */
      asnBOOL isSVT;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_TrackPoint__odometer} to set the presence in the optional field.
       */
      asnMAXSINT odometer;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_travelDistanceSinceLastWaypoint} to set the presence in the optional field.
       */
      asnMAXSINT travelDistanceSinceLastWaypoint;
      /**
       * <BR>Consumed fuel since trip start/last waypoint . 
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_fuelConsumptionSinceLastWaypoint} to set the presence in the optional field.
       */
      asnMAXSINT fuelConsumptionSinceLastWaypoint;
      /**
       * <BR>Electrical consumption since last sample.
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_electricConsumptionSinceLastSample} to set the presence in the optional field.
       */
      asnMAXSINT electricConsumptionSinceLastSample;
      /**
       * <BR>Electrical regeneration since last sample. 
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_electricRegenerationSinceLastSample} to set the presence in the optional field.
       */
      asnMAXSINT electricRegenerationSinceLastSample;

      /**
       * Default constructor.
       */
      TrackPoint();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const TrackPoint&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      TrackPoint(const TrackPoint& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      TrackPoint(const TrackPoint& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : TrackPoint
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~TrackPoint();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[41]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element Trip__startOdometer in the optional field.
 */
enum{asn_Trip__startOdometer = 0};
/**
 * The flag to mark the presence of the element fuelConsumption in the optional field.
 */
enum{asn_fuelConsumption = 1};
/**
 * The flag to mark the presence of the element waypoints in the optional field.
 */
enum{asn_waypoints = 2};
/**
 * The flag to mark the presence of the element Trip__endOdometer in the optional field.
 */
enum{asn_Trip__endOdometer = 3};
/**
 * The flag to mark the presence of the element electricConsumption in the optional field.
 */
enum{asn_electricConsumption = 4};
/**
 * The flag to mark the presence of the element electricRegeneration in the optional field.
 */
enum{asn_electricRegeneration = 5};
/**
 * Class representing the Trip type.
 */
class Trip : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT tripId;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       */
      TimeStamp * startTime;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_Trip__startOdometer} to set the presence in the optional field.
       */
      asnMAXSINT startOdometer;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_fuelConsumption} to set the presence in the optional field.
       */
      asnMAXSINT fuelConsumption;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT traveledDistance;
      /**
       * <BR> km
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asnctrackpointss}.
       */
      asnList trackpoints; //elements are of class asnctrackpointss
      /**
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncwaypointss}.
       * <BR>Optional field: use {@link #asn_waypoints} to set the presence in the optional field.
       */
      asnList waypoints; //elements are of class asncwaypointss
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT avgSpeed;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       */
      TimeStamp * endTime;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_Trip__endOdometer} to set the presence in the optional field.
       */
      asnMAXSINT endOdometer;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_electricConsumption} to set the presence in the optional field.
       */
      asnMAXSINT electricConsumption;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_electricRegeneration} to set the presence in the optional field.
       */
      asnMAXSINT electricRegeneration;

      /**
       * Default constructor.
       */
      Trip();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const Trip&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      Trip(const Trip& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      Trip(const Trip& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : Trip
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~Trip();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[40]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element startPosition in the optional field.
 */
enum{asn_startPosition = 0};
/**
 * The flag to mark the presence of the element TripFragment__startOdometer in the optional field.
 */
enum{asn_TripFragment__startOdometer = 1};
/**
 * The flag to mark the presence of the element startFuelLevel in the optional field.
 */
enum{asn_startFuelLevel = 2};
/**
 * The flag to mark the presence of the element startElectricConsumption in the optional field.
 */
enum{asn_startElectricConsumption = 3};
/**
 * The flag to mark the presence of the element startElectricRegeneration in the optional field.
 */
enum{asn_startElectricRegeneration = 4};
/**
 * The flag to mark the presence of the element TripFragment__endTime in the optional field.
 */
enum{asn_TripFragment__endTime = 5};
/**
 * The flag to mark the presence of the element endPosition in the optional field.
 */
enum{asn_endPosition = 6};
/**
 * The flag to mark the presence of the element TripFragment__endOdometer in the optional field.
 */
enum{asn_TripFragment__endOdometer = 7};
/**
 * The flag to mark the presence of the element endFuelLevel in the optional field.
 */
enum{asn_endFuelLevel = 8};
/**
 * The flag to mark the presence of the element endElectricConsumption in the optional field.
 */
enum{asn_endElectricConsumption = 9};
/**
 * The flag to mark the presence of the element endElectricRegeneration in the optional field.
 */
enum{asn_endElectricRegeneration = 10};
/**
 * Class representing the TripFragment type.
 */
class TripFragment : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       */
      TimeStamp * startTime;
      /**
       * <br>A SEQUENCE value.
       * See {@link Position} for more informations.
       * <BR>Optional field: use {@link #asn_startPosition} to set the presence in the optional field.
       */
      Position * startPosition;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_TripFragment__startOdometer} to set the presence in the optional field.
       */
      asnMAXSINT startOdometer;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_startFuelLevel} to set the presence in the optional field.
       */
      asnMAXSINT startFuelLevel;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_startElectricConsumption} to set the presence in the optional field.
       */
      asnMAXSINT startElectricConsumption;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_startElectricRegeneration} to set the presence in the optional field.
       */
      asnMAXSINT startElectricRegeneration;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_TripFragment__endTime} to set the presence in the optional field.
       */
      TimeStamp * endTime;
      /**
       * <br>A SEQUENCE value.
       * See {@link Position} for more informations.
       * <BR>Optional field: use {@link #asn_endPosition} to set the presence in the optional field.
       */
      Position * endPosition;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_TripFragment__endOdometer} to set the presence in the optional field.
       */
      asnMAXSINT endOdometer;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_endFuelLevel} to set the presence in the optional field.
       */
      asnMAXSINT endFuelLevel;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_endElectricConsumption} to set the presence in the optional field.
       */
      asnMAXSINT endElectricConsumption;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_endElectricRegeneration} to set the presence in the optional field.
       */
      asnMAXSINT endElectricRegeneration;

      /**
       * Default constructor.
       */
      TripFragment();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const TripFragment&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      TripFragment(const TripFragment& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      TripFragment(const TripFragment& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : TripFragment
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~TripFragment();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[42]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[2];
};


/**
 * The flag to mark the presence of the element confAndId in the optional field.
 */
enum{asn_confAndId = 0};
/**
 * The flag to mark the presence of the element drivingSafetyStatus in the optional field.
 */
enum{asn_drivingSafetyStatus = 1};
/**
 * The flag to mark the presence of the element maintenanceStatus in the optional field.
 */
enum{asn_maintenanceStatus = 2};
/**
 * The flag to mark the presence of the element runningStatus in the optional field.
 */
enum{asn_runningStatus = 3};
/**
 * The flag to mark the presence of the element climateStatus in the optional field.
 */
enum{asn_climateStatus = 4};
/**
 * The flag to mark the presence of the element drivingBehaviourStatus in the optional field.
 */
enum{asn_drivingBehaviourStatus = 5};
/**
 * The flag to mark the presence of the element pollutionStatus in the optional field.
 */
enum{asn_pollutionStatus = 6};
/**
 * The flag to mark the presence of the element ecuWarningMessages in the optional field.
 */
enum{asn_ecuWarningMessages = 7};
/**
 * The flag to mark the presence of the element electricVehicleStatus in the optional field.
 */
enum{asn_electricVehicleStatus = 8};
/**
 * The flag to mark the presence of the element carConfig in the optional field.
 */
enum{asn_carConfig = 9};
/**
 * The flag to mark the presence of the element AdditionalVehicleStatus__signals in the optional field.
 */
enum{asn_AdditionalVehicleStatus__signals = 10};
/**
 * The flag to mark the presence of the element AdditionalVehicleStatus__data in the optional field.
 */
enum{asn_AdditionalVehicleStatus__data = 11};
/**
 * Class representing the AdditionalVehicleStatus type.
 */
class AdditionalVehicleStatus : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A SEQUENCE value.
       * See {@link ConfigurationAndIdentity} for more informations.
       * <BR>Optional field: use {@link #asn_confAndId} to set the presence in the optional field.
       */
      ConfigurationAndIdentity * confAndId;
      /**
       * <br>A SEQUENCE value.
       * See {@link DrivingSafetyStatus} for more informations.
       * <BR>Optional field: use {@link #asn_drivingSafetyStatus} to set the presence in the optional field.
       */
      DrivingSafetyStatus * drivingSafetyStatus;
      /**
       * <br>A SEQUENCE value.
       * See {@link MaintenanceStatus} for more informations.
       * <BR>Optional field: use {@link #asn_maintenanceStatus} to set the presence in the optional field.
       */
      MaintenanceStatus * maintenanceStatus;
      /**
       * <br>A SEQUENCE value.
       * See {@link RunningStatus} for more informations.
       * <BR>Optional field: use {@link #asn_runningStatus} to set the presence in the optional field.
       */
      RunningStatus * runningStatus;
      /**
       * <br>A SEQUENCE value.
       * See {@link ClimateStatus} for more informations.
       * <BR>Optional field: use {@link #asn_climateStatus} to set the presence in the optional field.
       */
      ClimateStatus * climateStatus;
      /**
       * <br>A SEQUENCE value.
       * See {@link DrivingBehaviourStatus} for more informations.
       * <BR>Optional field: use {@link #asn_drivingBehaviourStatus} to set the presence in the optional field.
       */
      DrivingBehaviourStatus * drivingBehaviourStatus;
      /**
       * <br>A SEQUENCE value.
       * See {@link PollutionStatus} for more informations.
       * <BR>Optional field: use {@link #asn_pollutionStatus} to set the presence in the optional field.
       */
      PollutionStatus * pollutionStatus;
      /**
       * <br>Elements of this SET OF type.
       * <BR>Elements are of class {@link #asncEcuWarningMessagess}.
       * <BR>Optional field: use {@link #asn_ecuWarningMessages} to set the presence in the optional field.
       */
      asnList ecuWarningMessages;
      /**
       * <br>A SEQUENCE value.
       * See {@link ElectricVehicleStatus} for more informations.
       * <BR>Optional field: use {@link #asn_electricVehicleStatus} to set the presence in the optional field.
       */
      ElectricVehicleStatus * electricVehicleStatus;
      /**
       * <br>A SEQUENCE value.
       * See {@link CarConfig} for more informations.
       * <BR>Optional field: use {@link #asn_carConfig} to set the presence in the optional field.
       */
      CarConfig * carConfig;
      /**
       * <BR> The extended signals which can be reported from the car
       * <br>Elements of this SET OF type.
       * <BR>Elements are of class {@link #asncAdditionalVehicleStatus__signalss}.
       * <BR>Optional field: use {@link #asn_AdditionalVehicleStatus__signals} to set the presence in the optional field.
       */
      asnList signals; //elements are of class asncAdditionalVehicleStatus__signalss
      /**
       * <BR> The binary chunk reserved for further usage
       * <br>An OCTET STRING value.
       * <BR>Optional field: use {@link #asn_AdditionalVehicleStatus__data} to set the presence in the optional field.
       */
      asnOctetString data;

      /**
       * Default constructor.
       */
      AdditionalVehicleStatus();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const AdditionalVehicleStatus&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      AdditionalVehicleStatus(const AdditionalVehicleStatus& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      AdditionalVehicleStatus(const AdditionalVehicleStatus& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : AdditionalVehicleStatus
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~AdditionalVehicleStatus();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[17]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[2];
};


/**
 * The flag to mark the presence of the element BasicVehicleStatus__speedValidity in the optional field.
 */
enum{asn_BasicVehicleStatus__speedValidity = 0};
/**
 * The flag to mark the presence of the element BasicVehicleStatus__direction in the optional field.
 */
enum{asn_BasicVehicleStatus__direction = 1};
/**
 * The flag to mark the presence of the element engineStatus in the optional field.
 */
enum{asn_engineStatus = 2};
/**
 * The flag to mark the presence of the element keyStatus in the optional field.
 */
enum{asn_keyStatus = 3};
/**
 * The flag to mark the presence of the element engineBlockedStatus in the optional field.
 */
enum{asn_engineBlockedStatus = 4};
/**
 * The flag to mark the presence of the element distanceToEmpty in the optional field.
 */
enum{asn_distanceToEmpty = 5};
/**
 * The flag to mark the presence of the element usageMode in the optional field.
 */
enum{asn_usageMode = 6};
/**
 * Class representing the BasicVehicleStatus type.
 * <BR> generic notification, e.g., vehicle unlock notification
 */
class BasicVehicleStatus : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A SEQUENCE value.
       * See {@link Position} for more informations.
       */
      Position * position;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT speed;
      /**
       * <BR> km/h   
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_BasicVehicleStatus__speedValidity} to set the presence in the optional field.
       */
      asnMAXSINT speedValidity;
      /**
       * <BR> 0x0: valid, 0x1: Invalid
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_BasicVehicleStatus__direction} to set the presence in the optional field.
       */
      asnMAXSINT direction;
      /**
       * <br>An INTEGER value.
       * Use the following values :
       * <BR>{@link #engine_running}
       * <BR>{@link #engine_off}
       * <BR>{@link #EngineStatus__unknown}
       * <BR>Optional field: use {@link #asn_engineStatus} to set the presence in the optional field.
       */
      asnMAXSINT engineStatus;
      /**
       * <br>An INTEGER value.
       * Use the following values :
       * <BR>{@link #no_key_inserted}
       * <BR>{@link #key_inserted}
       * <BR>{@link #KeyStatus__unknown}
       * <BR>Optional field: use {@link #asn_keyStatus} to set the presence in the optional field.
       */
      asnMAXSINT keyStatus;
      /**
       * <br>An ENUMERATED value.
       * Use the following enumeration values :
       * <BR>{@link #unblocked}
       * <BR>{@link #blocked}
       * <BR>Optional field: use {@link #asn_engineBlockedStatus} to set the presence in the optional field.
       */
      asnMAXSINT engineBlockedStatus;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_distanceToEmpty} to set the presence in the optional field.
       */
      asnMAXSINT distanceToEmpty;
      /**
       * <BR> km
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_usageMode} to set the presence in the optional field.
       */
      asnMAXSINT usageMode;

      /**
       * Default constructor.
       */
      BasicVehicleStatus();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const BasicVehicleStatus&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      BasicVehicleStatus(const BasicVehicleStatus& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      BasicVehicleStatus(const BasicVehicleStatus& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : BasicVehicleStatus
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~BasicVehicleStatus();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[16]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element BatteryStatus__stateOfCharge in the optional field.
 */
enum{asn_BatteryStatus__stateOfCharge = 0};
/**
 * The flag to mark the presence of the element BatteryStatus__chargeLevel in the optional field.
 */
enum{asn_BatteryStatus__chargeLevel = 1};
/**
 * The flag to mark the presence of the element stateOfHealth in the optional field.
 */
enum{asn_stateOfHealth = 2};
/**
 * The flag to mark the presence of the element voltage in the optional field.
 */
enum{asn_voltage = 3};
/**
 * Class representing the BatteryStatus type.
 */
class BatteryStatus : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_BatteryStatus__stateOfCharge} to set the presence in the optional field.
       */
      asnMAXSINT stateOfCharge;
      /**
       * <BR> status, e.g. empty, low, normal, high, etc.
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_BatteryStatus__chargeLevel} to set the presence in the optional field.
       */
      asnMAXSINT chargeLevel;
      /**
       * <BR> the charge percentage
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_stateOfHealth} to set the presence in the optional field.
       */
      asnMAXSINT stateOfHealth;
      /**
       * <BR> the health of battery, to indicate whether the battery need to be replaced or
       *  not
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_voltage} to set the presence in the optional field.
       */
      asnMAXSINT voltage;

      /**
       * Default constructor.
       */
      BatteryStatus();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const BatteryStatus&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      BatteryStatus(const BatteryStatus& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      BatteryStatus(const BatteryStatus& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : BatteryStatus
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~BatteryStatus();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[21]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element heatedFrontSeats in the optional field.
 */
enum{asn_heatedFrontSeats = 0};
/**
 * The flag to mark the presence of the element parkingClimateLevel in the optional field.
 */
enum{asn_parkingClimateLevel = 1};
/**
 * The flag to mark the presence of the element heatedSteeringWheel in the optional field.
 */
enum{asn_heatedSteeringWheel = 2};
/**
 * Class representing the CarConfig type.
 */
class CarConfig : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_heatedFrontSeats} to set the presence in the optional field.
       */
      asnMAXSINT heatedFrontSeats;
      /**
       * <BR>  Heated front seats
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_parkingClimateLevel} to set the presence in the optional field.
       */
      asnMAXSINT parkingClimateLevel;
      /**
       * <BR> Parking Climate level
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_heatedSteeringWheel} to set the presence in the optional field.
       */
      asnMAXSINT heatedSteeringWheel;

      /**
       * Default constructor.
       */
      CarConfig();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const CarConfig&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      CarConfig(const CarConfig& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      CarConfig(const CarConfig& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : CarConfig
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~CarConfig();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[29]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element winStatusDriver in the optional field.
 */
enum{asn_winStatusDriver = 0};
/**
 * The flag to mark the presence of the element winStatusDriverValidity in the optional field.
 */
enum{asn_winStatusDriverValidity = 1};
/**
 * The flag to mark the presence of the element winStatusPassenger in the optional field.
 */
enum{asn_winStatusPassenger = 2};
/**
 * The flag to mark the presence of the element winStatusPassengerValidity in the optional field.
 */
enum{asn_winStatusPassengerValidity = 3};
/**
 * The flag to mark the presence of the element winStatusDriverRear in the optional field.
 */
enum{asn_winStatusDriverRear = 4};
/**
 * The flag to mark the presence of the element winStatusDriverRearValidity in the optional field.
 */
enum{asn_winStatusDriverRearValidity = 5};
/**
 * The flag to mark the presence of the element winStatusPassengerRear in the optional field.
 */
enum{asn_winStatusPassengerRear = 6};
/**
 * The flag to mark the presence of the element winStatusPassengerRearValidity in the optional field.
 */
enum{asn_winStatusPassengerRearValidity = 7};
/**
 * The flag to mark the presence of the element sunroofOpenStatus in the optional field.
 */
enum{asn_sunroofOpenStatus = 8};
/**
 * The flag to mark the presence of the element sunroofOpenStatusValidity in the optional field.
 */
enum{asn_sunroofOpenStatusValidity = 9};
/**
 * The flag to mark the presence of the element ventilateStatus in the optional field.
 */
enum{asn_ventilateStatus = 10};
/**
 * The flag to mark the presence of the element winPosDriver in the optional field.
 */
enum{asn_winPosDriver = 11};
/**
 * The flag to mark the presence of the element winPosPassenger in the optional field.
 */
enum{asn_winPosPassenger = 12};
/**
 * The flag to mark the presence of the element winPosDriverRear in the optional field.
 */
enum{asn_winPosDriverRear = 13};
/**
 * The flag to mark the presence of the element winPosPassengerRear in the optional field.
 */
enum{asn_winPosPassengerRear = 14};
/**
 * The flag to mark the presence of the element interiorTemp in the optional field.
 */
enum{asn_interiorTemp = 15};
/**
 * The flag to mark the presence of the element exteriorTemp in the optional field.
 */
enum{asn_exteriorTemp = 16};
/**
 * The flag to mark the presence of the element exteriorTempValidity in the optional field.
 */
enum{asn_exteriorTempValidity = 17};
/**
 * The flag to mark the presence of the element preClimateActive in the optional field.
 */
enum{asn_preClimateActive = 18};
/**
 * The flag to mark the presence of the element airCleanSts in the optional field.
 */
enum{asn_airCleanSts = 19};
/**
 * The flag to mark the presence of the element winCloseReminder in the optional field.
 */
enum{asn_winCloseReminder = 20};
/**
 * The flag to mark the presence of the element drvHeatSts in the optional field.
 */
enum{asn_drvHeatSts = 21};
/**
 * The flag to mark the presence of the element passHeatingSts in the optional field.
 */
enum{asn_passHeatingSts = 22};
/**
 * The flag to mark the presence of the element rlHeatingSts in the optional field.
 */
enum{asn_rlHeatingSts = 23};
/**
 * The flag to mark the presence of the element rrHeatingSts in the optional field.
 */
enum{asn_rrHeatingSts = 24};
/**
 * The flag to mark the presence of the element drvVentSts in the optional field.
 */
enum{asn_drvVentSts = 25};
/**
 * The flag to mark the presence of the element passVentSts in the optional field.
 */
enum{asn_passVentSts = 26};
/**
 * The flag to mark the presence of the element rrVentSts in the optional field.
 */
enum{asn_rrVentSts = 27};
/**
 * The flag to mark the presence of the element rlVentSts in the optional field.
 */
enum{asn_rlVentSts = 28};
/**
 * Class representing the ClimateStatus type.
 */
class ClimateStatus : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <BR> the window status, e.g. open, closed, etc.
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_winStatusDriver} to set the presence in the optional field.
       */
      asnMAXSINT winStatusDriver;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_winStatusDriverValidity} to set the presence in the optional field.
       */
      asnMAXSINT winStatusDriverValidity;
      /**
       * <BR> 0x0: invalid, 0x1: valid
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_winStatusPassenger} to set the presence in the optional field.
       */
      asnMAXSINT winStatusPassenger;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_winStatusPassengerValidity} to set the presence in the optional field.
       */
      asnMAXSINT winStatusPassengerValidity;
      /**
       * <BR> 0x0: invalid, 0x1: valid
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_winStatusDriverRear} to set the presence in the optional field.
       */
      asnMAXSINT winStatusDriverRear;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_winStatusDriverRearValidity} to set the presence in the optional field.
       */
      asnMAXSINT winStatusDriverRearValidity;
      /**
       * <BR> 0x0: invalid, 0x1: valid
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_winStatusPassengerRear} to set the presence in the optional field.
       */
      asnMAXSINT winStatusPassengerRear;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_winStatusPassengerRearValidity} to set the presence in the optional field.
       */
      asnMAXSINT winStatusPassengerRearValidity;
      /**
       * <BR> 0x0: invalid, 0x1: valid
       * <BR> the sunroof open status, closed, raised, fullyopend, etc.
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_sunroofOpenStatus} to set the presence in the optional field.
       */
      asnMAXSINT sunroofOpenStatus;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_sunroofOpenStatusValidity} to set the presence in the optional field.
       */
      asnMAXSINT sunroofOpenStatusValidity;
      /**
       * <BR> 0x0: valid, 0x1: Invalid
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_ventilateStatus} to set the presence in the optional field.
       */
      asnMAXSINT ventilateStatus;
      /**
       * <BR> the windows position
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_winPosDriver} to set the presence in the optional field.
       */
      asnMAXSINT winPosDriver;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_winPosPassenger} to set the presence in the optional field.
       */
      asnMAXSINT winPosPassenger;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_winPosDriverRear} to set the presence in the optional field.
       */
      asnMAXSINT winPosDriverRear;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_winPosPassengerRear} to set the presence in the optional field.
       */
      asnMAXSINT winPosPassengerRear;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_interiorTemp} to set the presence in the optional field.
       */
      asnMAXSINT interiorTemp;
      /**
       * <BR> degree celcius
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_exteriorTemp} to set the presence in the optional field.
       */
      asnMAXSINT exteriorTemp;
      /**
       * <BR> degree celcius
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_exteriorTempValidity} to set the presence in the optional field.
       */
      asnMAXSINT exteriorTempValidity;
      /**
       * <BR> 0x0: valid, 0x1: Invalid
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_preClimateActive} to set the presence in the optional field.
       */
      asnBOOL preClimateActive;
      /**
       * <BR>for ON/Off explaining if the PreClimate is running or not (ClimaActv)
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_airCleanSts} to set the presence in the optional field.
       */
      asnMAXSINT airCleanSts;
      /**
       * <BR> air conditioner clean status
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_winCloseReminder} to set the presence in the optional field.
       */
      asnMAXSINT winCloseReminder;
      /**
       * <BR> rain close the window to remind
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_drvHeatSts} to set the presence in the optional field.
       */
      asnMAXSINT drvHeatSts;
      /**
       * <BR> driver seat heating status
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_passHeatingSts} to set the presence in the optional field.
       */
      asnMAXSINT passHeatingSts;
      /**
       * <BR> front passenger seat heating status
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_rlHeatingSts} to set the presence in the optional field.
       */
      asnMAXSINT rlHeatingSts;
      /**
       * <BR> left rear seat heating status
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_rrHeatingSts} to set the presence in the optional field.
       */
      asnMAXSINT rrHeatingSts;
      /**
       * <BR> right rear seat heating status
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_drvVentSts} to set the presence in the optional field.
       */
      asnMAXSINT drvVentSts;
      /**
       * <BR> driver seat ventilation status
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_passVentSts} to set the presence in the optional field.
       */
      asnMAXSINT passVentSts;
      /**
       * <BR> front passenger seat ventilation status
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_rrVentSts} to set the presence in the optional field.
       */
      asnMAXSINT rrVentSts;
      /**
       * <BR> right rear seat ventilation status
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_rlVentSts} to set the presence in the optional field.
       */
      asnMAXSINT rlVentSts;

      /**
       * Default constructor.
       */
      ClimateStatus();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const ClimateStatus&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      ClimateStatus(const ClimateStatus& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      ClimateStatus(const ClimateStatus& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : ClimateStatus
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~ClimateStatus();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[23]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[4];
};


/**
 * The flag to mark the presence of the element ConfigurationAndIdentity__vin in the optional field.
 */
enum{asn_ConfigurationAndIdentity__vin = 0};
/**
 * The flag to mark the presence of the element fuelType in the optional field.
 */
enum{asn_fuelType = 1};
/**
 * Class representing the ConfigurationAndIdentity type.
 */
class ConfigurationAndIdentity : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_ConfigurationAndIdentity__vin} to set the presence in the optional field.
       */
      asnOctetString vin;
      /**
       * <br>An INTEGER value.
       * Use the following values :
       * <BR>{@link #petrol}
       * <BR>{@link #diesel}
       * <BR>{@link #petrolHybrid}
       * <BR>{@link #dieselHybrid}
       * <BR>{@link #ev}
       * <BR>{@link #hydrogenFuelcellEV}
       * <BR>{@link #compressedGas}
       * <BR>{@link #liquefiedPropaneGas}
       * <BR>{@link #FuelType__invalid}
       * <BR>Optional field: use {@link #asn_fuelType} to set the presence in the optional field.
       */
      asnMAXSINT fuelType;

      /**
       * Default constructor.
       */
      ConfigurationAndIdentity();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const ConfigurationAndIdentity&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      ConfigurationAndIdentity(const ConfigurationAndIdentity& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      ConfigurationAndIdentity(const ConfigurationAndIdentity& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : ConfigurationAndIdentity
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~ConfigurationAndIdentity();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[18]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element failureCount in the optional field.
 */
enum{asn_failureCount = 0};
/**
 * The flag to mark the presence of the element lastFail in the optional field.
 */
enum{asn_lastFail = 1};
/**
 * The flag to mark the presence of the element firtFail in the optional field.
 */
enum{asn_firtFail = 2};
/**
 * The flag to mark the presence of the element firstFailureOdometer in the optional field.
 */
enum{asn_firstFailureOdometer = 3};
/**
 * The flag to mark the presence of the element firstFailureBatteryVoltage in the optional field.
 */
enum{asn_firstFailureBatteryVoltage = 4};
/**
 * The flag to mark the presence of the element firstFailureVehicleSpeed in the optional field.
 */
enum{asn_firstFailureVehicleSpeed = 5};
/**
 * Class representing the DiagnosticTroubleCode type.
 * <BR>the code to identify the exception where the ECU cannot provide the DTCs, OEM
 *  specific
 */
class DiagnosticTroubleCode : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString dtc;
      /**
       * <BR>ID of the trouble code. OEM specific,
       * <br>A BIT STRING value.
       * Use the following values :
       * <BR>{@link #testFailed}
       * <BR>{@link #testFailedThisOperationCycle}
       * <BR>{@link #pendingDTC}
       * <BR>{@link #confirmedDTC}
       * <BR>{@link #testNotCompletedSinceLastClear}
       * <BR>{@link #testFailedSinceLastClear}
       * <BR>{@link #testNotCompletedThisOperationCycle}
       * <BR>{@link #warningIndicatorRequested}
       */
      asnNamedBitString status;
      /**
       * <BR>status of the DTC. Follows ISO 14229
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_failureCount} to set the presence in the optional field.
       */
      asnMAXSINT failureCount;
      /**
       * <BR>Failure counter.
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_lastFail} to set the presence in the optional field.
       */
      TimeStamp * lastFail;
      /**
       * <BR>Time of last failure
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_firtFail} to set the presence in the optional field.
       */
      TimeStamp * firtFail;
      /**
       * <BR>Time of first failure
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_firstFailureOdometer} to set the presence in the optional field.
       */
      asnMAXSINT firstFailureOdometer;
      /**
       * <BR>the odometer at the first failure
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_firstFailureBatteryVoltage} to set the presence in the optional field.
       */
      asnMAXSINT firstFailureBatteryVoltage;
      /**
       * <BR>the battery voltage at the first failure
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_firstFailureVehicleSpeed} to set the presence in the optional field.
       */
      asnMAXSINT firstFailureVehicleSpeed;

      /**
       * Default constructor.
       */
      DiagnosticTroubleCode();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const DiagnosticTroubleCode&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      DiagnosticTroubleCode(const DiagnosticTroubleCode& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      DiagnosticTroubleCode(const DiagnosticTroubleCode& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : DiagnosticTroubleCode
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~DiagnosticTroubleCode();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[33]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element brakePedalDepressed in the optional field.
 */
enum{asn_brakePedalDepressed = 0};
/**
 * The flag to mark the presence of the element brakePedalDepressedValidity in the optional field.
 */
enum{asn_brakePedalDepressedValidity = 1};
/**
 * The flag to mark the presence of the element engineSpeed in the optional field.
 */
enum{asn_engineSpeed = 2};
/**
 * The flag to mark the presence of the element engineSpeedValidity in the optional field.
 */
enum{asn_engineSpeedValidity = 3};
/**
 * The flag to mark the presence of the element transimissionGearPostion in the optional field.
 */
enum{asn_transimissionGearPostion = 4};
/**
 * The flag to mark the presence of the element cruiseControlStatus in the optional field.
 */
enum{asn_cruiseControlStatus = 5};
/**
 * Class representing the DrivingBehaviourStatus type.
 * <BR> left rear seat ventilation status
 */
class DrivingBehaviourStatus : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_brakePedalDepressed} to set the presence in the optional field.
       */
      asnBOOL brakePedalDepressed;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_brakePedalDepressedValidity} to set the presence in the optional field.
       */
      asnMAXSINT brakePedalDepressedValidity;
      /**
       * <BR> 0x0: valid, 0x1: Invalid
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_engineSpeed} to set the presence in the optional field.
       */
      asnMAXSINT engineSpeed;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_engineSpeedValidity} to set the presence in the optional field.
       */
      asnMAXSINT engineSpeedValidity;
      /**
       * <BR> 0x0: valid, 0x1: Invalid
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_transimissionGearPostion} to set the presence in the optional field.
       */
      asnMAXSINT transimissionGearPostion;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_cruiseControlStatus} to set the presence in the optional field.
       */
      asnMAXSINT cruiseControlStatus;

      /**
       * Default constructor.
       */
      DrivingBehaviourStatus();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const DrivingBehaviourStatus&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      DrivingBehaviourStatus(const DrivingBehaviourStatus& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      DrivingBehaviourStatus(const DrivingBehaviourStatus& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : DrivingBehaviourStatus
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~DrivingBehaviourStatus();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[24]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element srsStatus in the optional field.
 */
enum{asn_srsStatus = 0};
/**
 * The flag to mark the presence of the element vehicleAlarm in the optional field.
 */
enum{asn_vehicleAlarm = 1};
/**
 * The flag to mark the presence of the element doorOpenStatusDriver in the optional field.
 */
enum{asn_doorOpenStatusDriver = 2};
/**
 * The flag to mark the presence of the element doorOpenStatusPassenger in the optional field.
 */
enum{asn_doorOpenStatusPassenger = 3};
/**
 * The flag to mark the presence of the element doorOpenStatusDriverRear in the optional field.
 */
enum{asn_doorOpenStatusDriverRear = 4};
/**
 * The flag to mark the presence of the element doorOpenStatusPassengerRear in the optional field.
 */
enum{asn_doorOpenStatusPassengerRear = 5};
/**
 * The flag to mark the presence of the element doorLockStatusDriver in the optional field.
 */
enum{asn_doorLockStatusDriver = 6};
/**
 * The flag to mark the presence of the element doorLockStatusPassenger in the optional field.
 */
enum{asn_doorLockStatusPassenger = 7};
/**
 * The flag to mark the presence of the element doorLockStatusDriverRear in the optional field.
 */
enum{asn_doorLockStatusDriverRear = 8};
/**
 * The flag to mark the presence of the element doorLockStatusPassengerRear in the optional field.
 */
enum{asn_doorLockStatusPassengerRear = 9};
/**
 * The flag to mark the presence of the element trunkOpenStatus in the optional field.
 */
enum{asn_trunkOpenStatus = 10};
/**
 * The flag to mark the presence of the element trunkLockStatus in the optional field.
 */
enum{asn_trunkLockStatus = 11};
/**
 * The flag to mark the presence of the element engineHoodOpenStatus in the optional field.
 */
enum{asn_engineHoodOpenStatus = 12};
/**
 * The flag to mark the presence of the element centralLockingStatus in the optional field.
 */
enum{asn_centralLockingStatus = 13};
/**
 * The flag to mark the presence of the element seatBeltStatusDriver in the optional field.
 */
enum{asn_seatBeltStatusDriver = 14};
/**
 * The flag to mark the presence of the element seatBeltStatusPassenger in the optional field.
 */
enum{asn_seatBeltStatusPassenger = 15};
/**
 * The flag to mark the presence of the element seatBeltStatusDriverRear in the optional field.
 */
enum{asn_seatBeltStatusDriverRear = 16};
/**
 * The flag to mark the presence of the element seatBeltStatusPassengerRear in the optional field.
 */
enum{asn_seatBeltStatusPassengerRear = 17};
/**
 * The flag to mark the presence of the element handBrakeStatus in the optional field.
 */
enum{asn_handBrakeStatus = 18};
/**
 * The flag to mark the presence of the element electricParkBrakeStatus in the optional field.
 */
enum{asn_electricParkBrakeStatus = 19};
/**
 * The flag to mark the presence of the element electricParkBrakeStatusValidity in the optional field.
 */
enum{asn_electricParkBrakeStatusValidity = 20};
/**
 * Class representing the DrivingSafetyStatus type.
 */
class DrivingSafetyStatus : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An ENUMERATED value.
       * Use the following enumeration values :
       * <BR>{@link #no_srs_info}
       * <BR>{@link #srs_not_deployed}
       * <BR>{@link #srs_deployed}
       * <BR>Optional field: use {@link #asn_srsStatus} to set the presence in the optional field.
       */
      asnMAXSINT srsStatus;
      /**
       * <BR> SRS(airbag) status, deployed or non-deployed
       * <BR> vehicle alarm status, e.g. ok, perimeterAlarmOn,
       *  interiorAlarmOn,perimeterAndInteriorAlarmOn,towAwayActive,unauthMovement
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_vehicleAlarm} to set the presence in the optional field.
       */
      asnMAXSINT vehicleAlarm;
      /**
       * <BR> the door open status, e.g. open, closed,etc.
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_doorOpenStatusDriver} to set the presence in the optional field.
       */
      asnMAXSINT doorOpenStatusDriver;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_doorOpenStatusPassenger} to set the presence in the optional field.
       */
      asnMAXSINT doorOpenStatusPassenger;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_doorOpenStatusDriverRear} to set the presence in the optional field.
       */
      asnMAXSINT doorOpenStatusDriverRear;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_doorOpenStatusPassengerRear} to set the presence in the optional field.
       */
      asnMAXSINT doorOpenStatusPassengerRear;
      /**
       * <BR> the door lock status, e.g. locked,  unlocked, safe locked,etc.
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_doorLockStatusDriver} to set the presence in the optional field.
       */
      asnMAXSINT doorLockStatusDriver;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_doorLockStatusPassenger} to set the presence in the optional field.
       */
      asnMAXSINT doorLockStatusPassenger;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_doorLockStatusDriverRear} to set the presence in the optional field.
       */
      asnMAXSINT doorLockStatusDriverRear;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_doorLockStatusPassengerRear} to set the presence in the optional field.
       */
      asnMAXSINT doorLockStatusPassengerRear;
      /**
       * <BR> the trunk or tailgate open status, e.g. closed, open, locked, unlocked, etc.
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_trunkOpenStatus} to set the presence in the optional field.
       */
      asnMAXSINT trunkOpenStatus;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_trunkLockStatus} to set the presence in the optional field.
       */
      asnMAXSINT trunkLockStatus;
      /**
       * <BR> to indicate whether the engine hood is open or closed
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_engineHoodOpenStatus} to set the presence in the optional field.
       */
      asnMAXSINT engineHoodOpenStatus;
      /**
       * <BR> to indicate central locking status to the user of the vehicle, e.g. open,
       *  closed, locked, safe locked
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_centralLockingStatus} to set the presence in the optional field.
       */
      asnMAXSINT centralLockingStatus;
      /**
       * <BR> the seat belt status, whether it's fastened or not
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_seatBeltStatusDriver} to set the presence in the optional field.
       */
      asnBOOL seatBeltStatusDriver;
      /**
       * <BR> ture = fastened
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_seatBeltStatusPassenger} to set the presence in the optional field.
       */
      asnBOOL seatBeltStatusPassenger;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_seatBeltStatusDriverRear} to set the presence in the optional field.
       */
      asnBOOL seatBeltStatusDriverRear;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_seatBeltStatusPassengerRear} to set the presence in the optional field.
       */
      asnBOOL seatBeltStatusPassengerRear;
      /**
       * <BR> park brake status 
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_handBrakeStatus} to set the presence in the optional field.
       */
      asnMAXSINT handBrakeStatus;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_electricParkBrakeStatus} to set the presence in the optional field.
       */
      asnMAXSINT electricParkBrakeStatus;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_electricParkBrakeStatusValidity} to set the presence in the optional field.
       */
      asnMAXSINT electricParkBrakeStatusValidity;

      /**
       * Default constructor.
       */
      DrivingSafetyStatus();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const DrivingSafetyStatus&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      DrivingSafetyStatus(const DrivingSafetyStatus& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      DrivingSafetyStatus(const DrivingSafetyStatus& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : DrivingSafetyStatus
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~DrivingSafetyStatus();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[19]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[3];
};


/**
 * The flag to mark the presence of the element dtcs in the optional field.
 */
enum{asn_dtcs = 0};
/**
 * The flag to mark the presence of the element exceptionCode in the optional field.
 */
enum{asn_exceptionCode = 1};
/**
 * Class representing the ECUDiagnostic type.
 */
class ECUDiagnostic : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString ecuID;
      /**
       * <BR>ECU ID which will be OEM specific,
       * <br>An INTEGER value.
       * Use the following values :
       * <BR>{@link #ok}
       * <BR>{@link #faulty}
       * <BR>{@link #HealthStatus__unknown}
       * <BR>{@link #HealthStatus__invalid}
       */
      asnMAXSINT diagnosticResult;
      /**
       * <BR> Diagnostic results
       * <br>Elements of this SET OF type.
       * <BR>Elements are of class {@link #asncdtcss}.
       * <BR>Optional field: use {@link #asn_dtcs} to set the presence in the optional field.
       */
      asnList dtcs; //elements are of class asncdtcss
      /**
       * <BR>the DTCs for the ECU
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_exceptionCode} to set the presence in the optional field.
       */
      asnMAXSINT exceptionCode;

      /**
       * Default constructor.
       */
      ECUDiagnostic();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const ECUDiagnostic&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      ECUDiagnostic(const ECUDiagnostic& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      ECUDiagnostic(const ECUDiagnostic& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : ECUDiagnostic
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~ECUDiagnostic();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[32]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * This class represents one element of SET OF type
 */
class asncECUDiagnosticss : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString ecuID;
      /**
       * <BR>ECU ID which will be OEM specific,
       * <br>An INTEGER value.
       * Use the following values :
       * <BR>{@link #ok}
       * <BR>{@link #faulty}
       * <BR>{@link #HealthStatus__unknown}
       * <BR>{@link #HealthStatus__invalid}
       */
      asnMAXSINT diagnosticResult;
      /**
       * <BR> Diagnostic results
       * <br>Elements of this SET OF type.
       * <BR>Elements are of class {@link #asncdtcss}.
       * <BR>Optional field: use {@link #asn_dtcs} to set the presence in the optional field.
       */
      asnList dtcs; //elements are of class asncdtcss
      /**
       * <BR>the DTCs for the ECU
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_exceptionCode} to set the presence in the optional field.
       */
      asnMAXSINT exceptionCode;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asncECUDiagnosticss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncECUDiagnosticss(const asncECUDiagnosticss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncECUDiagnosticss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncECUDiagnosticss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncECUDiagnosticss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncECUDiagnosticss(const asncECUDiagnosticss& object);
#endif // asnCodCopytor
};

/**
 * Class representing the ECUDiagnostics type.
 */
class ECUDiagnostics : public asntype
{
   public:
      /**
       * <br>Elements of this SET OF type.
       * <BR>Elements are of class {@link #asncECUDiagnosticss}.
       */
      asnList value; //elements are of class asncECUDiagnosticss

      /**
       * Default constructor.
       */
      ECUDiagnostics();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const ECUDiagnostics&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      ECUDiagnostics(const ECUDiagnostics& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      ECUDiagnostics(const ECUDiagnostics& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : ECUDiagnostics
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~ECUDiagnostics();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[36]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * This class represents one element of SET OF type
 */
class asncEcuWarningMessagess : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString key;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_collectTime} to set the presence in the optional field.
       */
      TimeStamp * collectTime;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_value} to set the presence in the optional field.
       */
      asnMAXSINT value;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_GenericVehicleSignal__stringVal} to set the presence in the optional field.
       */
      asnOctetString stringVal;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_GenericVehicleSignal__boolVal} to set the presence in the optional field.
       */
      asnBOOL boolVal;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_GenericVehicleSignal__timestampVal} to set the presence in the optional field.
       */
      TimeStamp * timestampVal;
      /**
       * <br>An OCTET STRING value.
       * <BR>Optional field: use {@link #asn_GenericVehicleSignal__dataVal} to set the presence in the optional field.
       */
      asnOctetString dataVal;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asncEcuWarningMessagess();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncEcuWarningMessagess(const asncEcuWarningMessagess& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncEcuWarningMessagess();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncEcuWarningMessagess
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncEcuWarningMessagess&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncEcuWarningMessagess(const asncEcuWarningMessagess& object);
#endif // asnCodCopytor
};

/**
 * Class representing the EcuWarningMessages type.
 * <BR> Heated steering wheel
 * <BR> The extentable ECU Warning Message, each warning message will have a specified
 *  Key and the warning code as the Value
 */
class EcuWarningMessages : public asntype
{
   public:
      /**
       * <br>Elements of this SET OF type.
       * <BR>Elements are of class {@link #asncEcuWarningMessagess}.
       */
      asnList value; //elements are of class asncEcuWarningMessagess

      /**
       * Default constructor.
       */
      EcuWarningMessages();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const EcuWarningMessages&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      EcuWarningMessages(const EcuWarningMessages& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      EcuWarningMessages(const EcuWarningMessages& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : EcuWarningMessages
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~EcuWarningMessages();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[26]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * The flag to mark the presence of the element isCharging in the optional field.
 */
enum{asn_isCharging = 0};
/**
 * The flag to mark the presence of the element isPluggedIn in the optional field.
 */
enum{asn_isPluggedIn = 1};
/**
 * The flag to mark the presence of the element ElectricVehicleStatus__stateOfCharge in the optional field.
 */
enum{asn_ElectricVehicleStatus__stateOfCharge = 2};
/**
 * The flag to mark the presence of the element ElectricVehicleStatus__chargeLevel in the optional field.
 */
enum{asn_ElectricVehicleStatus__chargeLevel = 3};
/**
 * The flag to mark the presence of the element timeToFullyCharged in the optional field.
 */
enum{asn_timeToFullyCharged = 4};
/**
 * The flag to mark the presence of the element statusOfChargerConnection in the optional field.
 */
enum{asn_statusOfChargerConnection = 5};
/**
 * The flag to mark the presence of the element chargerState in the optional field.
 */
enum{asn_chargerState = 6};
/**
 * The flag to mark the presence of the element distanceToEmptyOnBatteryOnly in the optional field.
 */
enum{asn_distanceToEmptyOnBatteryOnly = 7};
/**
 * The flag to mark the presence of the element ems48VSOC in the optional field.
 */
enum{asn_ems48VSOC = 8};
/**
 * The flag to mark the presence of the element emsHVRBSError in the optional field.
 */
enum{asn_emsHVRBSError = 9};
/**
 * The flag to mark the presence of the element emsBMSLBuildSwVersion in the optional field.
 */
enum{asn_emsBMSLBuildSwVersion = 10};
/**
 * The flag to mark the presence of the element chargeHvSts in the optional field.
 */
enum{asn_chargeHvSts = 11};
/**
 * The flag to mark the presence of the element ptReady in the optional field.
 */
enum{asn_ptReady = 12};
/**
 * The flag to mark the presence of the element averPowerConsumption in the optional field.
 */
enum{asn_averPowerConsumption = 13};
/**
 * The flag to mark the presence of the element chargeSts in the optional field.
 */
enum{asn_chargeSts = 14};
/**
 * Class representing the ElectricVehicleStatus type.
 * <BR>Status for electrical or hybrid vehicle.
 */
class ElectricVehicleStatus : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_isCharging} to set the presence in the optional field.
       */
      asnBOOL isCharging;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_isPluggedIn} to set the presence in the optional field.
       */
      asnBOOL isPluggedIn;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_ElectricVehicleStatus__stateOfCharge} to set the presence in the optional field.
       */
      asnMAXSINT stateOfCharge;
      /**
       * <BR> status, e.g. empty, low, normal, high, etc.
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_ElectricVehicleStatus__chargeLevel} to set the presence in the optional field.
       */
      asnMAXSINT chargeLevel;
      /**
       * <BR> the charge percentage
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_timeToFullyCharged} to set the presence in the optional field.
       */
      asnMAXSINT timeToFullyCharged;
      /**
       * <BR> unit is defined according vehicle model
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_statusOfChargerConnection} to set the presence in the optional field.
       */
      asnMAXSINT statusOfChargerConnection;
      /**
       * <BR> Disconnected, ConnectedWithoutPower etc.
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_chargerState} to set the presence in the optional field.
       */
      asnMAXSINT chargerState;
      /**
       * <BR> idle, PreStrt etc.
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_distanceToEmptyOnBatteryOnly} to set the presence in the optional field.
       */
      asnMAXSINT distanceToEmptyOnBatteryOnly;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_ems48VSOC} to set the presence in the optional field.
       */
      asnMAXSINT ems48VSOC;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_emsHVRBSError} to set the presence in the optional field.
       */
      asnMAXSINT emsHVRBSError;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT emsRBSModeDisplay;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT emsOVPActive;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT ems48vPackTemp1;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT ems48vPackTemp2;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_emsBMSLBuildSwVersion} to set the presence in the optional field.
       */
      asnOctetString emsBMSLBuildSwVersion;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT emsCBRemainingLife;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_chargeHvSts} to set the presence in the optional field.
       */
      asnMAXSINT chargeHvSts;
      /**
       * <BR> 0x0: Undefined, 0x1: Failed, 0x2: Successful, 0x3: Reserved
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_ptReady} to set the presence in the optional field.
       */
      asnMAXSINT ptReady;
      /**
       * <BR> 0x0: PTReady Not Active, 0x1: PTReady Active
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_averPowerConsumption} to set the presence in the optional field.
       */
      asnMAXSINT averPowerConsumption;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_chargeSts} to set the presence in the optional field.
       */
      asnMAXSINT chargeSts;

      /**
       * Default constructor.
       */
      ElectricVehicleStatus();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const ElectricVehicleStatus&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      ElectricVehicleStatus(const ElectricVehicleStatus& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      ElectricVehicleStatus(const ElectricVehicleStatus& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : ElectricVehicleStatus
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~ElectricVehicleStatus();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[28]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[2];
};


/**
 * The flag to mark the presence of the element collectTime in the optional field.
 */
enum{asn_collectTime = 0};
/**
 * The flag to mark the presence of the element value in the optional field.
 */
enum{asn_value = 1};
/**
 * The flag to mark the presence of the element GenericVehicleSignal__stringVal in the optional field.
 */
enum{asn_GenericVehicleSignal__stringVal = 2};
/**
 * The flag to mark the presence of the element GenericVehicleSignal__boolVal in the optional field.
 */
enum{asn_GenericVehicleSignal__boolVal = 3};
/**
 * The flag to mark the presence of the element GenericVehicleSignal__timestampVal in the optional field.
 */
enum{asn_GenericVehicleSignal__timestampVal = 4};
/**
 * The flag to mark the presence of the element GenericVehicleSignal__dataVal in the optional field.
 */
enum{asn_GenericVehicleSignal__dataVal = 5};
/**
 * Class representing the GenericVehicleSignal type.
 */
class GenericVehicleSignal : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString key;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_collectTime} to set the presence in the optional field.
       */
      TimeStamp * collectTime;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_value} to set the presence in the optional field.
       */
      asnMAXSINT value;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_GenericVehicleSignal__stringVal} to set the presence in the optional field.
       */
      asnOctetString stringVal;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_GenericVehicleSignal__boolVal} to set the presence in the optional field.
       */
      asnBOOL boolVal;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_GenericVehicleSignal__timestampVal} to set the presence in the optional field.
       */
      TimeStamp * timestampVal;
      /**
       * <br>An OCTET STRING value.
       * <BR>Optional field: use {@link #asn_GenericVehicleSignal__dataVal} to set the presence in the optional field.
       */
      asnOctetString dataVal;

      /**
       * Default constructor.
       */
      GenericVehicleSignal();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const GenericVehicleSignal&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      GenericVehicleSignal(const GenericVehicleSignal& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      GenericVehicleSignal(const GenericVehicleSignal& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : GenericVehicleSignal
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~GenericVehicleSignal();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[27]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element mainBatteryStatus in the optional field.
 */
enum{asn_mainBatteryStatus = 0};
/**
 * The flag to mark the presence of the element tyreStatusDriver in the optional field.
 */
enum{asn_tyreStatusDriver = 1};
/**
 * The flag to mark the presence of the element tyreStatusPassenger in the optional field.
 */
enum{asn_tyreStatusPassenger = 2};
/**
 * The flag to mark the presence of the element tyreStatusDriverRear in the optional field.
 */
enum{asn_tyreStatusDriverRear = 3};
/**
 * The flag to mark the presence of the element tyreStatusPassengerRear in the optional field.
 */
enum{asn_tyreStatusPassengerRear = 4};
/**
 * The flag to mark the presence of the element tyrePreWarningDriver in the optional field.
 */
enum{asn_tyrePreWarningDriver = 5};
/**
 * The flag to mark the presence of the element tyrePreWarningPassenger in the optional field.
 */
enum{asn_tyrePreWarningPassenger = 6};
/**
 * The flag to mark the presence of the element tyrePreWarningDriverRear in the optional field.
 */
enum{asn_tyrePreWarningDriverRear = 7};
/**
 * The flag to mark the presence of the element tyrePreWarningPassengerRear in the optional field.
 */
enum{asn_tyrePreWarningPassengerRear = 8};
/**
 * The flag to mark the presence of the element engineHrsToService in the optional field.
 */
enum{asn_engineHrsToService = 9};
/**
 * The flag to mark the presence of the element distanceToService in the optional field.
 */
enum{asn_distanceToService = 10};
/**
 * The flag to mark the presence of the element daysToService in the optional field.
 */
enum{asn_daysToService = 11};
/**
 * The flag to mark the presence of the element serviceWarningStatus in the optional field.
 */
enum{asn_serviceWarningStatus = 12};
/**
 * The flag to mark the presence of the element serviceWarningTrigger in the optional field.
 */
enum{asn_serviceWarningTrigger = 13};
/**
 * The flag to mark the presence of the element MaintenanceStatus__odometer in the optional field.
 */
enum{asn_MaintenanceStatus__odometer = 14};
/**
 * The flag to mark the presence of the element brakeFluidLevelStatus in the optional field.
 */
enum{asn_brakeFluidLevelStatus = 15};
/**
 * The flag to mark the presence of the element washerFluidLevelStatus in the optional field.
 */
enum{asn_washerFluidLevelStatus = 16};
/**
 * Class representing the MaintenanceStatus type.
 * <BR> 0x0: valid, 0x1: Invalid
 */
class MaintenanceStatus : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A SEQUENCE value.
       * See {@link BatteryStatus} for more informations.
       * <BR>Optional field: use {@link #asn_mainBatteryStatus} to set the presence in the optional field.
       */
      BatteryStatus * mainBatteryStatus;
      /**
       * <BR> Vehicle battery status
       * <BR> tyre pressure
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_tyreStatusDriver} to set the presence in the optional field.
       */
      asnMAXSINT tyreStatusDriver;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_tyreStatusPassenger} to set the presence in the optional field.
       */
      asnMAXSINT tyreStatusPassenger;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_tyreStatusDriverRear} to set the presence in the optional field.
       */
      asnMAXSINT tyreStatusDriverRear;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_tyreStatusPassengerRear} to set the presence in the optional field.
       */
      asnMAXSINT tyreStatusPassengerRear;
      /**
       * <BR> tyre pressure warning, e.g. normal, high, low-soft-warning, low-hard-warning,
       *  unknown, etc.
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_tyrePreWarningDriver} to set the presence in the optional field.
       */
      asnMAXSINT tyrePreWarningDriver;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_tyrePreWarningPassenger} to set the presence in the optional field.
       */
      asnMAXSINT tyrePreWarningPassenger;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_tyrePreWarningDriverRear} to set the presence in the optional field.
       */
      asnMAXSINT tyrePreWarningDriverRear;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_tyrePreWarningPassengerRear} to set the presence in the optional field.
       */
      asnMAXSINT tyrePreWarningPassengerRear;
      /**
       * <BR> engine hours to next service
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_engineHrsToService} to set the presence in the optional field.
       */
      asnMAXSINT engineHrsToService;
      /**
       * <BR> distance in KM to next service
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_distanceToService} to set the presence in the optional field.
       */
      asnMAXSINT distanceToService;
      /**
       * <BR> km
       * <BR> days to next service
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_daysToService} to set the presence in the optional field.
       */
      asnMAXSINT daysToService;
      /**
       * <BR> service warning status, e.g. normal(no need for service),
       *  almost-time-for-service, time-for-service, time-exceeded, unknown, etc.
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_serviceWarningStatus} to set the presence in the optional field.
       */
      asnMAXSINT serviceWarningStatus;
      /**
       * <BR> the reason for service, e.g. calendar, distance, engine hours, engine request,
       *  etc.
       * <br>An ENUMERATED value.
       * Use the following enumeration values :
       * <BR>{@link #calendar}
       * <BR>{@link #distance}
       * <BR>{@link #engineHours}
       * <BR>{@link #engineRequest}
       * <BR>{@link #other}
       * <BR>Optional field: use {@link #asn_serviceWarningTrigger} to set the presence in the optional field.
       */
      asnMAXSINT serviceWarningTrigger;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_MaintenanceStatus__odometer} to set the presence in the optional field.
       */
      asnMAXSINT odometer;
      /**
       * <BR> meter, distance in total
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_brakeFluidLevelStatus} to set the presence in the optional field.
       */
      asnMAXSINT brakeFluidLevelStatus;
      /**
       * <BR> the brake fluid level status, e.g. normal, low, high, etc.
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_washerFluidLevelStatus} to set the presence in the optional field.
       */
      asnMAXSINT washerFluidLevelStatus;

      /**
       * Default constructor.
       */
      MaintenanceStatus();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const MaintenanceStatus&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      MaintenanceStatus(const MaintenanceStatus& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      MaintenanceStatus(const MaintenanceStatus& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : MaintenanceStatus
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~MaintenanceStatus();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[20]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[3];
};


/**
 * The flag to mark the presence of the element simInfo in the optional field.
 */
enum{asn_simInfo = 0};
/**
 * The flag to mark the presence of the element mobileNetwork in the optional field.
 */
enum{asn_mobileNetwork = 1};
/**
 * Class representing the NetworkAccessStatus type.
 */
class NetworkAccessStatus : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A SEQUENCE value.
       * See {@link SIMInfo} for more informations.
       * <BR>Optional field: use {@link #asn_simInfo} to set the presence in the optional field.
       */
      SIMInfo * simInfo;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_mobileNetwork} to set the presence in the optional field.
       */
      asnOctetString mobileNetwork;

      /**
       * Default constructor.
       */
      NetworkAccessStatus();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const NetworkAccessStatus&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      NetworkAccessStatus(const NetworkAccessStatus& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      NetworkAccessStatus(const NetworkAccessStatus& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : NetworkAccessStatus
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~NetworkAccessStatus();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[34]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element vehicleType in the optional field.
 */
enum{asn_vehicleType = 0};
/**
 * The flag to mark the presence of the element OEMMSD__vin in the optional field.
 */
enum{asn_OEMMSD__vin = 1};
/**
 * The flag to mark the presence of the element numberOfPassengers in the optional field.
 */
enum{asn_numberOfPassengers = 2};
/**
 * The flag to mark the presence of the element recentPositions in the optional field.
 */
enum{asn_recentPositions = 3};
/**
 * The flag to mark the presence of the element speed in the optional field.
 */
enum{asn_speed = 4};
/**
 * The flag to mark the presence of the element OEMMSD__speedValidity in the optional field.
 */
enum{asn_OEMMSD__speedValidity = 5};
/**
 * The flag to mark the presence of the element OEMMSD__signals in the optional field.
 */
enum{asn_OEMMSD__signals = 6};
/**
 * Class representing the OEMMSD type.
 * <BR> only for CMA car
 * <BR> The OEM MSD for the emergency call
 */
class OEMMSD : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A BOOLEAN value.
       */
      asnBOOL automaticActivation;
      /**
       * <BR> Activation type: true - automatic call, false - manual call
       * <br>A BOOLEAN value.
       */
      asnBOOL testCall;
      /**
       * <BR> Call type: true - test call, false emergency call
       * <br>A SEQUENCE value.
       * See {@link Position} for more informations.
       */
      Position * position;
      /**
       * <br>An INTEGER value.
       * Use the following values :
       * <BR>{@link #passengerVehicle}
       * <BR>{@link #bus}
       * <BR>{@link #cargo}
       * <BR>{@link #motorCycle}
       * <BR>Optional field: use {@link #asn_vehicleType} to set the presence in the optional field.
       */
      asnMAXSINT vehicleType;
      /**
       * <BR> vehicle type, e.g. passenger vehicle, bus, cargo vehicle, motor cycle, etc, in 
       *  CSP this is passenger vehicle as always
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_OEMMSD__vin} to set the presence in the optional field.
       */
      asnOctetString vin;
      /**
       * <br>An INTEGER value.
       * Use the following values :
       * <BR>{@link #petrol}
       * <BR>{@link #diesel}
       * <BR>{@link #petrolHybrid}
       * <BR>{@link #dieselHybrid}
       * <BR>{@link #ev}
       * <BR>{@link #hydrogenFuelcellEV}
       * <BR>{@link #compressedGas}
       * <BR>{@link #liquefiedPropaneGas}
       * <BR>{@link #FuelType__invalid}
       */
      asnMAXSINT fuelType;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT direction;
      /**
       * <BR> 0 means North, clockwise
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_numberOfPassengers} to set the presence in the optional field.
       */
      asnMAXSINT numberOfPassengers;
      /**
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncrecentPositionss}.
       * <BR>Optional field: use {@link #asn_recentPositions} to set the presence in the optional field.
       */
      asnList recentPositions; //elements are of class asncrecentPositionss
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_speed} to set the presence in the optional field.
       */
      asnMAXSINT speed;
      /**
       * <BR> kmph
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_OEMMSD__speedValidity} to set the presence in the optional field.
       */
      asnMAXSINT speedValidity;
      /**
       * <BR> 0x0: valid, 0x1: Invalid
       * <br>Elements of this SET OF type.
       * <BR>Elements are of class {@link #asncOEMMSD__signalss}.
       * <BR>Optional field: use {@link #asn_OEMMSD__signals} to set the presence in the optional field.
       */
      asnList signals; //elements are of class asncOEMMSD__signalss

      /**
       * Default constructor.
       */
      OEMMSD();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const OEMMSD&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      OEMMSD(const OEMMSD& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      OEMMSD(const OEMMSD& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : OEMMSD
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~OEMMSD();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[30]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element interiorPM25 in the optional field.
 */
enum{asn_interiorPM25 = 0};
/**
 * The flag to mark the presence of the element exteriorPM25 in the optional field.
 */
enum{asn_exteriorPM25 = 1};
/**
 * Class representing the PollutionStatus type.
 */
class PollutionStatus : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <BR> -1 means invalid
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_interiorPM25} to set the presence in the optional field.
       */
      asnMAXSINT interiorPM25;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_exteriorPM25} to set the presence in the optional field.
       */
      asnMAXSINT exteriorPM25;

      /**
       * Default constructor.
       */
      PollutionStatus();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const PollutionStatus&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      PollutionStatus(const PollutionStatus& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      PollutionStatus(const PollutionStatus& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : PollutionStatus
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~PollutionStatus();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[25]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element engineOilLevelStatus in the optional field.
 */
enum{asn_engineOilLevelStatus = 0};
/**
 * The flag to mark the presence of the element engineOilTemperature in the optional field.
 */
enum{asn_engineOilTemperature = 1};
/**
 * The flag to mark the presence of the element engineOilPressureWarning in the optional field.
 */
enum{asn_engineOilPressureWarning = 2};
/**
 * The flag to mark the presence of the element engineCoolantTemperature in the optional field.
 */
enum{asn_engineCoolantTemperature = 3};
/**
 * The flag to mark the presence of the element engineCoolantTemperatureValidity in the optional field.
 */
enum{asn_engineCoolantTemperatureValidity = 4};
/**
 * The flag to mark the presence of the element engineCoolantLevelStatus in the optional field.
 */
enum{asn_engineCoolantLevelStatus = 5};
/**
 * The flag to mark the presence of the element fuelLevel in the optional field.
 */
enum{asn_fuelLevel = 6};
/**
 * The flag to mark the presence of the element fuelLevelStatus in the optional field.
 */
enum{asn_fuelLevelStatus = 7};
/**
 * The flag to mark the presence of the element aveFuelConsumption in the optional field.
 */
enum{asn_aveFuelConsumption = 8};
/**
 * The flag to mark the presence of the element aveFuelConsumptionInLatestDrivingCycle in the optional field.
 */
enum{asn_aveFuelConsumptionInLatestDrivingCycle = 9};
/**
 * The flag to mark the presence of the element avgSpeed in the optional field.
 */
enum{asn_avgSpeed = 10};
/**
 * The flag to mark the presence of the element tripMeter1 in the optional field.
 */
enum{asn_tripMeter1 = 11};
/**
 * The flag to mark the presence of the element tripMeter2 in the optional field.
 */
enum{asn_tripMeter2 = 12};
/**
 * The flag to mark the presence of the element bulbStatus in the optional field.
 */
enum{asn_bulbStatus = 13};
/**
 * Class representing the RunningStatus type.
 * <BR> indicate washer fluid level low or not low
 */
class RunningStatus : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <BR> the engine oil level status, e.g. overfilled, high,  ok, low, veryLow
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_engineOilLevelStatus} to set the presence in the optional field.
       */
      asnMAXSINT engineOilLevelStatus;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_engineOilTemperature} to set the presence in the optional field.
       */
      asnMAXSINT engineOilTemperature;
      /**
       * <BR> the engine oil pressure, e.g. normal, low
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_engineOilPressureWarning} to set the presence in the optional field.
       */
      asnMAXSINT engineOilPressureWarning;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_engineCoolantTemperature} to set the presence in the optional field.
       */
      asnMAXSINT engineCoolantTemperature;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_engineCoolantTemperatureValidity} to set the presence in the optional field.
       */
      asnMAXSINT engineCoolantTemperatureValidity;
      /**
       * <BR> 0x0: valid, 0x1: Invalid 
       * <BR> the engine coolant level status, e.g. normal, low, high, etc.
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_engineCoolantLevelStatus} to set the presence in the optional field.
       */
      asnMAXSINT engineCoolantLevelStatus;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_fuelLevel} to set the presence in the optional field.
       */
      asnMAXSINT fuelLevel;
      /**
       * <BR> fuel level in liters or percentage
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_fuelLevelStatus} to set the presence in the optional field.
       */
      asnMAXSINT fuelLevelStatus;
      /**
       * <BR>   
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_aveFuelConsumption} to set the presence in the optional field.
       */
      asnMAXSINT aveFuelConsumption;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_aveFuelConsumptionInLatestDrivingCycle} to set the presence in the optional field.
       */
      asnMAXSINT aveFuelConsumptionInLatestDrivingCycle;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_avgSpeed} to set the presence in the optional field.
       */
      asnMAXSINT avgSpeed;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_tripMeter1} to set the presence in the optional field.
       */
      asnMAXSINT tripMeter1;
      /**
       * <BR> meter
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_tripMeter2} to set the presence in the optional field.
       */
      asnMAXSINT tripMeter2;
      /**
       * <BR> meter
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_bulbStatus} to set the presence in the optional field.
       */
      asnMAXSINT bulbStatus;

      /**
       * Default constructor.
       */
      RunningStatus();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const RunningStatus&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      RunningStatus(const RunningStatus& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      RunningStatus(const RunningStatus& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : RunningStatus
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~RunningStatus();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[22]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[2];
};


/**
 * The flag to mark the presence of the element msisdn in the optional field.
 */
enum{asn_msisdn = 0};
/**
 * The flag to mark the presence of the element imsi in the optional field.
 */
enum{asn_imsi = 1};
/**
 * The flag to mark the presence of the element iccId in the optional field.
 */
enum{asn_iccId = 2};
/**
 * Class representing the SIMInfo type.
 * <BR> 2G/3G/4G/wifi
 */
class SIMInfo : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_msisdn} to set the presence in the optional field.
       */
      asnOctetString msisdn;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_imsi} to set the presence in the optional field.
       */
      asnOctetString imsi;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_iccId} to set the presence in the optional field.
       */
      asnOctetString iccId;

      /**
       * Default constructor.
       */
      SIMInfo();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const SIMInfo&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      SIMInfo(const SIMInfo& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      SIMInfo(const SIMInfo& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : SIMInfo
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~SIMInfo();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[35]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element TEMStatus__vin in the optional field.
 */
enum{asn_TEMStatus__vin = 0};
/**
 * The flag to mark the presence of the element TEMStatus__backupBattery in the optional field.
 */
enum{asn_TEMStatus__backupBattery = 1};
/**
 * The flag to mark the presence of the element sleepCycleNextWakeupTime in the optional field.
 */
enum{asn_sleepCycleNextWakeupTime = 2};
/**
 * The flag to mark the presence of the element serviceProvisoned in the optional field.
 */
enum{asn_serviceProvisoned = 3};
/**
 * The flag to mark the presence of the element healthStatus in the optional field.
 */
enum{asn_healthStatus = 4};
/**
 * The flag to mark the presence of the element TEMStatus__diagnostics in the optional field.
 */
enum{asn_TEMStatus__diagnostics = 5};
/**
 * The flag to mark the presence of the element networkAccessStatus in the optional field.
 */
enum{asn_networkAccessStatus = 6};
/**
 * The flag to mark the presence of the element serialNumber in the optional field.
 */
enum{asn_serialNumber = 7};
/**
 * The flag to mark the presence of the element completeECUPartNumbers in the optional field.
 */
enum{asn_completeECUPartNumbers = 8};
/**
 * The flag to mark the presence of the element imei in the optional field.
 */
enum{asn_imei = 9};
/**
 * The flag to mark the presence of the element hwVersion in the optional field.
 */
enum{asn_hwVersion = 10};
/**
 * The flag to mark the presence of the element TEMStatus__swVersion in the optional field.
 */
enum{asn_TEMStatus__swVersion = 11};
/**
 * The flag to mark the presence of the element mpuVersion in the optional field.
 */
enum{asn_mpuVersion = 12};
/**
 * The flag to mark the presence of the element mcuVersion in the optional field.
 */
enum{asn_mcuVersion = 13};
/**
 * Class representing the TEMStatus type.
 */
class TEMStatus : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_TEMStatus__vin} to set the presence in the optional field.
       */
      asnOctetString vin;
      /**
       * <br>An INTEGER value.
       * Use the following values :
       * <BR>{@link #mainBattery}
       * <BR>{@link #PowerSource__backupBattery}
       */
      asnMAXSINT powerSource;
      /**
       * <br>A SEQUENCE value.
       * See {@link BatteryStatus} for more informations.
       * <BR>Optional field: use {@link #asn_TEMStatus__backupBattery} to set the presence in the optional field.
       */
      BatteryStatus * backupBattery;
      /**
       * <br>An ENUMERATED value.
       * Use the following enumeration values :
       * <BR>{@link #normal}
       * <BR>{@link #standby}
       * <BR>{@link #sleep_poll}
       * <BR>{@link #off}
       */
      asnMAXSINT powerMode;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_sleepCycleNextWakeupTime} to set the presence in the optional field.
       */
      TimeStamp * sleepCycleNextWakeupTime;
      /**
       * <BR> Thursday, 1 January 1970 means no information
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_serviceProvisoned} to set the presence in the optional field.
       */
      asnBOOL serviceProvisoned;
      /**
       * <BR> refer to the TEM provision, to sync the status between TEM and CSP 
       * <br>An INTEGER value.
       * Use the following values :
       * <BR>{@link #ok}
       * <BR>{@link #faulty}
       * <BR>{@link #HealthStatus__unknown}
       * <BR>{@link #HealthStatus__invalid}
       * <BR>Optional field: use {@link #asn_healthStatus} to set the presence in the optional field.
       */
      asnMAXSINT healthStatus;
      /**
       * <br>A SEQUENCE value.
       * See {@link ECUDiagnostic} for more informations.
       * <BR>Optional field: use {@link #asn_TEMStatus__diagnostics} to set the presence in the optional field.
       */
      ECUDiagnostic * diagnostics;
      /**
       * <BR> for TEM DTC codes
       * <br>A SEQUENCE value.
       * See {@link NetworkAccessStatus} for more informations.
       * <BR>Optional field: use {@link #asn_networkAccessStatus} to set the presence in the optional field.
       */
      NetworkAccessStatus * networkAccessStatus;
      /**
       * <BR> the network access information
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_serialNumber} to set the presence in the optional field.
       */
      asnOctetString serialNumber;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_completeECUPartNumbers} to set the presence in the optional field.
       */
      asnOctetString completeECUPartNumbers;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_imei} to set the presence in the optional field.
       */
      asnOctetString imei;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_hwVersion} to set the presence in the optional field.
       */
      asnOctetString hwVersion;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_TEMStatus__swVersion} to set the presence in the optional field.
       */
      asnOctetString swVersion;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_mpuVersion} to set the presence in the optional field.
       */
      asnOctetString mpuVersion;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_mcuVersion} to set the presence in the optional field.
       */
      asnOctetString mcuVersion;

      /**
       * Default constructor.
       */
      TEMStatus();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const TEMStatus&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      TEMStatus(const TEMStatus& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      TEMStatus(const TEMStatus& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : TEMStatus
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~TEMStatus();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[31]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[2];
};


/**
 * Class representing the TheftNotification type.
 */
class TheftNotification : public asntype
{
   public:
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       */
      TimeStamp * time;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT activated;

      /**
       * Default constructor.
       */
      TheftNotification();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const TheftNotification&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      TheftNotification(const TheftNotification& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      TheftNotification(const TheftNotification& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : TheftNotification
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~TheftNotification();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[37]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * The flag to mark the presence of the element basicVehicleStatus in the optional field.
 */
enum{asn_basicVehicleStatus = 0};
/**
 * The flag to mark the presence of the element additionalVehicleStatus in the optional field.
 */
enum{asn_additionalVehicleStatus = 1};
/**
 * The flag to mark the presence of the element msd in the optional field.
 */
enum{asn_msd = 2};
/**
 * The flag to mark the presence of the element temStatus in the optional field.
 */
enum{asn_temStatus = 3};
/**
 * The flag to mark the presence of the element VehicleStatus__diagnostics in the optional field.
 */
enum{asn_VehicleStatus__diagnostics = 4};
/**
 * The flag to mark the presence of the element theftNotification in the optional field.
 */
enum{asn_theftNotification = 5};
/**
 * The flag to mark the presence of the element notification in the optional field.
 */
enum{asn_notification = 6};
/**
 * Class representing the VehicleStatus type.
 * <BR>  the device status definition for vehicle telematics
 */
class VehicleStatus : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A SEQUENCE value.
       * See {@link BasicVehicleStatus} for more informations.
       * <BR>Optional field: use {@link #asn_basicVehicleStatus} to set the presence in the optional field.
       */
      BasicVehicleStatus * basicVehicleStatus;
      /**
       * <BR> the basic vehicle status
       * <br>A SEQUENCE value.
       * See {@link AdditionalVehicleStatus} for more informations.
       * <BR>Optional field: use {@link #asn_additionalVehicleStatus} to set the presence in the optional field.
       */
      AdditionalVehicleStatus * additionalVehicleStatus;
      /**
       * <BR> the additional vehicle status
       * <br>A SEQUENCE value.
       * See {@link OEMMSD} for more informations.
       * <BR>Optional field: use {@link #asn_msd} to set the presence in the optional field.
       */
      OEMMSD * msd;
      /**
       * <BR> Minimal Set of Data
       * <br>A SEQUENCE value.
       * See {@link TEMStatus} for more informations.
       * <BR>Optional field: use {@link #asn_temStatus} to set the presence in the optional field.
       */
      TEMStatus * temStatus;
      /**
       * <BR> the TEM status
       * <br>Elements of this SET OF type.
       * <BR>Elements are of class {@link #asncECUDiagnosticss}.
       * <BR>Optional field: use {@link #asn_VehicleStatus__diagnostics} to set the presence in the optional field.
       */
      asnList diagnostics;
      /**
       * <BR> Diagnostic Information for ECU
       * <br>A SEQUENCE value.
       * See {@link TheftNotification} for more informations.
       * <BR>Optional field: use {@link #asn_theftNotification} to set the presence in the optional field.
       */
      TheftNotification * theftNotification;
      /**
       * <BR> the theft notification
       * <br>A SEQUENCE value.
       * See {@link Notification} for more informations.
       * <BR>Optional field: use {@link #asn_notification} to set the presence in the optional field.
       */
      Notification * notification;

      /**
       * Default constructor.
       */
      VehicleStatus();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const VehicleStatus&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      VehicleStatus(const VehicleStatus& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      VehicleStatus(const VehicleStatus& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : VehicleStatus
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~VehicleStatus();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[15]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


