/*
Copyright (C) 1999-2011 Marben Products. All rights reserved.

THIS FILE IS PROPRIETARY MATERIAL OF MARBEN PRODUCTS.
AND MAY BE USED ONLY BY DIRECT LICENSEES OF ASNSDK PRODUCT.
THIS FILE MAY NOT BE DISTRIBUTED.

===========================================================================

asnctor.cc: C++ API constructor methods

Generated by ASNSDK TCE-C++ ASN.1 Compiler v6.0 - REF_8.55 - REF_8.41

===========================================================================
*/

/**@file
 * C++ API constructor methods
 */

#include <asn.h>

namespace asn_wrapper
{
asntype * RequestBody::__create() {return asnCppNew RequestBody();}
asntype * asncServiceData__serviceParameterss::__create() {return asnCppNew asncServiceData__serviceParameterss();}
asntype * asncattributess::__create() {return asnCppNew asncattributess();}
asntype * asncpoiss::__create() {return asnCppNew asncpoiss();}
asntype * asncConfigurationItem__parameterss::__create() {return asnCppNew asncConfigurationItem__parameterss();}
asntype * asncConfiguration__itemss::__create() {return asnCppNew asncConfiguration__itemss();}
asntype * asncFragStrs__itemss::__create() {return asnCppNew asncFragStrs__itemss();}
asntype * asncdtcss::__create() {return asnCppNew asncdtcss();}
asntype * asncconnectEstablishedLists::__create() {return asnCppNew asncconnectEstablishedLists();}
asntype * asnclostConnectionsLists::__create() {return asnCppNew asnclostConnectionsLists();}
asntype * asncCarConfig__itemss::__create() {return asnCppNew asncCarConfig__itemss();}
asntype * asncAdditionalStatus__signalss::__create() {return asnCppNew asncAdditionalStatus__signalss();}
asntype * asncrecentPositionss::__create() {return asnCppNew asncrecentPositionss();}
asntype * asncOEMMSD__signalss::__create() {return asnCppNew asncOEMMSD__signalss();}
asntype * asncNotification__parameterss::__create() {return asnCppNew asncNotification__parameterss();}
asntype * asncpartIdentifierss::__create() {return asnCppNew asncpartIdentifierss();}
asntype * asncvalidationKeyss::__create() {return asnCppNew asncvalidationKeyss();}
asntype * asncecuInventorys::__create() {return asnCppNew asncecuInventorys();}
asntype * asncInventoryInstruction__ecuInstructionss::__create() {return asnCppNew asncInventoryInstruction__ecuInstructionss();}
asntype * asncsoftwarePartInstallationInstructionss::__create() {return asnCppNew asncsoftwarePartInstallationInstructionss();}
asntype * asncInstruction__ecuInstructionss::__create() {return asnCppNew asncInstruction__ecuInstructionss();}
asntype * asncpartidentifierss::__create() {return asnCppNew asncpartidentifierss();}
asntype * asncassignmentValidationss::__create() {return asnCppNew asncassignmentValidationss();}
asntype * asncinstructionss::__create() {return asnCppNew asncinstructionss();}
asntype * asncsoftwarePartSummaryss::__create() {return asnCppNew asncsoftwarePartSummaryss();}
asntype * asncecuSummaryss::__create() {return asnCppNew asncecuSummaryss();}
asntype * asncexceptionReportss::__create() {return asnCppNew asncexceptionReportss();}
asntype * asncurlss::__create() {return asnCppNew asncurlss();}
asntype * asncserviceParamss::__create() {return asnCppNew asncserviceParamss();}
asntype * asncassignFileInfoss::__create() {return asnCppNew asncassignFileInfoss();}
asntype * asncRvdcSetting__serviceParameterss::__create() {return asnCppNew asncRvdcSetting__serviceParameterss();}
asntype * asncinstalledMas::__create() {return asnCppNew asncinstalledMas();}
asntype * asncMaSynchronizationReq__serviceParameterss::__create() {return asnCppNew asncMaSynchronizationReq__serviceParameterss();}
asntype * asncremoveMass::__create() {return asnCppNew asncremoveMass();}
asntype * asncdiagnosticCommandss::__create() {return asnCppNew asncdiagnosticCommandss();}
asntype * asncecusAndPartNumberss::__create() {return asnCppNew asncecusAndPartNumberss();}
asntype * asncdiagnosticCommands::__create() {return asnCppNew asncdiagnosticCommands();}
asntype * asncMeasurementAssignment__serviceParameterss::__create() {return asnCppNew asncMeasurementAssignment__serviceParameterss();}
asntype * asncnewMass::__create() {return asnCppNew asncnewMass();}
asntype * asncMaSynchronization__serviceParameterss::__create() {return asnCppNew asncMaSynchronization__serviceParameterss();}
asntype * asncMeasurementDataPackage__serviceParameterss::__create() {return asnCppNew asncMeasurementDataPackage__serviceParameterss();}
asntype * asnctrackpointss::__create() {return asnCppNew asnctrackpointss();}
asntype * asncwaypointss::__create() {return asnCppNew asncwaypointss();}
asntype * asnctripFragmentss::__create() {return asnCppNew asnctripFragmentss();}
asntype * asnctrackPointss::__create() {return asnCppNew asnctrackPointss();}
asntype * asncdidDatas::__create() {return asnCppNew asncdidDatas();}
asntype * asncdtcDatas::__create() {return asnCppNew asncdtcDatas();}
asntype * asncdatas::__create() {return asnCppNew asncdatas();}
asntype * asncconditionss::__create() {return asnCppNew asncconditionss();}
asntype * asnctimerss::__create() {return asnCppNew asnctimerss();}
asntype * RequestHeader::__create() {return asnCppNew RequestHeader();}
asntype * TimeStamp::__create() {return asnCppNew TimeStamp();}
asntype * VDServiceRequest::__create() {return asnCppNew VDServiceRequest();}
asntype * AssignmentData::__create() {return asnCppNew AssignmentData();}
asntype * AssignmentFileInfo::__create() {return asnCppNew AssignmentFileInfo();}
asntype * AssignmentValidation::__create() {return asnCppNew AssignmentValidation();}
asntype * AuthorizationStatus::__create() {return asnCppNew AuthorizationStatus();}
asntype * AvailableAssignment::__create() {return asnCppNew AvailableAssignment();}
asntype * AvailableAssignmentRequest::__create() {return asnCppNew AvailableAssignmentRequest();}
asntype * ClientConfSyncRequest::__create() {return asnCppNew ClientConfSyncRequest();}
asntype * ClientHmiVehicleSettings::__create() {return asnCppNew ClientHmiVehicleSettings();}
asntype * DiagnosticCommand::__create() {return asnCppNew DiagnosticCommand();}
asntype * EcuExceptionReport::__create() {return asnCppNew EcuExceptionReport();}
asntype * EcuInstruction::__create() {return asnCppNew EcuInstruction();}
asntype * EcuInventory::__create() {return asnCppNew EcuInventory();}
asntype * EcuSummary::__create() {return asnCppNew EcuSummary();}
asntype * EcusAndPartNumber::__create() {return asnCppNew EcusAndPartNumber();}
asntype * ExceptionMessage::__create() {return asnCppNew ExceptionMessage();}
asntype * ExceptionReport::__create() {return asnCppNew ExceptionReport();}
asntype * ExecutionTrigger::__create() {return asnCppNew ExecutionTrigger();}
asntype * FOTA::__create() {return asnCppNew FOTA();}
asntype * FotaAssignmentNotification::__create() {return asnCppNew FotaAssignmentNotification();}
asntype * InstallationInstruction::__create() {return asnCppNew InstallationInstruction();}
asntype * InstallationSummary::__create() {return asnCppNew InstallationSummary();}
asntype * Instruction::__create() {return asnCppNew Instruction();}
asntype * InventoryInstruction::__create() {return asnCppNew InventoryInstruction();}
asntype * LanguageSetting::__create() {return asnCppNew LanguageSetting();}
asntype * Ma::__create() {return asnCppNew Ma();}
asntype * MaSetting::__create() {return asnCppNew MaSetting();}
asntype * MaSynchronization::__create() {return asnCppNew MaSynchronization();}
asntype * MaSynchronizationReq::__create() {return asnCppNew MaSynchronizationReq();}
asntype * Mdp::__create() {return asnCppNew Mdp();}
asntype * MeasurementAssignment::__create() {return asnCppNew MeasurementAssignment();}
asntype * MeasurementDataPackage::__create() {return asnCppNew MeasurementDataPackage();}
asntype * OtaAssignmentFileInfo::__create() {return asnCppNew OtaAssignmentFileInfo();}
asntype * RVDC::__create() {return asnCppNew RVDC();}
asntype * RvdcAssignmentNotification::__create() {return asnCppNew RvdcAssignmentNotification();}
asntype * RvdcExceptionHandling::__create() {return asnCppNew RvdcExceptionHandling();}
asntype * RvdcForcedSetting::__create() {return asnCppNew RvdcForcedSetting();}
asntype * RvdcSetting::__create() {return asnCppNew RvdcSetting();}
asntype * RvdcVehicleSetting::__create() {return asnCppNew RvdcVehicleSetting();}
asntype * SoftwarePartInstallationInstruction::__create() {return asnCppNew SoftwarePartInstallationInstruction();}
asntype * SoftwarePartSummary::__create() {return asnCppNew SoftwarePartSummary();}
asntype * StopCondition::__create() {return asnCppNew StopCondition();}
asntype * TelematicsParameters::__create() {return asnCppNew TelematicsParameters();}
asntype * Trigger::__create() {return asnCppNew Trigger();}
asntype * UDS::__create() {return asnCppNew UDS();}
asntype * ValidationKey::__create() {return asnCppNew ValidationKey();}
asntype * DIDData::__create() {return asnCppNew DIDData();}
asntype * DTCData::__create() {return asnCppNew DTCData();}
asntype * ECUData::__create() {return asnCppNew ECUData();}
asntype * EcuData__C::__create() {return asnCppNew EcuData__C(asnExtAlternative);}
asntype * asncnoDiagData::__create() {return asnCppNew asncnoDiagData();}
asntype * asncEcuData__data::__create() {return asnCppNew asncEcuData__data();}
asntype * EcuData::__create() {return asnCppNew EcuData();}
asntype * NEVCoordinatesLongLat::__create() {return asnCppNew NEVCoordinatesLongLat();}
asntype * NEVDRPositionData::__create() {return asnCppNew NEVDRPositionData();}
asntype * NEVDRVehiclePosition__C::__create() {return asnCppNew NEVDRVehiclePosition__C(asnExtAlternative);}
asntype * asncnoValidData::__create() {return asnCppNew asncnoValidData();}
asntype * asncdrPosition::__create() {return asnCppNew asncdrPosition();}
asntype * NEVDRVehiclePosition::__create() {return asnCppNew NEVDRVehiclePosition();}
asntype * NEVDateTime::__create() {return asnCppNew NEVDateTime();}
asntype * NEVServiceData::__create() {return asnCppNew NEVServiceData();}
asntype * Configuration::__create() {return asnCppNew Configuration();}
asntype * ConfigurationItem::__create() {return asnCppNew ConfigurationItem();}
asntype * ContactInfo::__create() {return asnCppNew ContactInfo();}
asntype * Error::__create() {return asnCppNew Error();}
asntype * EventAction::__create() {return asnCppNew EventAction();}
asntype * EventRule::__create() {return asnCppNew EventRule();}
asntype * GeneralMessage__C::__create() {return asnCppNew GeneralMessage__C(asnExtAlternative);}
asntype * asncGeneralMessage__message::__create() {return asnCppNew asncGeneralMessage__message();}
asntype * asncocetMessage::__create() {return asnCppNew asncocetMessage();}
asntype * GeneralMessage::__create() {return asnCppNew GeneralMessage();}
asntype * Notification::__create() {return asnCppNew Notification();}
asntype * OTA::__create() {return asnCppNew OTA();}
asntype * PointOfInterest::__create() {return asnCppNew PointOfInterest();}
asntype * Position::__create() {return asnCppNew Position();}
asntype * PostAddress::__create() {return asnCppNew PostAddress();}
asntype * RuleCondition::__create() {return asnCppNew RuleCondition();}
asntype * ServiceData::__create() {return asnCppNew ServiceData();}
asntype * ServiceParameter::__create() {return asnCppNew ServiceParameter();}
asntype * ServiceResult::__create() {return asnCppNew ServiceResult();}
asntype * ServiceStatus::__create() {return asnCppNew ServiceStatus();}
asntype * ServiceTrigger::__create() {return asnCppNew ServiceTrigger();}
asntype * TimerData::__create() {return asnCppNew TimerData();}
asntype * TimerInfo::__create() {return asnCppNew TimerInfo();}
asntype * TrackPoint::__create() {return asnCppNew TrackPoint();}
asntype * Trip::__create() {return asnCppNew Trip();}
asntype * TripFragment::__create() {return asnCppNew TripFragment();}
asntype * AdditionalStatus::__create() {return asnCppNew AdditionalStatus();}
asntype * BasicVehicleStatus::__create() {return asnCppNew BasicVehicleStatus();}
asntype * BatteryStatus::__create() {return asnCppNew BatteryStatus();}
asntype * CarConfig::__create() {return asnCppNew CarConfig();}
asntype * ClimateStatus::__create() {return asnCppNew ClimateStatus();}
asntype * ConfigurationAndIdentity::__create() {return asnCppNew ConfigurationAndIdentity();}
asntype * ConnectivityInfo::__create() {return asnCppNew ConnectivityInfo();}
asntype * ConnectivityStatus::__create() {return asnCppNew ConnectivityStatus();}
asntype * DiagnosticTroubleCode::__create() {return asnCppNew DiagnosticTroubleCode();}
asntype * ECUDiagnostic::__create() {return asnCppNew ECUDiagnostic();}
asntype * asncECUDiagnosticss::__create() {return asnCppNew asncECUDiagnosticss();}
asntype * ECUDiagnostics::__create() {return asnCppNew ECUDiagnostics();}
asntype * asncEcuWarningMessagess::__create() {return asnCppNew asncEcuWarningMessagess();}
asntype * EcuWarningMessages::__create() {return asnCppNew EcuWarningMessages();}
asntype * ElectricStatus::__create() {return asnCppNew ElectricStatus();}
asntype * FragItem::__create() {return asnCppNew FragItem();}
asntype * FragStrs::__create() {return asnCppNew FragStrs();}
asntype * GenericVehicleSignal::__create() {return asnCppNew GenericVehicleSignal();}
asntype * LockStatus::__create() {return asnCppNew LockStatus();}
asntype * MaintenanceStatus::__create() {return asnCppNew MaintenanceStatus();}
asntype * NetworkAccessStatus::__create() {return asnCppNew NetworkAccessStatus();}
asntype * OEMMSD::__create() {return asnCppNew OEMMSD();}
asntype * PollutionStatus::__create() {return asnCppNew PollutionStatus();}
asntype * RunningStatus::__create() {return asnCppNew RunningStatus();}
asntype * SIMInfo::__create() {return asnCppNew SIMInfo();}
asntype * TEMStatus::__create() {return asnCppNew TEMStatus();}
asntype * TheftNotification::__create() {return asnCppNew TheftNotification();}
asntype * TowStatus::__create() {return asnCppNew TowStatus();}
asntype * VehicleStatus::__create() {return asnCppNew VehicleStatus();}
/**
 *    TypeAssignment : RequestBody
 *    Class constructor
 */
RequestBody::RequestBody()
   :optional(3,&optionalField[0])
   ,serviceId()
   ,serviceData()
   ,seq()
{
}

/**
 *    TypeAssignment : RequestHeader
 *    Class constructor
 */
RequestHeader::RequestHeader()
   :optional(5,&optionalField[0])
   ,requestid()
   ,timeStamp()
   ,eventId()
   ,creatorId()
   ,messageTTL()
   ,requestType()
   ,ackRequired()
{
}

/**
 *    TypeAssignment : TimeStamp
 *    Class constructor
 */
TimeStamp::TimeStamp()
   :optional(1,&optionalField[0])
   ,seconds()
   ,milliseconds()
{
}

/**
 *    TypeAssignment : VDServiceRequest
 *    Class constructor
 */
VDServiceRequest::VDServiceRequest()
   :optional(1,&optionalField[0])
   ,header()
   ,body()
{
}

/**
 *    TypeAssignment : AssignmentData
 *    Class constructor
 */
asncurlss::asncurlss()
   : value()
{
}

AssignmentData::AssignmentData()
   :installationOrderId()
   ,timestamp()
   ,urls()
{
}

/**
 *    TypeAssignment : AssignmentFileInfo
 *    Class constructor
 */
AssignmentFileInfo::AssignmentFileInfo()
   :partidentifier()
   ,softwarePartSignature()
   ,fileCheckSum()
{
}

/**
 *    TypeAssignment : AssignmentValidation
 *    Class constructor
 */
asncpartidentifierss::asncpartidentifierss()
   : value()
{
}

AssignmentValidation::AssignmentValidation()
   :validationType()
   ,ecuAddress()
   ,validationkey()
   ,partidentifiers()
{
}

/**
 *    TypeAssignment : AuthorizationStatus
 *    Class constructor
 */
AuthorizationStatus::AuthorizationStatus()
   :optional(2,&optionalField[0])
   ,dataCollection()
   ,remoteDiagnostics()
{
}

/**
 *    TypeAssignment : AvailableAssignment
 *    Class constructor
 */
AvailableAssignment::AvailableAssignment()
   :optional(2,&optionalField[0])
   ,installationOrderId()
   ,timestamp()
   ,workshopInstallation()
   ,downloadsize()
   ,totalinstallationTime()
   ,newstatus()
   ,reason()
   ,name()
   ,shortDescription()
   ,longDescription()
{
}

/**
 *    TypeAssignment : AvailableAssignmentRequest
 *    Class constructor
 */
AvailableAssignmentRequest::AvailableAssignmentRequest()
   :languageSetting()
{
}

/**
 *    TypeAssignment : ClientConfSyncRequest
 *    Class constructor
 */
asncecuInventorys::asncecuInventorys()
   :optional(1,&optionalField[0])
   ,ecuAddress()
   ,validationKeys()
   ,exceptionMessage()
{
}

ClientConfSyncRequest::ClientConfSyncRequest()
   :optional(1,&optionalField[0])
   ,timestamp()
   ,clientVersion()
   ,ecuInventory()
{
}

/**
 *    TypeAssignment : ClientHmiVehicleSettings
 *    Class constructor
 */
ClientHmiVehicleSettings::ClientHmiVehicleSettings()
   :otaSetting()
   ,autoSync()
   ,autoDownload()
   ,autoInstallation()
{
}

/**
 *    TypeAssignment : DiagnosticCommand
 *    Class constructor
 */
DiagnosticCommand::DiagnosticCommand()
   :optional(2,&optionalField[0])
   ,ecuAddress()
   ,serviceId()
   ,input()
   ,compareType()
   ,compareValue()
   ,delayUntilNextTriggerCommand()
{
}

/**
 *    TypeAssignment : EcuExceptionReport
 *    Class constructor
 */
asncexceptionReportss::asncexceptionReportss()
   :optional(7,&optionalField[0])
   ,installationOrderId()
   ,timestamp()
   ,issuerId()
   ,clientConfigurationId()
   ,dataFileName()
   ,ecuAddress()
   ,validationKey()
   ,partIdentifier()
   ,dataBlockNumber()
   ,exceptionMessage()
{
}

EcuExceptionReport::EcuExceptionReport()
   :exceptionReportMsgRemaining()
   ,exceptionReports()
{
}

/**
 *    TypeAssignment : EcuInstruction
 *    Class constructor
 */
asncsoftwarePartInstallationInstructionss::asncsoftwarePartInstallationInstructionss()
   :partidentifier()
   ,estimatedInstallationtime()
{
}

EcuInstruction::EcuInstruction()
   :ecuAddress()
   ,queuedRequest()
   ,securityKey()
   ,softwarePartInstallationInstructions()
{
}

/**
 *    TypeAssignment : EcuInventory
 *    Class constructor
 */
asncvalidationKeyss::asncvalidationKeyss()
   :optional(1,&optionalField[0])
   ,validationKey()
   ,partIdentifiers()
{
}

EcuInventory::EcuInventory()
   :optional(1,&optionalField[0])
   ,ecuAddress()
   ,validationKeys()
   ,exceptionMessage()
{
}

/**
 *    TypeAssignment : EcuSummary
 *    Class constructor
 */
asncsoftwarePartSummaryss::asncsoftwarePartSummaryss()
   :partIdentifier()
   ,partRetries()
   ,measuredInstallationTime()
   ,softwarePartStatus()
{
}

EcuSummary::EcuSummary()
   :ecuAddress()
   ,ecuRetries()
   ,ecuStatus()
   ,softwarePartSummarys()
{
}

/**
 *    TypeAssignment : EcusAndPartNumber
 *    Class constructor
 */
EcusAndPartNumber::EcusAndPartNumber()
   :ecuAddress()
   ,diagnosticPartNumber()
{
}

/**
 *    TypeAssignment : ExceptionMessage
 *    Class constructor
 */
ExceptionMessage::ExceptionMessage()
   :activity()
   ,action()
   ,exception()
{
}

/**
 *    TypeAssignment : ExceptionReport
 *    Class constructor
 */
ExceptionReport::ExceptionReport()
   :optional(7,&optionalField[0])
   ,installationOrderId()
   ,timestamp()
   ,issuerId()
   ,clientConfigurationId()
   ,dataFileName()
   ,ecuAddress()
   ,validationKey()
   ,partIdentifier()
   ,dataBlockNumber()
   ,exceptionMessage()
{
}

/**
 *    TypeAssignment : ExecutionTrigger
 *    Class constructor
 */
ExecutionTrigger::ExecutionTrigger()
   :optional(3,&optionalField[0])
   ,push()
   ,uds()
   ,time()
   ,drivingCycle()
{
}

/**
 *    TypeAssignment : FOTA
 *    Class constructor
 */
FOTA::FOTA()
   :optional(11,&optionalField[0])
   ,appId()
   ,vin()
   ,dataType()
   ,clientConfSyncRequest()
   ,inventoryInstruction()
   ,availableAssignmentRequest()
   ,availableAssignment()
   ,installationInstruction()
   ,installationSummary()
   ,ecuExceptionReport()
   ,clientHmiVehicleSettings()
   ,assignmentData()
   ,assignmentNotification()
   ,otaAssignmentFileInfo()
{
}

/**
 *    TypeAssignment : FotaAssignmentNotification
 *    Class constructor
 */
asncserviceParamss::asncserviceParamss()
   :optional(5,&optionalField[0])
   ,key()
   ,intVal()
   ,stringVal()
   ,boolVal()
   ,timestampVal()
   ,dataVal()
{
}

FotaAssignmentNotification::FotaAssignmentNotification()
   :optional(4,&optionalField[0])
   ,installationOrderId()
   ,timestamp()
   ,newStatus()
   ,reason()
   ,deltaTime()
   ,serviceParams()
{
}

/**
 *    TypeAssignment : InstallationInstruction
 *    Class constructor
 */
asncinstructionss::asncinstructionss()
   :ecuRemaining()
   ,installationInstructionSversion()
   ,requiredPreparationTime()
   ,expectedInstallationTime()
   ,area1112SecurityCode()
   ,ecuInstructions()
   ,assignmentValidations()
{
}

InstallationInstruction::InstallationInstruction()
   :installationOrderId()
   ,instructions()
{
}

/**
 *    TypeAssignment : InstallationSummary
 *    Class constructor
 */
asncecuSummaryss::asncecuSummaryss()
   :ecuAddress()
   ,ecuRetries()
   ,ecuStatus()
   ,softwarePartSummarys()
{
}

InstallationSummary::InstallationSummary()
   :installationOrderId()
   ,timestamp()
   ,repeatresets()
   ,totalInstallationTime()
   ,ecuSummarys()
{
}

/**
 *    TypeAssignment : Instruction
 *    Class constructor
 */
asncInstruction__ecuInstructionss::asncInstruction__ecuInstructionss()
   :ecuAddress()
   ,queuedRequest()
   ,securityKey()
   ,softwarePartInstallationInstructions()
{
}

asncassignmentValidationss::asncassignmentValidationss()
   :validationType()
   ,ecuAddress()
   ,validationkey()
   ,partidentifiers()
{
}

Instruction::Instruction()
   :ecuRemaining()
   ,installationInstructionSversion()
   ,requiredPreparationTime()
   ,expectedInstallationTime()
   ,area1112SecurityCode()
   ,ecuInstructions()
   ,assignmentValidations()
{
}

/**
 *    TypeAssignment : InventoryInstruction
 *    Class constructor
 */
asncInventoryInstruction__ecuInstructionss::asncInventoryInstruction__ecuInstructionss()
   :optional(1,&optionalField[0])
   ,ecuAddress()
   ,validationKeys()
   ,exceptionMessage()
{
}

InventoryInstruction::InventoryInstruction()
   :inventoryInstructionVersion()
   ,ecuInstructions()
{
}

/**
 *    TypeAssignment : LanguageSetting
 *    Class constructor
 */
LanguageSetting::LanguageSetting()
   :language()
{
}

/**
 *    TypeAssignment : Ma
 *    Class constructor
 */
Ma::Ma()
   :maId()
   ,maVersion()
{
}

/**
 *    TypeAssignment : MaSetting
 *    Class constructor
 */
MaSetting::MaSetting()
   :collectFunction()
   ,authorizationStatus()
{
}

/**
 *    TypeAssignment : MaSynchronization
 *    Class constructor
 */
asncremoveMass::asncremoveMass()
   :maId()
   ,maVersion()
{
}

asncnewMass::asncnewMass()
   :optional(1,&optionalField[0])
   ,maId()
   ,maVersion()
   ,vin()
   ,maFormatVersion()
   ,maExecutionPriority()
   ,telematicsParameters()
   ,usageModesAllowed()
   ,startCondition()
   ,stopCondition()
   ,retentiondate()
   ,authorizationStatus()
   ,executionTrigger()
   ,ecusAndPartNumbers()
   ,diagnosticCommand()
   ,dataIntegrityCheck()
   ,serviceParameters()
{
}

asncMaSynchronization__serviceParameterss::asncMaSynchronization__serviceParameterss()
   :optional(5,&optionalField[0])
   ,key()
   ,intVal()
   ,stringVal()
   ,boolVal()
   ,timestampVal()
   ,dataVal()
{
}

MaSynchronization::MaSynchronization()
   :optional(3,&optionalField[0])
   ,removeMas()
   ,newMas()
   ,serviceParameters()
{
}

/**
 *    TypeAssignment : MaSynchronizationReq
 *    Class constructor
 */
asncinstalledMas::asncinstalledMas()
   :maId()
   ,maVersion()
{
}

asncMaSynchronizationReq__serviceParameterss::asncMaSynchronizationReq__serviceParameterss()
   :optional(5,&optionalField[0])
   ,key()
   ,intVal()
   ,stringVal()
   ,boolVal()
   ,timestampVal()
   ,dataVal()
{
}

MaSynchronizationReq::MaSynchronizationReq()
   :optional(2,&optionalField[0])
   ,storageQuota()
   ,maFormatVersion()
   ,installedMa()
   ,serviceParameters()
{
}

/**
 *    TypeAssignment : Mdp
 *    Class constructor
 */
Mdp::Mdp()
   :optional(1,&optionalField[0])
   ,mdpFormatVersion()
   ,vin()
   ,ma()
   ,sequenceNumber()
   ,timestampReadOutStart()
   ,udsTriggerId()
   ,diagnosticResponse()
{
}

/**
 *    TypeAssignment : MeasurementAssignment
 *    Class constructor
 */
asncecusAndPartNumberss::asncecusAndPartNumberss()
   :ecuAddress()
   ,diagnosticPartNumber()
{
}

asncdiagnosticCommands::asncdiagnosticCommands()
   :optional(2,&optionalField[0])
   ,ecuAddress()
   ,serviceId()
   ,input()
   ,compareType()
   ,compareValue()
   ,delayUntilNextTriggerCommand()
{
}

asncMeasurementAssignment__serviceParameterss::asncMeasurementAssignment__serviceParameterss()
   :optional(5,&optionalField[0])
   ,key()
   ,intVal()
   ,stringVal()
   ,boolVal()
   ,timestampVal()
   ,dataVal()
{
}

MeasurementAssignment::MeasurementAssignment()
   :optional(1,&optionalField[0])
   ,maId()
   ,maVersion()
   ,vin()
   ,maFormatVersion()
   ,maExecutionPriority()
   ,telematicsParameters()
   ,usageModesAllowed()
   ,startCondition()
   ,stopCondition()
   ,retentiondate()
   ,authorizationStatus()
   ,executionTrigger()
   ,ecusAndPartNumbers()
   ,diagnosticCommand()
   ,dataIntegrityCheck()
   ,serviceParameters()
{
}

/**
 *    TypeAssignment : MeasurementDataPackage
 *    Class constructor
 */
asncMeasurementDataPackage__serviceParameterss::asncMeasurementDataPackage__serviceParameterss()
   :optional(5,&optionalField[0])
   ,key()
   ,intVal()
   ,stringVal()
   ,boolVal()
   ,timestampVal()
   ,dataVal()
{
}

MeasurementDataPackage::MeasurementDataPackage()
   :optional(1,&optionalField[0])
   ,telematicsParameters()
   ,serviceParameters()
   ,mdp()
{
}

/**
 *    TypeAssignment : OtaAssignmentFileInfo
 *    Class constructor
 */
asncassignFileInfoss::asncassignFileInfoss()
   :partidentifier()
   ,softwarePartSignature()
   ,fileCheckSum()
{
}

OtaAssignmentFileInfo::OtaAssignmentFileInfo()
   :installationOrderId()
   ,assignFileInfos()
{
}

/**
 *    TypeAssignment : RVDC
 *    Class constructor
 */
RVDC::RVDC()
   :optional(6,&optionalField[0])
   ,appId()
   ,maOrderId()
   ,timestamp()
   ,vin()
   ,maBusinessType()
   ,rvdcSetting()
   ,assignmentNotification()
   ,maSynchronizationReq()
   ,maSynchronization()
   ,exceptionHandling()
   ,measurementDataPackage()
{
}

/**
 *    TypeAssignment : RvdcAssignmentNotification
 *    Class constructor
 */
RvdcAssignmentNotification::RvdcAssignmentNotification()
   :optional(3,&optionalField[0])
   ,maCarId()
   ,maVersion()
   ,newStatus()
   ,timestamp()
   ,reason()
{
}

/**
 *    TypeAssignment : RvdcExceptionHandling
 *    Class constructor
 */
RvdcExceptionHandling::RvdcExceptionHandling()
   :optional(3,&optionalField[0])
   ,exceptionName()
   ,description()
   ,publisher()
   ,severity()
   ,impact()
   ,action()
{
}

/**
 *    TypeAssignment : RvdcForcedSetting
 *    Class constructor
 */
RvdcForcedSetting::RvdcForcedSetting()
   :visibility()
   ,suppress()
   ,lock()
{
}

/**
 *    TypeAssignment : RvdcSetting
 *    Class constructor
 */
asncRvdcSetting__serviceParameterss::asncRvdcSetting__serviceParameterss()
   :optional(5,&optionalField[0])
   ,key()
   ,intVal()
   ,stringVal()
   ,boolVal()
   ,timestampVal()
   ,dataVal()
{
}

RvdcSetting::RvdcSetting()
   :optional(5,&optionalField[0])
   ,maSetting()
   ,vehicleSetting()
   ,languageSetting()
   ,forcedSetting()
   ,serviceParameters()
{
}

/**
 *    TypeAssignment : RvdcVehicleSetting
 *    Class constructor
 */
RvdcVehicleSetting::RvdcVehicleSetting()
   :rvdcFunction()
   ,collectOffSetTime()
{
}

/**
 *    TypeAssignment : SoftwarePartInstallationInstruction
 *    Class constructor
 */
SoftwarePartInstallationInstruction::SoftwarePartInstallationInstruction()
   :partidentifier()
   ,estimatedInstallationtime()
{
}

/**
 *    TypeAssignment : SoftwarePartSummary
 *    Class constructor
 */
SoftwarePartSummary::SoftwarePartSummary()
   :partIdentifier()
   ,partRetries()
   ,measuredInstallationTime()
   ,softwarePartStatus()
{
}

/**
 *    TypeAssignment : StopCondition
 *    Class constructor
 */
StopCondition::StopCondition()
   :optional(3,&optionalField[0])
   ,period()
   ,amount()
   ,time()
{
}

/**
 *    TypeAssignment : TelematicsParameters
 *    Class constructor
 */
TelematicsParameters::TelematicsParameters()
   :timeToLive()
   ,uploadPriority()
{
}

/**
 *    TypeAssignment : Trigger
 *    Class constructor
 */
Trigger::Trigger()
   :trigger()
   ,interval()
{
}

/**
 *    TypeAssignment : UDS
 *    Class constructor
 */
asncdiagnosticCommandss::asncdiagnosticCommandss()
   :optional(2,&optionalField[0])
   ,ecuAddress()
   ,serviceId()
   ,input()
   ,compareType()
   ,compareValue()
   ,delayUntilNextTriggerCommand()
{
}

UDS::UDS()
   :a__operator()
   ,delayForNextTriggerCheck()
   ,delayAfterCollection()
   ,diagnosticCommands()
{
}

/**
 *    TypeAssignment : ValidationKey
 *    Class constructor
 */
asncpartIdentifierss::asncpartIdentifierss()
   : value()
{
}

ValidationKey::ValidationKey()
   :optional(1,&optionalField[0])
   ,validationKey()
   ,partIdentifiers()
{
}

/**
 *    TypeAssignment : DIDData
 *    Class constructor
 */
DIDData::DIDData()
   :id()
   ,data()
{
}

/**
 *    TypeAssignment : DTCData
 *    Class constructor
 */
DTCData::DTCData()
   :id()
   ,data()
{
}

/**
 *    TypeAssignment : ECUData
 *    Class constructor
 */
asncdidDatas::asncdidDatas()
   :id()
   ,data()
{
}

asncdtcDatas::asncdtcDatas()
   :id()
   ,data()
{
}

ECUData::ECUData()
   :ecu()
   ,diagnosticNumber()
   ,didData()
   ,dtcData()
{
}

/**
 *    TypeAssignment : EcuData
 *    Class constructor
 */
EcuData__C::EcuData__C(asnMAXUINT asnpAlt)
   : asnChoice(asnpAlt)
{
}

asncnoDiagData::asncnoDiagData()
   : EcuData__C(asn_noDiagData)
   , noDiagData()
{
}

asncdatas::asncdatas()
   :ecu()
   ,diagnosticNumber()
   ,didData()
   ,dtcData()
{
}

asncEcuData__data::asncEcuData__data()
   : EcuData__C(asn_EcuData__data)
   , data()
{
}

EcuData::EcuData():value()
{
}

/**
 *    TypeAssignment : NEVCoordinatesLongLat
 *    Class constructor
 */
NEVCoordinatesLongLat::NEVCoordinatesLongLat()
   :longitude()
   ,latitude()
{
}

/**
 *    TypeAssignment : NEVDRPositionData
 *    Class constructor
 */
NEVDRPositionData::NEVDRPositionData()
   :longLat()
   ,heading()
   ,speedKmph()
   ,hdopX10()
   ,numSat()
   ,fixTime()
   ,fixType()
   ,drType()
   ,drDistance()
{
}

/**
 *    TypeAssignment : NEVDRVehiclePosition
 *    Class constructor
 */
NEVDRVehiclePosition__C::NEVDRVehiclePosition__C(asnMAXUINT asnpAlt)
   : asnChoice(asnpAlt)
{
}

asncnoValidData::asncnoValidData()
   : NEVDRVehiclePosition__C(asn_noValidData)
   , noValidData()
{
}

asncdrPosition::asncdrPosition()
   : NEVDRVehiclePosition__C(asn_drPosition)
   ,longLat()
   ,heading()
   ,speedKmph()
   ,hdopX10()
   ,numSat()
   ,fixTime()
   ,fixType()
   ,drType()
   ,drDistance()
{
}

NEVDRVehiclePosition::NEVDRVehiclePosition():value()
{
}

/**
 *    TypeAssignment : NEVDateTime
 *    Class constructor
 */
NEVDateTime::NEVDateTime()
   :year()
   ,month()
   ,day()
   ,hour()
   ,minute()
   ,second()
{
}

/**
 *    TypeAssignment : NEVServiceData
 *    Class constructor
 */
NEVServiceData::NEVServiceData()
   :vehicleVin()
   ,testVehicle()
   ,rvdcTriggerCondition()
   ,mdpID()
   ,maID()
   ,position()
   ,ecuData()
{
}

/**
 *    TypeAssignment : Configuration
 *    Class constructor
 */
asncConfiguration__itemss::asncConfiguration__itemss()
   :name()
   ,parameters()
{
}

Configuration::Configuration()
   :version()
   ,items()
{
}

/**
 *    TypeAssignment : ConfigurationItem
 *    Class constructor
 */
asncConfigurationItem__parameterss::asncConfigurationItem__parameterss()
   :optional(5,&optionalField[0])
   ,key()
   ,intVal()
   ,stringVal()
   ,boolVal()
   ,timestampVal()
   ,dataVal()
{
}

ConfigurationItem::ConfigurationItem()
   :name()
   ,parameters()
{
}

/**
 *    TypeAssignment : ContactInfo
 *    Class constructor
 */
ContactInfo::ContactInfo()
   :optional(4,&optionalField[0])
   ,email()
   ,address()
   ,phone1()
   ,phone2()
{
}

/**
 *    TypeAssignment : Error
 *    Class constructor
 */
Error::Error()
   :optional(2,&optionalField[0])
   ,code()
   ,vehicleErrorCode()
   ,message()
{
}

/**
 *    TypeAssignment : EventAction
 *    Class constructor
 */
EventAction::EventAction()
   :optional(2,&optionalField[0])
   ,triggerTimes()
   ,notifyInterval()
{
}

/**
 *    TypeAssignment : EventRule
 *    Class constructor
 */
asncconditionss::asncconditionss()
   :condition()
{
}

EventRule::EventRule()
   :optional(5,&optionalField[0])
   ,ruleId()
   ,startTime()
   ,endTime()
   ,conditions()
   ,interval()
   ,action()
{
}

/**
 *    TypeAssignment : GeneralMessage
 *    Class constructor
 */
GeneralMessage__C::GeneralMessage__C(asnMAXUINT asnpAlt)
   : asnChoice(asnpAlt)
{
}

asncGeneralMessage__message::asncGeneralMessage__message()
   : GeneralMessage__C(asn_GeneralMessage__message)
   , message()
{
}

asncocetMessage::asncocetMessage()
   : GeneralMessage__C(asn_ocetMessage)
   , ocetMessage()
{
}

GeneralMessage::GeneralMessage():value()
{
}

/**
 *    TypeAssignment : Notification
 *    Class constructor
 */
asncNotification__parameterss::asncNotification__parameterss()
   :optional(5,&optionalField[0])
   ,key()
   ,intVal()
   ,stringVal()
   ,boolVal()
   ,timestampVal()
   ,dataVal()
{
}

Notification::Notification()
   :optional(2,&optionalField[0])
   ,reason()
   ,time()
   ,code()
   ,parameters()
{
}

/**
 *    TypeAssignment : OTA
 *    Class constructor
 */
OTA::OTA()
   :optional(3,&optionalField[0])
   ,swModel()
   ,swVersion()
   ,downloadUrl()
   ,verificationCode()
{
}

/**
 *    TypeAssignment : PointOfInterest
 *    Class constructor
 */
asncattributess::asncattributess()
   :optional(5,&optionalField[0])
   ,key()
   ,intVal()
   ,stringVal()
   ,boolVal()
   ,timestampVal()
   ,dataVal()
{
}

PointOfInterest::PointOfInterest()
   :optional(5,&optionalField[0])
   ,name()
   ,position()
   ,type()
   ,contactInfo()
   ,url()
   ,attributes()
{
}

/**
 *    TypeAssignment : Position
 *    Class constructor
 */
Position::Position()
   :optional(6,&optionalField[0])
   ,latitude()
   ,longitude()
   ,altitude()
   ,posCanBeTrusted()
   ,carLocatorStatUploadEn()
   ,marsCoordinates()
{
}

/**
 *    TypeAssignment : PostAddress
 *    Class constructor
 */
PostAddress::PostAddress()
   :optional(6,&optionalField[0])
   ,street()
   ,houseNumber()
   ,city()
   ,region()
   ,postcode()
   ,country()
{
}

/**
 *    TypeAssignment : RuleCondition
 *    Class constructor
 */
RuleCondition::RuleCondition()
   :condition()
{
}

/**
 *    TypeAssignment : ServiceData
 *    Class constructor
 */
asncServiceData__serviceParameterss::asncServiceData__serviceParameterss()
   :optional(5,&optionalField[0])
   ,key()
   ,intVal()
   ,stringVal()
   ,boolVal()
   ,timestampVal()
   ,dataVal()
{
}

asncpoiss::asncpoiss()
   :optional(5,&optionalField[0])
   ,name()
   ,position()
   ,type()
   ,contactInfo()
   ,url()
   ,attributes()
{
}

asnctripFragmentss::asnctripFragmentss()
   :optional(11,&optionalField[0])
   ,startTime()
   ,startPosition()
   ,startOdometer()
   ,startFuelLevel()
   ,startElectricConsumption()
   ,startElectricRegeneration()
   ,endTime()
   ,endPosition()
   ,endOdometer()
   ,endFuelLevel()
   ,endElectricConsumption()
   ,endElectricRegeneration()
{
}

asnctrackPointss::asnctrackPointss()
   :optional(7,&optionalField[0])
   ,systemTime()
   ,position()
   ,speed()
   ,direction()
   ,isSVT()
   ,odometer()
   ,travelDistanceSinceLastWaypoint()
   ,fuelConsumptionSinceLastWaypoint()
   ,electricConsumptionSinceLastSample()
   ,electricRegenerationSinceLastSample()
{
}

ServiceData::ServiceData()
   :optional(18,&optionalField[0])
   ,serviceTrigger()
   ,serviceParameters()
   ,serviceCommand()
   ,serviceResult()
   ,serviceStatus()
   ,message()
   ,pois()
   ,configuration()
   ,vehicleStatus()
   ,ota()
   ,fota()
   ,rvdc()
   ,trip()
   ,tripFragments()
   ,trackPoints()
   ,nevServiceData()
   ,eventRule()
   ,timerData()
{
}

/**
 *    TypeAssignment : ServiceParameter
 *    Class constructor
 */
ServiceParameter::ServiceParameter()
   :optional(5,&optionalField[0])
   ,key()
   ,intVal()
   ,stringVal()
   ,boolVal()
   ,timestampVal()
   ,dataVal()
{
}

/**
 *    TypeAssignment : ServiceResult
 *    Class constructor
 */
ServiceResult::ServiceResult()
   :optional(1,&optionalField[0])
   ,operationSucceeded()
   ,error()
{
}

/**
 *    TypeAssignment : ServiceStatus
 *    Class constructor
 */
ServiceStatus::ServiceStatus()
   :remoteControlInhibited()
{
}

/**
 *    TypeAssignment : ServiceTrigger
 *    Class constructor
 */
ServiceTrigger::ServiceTrigger()
   :optional(7,&optionalField[0])
   ,scheduledTime()
   ,recurrentOperation()
   ,duration()
   ,interval()
   ,occurs()
   ,endTime()
   ,startTimeofDay()
{
}

/**
 *    TypeAssignment : TimerData
 *    Class constructor
 */
asnctimerss::asnctimerss()
   :optional(4,&optionalField[0])
   ,timerActivation()
   ,duration()
   ,dayofWeek()
   ,startTimeofDay()
   ,endtimeofDay()
{
}

TimerData::TimerData()
   :optional(1,&optionalField[0])
   ,timerId()
   ,timers()
{
}

/**
 *    TypeAssignment : TimerInfo
 *    Class constructor
 */
TimerInfo::TimerInfo()
   :optional(4,&optionalField[0])
   ,timerActivation()
   ,duration()
   ,dayofWeek()
   ,startTimeofDay()
   ,endtimeofDay()
{
}

/**
 *    TypeAssignment : TrackPoint
 *    Class constructor
 */
TrackPoint::TrackPoint()
   :optional(7,&optionalField[0])
   ,systemTime()
   ,position()
   ,speed()
   ,direction()
   ,isSVT()
   ,odometer()
   ,travelDistanceSinceLastWaypoint()
   ,fuelConsumptionSinceLastWaypoint()
   ,electricConsumptionSinceLastSample()
   ,electricRegenerationSinceLastSample()
{
}

/**
 *    TypeAssignment : Trip
 *    Class constructor
 */
asnctrackpointss::asnctrackpointss()
   :optional(7,&optionalField[0])
   ,systemTime()
   ,position()
   ,speed()
   ,direction()
   ,isSVT()
   ,odometer()
   ,travelDistanceSinceLastWaypoint()
   ,fuelConsumptionSinceLastWaypoint()
   ,electricConsumptionSinceLastSample()
   ,electricRegenerationSinceLastSample()
{
}

asncwaypointss::asncwaypointss()
   :optional(6,&optionalField[0])
   ,latitude()
   ,longitude()
   ,altitude()
   ,posCanBeTrusted()
   ,carLocatorStatUploadEn()
   ,marsCoordinates()
{
}

Trip::Trip()
   :optional(6,&optionalField[0])
   ,tripId()
   ,startTime()
   ,startOdometer()
   ,fuelConsumption()
   ,traveledDistance()
   ,trackpoints()
   ,waypoints()
   ,avgSpeed()
   ,endTime()
   ,endOdometer()
   ,electricConsumption()
   ,electricRegeneration()
{
}

/**
 *    TypeAssignment : TripFragment
 *    Class constructor
 */
TripFragment::TripFragment()
   :optional(11,&optionalField[0])
   ,startTime()
   ,startPosition()
   ,startOdometer()
   ,startFuelLevel()
   ,startElectricConsumption()
   ,startElectricRegeneration()
   ,endTime()
   ,endPosition()
   ,endOdometer()
   ,endFuelLevel()
   ,endElectricConsumption()
   ,endElectricRegeneration()
{
}

/**
 *    TypeAssignment : AdditionalStatus
 *    Class constructor
 */
asncAdditionalStatus__signalss::asncAdditionalStatus__signalss()
   :optional(6,&optionalField[0])
   ,key()
   ,collectTime()
   ,value()
   ,stringVal()
   ,boolVal()
   ,timestampVal()
   ,dataVal()
{
}

AdditionalStatus::AdditionalStatus()
   :optional(5,&optionalField[0])
   ,confAndId()
   ,ecuWarningMessages()
   ,towStatus()
   ,signals()
   ,data()
{
}

/**
 *    TypeAssignment : BasicVehicleStatus
 *    Class constructor
 */
BasicVehicleStatus::BasicVehicleStatus()
   :optional(7,&optionalField[0])
   ,vin()
   ,position()
   ,speed()
   ,speedUnit()
   ,speedValidity()
   ,direction()
   ,engineStatus()
   ,keyStatus()
   ,usageMode()
{
}

/**
 *    TypeAssignment : BatteryStatus
 *    Class constructor
 */
BatteryStatus::BatteryStatus()
   :optional(4,&optionalField[0])
   ,stateOfCharge()
   ,chargeLevel()
   ,stateOfHealth()
   ,voltage()
{
}

/**
 *    TypeAssignment : CarConfig
 *    Class constructor
 */
asncCarConfig__itemss::asncCarConfig__itemss()
   :optional(5,&optionalField[0])
   ,key()
   ,intVal()
   ,stringVal()
   ,boolVal()
   ,timestampVal()
   ,dataVal()
{
}

CarConfig::CarConfig()
   :optional(4,&optionalField[0])
   ,heatedFrontSeats()
   ,parkingClimateLevel()
   ,heatedSteeringWheel()
   ,items()
{
}

/**
 *    TypeAssignment : ClimateStatus
 *    Class constructor
 */
ClimateStatus::ClimateStatus()
   :optional(14,&optionalField[0])
   ,interiorTemp()
   ,exteriorTemp()
   ,preClimateActive()
   ,airCleanSts()
   ,drvHeatSts()
   ,passHeatingSts()
   ,rlHeatingSts()
   ,rrHeatingSts()
   ,drvVentSts()
   ,passVentSts()
   ,rrVentSts()
   ,rlVentSts()
   ,interCO2Warning()
   ,fragStrs()
{
}

/**
 *    TypeAssignment : ConfigurationAndIdentity
 *    Class constructor
 */
ConfigurationAndIdentity::ConfigurationAndIdentity()
   :optional(2,&optionalField[0])
   ,vin()
   ,fuelType()
{
}

/**
 *    TypeAssignment : ConnectivityInfo
 *    Class constructor
 */
ConnectivityInfo::ConnectivityInfo()
   :optional(5,&optionalField[0])
   ,connectTime()
   ,connectPosition()
   ,connectType()
   ,numRetriesConnect()
   ,retryReason()
{
}

/**
 *    TypeAssignment : ConnectivityStatus
 *    Class constructor
 */
asncconnectEstablishedLists::asncconnectEstablishedLists()
   :optional(5,&optionalField[0])
   ,connectTime()
   ,connectPosition()
   ,connectType()
   ,numRetriesConnect()
   ,retryReason()
{
}

asnclostConnectionsLists::asnclostConnectionsLists()
   :optional(5,&optionalField[0])
   ,connectTime()
   ,connectPosition()
   ,connectType()
   ,numRetriesConnect()
   ,retryReason()
{
}

ConnectivityStatus::ConnectivityStatus()
   :optional(6,&optionalField[0])
   ,wakeupTime()
   ,wPosition()
   ,connectEstablishedList()
   ,lostConnectionsList()
   ,sleeptime()
   ,sPosition()
{
}

/**
 *    TypeAssignment : DiagnosticTroubleCode
 *    Class constructor
 */
DiagnosticTroubleCode::DiagnosticTroubleCode()
   :optional(6,&optionalField[0])
   ,dtc()
   ,status()
   ,failureCount()
   ,lastFail()
   ,firtFail()
   ,firstFailureOdometer()
   ,firstFailureBatteryVoltage()
   ,firstFailureVehicleSpeed()
{
}

/**
 *    TypeAssignment : ECUDiagnostic
 *    Class constructor
 */
asncdtcss::asncdtcss()
   :optional(6,&optionalField[0])
   ,dtc()
   ,status()
   ,failureCount()
   ,lastFail()
   ,firtFail()
   ,firstFailureOdometer()
   ,firstFailureBatteryVoltage()
   ,firstFailureVehicleSpeed()
{
}

ECUDiagnostic::ECUDiagnostic()
   :optional(2,&optionalField[0])
   ,ecuID()
   ,diagnosticResult()
   ,dtcs()
   ,exceptionCode()
{
}

/**
 *    TypeAssignment : ECUDiagnostics
 *    Class constructor
 */
asncECUDiagnosticss::asncECUDiagnosticss()
   :optional(2,&optionalField[0])
   ,ecuID()
   ,diagnosticResult()
   ,dtcs()
   ,exceptionCode()
{
}

ECUDiagnostics::ECUDiagnostics(): value()
{
}

/**
 *    TypeAssignment : EcuWarningMessages
 *    Class constructor
 */
asncEcuWarningMessagess::asncEcuWarningMessagess()
   :optional(6,&optionalField[0])
   ,key()
   ,collectTime()
   ,value()
   ,stringVal()
   ,boolVal()
   ,timestampVal()
   ,dataVal()
{
}

EcuWarningMessages::EcuWarningMessages(): value()
{
}

/**
 *    TypeAssignment : ElectricStatus
 *    Class constructor
 */
ElectricStatus::ElectricStatus()
   :optional(33,&optionalField[0])
   ,isCharging()
   ,isPluggedIn()
   ,stateOfCharge()
   ,chargeLevel()
   ,timeToFullyCharged()
   ,statusOfChargerConnection()
   ,chargerState()
   ,distanceToEmptyOnBatteryOnly()
   ,ems48VSOC()
   ,ems48VDisSOC()
   ,emsHVRBSError()
   ,emsHVDC()
   ,emsRBSModeDisplay()
   ,emsOVPActive()
   ,ems48vPackTemp1()
   ,ems48vPackTemp2()
   ,emsBMSLBuildSwVersion()
   ,emsCBRemainingLife()
   ,chargeHvSts()
   ,ptReady()
   ,averPowerConsumption()
   ,indPowerConsumption()
   ,dcDcActvd()
   ,dcDcConnectStatus()
   ,wptObjt()
   ,wptFineAlignt()
   ,wptActived()
   ,chargeIAct()
   ,chargeUAct()
   ,chargeSts()
   ,disChargeConnectStatus()
   ,disChargeIAct()
   ,disChargeUAct()
   ,disChargeSts()
{
}

/**
 *    TypeAssignment : FragItem
 *    Class constructor
 */
FragItem::FragItem()
   :optional(2,&optionalField[0])
   ,id()
   ,activated()
   ,level()
   ,code()
{
}

/**
 *    TypeAssignment : FragStrs
 *    Class constructor
 */
asncFragStrs__itemss::asncFragStrs__itemss()
   :optional(2,&optionalField[0])
   ,id()
   ,activated()
   ,level()
   ,code()
{
}

FragStrs::FragStrs()
   :optional(2,&optionalField[0])
   ,activated()
   ,number()
   ,items()
{
}

/**
 *    TypeAssignment : GenericVehicleSignal
 *    Class constructor
 */
GenericVehicleSignal::GenericVehicleSignal()
   :optional(6,&optionalField[0])
   ,key()
   ,collectTime()
   ,value()
   ,stringVal()
   ,boolVal()
   ,timestampVal()
   ,dataVal()
{
}

/**
 *    TypeAssignment : LockStatus
 *    Class constructor
 */
LockStatus::LockStatus()
   :optional(49,&optionalField[0])
   ,winStatusDriver()
   ,winStatusPassenger()
   ,winStatusDriverRear()
   ,winStatusPassengerRear()
   ,winStatusDriverWarning()
   ,winStatusPassengerWarning()
   ,winStatusDriverRearWarning()
   ,winStatusPassengerRearWarning()
   ,winPosDriver()
   ,winPosPassenger()
   ,winPosDriverRear()
   ,winPosPassengerRear()
   ,sunroofOpenStatus()
   ,sunroofPos()
   ,sunroofOpenStatusWarning()
   ,curtainOpenStatus()
   ,curtainPos()
   ,curtainWarning()
   ,tankFlapStatus()
   ,chargeLidRearStatus()
   ,chargeLidFrontStatus()
   ,ventilateStatus()
   ,doorOpenStatusDriver()
   ,doorOpenStatusPassenger()
   ,doorOpenStatusDriverRear()
   ,doorOpenStatusPassengerRear()
   ,doorPosDriver()
   ,doorPosPassenger()
   ,doorPosDriverRear()
   ,doorPosPassengerRear()
   ,doorLockStatusDriver()
   ,doorLockStatusPassenger()
   ,doorLockStatusDriverRear()
   ,doorLockStatusPassengerRear()
   ,doorGripStatusDriver()
   ,doorGripStatusPassenger()
   ,doorGripStatusDriverRear()
   ,doorGripStatusPassengerRear()
   ,trunkOpenStatus()
   ,trunkLockStatus()
   ,engineHoodOpenStatus()
   ,engineHoodLockStatus()
   ,centralLockingStatus()
   ,centralLockingDisStatus()
   ,privateLockStatus()
   ,vehicleAlarm()
   ,winCloseReminder()
   ,handBrakeStatus()
   ,electricParkBrakeStatus()
{
}

/**
 *    TypeAssignment : MaintenanceStatus
 *    Class constructor
 */
MaintenanceStatus::MaintenanceStatus()
   :optional(24,&optionalField[0])
   ,mainBatteryStatus()
   ,tyreStatusDriver()
   ,tyreStatusPassenger()
   ,tyreStatusDriverRear()
   ,tyreStatusPassengerRear()
   ,engineHrsToService()
   ,distanceToService()
   ,daysToService()
   ,serviceWarningStatus()
   ,serviceWarningTrigger()
   ,engineOilLevelStatus()
   ,engineOilTemperature()
   ,engineOilPressureWarning()
   ,engineCoolantTemperature()
   ,engineCoolantLevelStatus()
   ,brakeFluidLevelStatus()
   ,washerFluidLevelStatus()
   ,indcrTurnLeWarning()
   ,indcrTurnRiWarning()
   ,indcrTurnOnPassSideWarning()
   ,indcrTurnOnDrvrSideWarning()
   ,indcrTurnLeFrntWarning()
   ,fogLiReWarning()
   ,bulbStatus()
{
}

/**
 *    TypeAssignment : NetworkAccessStatus
 *    Class constructor
 */
NetworkAccessStatus::NetworkAccessStatus()
   :optional(2,&optionalField[0])
   ,simInfo()
   ,mobileNetwork()
{
}

/**
 *    TypeAssignment : OEMMSD
 *    Class constructor
 */
asncrecentPositionss::asncrecentPositionss()
   :optional(6,&optionalField[0])
   ,latitude()
   ,longitude()
   ,altitude()
   ,posCanBeTrusted()
   ,carLocatorStatUploadEn()
   ,marsCoordinates()
{
}

asncOEMMSD__signalss::asncOEMMSD__signalss()
   :optional(6,&optionalField[0])
   ,key()
   ,collectTime()
   ,value()
   ,stringVal()
   ,boolVal()
   ,timestampVal()
   ,dataVal()
{
}

OEMMSD::OEMMSD()
   :optional(7,&optionalField[0])
   ,automaticActivation()
   ,testCall()
   ,position()
   ,vehicleType()
   ,vin()
   ,fuelType()
   ,direction()
   ,numberOfPassengers()
   ,recentPositions()
   ,speed()
   ,speedValidity()
   ,signals()
{
}

/**
 *    TypeAssignment : PollutionStatus
 *    Class constructor
 */
PollutionStatus::PollutionStatus()
   :optional(4,&optionalField[0])
   ,interiorPM25()
   ,exteriorPM25()
   ,interiorPM25Level()
   ,exteriorPM25Level()
{
}

/**
 *    TypeAssignment : RunningStatus
 *    Class constructor
 */
RunningStatus::RunningStatus()
   :optional(40,&optionalField[0])
   ,srsStatus()
   ,srsCrashStatus()
   ,odometer()
   ,fuelLevel()
   ,fuelLevelStatus()
   ,fuelEnLevel()
   ,fuelEnCnsFild()
   ,fuelEnCns()
   ,fuelLow1WarningDriver()
   ,fuelLow2WarningDriver()
   ,distanceToEmpty()
   ,trvlDistance()
   ,aveFuelConsumption()
   ,aveFuelConsumptionInLatestDrivingCycle()
   ,avgSpeed()
   ,avgSpeedLatestDrivingCycle()
   ,aveFuelConsumptionUnit()
   ,indFuelConsumption()
   ,notifForEmgyCallStatus()
   ,tyrePreWarningDriver()
   ,tyrePreWarningPassenger()
   ,tyrePreWarningDriverRear()
   ,tyrePreWarningPassengerRear()
   ,seatBeltStatusDriver()
   ,seatBeltStatusPassenger()
   ,seatBeltStatusDriverRear()
   ,seatBeltStatusPassengerRear()
   ,seatBeltStatusDriverMid()
   ,seatBeltStatusThDriverRear()
   ,seatBeltStatusThPassengerRear()
   ,seatBeltStatusThDriverMid()
   ,brakePedalDepressed()
   ,gearManualStatus()
   ,gearAutoStatus()
   ,engineSpeed()
   ,transimissionGearPostion()
   ,cruiseControlStatus()
   ,engineBlockedStatus()
   ,tripMeter1()
   ,tripMeter2()
{
}

/**
 *    TypeAssignment : SIMInfo
 *    Class constructor
 */
SIMInfo::SIMInfo()
   :optional(3,&optionalField[0])
   ,msisdn()
   ,imsi()
   ,iccId()
{
}

/**
 *    TypeAssignment : TEMStatus
 *    Class constructor
 */
TEMStatus::TEMStatus()
   :optional(15,&optionalField[0])
   ,vin()
   ,powerSource()
   ,powerMode()
   ,serviceProvisoned()
   ,healthStatus()
   ,diagnostics()
   ,backupBattery()
   ,sleepCycleNextWakeupTime()
   ,serialNumber()
   ,completeECUPartNumbers()
   ,networkAccessStatus()
   ,imei()
   ,connectivityStatus()
   ,hwVersion()
   ,swVersion()
   ,mpuVersion()
   ,mcuVersion()
{
}

/**
 *    TypeAssignment : TheftNotification
 *    Class constructor
 */
TheftNotification::TheftNotification()
   :time()
   ,activated()
{
}

/**
 *    TypeAssignment : TowStatus
 *    Class constructor
 */
TowStatus::TowStatus()
   :optional(7,&optionalField[0])
   ,trailerLampActiveChk()
   ,trailerLampCheckSts()
   ,trailerBreakLampSts()
   ,trailerFogLampSts()
   ,trailerPosLampSts()
   ,trailerTurningLampSts()
   ,trailerReversingLampSts()
{
}

/**
 *    TypeAssignment : VehicleStatus
 *    Class constructor
 */
VehicleStatus::VehicleStatus()
   :optional(14,&optionalField[0])
   ,basicVehicleStatus()
   ,lockStatus()
   ,maintenanceStatus()
   ,runningStatus()
   ,climateStatus()
   ,electricStatus()
   ,pollutionStatus()
   ,temStatus()
   ,carConfig()
   ,additionalStatus()
   ,msd()
   ,diagnostics()
   ,theftNotification()
   ,notification()
{
}


}
