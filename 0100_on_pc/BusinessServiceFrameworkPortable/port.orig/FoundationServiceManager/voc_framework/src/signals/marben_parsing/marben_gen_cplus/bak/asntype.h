/*
Copyright (C) 1999-2011 Marben Products. All rights reserved.

THIS FILE IS PROPRIETARY MATERIAL OF MARBEN PRODUCTS.
AND MAY BE USED ONLY BY DIRECT LICENSEES OF ASNSDK PRODUCT.
THIS FILE MAY NOT BE DISTRIBUTED.

===========================================================================

asntype.h: C++ API declarations

Generated by ASNSDK TCE-C++ ASN.1 Compiler v6.0 - REF_8.55 - REF_8.41

===========================================================================
*/

/**@file
 * C++ API declarations
 */



#include <aipupinc.h>

namespace asn_wrapper
{
/*
 * prototype(s) for init function(s) that calculates
 * all C++ api offset. This function(s) is(are) used when
 * asnCodNonPodOffsetof is not defined
 */
#ifndef asnNonPodOffsetof
asnFGlobal asnFVoid asnMNAAbstractSyntaxInit asnNOPARMS;
#endif
#define AbstractSyntax (asnZNAAbstractSyntax[0])
extern asnTOCTypeAssignment asnZOCTypeAssignment[];
extern asnTOIBoolean asnZOIBoolean[];
extern asnTOFByte asnZOFByte[];
extern asnTOHNull asnZOHNull[];
extern asnTPENonKnownMultiplierCharacterString asnZPENonKnownMultiplierCharacterString[];
extern asnTPFKnownMultiplierCharacterString asnZPFKnownMultiplierCharacterString[];
extern asnTPHBitString asnZPHBitString[];
extern asnTPINamedBit asnZPINamedBit[];
extern asnTPGOctetString asnZPGOctetString[];
extern asnTPBSequenceOf asnZPBSequenceOf[];
extern asnTSWSetSeqOfNamedType asnZSWSetSeqOfNamedType[];
extern asnTPCSetOf asnZPCSetOf[];
extern asnTPNInteger asnZPNInteger[];
extern asnTPPEnumerated asnZPPEnumerated[];
extern asnTPQNamedEnumerated asnZPQNamedEnumerated[];
extern asnTPVNumberInterval asnZPVNumberInterval[];
extern asnTOLSequence asnZOLSequence[];
extern asnTONSetSeqNamedType asnZONSetSeqNamedType[];
extern asnTOBMINUINT asnZOBMINUINT[];
extern asnTPRChoice asnZPRChoice[];
extern asnTPSChoiceNamedType asnZPSChoiceNamedType[];
extern asnTNAAbstractSyntax asnZNAAbstractSyntax[];

#ifdef asnCodCPER
extern asnTPJPerEffectiveKnownMultiplierCharacterStringConstraint asnZPJPerEffectiveKnownMultiplierCharacterStringConstraint[];

#endif

#ifdef asnCodCPER
extern asnTPKPerAlphabetInterval asnZPKPerAlphabetInterval[];

#endif

#ifdef asnCodCPER
extern asnTPTPerEffectiveNumberConstraint asnZPTPerEffectiveNumberConstraint[];

#endif

#ifdef asnCodFPER
extern asnTORPerSetSeqCoding asnZORPerSetSeqCoding[];

#endif

#ifdef asnCodCPER
extern asnTPLPerEffectiveLengthConstraint asnZPLPerEffectiveLengthConstraint[];

#endif

#ifdef asnCodXTAG
extern asnTNEXerTag asnZNEXerTag[];

#endif
class RequestBody;
class asncServiceData__serviceParameterss;
class asncattributess;
class asncpoiss;
class asncConfigurationItem__parameterss;
class asncConfiguration__itemss;
class asncFragStrs__itemss;
class asncdtcss;
class asncconnectEstablishedLists;
class asnclostConnectionsLists;
class asncCarConfig__itemss;
class asncAdditionalStatus__signalss;
class asncrecentPositionss;
class asncOEMMSD__signalss;
class asncNotification__parameterss;
class asncpartIdentifierss;
class asncvalidationKeyss;
class asncecuInventorys;
class asncInventoryInstruction__ecuInstructionss;
class asncsoftwarePartInstallationInstructionss;
class asncInstruction__ecuInstructionss;
class asncpartidentifierss;
class asncassignmentValidationss;
class asncinstructionss;
class asncsoftwarePartSummaryss;
class asncecuSummaryss;
class asncexceptionReportss;
class asncurlss;
class asncserviceParamss;
class asncassignFileInfoss;
class asncRvdcSetting__serviceParameterss;
class asncinstalledMas;
class asncMaSynchronizationReq__serviceParameterss;
class asncremoveMass;
class asncdiagnosticCommandss;
class asncecusAndPartNumberss;
class asncdiagnosticCommands;
class asncMeasurementAssignment__serviceParameterss;
class asncnewMass;
class asncMaSynchronization__serviceParameterss;
class asncMeasurementDataPackage__serviceParameterss;
class asnctrackpointss;
class asncwaypointss;
class asnctripFragmentss;
class asnctrackPointss;
class asncdidDatas;
class asncdtcDatas;
class asncdatas;
class asncconditionss;
class asnctimerss;
class RequestHeader;
class TimeStamp;
class VDServiceRequest;
class AssignmentData;
class AssignmentFileInfo;
class AssignmentValidation;
class AuthorizationStatus;
class AvailableAssignment;
class AvailableAssignmentRequest;
class ClientConfSyncRequest;
class ClientHmiVehicleSettings;
class DiagnosticCommand;
class EcuExceptionReport;
class EcuInstruction;
class EcuInventory;
class EcuSummary;
class EcusAndPartNumber;
class ExceptionMessage;
class ExceptionReport;
class ExecutionTrigger;
class FOTA;
class FotaAssignmentNotification;
class InstallationInstruction;
class InstallationSummary;
class Instruction;
class InventoryInstruction;
class LanguageSetting;
class Ma;
class MaSetting;
class MaSynchronization;
class MaSynchronizationReq;
class Mdp;
class MeasurementAssignment;
class MeasurementDataPackage;
class OtaAssignmentFileInfo;
class RVDC;
class RvdcAssignmentNotification;
class RvdcExceptionHandling;
class RvdcForcedSetting;
class RvdcSetting;
class RvdcVehicleSetting;
class SoftwarePartInstallationInstruction;
class SoftwarePartSummary;
class StopCondition;
class TelematicsParameters;
class Trigger;
class UDS;
class ValidationKey;
class DIDData;
class DTCData;
class ECUData;
class EcuData__C;
class asncnoDiagData;
class asncEcuData__data;
class EcuData;
class NEVCoordinatesLongLat;
class NEVDRPositionData;
class NEVDRVehiclePosition__C;
class asncnoValidData;
class asncdrPosition;
class NEVDRVehiclePosition;
class NEVDateTime;
class NEVServiceData;
class Configuration;
class ConfigurationItem;
class ContactInfo;
class Error;
class EventAction;
class EventRule;
class GeneralMessage__C;
class asncGeneralMessage__message;
class asncocetMessage;
class GeneralMessage;
class Notification;
class OTA;
class PointOfInterest;
class Position;
class PostAddress;
class RuleCondition;
class ServiceData;
class ServiceParameter;
class ServiceResult;
class ServiceStatus;
class ServiceTrigger;
class TimerData;
class TimerInfo;
class TrackPoint;
class Trip;
class TripFragment;
class AdditionalStatus;
class BasicVehicleStatus;
class BatteryStatus;
class CarConfig;
class ClimateStatus;
class ConfigurationAndIdentity;
class ConnectivityInfo;
class ConnectivityStatus;
class DiagnosticTroubleCode;
class ECUDiagnostic;
class asncECUDiagnosticss;
class ECUDiagnostics;
class asncEcuWarningMessagess;
class EcuWarningMessages;
class ElectricStatus;
class FragItem;
class FragStrs;
class GenericVehicleSignal;
class LockStatus;
class MaintenanceStatus;
class NetworkAccessStatus;
class OEMMSD;
class PollutionStatus;
class RunningStatus;
class SIMInfo;
class TEMStatus;
class TheftNotification;
class TowStatus;
class VehicleStatus;
#ifndef asnNonPodOffsetof
/**
 * To call automatically the generated init function, the constructor
 * of the following C++ class is used.
 * Note that in some platfoms the instanciation of this class as global
 * variable do not call the constructor automatically. In this case 
 * please instanciate this class in the user application
 */
class asnAbstractSyntaxInitClass
{
   public :
   /**
    * Default constructor.
    */
   asnAbstractSyntaxInitClass()
   {
     if ( asnFALSE == asnZNAAbstractSyntax[0].isOffsetCalculated )
     {
       (asnZNAAbstractSyntax[0].tableInitiator)();
       asnZNAAbstractSyntax[0].isOffsetCalculated = asnTRUE;
     }
   }
};

#endif

/**
 * The value of the enumerated element ecu.
 */
enum{ecu = 0};
/**
 * The value of the enumerated element cvc.
 */
enum{cvc = 1};




/**
 * The value of the enumerated element serviceRequest.
 */
enum{serviceRequest = 0};
/**
 * The value of the enumerated element ack.
 */
enum{ack = 1};

/**
 * The value of the enumerated element ecarx.
 */
enum{ecarx = 0};
/**
 * The value of the enumerated element geely.
 */
enum{geely = 1};
/**
 * The value of the enumerated element lynkCoEn.
 */
enum{lynkCoEn = 2};
/**
 * The value of the enumerated element lynkCoCh.
 */
enum{lynkCoCh = 3};
/**
 * The value of the enumerated element proton.
 */
enum{proton = 4};
/**
 * The value of the enumerated element lotus.
 */
enum{lotus = 5};

/**
 * The value of the enumerated element equalto.
 */
enum{equalto = 1};
/**
 * The value of the enumerated element greaterthan.
 */
enum{greaterthan = 2};
/**
 * The value of the enumerated element greaterthanorequal.
 */
enum{greaterthanorequal = 3};
/**
 * The value of the enumerated element lessthan.
 */
enum{lessthan = 4};
/**
 * The value of the enumerated element lessthanorequal.
 */
enum{lessthanorequal = 5};

/**
 * The value of the enumerated element DataType__clientConfSyncRequest.
 */
enum{DataType__clientConfSyncRequest = 0};
/**
 * The value of the enumerated element DataType__ecuExceptionReport.
 */
enum{DataType__ecuExceptionReport = 1};
/**
 * The value of the enumerated element DataType__inventoryInstruction.
 */
enum{DataType__inventoryInstruction = 2};
/**
 * The value of the enumerated element DataType__availableAssignmentRequest.
 */
enum{DataType__availableAssignmentRequest = 3};
/**
 * The value of the enumerated element DataType__availableAssignment.
 */
enum{DataType__availableAssignment = 4};
/**
 * The value of the enumerated element DataType__installationInstruction.
 */
enum{DataType__installationInstruction = 5};
/**
 * The value of the enumerated element DataType__assignmentNotification.
 */
enum{DataType__assignmentNotification = 6};
/**
 * The value of the enumerated element DataType__clientHmiVehicleSettings.
 */
enum{DataType__clientHmiVehicleSettings = 7};
/**
 * The value of the enumerated element DataType__assignmentData.
 */
enum{DataType__assignmentData = 8};
/**
 * The value of the enumerated element DataType__otaAssignmentFileInfo.
 */
enum{DataType__otaAssignmentFileInfo = 9};
/**
 * The value of the enumerated element DataType__installationSummary.
 */
enum{DataType__installationSummary = 10};

/**
 * The value of the enumerated element arabic.
 */
enum{arabic = 1};
/**
 * The value of the enumerated element bulgarian.
 */
enum{bulgarian = 2};
/**
 * The value of the enumerated element chineseTradCan.
 */
enum{chineseTradCan = 3};
/**
 * The value of the enumerated element chineseSimpMan.
 */
enum{chineseSimpMan = 4};
/**
 * The value of the enumerated element chineseTradMan.
 */
enum{chineseTradMan = 5};
/**
 * The value of the enumerated element czech.
 */
enum{czech = 6};
/**
 * The value of the enumerated element danish.
 */
enum{danish = 7};
/**
 * The value of the enumerated element dutch.
 */
enum{dutch = 8};
/**
 * The value of the enumerated element australianEnglish.
 */
enum{australianEnglish = 9};
/**
 * The value of the enumerated element ukEnglish.
 */
enum{ukEnglish = 10};
/**
 * The value of the enumerated element americanEnglish.
 */
enum{americanEnglish = 11};
/**
 * The value of the enumerated element estonian.
 */
enum{estonian = 12};
/**
 * The value of the enumerated element finnish.
 */
enum{finnish = 13};
/**
 * The value of the enumerated element flemish.
 */
enum{flemish = 14};
/**
 * The value of the enumerated element canadianFrench.
 */
enum{canadianFrench = 15};
/**
 * The value of the enumerated element french.
 */
enum{french = 16};
/**
 * The value of the enumerated element german.
 */
enum{german = 17};
/**
 * The value of the enumerated element greek.
 */
enum{greek = 18};
/**
 * The value of the enumerated element hungarian.
 */
enum{hungarian = 19};
/**
 * The value of the enumerated element italian.
 */
enum{italian = 20};
/**
 * The value of the enumerated element japanese.
 */
enum{japanese = 21};
/**
 * The value of the enumerated element korean.
 */
enum{korean = 22};
/**
 * The value of the enumerated element latvian.
 */
enum{latvian = 23};
/**
 * The value of the enumerated element lithuanian.
 */
enum{lithuanian = 24};
/**
 * The value of the enumerated element norwegian.
 */
enum{norwegian = 25};
/**
 * The value of the enumerated element polish.
 */
enum{polish = 26};
/**
 * The value of the enumerated element brazilianPortuguese.
 */
enum{brazilianPortuguese = 27};
/**
 * The value of the enumerated element portuguese.
 */
enum{portuguese = 28};
/**
 * The value of the enumerated element romanian.
 */
enum{romanian = 29};
/**
 * The value of the enumerated element russian.
 */
enum{russian = 30};
/**
 * The value of the enumerated element slovak.
 */
enum{slovak = 31};
/**
 * The value of the enumerated element slovene.
 */
enum{slovene = 32};
/**
 * The value of the enumerated element spanish.
 */
enum{spanish = 33};
/**
 * The value of the enumerated element americanSpanish.
 */
enum{americanSpanish = 34};
/**
 * The value of the enumerated element swedish.
 */
enum{swedish = 35};
/**
 * The value of the enumerated element thai.
 */
enum{thai = 36};
/**
 * The value of the enumerated element turkish.
 */
enum{turkish = 37};

/**
 * The value of the enumerated element MaBusinessType__rvdcSetting.
 */
enum{MaBusinessType__rvdcSetting = 0};
/**
 * The value of the enumerated element MaBusinessType__assignmentNotification.
 */
enum{MaBusinessType__assignmentNotification = 1};
/**
 * The value of the enumerated element MaBusinessType__maSynchronizationReq.
 */
enum{MaBusinessType__maSynchronizationReq = 2};
/**
 * The value of the enumerated element MaBusinessType__maSynchronization.
 */
enum{MaBusinessType__maSynchronization = 3};
/**
 * The value of the enumerated element MaBusinessType__exceptionHandling.
 */
enum{MaBusinessType__exceptionHandling = 4};
/**
 * The value of the enumerated element MaBusinessType__measurementDataPackage.
 */
enum{MaBusinessType__measurementDataPackage = 5};

/**
 * The value of the enumerated element Operator__or.
 */
enum{Operator__or = 0};
/**
 * The value of the enumerated element Operator__and.
 */
enum{Operator__and = 1};

/**
 * The value of the enumerated element startofdcy.
 */
enum{startofdcy = 0};
/**
 * The value of the enumerated element endofdcy.
 */
enum{endofdcy = 1};

/**
 * The value of the enumerated element noDr.
 */
enum{noDr = 0};
/**
 * The value of the enumerated element drNoMapMatch.
 */
enum{drNoMapMatch = 1};
/**
 * The value of the enumerated element drMapMatched.
 */
enum{drMapMatched = 2};

/**
 * The value of the enumerated element notAvailable.
 */
enum{notAvailable = 0};
/**
 * The value of the enumerated element noFix.
 */
enum{noFix = 1};
/**
 * The value of the enumerated element fix2D.
 */
enum{fix2D = 2};
/**
 * The value of the enumerated element fix3D.
 */
enum{fix3D = 3};
/**
 * The value of the enumerated element startupMode.
 */
enum{startupMode = 4};

/**
 * The value of the enumerated element periodicTrg.
 */
enum{periodicTrg = 1};
/**
 * The value of the enumerated element umChangeTrg.
 */
enum{umChangeTrg = 2};
/**
 * The value of the enumerated element chargeStartTrg.
 */
enum{chargeStartTrg = 3};
/**
 * The value of the enumerated element chargeStopTrg.
 */
enum{chargeStopTrg = 4};
/**
 * The value of the enumerated element disableRmsTrg.
 */
enum{disableRmsTrg = 5};

/**
 * The value of the integer element incorrectState.
 */
enum{incorrectState = ((asnMAXSINT)1U)};
/**
 * The value of the integer element invalidData.
 */
enum{invalidData = ((asnMAXSINT)2U)};
/**
 * The value of the integer element invalidFormat.
 */
enum{invalidFormat = ((asnMAXSINT)3U)};
/**
 * The value of the integer element powderModeNotCorrect.
 */
enum{powderModeNotCorrect = ((asnMAXSINT)4U)};
/**
 * The value of the integer element conditionsNotCorrect.
 */
enum{conditionsNotCorrect = ((asnMAXSINT)5U)};
/**
 * The value of the integer element executionFailure.
 */
enum{executionFailure = ((asnMAXSINT)6U)};
/**
 * The value of the integer element permissionDenied.
 */
enum{permissionDenied = ((asnMAXSINT)7U)};
/**
 * The value of the integer element timeout.
 */
enum{timeout = ((asnMAXSINT)8U)};
/**
 * The value of the integer element backupBatteryUsage.
 */
enum{backupBatteryUsage = ((asnMAXSINT)9U)};

/**
 * The value of the integer element door_unlock.
 */
enum{door_unlock = ((asnMAXSINT)0U)};
/**
 * The value of the integer element event_trigger.
 */
enum{event_trigger = ((asnMAXSINT)1U)};
/**
 * The value of the integer element status_report.
 */
enum{status_report = ((asnMAXSINT)2U)};

/**
 * The value of the integer element startService.
 */
enum{startService = ((asnMAXSINT)0U)};
/**
 * The value of the integer element requestData.
 */
enum{requestData = ((asnMAXSINT)1U)};
/**
 * The value of the integer element responseData.
 */
enum{responseData = ((asnMAXSINT)2U)};
/**
 * The value of the integer element executionAction.
 */
enum{executionAction = ((asnMAXSINT)4U)};
/**
 * The value of the integer element terminateService.
 */
enum{terminateService = ((asnMAXSINT)20U)};

/**
 * The value of the integer element mtp.
 */
enum{mtp = ((asnMAXSINT)1U)};
/**
 * The value of the integer element mtu.
 */
enum{mtu = ((asnMAXSINT)2U)};
/**
 * The value of the integer element mcu.
 */
enum{mcu = ((asnMAXSINT)4U)};
/**
 * The value of the integer element mpm.
 */
enum{mpm = ((asnMAXSINT)5U)};
/**
 * The value of the integer element mta.
 */
enum{mta = ((asnMAXSINT)6U)};
/**
 * The value of the integer element mul.
 */
enum{mul = ((asnMAXSINT)7U)};
/**
 * The value of the integer element mrs.
 */
enum{mrs = ((asnMAXSINT)8U)};
/**
 * The value of the integer element rin.
 */
enum{rin = ((asnMAXSINT)11U)};
/**
 * The value of the integer element rdl.
 */
enum{rdl = ((asnMAXSINT)13U)};
/**
 * The value of the integer element rdu.
 */
enum{rdu = ((asnMAXSINT)14U)};
/**
 * The value of the integer element rtl.
 */
enum{rtl = ((asnMAXSINT)15U)};
/**
 * The value of the integer element rtu.
 */
enum{rtu = ((asnMAXSINT)16U)};
/**
 * The value of the integer element res.
 */
enum{res = ((asnMAXSINT)17U)};
/**
 * The value of the integer element rvi.
 */
enum{rvi = ((asnMAXSINT)18U)};
/**
 * The value of the integer element rcc.
 */
enum{rcc = ((asnMAXSINT)19U)};
/**
 * The value of the integer element rce.
 */
enum{rce = ((asnMAXSINT)20U)};
/**
 * The value of the integer element rhl.
 */
enum{rhl = ((asnMAXSINT)21U)};
/**
 * The value of the integer element rsh.
 */
enum{rsh = ((asnMAXSINT)22U)};
/**
 * The value of the integer element rws.
 */
enum{rws = ((asnMAXSINT)23U)};
/**
 * The value of the integer element rpc.
 */
enum{rpc = ((asnMAXSINT)24U)};
/**
 * The value of the integer element rpp.
 */
enum{rpp = ((asnMAXSINT)25U)};
/**
 * The value of the integer element ren.
 */
enum{ren = ((asnMAXSINT)26U)};
/**
 * The value of the integer element rec.
 */
enum{rec = ((asnMAXSINT)27U)};
/**
 * The value of the integer element cec.
 */
enum{cec = ((asnMAXSINT)31U)};
/**
 * The value of the integer element cep.
 */
enum{cep = ((asnMAXSINT)32U)};
/**
 * The value of the integer element cbc.
 */
enum{cbc = ((asnMAXSINT)33U)};
/**
 * The value of the integer element cic.
 */
enum{cic = ((asnMAXSINT)34U)};
/**
 * The value of the integer element svt.
 */
enum{svt = ((asnMAXSINT)41U)};
/**
 * The value of the integer element stn.
 */
enum{stn = ((asnMAXSINT)44U)};
/**
 * The value of the integer element rvs.
 */
enum{rvs = ((asnMAXSINT)51U)};
/**
 * The value of the integer element trs.
 */
enum{trs = ((asnMAXSINT)52U)};
/**
 * The value of the integer element jou.
 */
enum{jou = ((asnMAXSINT)61U)};
/**
 * The value of the integer element hec.
 */
enum{hec = ((asnMAXSINT)62U)};
/**
 * The value of the integer element dia.
 */
enum{dia = ((asnMAXSINT)63U)};
/**
 * The value of the integer element ServiceId__ota.
 */
enum{ServiceId__ota = ((asnMAXSINT)67U)};
/**
 * The value of the integer element osc.
 */
enum{osc = ((asnMAXSINT)68U)};
/**
 * The value of the integer element vun.
 */
enum{vun = ((asnMAXSINT)69U)};
/**
 * The value of the integer element dkb.
 */
enum{dkb = ((asnMAXSINT)80U)};
/**
 * The value of the integer element bks.
 */
enum{bks = ((asnMAXSINT)89U)};
/**
 * The value of the integer element bdc.
 */
enum{bdc = ((asnMAXSINT)90U)};
/**
 * The value of the integer element wcr.
 */
enum{wcr = ((asnMAXSINT)71U)};
/**
 * The value of the integer element rsv.
 */
enum{rsv = ((asnMAXSINT)72U)};
/**
 * The value of the integer element mcp.
 */
enum{mcp = ((asnMAXSINT)101U)};
/**
 * The value of the integer element msr.
 */
enum{msr = ((asnMAXSINT)102U)};
/**
 * The value of the integer element ServiceId__fota.
 */
enum{ServiceId__fota = ((asnMAXSINT)200U)};
/**
 * The value of the integer element rct.
 */
enum{rct = ((asnMAXSINT)201U)};
/**
 * The value of the integer element vdr.
 */
enum{vdr = ((asnMAXSINT)202U)};
/**
 * The value of the integer element rdo.
 */
enum{rdo = ((asnMAXSINT)203U)};
/**
 * The value of the integer element rdc.
 */
enum{rdc = ((asnMAXSINT)204U)};
/**
 * The value of the integer element sra.
 */
enum{sra = ((asnMAXSINT)205U)};
/**
 * The value of the integer element rcr.
 */
enum{rcr = ((asnMAXSINT)206U)};
/**
 * The value of the integer element rfd.
 */
enum{rfd = ((asnMAXSINT)207U)};
/**
 * The value of the integer element rqt.
 */
enum{rqt = ((asnMAXSINT)208U)};
/**
 * The value of the integer element rcs.
 */
enum{rcs = ((asnMAXSINT)209U)};
/**
 * The value of the integer element uvs.
 */
enum{uvs = ((asnMAXSINT)210U)};
/**
 * The value of the integer element rvc.
 */
enum{rvc = ((asnMAXSINT)250U)};
/**
 * The value of the integer element pvs.
 */
enum{pvs = ((asnMAXSINT)300U)};
/**
 * The value of the integer element rms.
 */
enum{rms = ((asnMAXSINT)500U)};

/**
 * The rank of the named bit testFailed in the named bit table.
 */
enum{testFailed = 0};
/**
 * The rank of the named bit testFailedThisOperationCycle in the named bit table.
 */
enum{testFailedThisOperationCycle = 1};
/**
 * The rank of the named bit pendingDTC in the named bit table.
 */
enum{pendingDTC = 2};
/**
 * The rank of the named bit confirmedDTC in the named bit table.
 */
enum{confirmedDTC = 3};
/**
 * The rank of the named bit testNotCompletedSinceLastClear in the named bit table.
 */
enum{testNotCompletedSinceLastClear = 4};
/**
 * The rank of the named bit testFailedSinceLastClear in the named bit table.
 */
enum{testFailedSinceLastClear = 5};
/**
 * The rank of the named bit testNotCompletedThisOperationCycle in the named bit table.
 */
enum{testNotCompletedThisOperationCycle = 6};
/**
 * The rank of the named bit warningIndicatorRequested in the named bit table.
 */
enum{warningIndicatorRequested = 7};

/**
 * The value of the enumerated element unblocked.
 */
enum{unblocked = 0};
/**
 * The value of the enumerated element blocked.
 */
enum{blocked = 1};

/**
 * The value of the integer element engine_running.
 */
enum{engine_running = ((asnMAXSINT)0U)};
/**
 * The value of the integer element engine_off.
 */
enum{engine_off = ((asnMAXSINT)1U)};
/**
 * The value of the integer element EngineStatus__unknown.
 */
enum{EngineStatus__unknown = ((asnMAXSINT)2U)};

/**
 * The value of the integer element petrol.
 */
enum{petrol = ((asnMAXSINT)0U)};
/**
 * The value of the integer element diesel.
 */
enum{diesel = ((asnMAXSINT)1U)};
/**
 * The value of the integer element petrolHybrid.
 */
enum{petrolHybrid = ((asnMAXSINT)2U)};
/**
 * The value of the integer element dieselHybrid.
 */
enum{dieselHybrid = ((asnMAXSINT)3U)};
/**
 * The value of the integer element ev.
 */
enum{ev = ((asnMAXSINT)4U)};
/**
 * The value of the integer element hydrogenFuelcellEV.
 */
enum{hydrogenFuelcellEV = ((asnMAXSINT)5U)};
/**
 * The value of the integer element compressedGas.
 */
enum{compressedGas = ((asnMAXSINT)6U)};
/**
 * The value of the integer element liquefiedPropaneGas.
 */
enum{liquefiedPropaneGas = ((asnMAXSINT)7U)};
/**
 * The value of the integer element FuelType__invalid.
 */
enum{FuelType__invalid = ((asnMAXSINT)8U)};

/**
 * The value of the integer element ok.
 */
enum{ok = ((asnMAXSINT)0U)};
/**
 * The value of the integer element faulty.
 */
enum{faulty = ((asnMAXSINT)1U)};
/**
 * The value of the integer element HealthStatus__unknown.
 */
enum{HealthStatus__unknown = ((asnMAXSINT)2U)};
/**
 * The value of the integer element HealthStatus__invalid.
 */
enum{HealthStatus__invalid = ((asnMAXSINT)3U)};

/**
 * The value of the integer element no_key_inserted.
 */
enum{no_key_inserted = ((asnMAXSINT)0U)};
/**
 * The value of the integer element key_inserted.
 */
enum{key_inserted = ((asnMAXSINT)1U)};
/**
 * The value of the integer element KeyStatus__unknown.
 */
enum{KeyStatus__unknown = ((asnMAXSINT)2U)};

/**
 * The value of the integer element mainBattery.
 */
enum{mainBattery = ((asnMAXSINT)0U)};
/**
 * The value of the integer element PowerSource__backupBattery.
 */
enum{PowerSource__backupBattery = ((asnMAXSINT)1U)};

/**
 * The value of the enumerated element no_srs_info.
 */
enum{no_srs_info = 0};
/**
 * The value of the enumerated element srs_not_deployed.
 */
enum{srs_not_deployed = 1};
/**
 * The value of the enumerated element srs_deployed.
 */
enum{srs_deployed = 2};

/**
 * The value of the enumerated element calendar.
 */
enum{calendar = 0};
/**
 * The value of the enumerated element distance.
 */
enum{distance = 1};
/**
 * The value of the enumerated element engineHours.
 */
enum{engineHours = 2};
/**
 * The value of the enumerated element engineRequest.
 */
enum{engineRequest = 3};
/**
 * The value of the enumerated element other.
 */
enum{other = 4};

/**
 * The value of the enumerated element normal.
 */
enum{normal = 0};
/**
 * The value of the enumerated element standby.
 */
enum{standby = 1};
/**
 * The value of the enumerated element sleep_poll.
 */
enum{sleep_poll = 2};
/**
 * The value of the enumerated element off.
 */
enum{off = 3};


/**
 * The value of the integer element passengerVehicle.
 */
enum{passengerVehicle = ((asnMAXSINT)0U)};
/**
 * The value of the integer element bus.
 */
enum{bus = ((asnMAXSINT)1U)};
/**
 * The value of the integer element cargo.
 */
enum{cargo = ((asnMAXSINT)2U)};
/**
 * The value of the integer element motorCycle.
 */
enum{motorCycle = ((asnMAXSINT)3U)};

/**
 * The flag to mark the presence of the element serviceId in the optional field.
 */
enum{asn_serviceId = 0};
/**
 * The flag to mark the presence of the element serviceData in the optional field.
 */
enum{asn_serviceData = 1};
/**
 * The flag to mark the presence of the element seq in the optional field.
 */
enum{asn_seq = 2};
/**
 * Class representing the RequestBody type.
 */
class RequestBody : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An INTEGER value.
       * Use the following values :
       * <BR>{@link #mtp}
       * <BR>{@link #mtu}
       * <BR>{@link #mcu}
       * <BR>{@link #mpm}
       * <BR>{@link #mta}
       * <BR>{@link #mul}
       * <BR>{@link #mrs}
       * <BR>{@link #rin}
       * <BR>{@link #rdl}
       * <BR>{@link #rdu}
       * <BR>{@link #rtl}
       * <BR>{@link #rtu}
       * <BR>{@link #res}
       * <BR>{@link #rvi}
       * <BR>{@link #rcc}
       * <BR>{@link #rce}
       * <BR>{@link #rhl}
       * <BR>{@link #rsh}
       * <BR>{@link #rws}
       * <BR>{@link #rpc}
       * <BR>{@link #rpp}
       * <BR>{@link #ren}
       * <BR>{@link #rec}
       * <BR>{@link #cec}
       * <BR>{@link #cep}
       * <BR>{@link #cbc}
       * <BR>{@link #cic}
       * <BR>{@link #svt}
       * <BR>{@link #stn}
       * <BR>{@link #rvs}
       * <BR>{@link #trs}
       * <BR>{@link #jou}
       * <BR>{@link #hec}
       * <BR>{@link #dia}
       * <BR>{@link #ServiceId__ota}
       * <BR>{@link #osc}
       * <BR>{@link #vun}
       * <BR>{@link #dkb}
       * <BR>{@link #bks}
       * <BR>{@link #bdc}
       * <BR>{@link #wcr}
       * <BR>{@link #rsv}
       * <BR>{@link #mcp}
       * <BR>{@link #msr}
       * <BR>{@link #ServiceId__fota}
       * <BR>{@link #rct}
       * <BR>{@link #vdr}
       * <BR>{@link #rdo}
       * <BR>{@link #rdc}
       * <BR>{@link #sra}
       * <BR>{@link #rcr}
       * <BR>{@link #rfd}
       * <BR>{@link #rqt}
       * <BR>{@link #rcs}
       * <BR>{@link #uvs}
       * <BR>{@link #rvc}
       * <BR>{@link #pvs}
       * <BR>{@link #rms}
       * <BR>Optional field: use {@link #asn_serviceId} to set the presence in the optional field.
       */
      asnMAXSINT serviceId;
      /**
       * <BR> Determines the service that is being executed (defined in service specific
       *  ASN.1 file)
       * <br>A SEQUENCE value.
       * See {@link ServiceData} for more informations.
       * <BR>Optional field: use {@link #asn_serviceData} to set the presence in the optional field.
       */
      ServiceData * serviceData;
      /**
       * <BR> Service specific data (defined in service specific ASN.1 file)
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_seq} to set the presence in the optional field.
       */
      asnMAXSINT seq;

      /**
       * Default constructor.
       */
      RequestBody();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const RequestBody&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      RequestBody(const RequestBody& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      RequestBody(const RequestBody& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : RequestBody
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~RequestBody();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[0]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asncServiceData__serviceParameterss : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString key;
      /**
       * <BR> different type of values, support int, string, boolean and timestamp
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_intVal} to set the presence in the optional field.
       */
      asnMAXSINT intVal;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__stringVal} to set the presence in the optional field.
       */
      asnOctetString stringVal;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__boolVal} to set the presence in the optional field.
       */
      asnBOOL boolVal;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_ServiceParameter__timestampVal} to set the presence in the optional field.
       */
      TimeStamp * timestampVal;
      /**
       * <br>An OCTET STRING value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__dataVal} to set the presence in the optional field.
       */
      asnOctetString dataVal;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asncServiceData__serviceParameterss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncServiceData__serviceParameterss(const asncServiceData__serviceParameterss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncServiceData__serviceParameterss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncServiceData__serviceParameterss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncServiceData__serviceParameterss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncServiceData__serviceParameterss(const asncServiceData__serviceParameterss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asncattributess : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString key;
      /**
       * <BR> different type of values, support int, string, boolean and timestamp
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_intVal} to set the presence in the optional field.
       */
      asnMAXSINT intVal;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__stringVal} to set the presence in the optional field.
       */
      asnOctetString stringVal;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__boolVal} to set the presence in the optional field.
       */
      asnBOOL boolVal;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_ServiceParameter__timestampVal} to set the presence in the optional field.
       */
      TimeStamp * timestampVal;
      /**
       * <br>An OCTET STRING value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__dataVal} to set the presence in the optional field.
       */
      asnOctetString dataVal;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asncattributess();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncattributess(const asncattributess& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncattributess();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncattributess
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncattributess&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncattributess(const asncattributess& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SET OF type
 */
class asncpoiss : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An UTF8String value.
       */
      asnOctetString name;
      /**
       * <br>A SEQUENCE value.
       * See {@link Position} for more informations.
       * <BR>Optional field: use {@link #asn_position} to set the presence in the optional field.
       */
      Position * position;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_type} to set the presence in the optional field.
       */
      asnOctetString type;
      /**
       * <br>A SEQUENCE value.
       * See {@link ContactInfo} for more informations.
       * <BR>Optional field: use {@link #asn_contactInfo} to set the presence in the optional field.
       */
      ContactInfo * contactInfo;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_url} to set the presence in the optional field.
       */
      asnOctetString url;
      /**
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncattributess}.
       * <BR>Optional field: use {@link #asn_attributes} to set the presence in the optional field.
       */
      asnList attributes; //elements are of class asncattributess

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asncpoiss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncpoiss(const asncpoiss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncpoiss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncpoiss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncpoiss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncpoiss(const asncpoiss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asncConfigurationItem__parameterss : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString key;
      /**
       * <BR> different type of values, support int, string, boolean and timestamp
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_intVal} to set the presence in the optional field.
       */
      asnMAXSINT intVal;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__stringVal} to set the presence in the optional field.
       */
      asnOctetString stringVal;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__boolVal} to set the presence in the optional field.
       */
      asnBOOL boolVal;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_ServiceParameter__timestampVal} to set the presence in the optional field.
       */
      TimeStamp * timestampVal;
      /**
       * <br>An OCTET STRING value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__dataVal} to set the presence in the optional field.
       */
      asnOctetString dataVal;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asncConfigurationItem__parameterss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncConfigurationItem__parameterss(const asncConfigurationItem__parameterss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncConfigurationItem__parameterss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncConfigurationItem__parameterss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncConfigurationItem__parameterss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncConfigurationItem__parameterss(const asncConfigurationItem__parameterss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SET OF type
 */
class asncConfiguration__itemss : public asnListElement
{
   public :
      /**
       * <br>A PrintableString value.
       */
      asnOctetString name;
      /**
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncConfigurationItem__parameterss}.
       */
      asnList parameters; //elements are of class asncConfigurationItem__parameterss


      /**
       * Default constructor.
       */
      asncConfiguration__itemss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncConfiguration__itemss(const asncConfiguration__itemss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncConfiguration__itemss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncConfiguration__itemss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncConfiguration__itemss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncConfiguration__itemss(const asncConfiguration__itemss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SET OF type
 */
class asncFragStrs__itemss : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT id;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT activated;
      /**
       * <BR> 0x0 yes,0x1 no
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_level} to set the presence in the optional field.
       */
      asnMAXSINT level;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_FragItem__code} to set the presence in the optional field.
       */
      asnOctetString code;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asncFragStrs__itemss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncFragStrs__itemss(const asncFragStrs__itemss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncFragStrs__itemss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncFragStrs__itemss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncFragStrs__itemss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncFragStrs__itemss(const asncFragStrs__itemss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SET OF type
 */
class asncdtcss : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString dtc;
      /**
       * <BR>ID of the trouble code. OEM specific,
       * <br>A BIT STRING value.
       * Use the following values :
       * <BR>{@link #testFailed}
       * <BR>{@link #testFailedThisOperationCycle}
       * <BR>{@link #pendingDTC}
       * <BR>{@link #confirmedDTC}
       * <BR>{@link #testNotCompletedSinceLastClear}
       * <BR>{@link #testFailedSinceLastClear}
       * <BR>{@link #testNotCompletedThisOperationCycle}
       * <BR>{@link #warningIndicatorRequested}
       */
      asnNamedBitString status;
      /**
       * <BR>status of the DTC. Follows ISO 14229
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_failureCount} to set the presence in the optional field.
       */
      asnMAXSINT failureCount;
      /**
       * <BR>Failure counter.
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_lastFail} to set the presence in the optional field.
       */
      TimeStamp * lastFail;
      /**
       * <BR>Time of last failure
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_firtFail} to set the presence in the optional field.
       */
      TimeStamp * firtFail;
      /**
       * <BR>Time of first failure
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_firstFailureOdometer} to set the presence in the optional field.
       */
      asnMAXSINT firstFailureOdometer;
      /**
       * <BR>the odometer at the first failure
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_firstFailureBatteryVoltage} to set the presence in the optional field.
       */
      asnMAXSINT firstFailureBatteryVoltage;
      /**
       * <BR>the battery voltage at the first failure
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_firstFailureVehicleSpeed} to set the presence in the optional field.
       */
      asnMAXSINT firstFailureVehicleSpeed;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asncdtcss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncdtcss(const asncdtcss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncdtcss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncdtcss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncdtcss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncdtcss(const asncdtcss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SET OF type
 */
class asncconnectEstablishedLists : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_connectTime} to set the presence in the optional field.
       */
      TimeStamp * connectTime;
      /**
       * <br>A SEQUENCE value.
       * See {@link Position} for more informations.
       * <BR>Optional field: use {@link #asn_connectPosition} to set the presence in the optional field.
       */
      Position * connectPosition;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_connectType} to set the presence in the optional field.
       */
      asnOctetString connectType;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_numRetriesConnect} to set the presence in the optional field.
       */
      asnMAXSINT numRetriesConnect;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_retryReason} to set the presence in the optional field.
       */
      asnOctetString retryReason;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asncconnectEstablishedLists();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncconnectEstablishedLists(const asncconnectEstablishedLists& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncconnectEstablishedLists();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncconnectEstablishedLists
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncconnectEstablishedLists&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncconnectEstablishedLists(const asncconnectEstablishedLists& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SET OF type
 */
class asnclostConnectionsLists : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_connectTime} to set the presence in the optional field.
       */
      TimeStamp * connectTime;
      /**
       * <br>A SEQUENCE value.
       * See {@link Position} for more informations.
       * <BR>Optional field: use {@link #asn_connectPosition} to set the presence in the optional field.
       */
      Position * connectPosition;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_connectType} to set the presence in the optional field.
       */
      asnOctetString connectType;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_numRetriesConnect} to set the presence in the optional field.
       */
      asnMAXSINT numRetriesConnect;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_retryReason} to set the presence in the optional field.
       */
      asnOctetString retryReason;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asnclostConnectionsLists();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asnclostConnectionsLists(const asnclostConnectionsLists& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asnclostConnectionsLists();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asnclostConnectionsLists
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asnclostConnectionsLists&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asnclostConnectionsLists(const asnclostConnectionsLists& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asncCarConfig__itemss : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString key;
      /**
       * <BR> different type of values, support int, string, boolean and timestamp
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_intVal} to set the presence in the optional field.
       */
      asnMAXSINT intVal;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__stringVal} to set the presence in the optional field.
       */
      asnOctetString stringVal;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__boolVal} to set the presence in the optional field.
       */
      asnBOOL boolVal;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_ServiceParameter__timestampVal} to set the presence in the optional field.
       */
      TimeStamp * timestampVal;
      /**
       * <br>An OCTET STRING value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__dataVal} to set the presence in the optional field.
       */
      asnOctetString dataVal;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asncCarConfig__itemss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncCarConfig__itemss(const asncCarConfig__itemss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncCarConfig__itemss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncCarConfig__itemss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncCarConfig__itemss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncCarConfig__itemss(const asncCarConfig__itemss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SET OF type
 */
class asncAdditionalStatus__signalss : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString key;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_collectTime} to set the presence in the optional field.
       */
      TimeStamp * collectTime;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_value} to set the presence in the optional field.
       */
      asnMAXSINT value;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_GenericVehicleSignal__stringVal} to set the presence in the optional field.
       */
      asnOctetString stringVal;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_GenericVehicleSignal__boolVal} to set the presence in the optional field.
       */
      asnBOOL boolVal;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_GenericVehicleSignal__timestampVal} to set the presence in the optional field.
       */
      TimeStamp * timestampVal;
      /**
       * <br>An OCTET STRING value.
       * <BR>Optional field: use {@link #asn_GenericVehicleSignal__dataVal} to set the presence in the optional field.
       */
      asnOctetString dataVal;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asncAdditionalStatus__signalss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncAdditionalStatus__signalss(const asncAdditionalStatus__signalss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncAdditionalStatus__signalss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncAdditionalStatus__signalss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncAdditionalStatus__signalss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncAdditionalStatus__signalss(const asncAdditionalStatus__signalss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asncrecentPositionss : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <BR> format: milliarcsecond <=> degree * 3600000
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_latitude} to set the presence in the optional field.
       */
      asnMAXSINT latitude;
      /**
       * <BR> 32 bits
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_longitude} to set the presence in the optional field.
       */
      asnMAXSINT longitude;
      /**
       * <BR> 32 bits
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_altitude} to set the presence in the optional field.
       */
      asnMAXSINT altitude;
      /**
       * <BR> the altitude in meter
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_posCanBeTrusted} to set the presence in the optional field.
       */
      asnBOOL posCanBeTrusted;
      /**
       * <BR> false means TEM use last position instead of GPS, default is true
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_carLocatorStatUploadEn} to set the presence in the optional field.
       */
      asnBOOL carLocatorStatUploadEn;
      /**
       * <BR> can TEM upload position, user can enable/disable through IHU, default is true
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_marsCoordinates} to set the presence in the optional field.
       */
      asnBOOL marsCoordinates;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asncrecentPositionss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncrecentPositionss(const asncrecentPositionss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncrecentPositionss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncrecentPositionss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncrecentPositionss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncrecentPositionss(const asncrecentPositionss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SET OF type
 */
class asncOEMMSD__signalss : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString key;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_collectTime} to set the presence in the optional field.
       */
      TimeStamp * collectTime;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_value} to set the presence in the optional field.
       */
      asnMAXSINT value;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_GenericVehicleSignal__stringVal} to set the presence in the optional field.
       */
      asnOctetString stringVal;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_GenericVehicleSignal__boolVal} to set the presence in the optional field.
       */
      asnBOOL boolVal;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_GenericVehicleSignal__timestampVal} to set the presence in the optional field.
       */
      TimeStamp * timestampVal;
      /**
       * <br>An OCTET STRING value.
       * <BR>Optional field: use {@link #asn_GenericVehicleSignal__dataVal} to set the presence in the optional field.
       */
      asnOctetString dataVal;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asncOEMMSD__signalss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncOEMMSD__signalss(const asncOEMMSD__signalss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncOEMMSD__signalss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncOEMMSD__signalss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncOEMMSD__signalss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncOEMMSD__signalss(const asncOEMMSD__signalss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asncNotification__parameterss : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString key;
      /**
       * <BR> different type of values, support int, string, boolean and timestamp
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_intVal} to set the presence in the optional field.
       */
      asnMAXSINT intVal;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__stringVal} to set the presence in the optional field.
       */
      asnOctetString stringVal;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__boolVal} to set the presence in the optional field.
       */
      asnBOOL boolVal;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_ServiceParameter__timestampVal} to set the presence in the optional field.
       */
      TimeStamp * timestampVal;
      /**
       * <br>An OCTET STRING value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__dataVal} to set the presence in the optional field.
       */
      asnOctetString dataVal;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asncNotification__parameterss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncNotification__parameterss(const asncNotification__parameterss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncNotification__parameterss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncNotification__parameterss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncNotification__parameterss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncNotification__parameterss(const asncNotification__parameterss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asncpartIdentifierss : public asnListElement
{
   public :
      /**
       * <br>A PrintableString value.
       */
      asnOctetString value;

      /**
       * Default constructor.
       */
      asncpartIdentifierss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncpartIdentifierss(const asncpartIdentifierss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncpartIdentifierss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncpartIdentifierss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncpartIdentifierss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncpartIdentifierss(const asncpartIdentifierss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asncvalidationKeyss : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <BR> Validation Key (DID) used by the client to obtain ECU Part Identifiers using
       *  UDS
       * <br>A PrintableString value.
       */
      asnOctetString validationKey;
      /**
       * <BR> Part Identifier returned by the target ECU when requesting ECU key  
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncpartIdentifierss}.
       * <BR>Optional field: use {@link #asn_partIdentifiers} to set the presence in the optional field.
       */
      asnList partIdentifiers; //elements are of class asncpartIdentifierss

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asncvalidationKeyss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncvalidationKeyss(const asncvalidationKeyss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncvalidationKeyss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncvalidationKeyss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncvalidationKeyss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncvalidationKeyss(const asncvalidationKeyss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asncecuInventorys : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <BR> ECU Address
       * <br>A PrintableString value.
       */
      asnOctetString ecuAddress;
      /**
       * <BR> Validation Key (DID) used by the client to obtain ECU Part Identifiers using
       *  UDS
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncvalidationKeyss}.
       */
      asnList validationKeys; //elements are of class asncvalidationKeyss
      /**
       * <BR> Detailed Exception Message, detailing an exception
       * <BR> Detailed Exception Message, detailing an exception.
       * <BR> No response or final response received from the server (ECU) within timeout.
       * <BR> no-response (0),
       * <BR> The ECU response could not be interpreted by the client due to invalid length
       *  or data.
       * <BR> invalid-data (1),
       * <BR> ECU responds with negative response code (NRC) other than pending response.
       *  I.e. the ECU rejects the request.
       * <BR> nrc (2),
       * <BR> Maximum number of allowed repeat request times reached.
       * <BR> repeat-request-max-reached (3)
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_exceptionMessage} to set the presence in the optional field.
       */
      asnOctetString exceptionMessage;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asncecuInventorys();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncecuInventorys(const asncecuInventorys& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncecuInventorys();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncecuInventorys
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncecuInventorys&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncecuInventorys(const asncecuInventorys& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asncInventoryInstruction__ecuInstructionss : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <BR> ECU Address
       * <br>A PrintableString value.
       */
      asnOctetString ecuAddress;
      /**
       * <BR> Validation Key (DID) used by the client to obtain ECU Part Identifiers using
       *  UDS
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncvalidationKeyss}.
       */
      asnList validationKeys; //elements are of class asncvalidationKeyss
      /**
       * <BR> Detailed Exception Message, detailing an exception
       * <BR> Detailed Exception Message, detailing an exception.
       * <BR> No response or final response received from the server (ECU) within timeout.
       * <BR> no-response (0),
       * <BR> The ECU response could not be interpreted by the client due to invalid length
       *  or data.
       * <BR> invalid-data (1),
       * <BR> ECU responds with negative response code (NRC) other than pending response.
       *  I.e. the ECU rejects the request.
       * <BR> nrc (2),
       * <BR> Maximum number of allowed repeat request times reached.
       * <BR> repeat-request-max-reached (3)
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_exceptionMessage} to set the presence in the optional field.
       */
      asnOctetString exceptionMessage;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asncInventoryInstruction__ecuInstructionss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncInventoryInstruction__ecuInstructionss(const asncInventoryInstruction__ecuInstructionss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncInventoryInstruction__ecuInstructionss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncInventoryInstruction__ecuInstructionss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncInventoryInstruction__ecuInstructionss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncInventoryInstruction__ecuInstructionss(const asncInventoryInstruction__ecuInstructionss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asncsoftwarePartInstallationInstructionss : public asnListElement
{
   public :
      /**
       * <BR>Part Identifier, unique identifier of the software part
       * <br>A PrintableString value.
       */
      asnOctetString partidentifier;
      /**
       * <BR> Estimated Installation Time,required by the data file, specified in
       *  milliseconds.
       * <br>An INTEGER value.
       */
      asnMAXUINT estimatedInstallationtime;


      /**
       * Default constructor.
       */
      asncsoftwarePartInstallationInstructionss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncsoftwarePartInstallationInstructionss(const asncsoftwarePartInstallationInstructionss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncsoftwarePartInstallationInstructionss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncsoftwarePartInstallationInstructionss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncsoftwarePartInstallationInstructionss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncsoftwarePartInstallationInstructionss(const asncsoftwarePartInstallationInstructionss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asncInstruction__ecuInstructionss : public asnListElement
{
   public :
      /**
       * <BR>ECU Address
       * <br>A PrintableString value.
       */
      asnOctetString ecuAddress;
      /**
       * <BR>Number of Queued Request supported in by the target ECU
       * <br>An INTEGER value.
       */
      asnMAXSINT queuedRequest;
      /**
       * <BR>The Security Access Code shall be used by the on-board Installation Master BOOT
       *  during the installation attempt during program mode (BOOT)
       * <br>A PrintableString value.
       */
      asnOctetString securityKey;
      /**
       * <BR>Software Part Installation Instructions, detailing instructions and data
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncsoftwarePartInstallationInstructionss}.
       */
      asnList softwarePartInstallationInstructions; //elements are of class asncsoftwarePartInstallationInstructionss


      /**
       * Default constructor.
       */
      asncInstruction__ecuInstructionss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncInstruction__ecuInstructionss(const asncInstruction__ecuInstructionss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncInstruction__ecuInstructionss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncInstruction__ecuInstructionss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncInstruction__ecuInstructionss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncInstruction__ecuInstructionss(const asncInstruction__ecuInstructionss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SET OF type
 */
class asncpartidentifierss : public asnListElement
{
   public :
      /**
       * <br>A PrintableString value.
       */
      asnOctetString value;

      /**
       * Default constructor.
       */
      asncpartidentifierss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncpartidentifierss(const asncpartidentifierss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncpartidentifierss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncpartidentifierss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncpartidentifierss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncpartidentifierss(const asncpartidentifierss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asncassignmentValidationss : public asnListElement
{
   public :
      /**
       * <BR>Validation Type
       * <br>A PrintableString value.
       */
      asnOctetString validationType;
      /**
       * <BR>ECU Address
       * <br>A PrintableString value.
       */
      asnOctetString ecuAddress;
      /**
       * <BR>Validation Key, used to obtain part identifiers from the target ECU
       * <br>A PrintableString value.
       */
      asnOctetString validationkey;
      /**
       * <BR>Part Identifier, unique identifier for expected part
       * <br>Elements of this SET OF type.
       * <BR>Elements are of class {@link #asncpartidentifierss}.
       */
      asnList partidentifiers; //elements are of class asncpartidentifierss


      /**
       * Default constructor.
       */
      asncassignmentValidationss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncassignmentValidationss(const asncassignmentValidationss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncassignmentValidationss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncassignmentValidationss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncassignmentValidationss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncassignmentValidationss(const asncassignmentValidationss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asncinstructionss : public asnListElement
{
   public :
      /**
       * <BR>Shall be decreased for each transmission of an Installation order ID, then final
       *  ECU shall have the value 0. 
       * <br>An INTEGER value.
       */
      asnMAXSINT ecuRemaining;
      /**
       * <BR>installation Instructions Version
       * <br>A PrintableString value.
       */
      asnOctetString installationInstructionSversion;
      /**
       * <BR>Required Preparation Time for the vehicle to perform installation. specified in
       *  milliseconds.
       * <br>An INTEGER value.
       */
      asnMAXUINT requiredPreparationTime;
      /**
       * <BR>Expected Installation Time for the complete assignment.specified in milliseconds
       * <br>An INTEGER value.
       */
      asnMAXUINT expectedInstallationTime;
      /**
       * <BR>Encrypted VIN unique security access code for CEM009
       * <br>A PrintableString value.
       */
      asnOctetString area1112SecurityCode;
      /**
       * <BR>Target ECU Installation Instructions detailing the instructions for each target
       *  ECU
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncInstruction__ecuInstructionss}.
       */
      asnList ecuInstructions; //elements are of class asncInstruction__ecuInstructionss
      /**
       * <BR>Assignment Validation element
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncassignmentValidationss}.
       */
      asnList assignmentValidations; //elements are of class asncassignmentValidationss


      /**
       * Default constructor.
       */
      asncinstructionss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncinstructionss(const asncinstructionss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncinstructionss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncinstructionss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncinstructionss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncinstructionss(const asncinstructionss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asncsoftwarePartSummaryss : public asnListElement
{
   public :
      /**
       * <BR> Part Identifier identifying the Software Part
       * <br>A PrintableString value.
       */
      asnOctetString partIdentifier;
      /**
       * <BR> software Part Retries.
       * <br>An INTEGER value.
       */
      asnMAXSINT partRetries;
      /**
       * <BR>  Measured Installation Time defined in milliseconds (ms)
       * <br>An INTEGER value.
       */
      asnMAXSINT measuredInstallationTime;
      /**
       * <BR> Software Part Installation Status
       * <br>A PrintableString value.
       */
      asnOctetString softwarePartStatus;


      /**
       * Default constructor.
       */
      asncsoftwarePartSummaryss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncsoftwarePartSummaryss(const asncsoftwarePartSummaryss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncsoftwarePartSummaryss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncsoftwarePartSummaryss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncsoftwarePartSummaryss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncsoftwarePartSummaryss(const asncsoftwarePartSummaryss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asncecuSummaryss : public asnListElement
{
   public :
      /**
       * <BR> ECU Address
       * <br>A PrintableString value.
       */
      asnOctetString ecuAddress;
      /**
       * <BR>Total number of ECU Retries
       * <br>An INTEGER value.
       */
      asnMAXSINT ecuRetries;
      /**
       * <BR> ECU Installation Status.
       * <br>A PrintableString value.
       */
      asnOctetString ecuStatus;
      /**
       * <BR> Software Part Installation Summary. 
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncsoftwarePartSummaryss}.
       */
      asnList softwarePartSummarys; //elements are of class asncsoftwarePartSummaryss


      /**
       * Default constructor.
       */
      asncecuSummaryss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncecuSummaryss(const asncecuSummaryss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncecuSummaryss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncecuSummaryss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncecuSummaryss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncecuSummaryss(const asncecuSummaryss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asncexceptionReportss : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <BR> Installation Order ID, optional if Client Version is used.
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_ExceptionReport__installationOrderId} to set the presence in the optional field.
       */
      asnOctetString installationOrderId;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString timestamp;
      /**
       * <BR>Issuer Identifier, identifying the issuer of the Exception report
       * <br>A PrintableString value.
       */
      asnOctetString issuerId;
      /**
       * <BR>Client Version, optional if Installation Oder ID is used
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_clientConfigurationId} to set the presence in the optional field.
       */
      asnOctetString clientConfigurationId;
      /**
       * <BR>Data File Name identifying the Data File.   
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_dataFileName} to set the presence in the optional field.
       */
      asnOctetString dataFileName;
      /**
       * <BR> ECU Address
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_ecuAddress} to set the presence in the optional field.
       */
      asnOctetString ecuAddress;
      /**
       * <BR>Validation Key used to obtain Software Part Identifier from Target ECU. 
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_validationKey} to set the presence in the optional field.
       */
      asnOctetString validationKey;
      /**
       * <BR>Part Identifier identifying the Software Part. 
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_partIdentifier} to set the presence in the optional field.
       */
      asnOctetString partIdentifier;
      /**
       * <BR>Data Block Sequence Number detailing where/when the exception or failure
       *  occurred
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_dataBlockNumber} to set the presence in the optional field.
       */
      asnMAXSINT dataBlockNumber;
      /**
       * <br>A SEQUENCE value.
       * See {@link ExceptionMessage} for more informations.
       */
      ExceptionMessage * exceptionMessage;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asncexceptionReportss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncexceptionReportss(const asncexceptionReportss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncexceptionReportss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncexceptionReportss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncexceptionReportss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncexceptionReportss(const asncexceptionReportss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asncurlss : public asnListElement
{
   public :
      /**
       * <br>A PrintableString value.
       */
      asnOctetString value;

      /**
       * Default constructor.
       */
      asncurlss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncurlss(const asncurlss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncurlss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncurlss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncurlss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncurlss(const asncurlss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asncserviceParamss : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString key;
      /**
       * <BR> different type of values, support int, string, boolean and timestamp
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_intVal} to set the presence in the optional field.
       */
      asnMAXSINT intVal;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__stringVal} to set the presence in the optional field.
       */
      asnOctetString stringVal;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__boolVal} to set the presence in the optional field.
       */
      asnBOOL boolVal;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_ServiceParameter__timestampVal} to set the presence in the optional field.
       */
      TimeStamp * timestampVal;
      /**
       * <br>An OCTET STRING value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__dataVal} to set the presence in the optional field.
       */
      asnOctetString dataVal;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asncserviceParamss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncserviceParamss(const asncserviceParamss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncserviceParamss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncserviceParamss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncserviceParamss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncserviceParamss(const asncserviceParamss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asncassignFileInfoss : public asnListElement
{
   public :
      /**
       * <BR>file name
       * <br>A PrintableString value.
       */
      asnOctetString partidentifier;
      /**
       * <BR>Signature hash for the file 
       * <br>A PrintableString value.
       */
      asnOctetString softwarePartSignature;
      /**
       * <BR>CRC32 ethernet polynominal
       * <br>A PrintableString value.
       */
      asnOctetString fileCheckSum;


      /**
       * Default constructor.
       */
      asncassignFileInfoss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncassignFileInfoss(const asncassignFileInfoss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncassignFileInfoss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncassignFileInfoss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncassignFileInfoss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncassignFileInfoss(const asncassignFileInfoss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asncRvdcSetting__serviceParameterss : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString key;
      /**
       * <BR> different type of values, support int, string, boolean and timestamp
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_intVal} to set the presence in the optional field.
       */
      asnMAXSINT intVal;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__stringVal} to set the presence in the optional field.
       */
      asnOctetString stringVal;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__boolVal} to set the presence in the optional field.
       */
      asnBOOL boolVal;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_ServiceParameter__timestampVal} to set the presence in the optional field.
       */
      TimeStamp * timestampVal;
      /**
       * <br>An OCTET STRING value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__dataVal} to set the presence in the optional field.
       */
      asnOctetString dataVal;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asncRvdcSetting__serviceParameterss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncRvdcSetting__serviceParameterss(const asncRvdcSetting__serviceParameterss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncRvdcSetting__serviceParameterss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncRvdcSetting__serviceParameterss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncRvdcSetting__serviceParameterss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncRvdcSetting__serviceParameterss(const asncRvdcSetting__serviceParameterss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asncinstalledMas : public asnListElement
{
   public :
      /**
       * <br>An INTEGER value.
       */
      asnMAXUINT maId;
      /**
       * <br>An INTEGER value.
       */
      asnMAXUINT maVersion;


      /**
       * Default constructor.
       */
      asncinstalledMas();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncinstalledMas(const asncinstalledMas& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncinstalledMas();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncinstalledMas
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncinstalledMas&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncinstalledMas(const asncinstalledMas& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asncMaSynchronizationReq__serviceParameterss : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString key;
      /**
       * <BR> different type of values, support int, string, boolean and timestamp
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_intVal} to set the presence in the optional field.
       */
      asnMAXSINT intVal;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__stringVal} to set the presence in the optional field.
       */
      asnOctetString stringVal;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__boolVal} to set the presence in the optional field.
       */
      asnBOOL boolVal;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_ServiceParameter__timestampVal} to set the presence in the optional field.
       */
      TimeStamp * timestampVal;
      /**
       * <br>An OCTET STRING value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__dataVal} to set the presence in the optional field.
       */
      asnOctetString dataVal;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asncMaSynchronizationReq__serviceParameterss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncMaSynchronizationReq__serviceParameterss(const asncMaSynchronizationReq__serviceParameterss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncMaSynchronizationReq__serviceParameterss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncMaSynchronizationReq__serviceParameterss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncMaSynchronizationReq__serviceParameterss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncMaSynchronizationReq__serviceParameterss(const asncMaSynchronizationReq__serviceParameterss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asncremoveMass : public asnListElement
{
   public :
      /**
       * <br>An INTEGER value.
       */
      asnMAXUINT maId;
      /**
       * <br>An INTEGER value.
       */
      asnMAXUINT maVersion;


      /**
       * Default constructor.
       */
      asncremoveMass();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncremoveMass(const asncremoveMass& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncremoveMass();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncremoveMass
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncremoveMass&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncremoveMass(const asncremoveMass& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asncdiagnosticCommandss : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString ecuAddress;
      /**
       * <BR> This is the ECU target address for the request. 
       * <br>A PrintableString value.
       */
      asnOctetString serviceId;
      /**
       * <BR> This is the UDS service to be used
       * <br>A PrintableString value.
       */
      asnOctetString input;
      /**
       * <BR> This is the input to be added after the UDS service, this can contain sub
       *  service ID,Identifiers and/or other input data to the ECU.
       * <br>An ENUMERATED value.
       * Use the following enumeration values :
       * <BR>{@link #equalto}
       * <BR>{@link #greaterthan}
       * <BR>{@link #greaterthanorequal}
       * <BR>{@link #lessthan}
       * <BR>{@link #lessthanorequal}
       * <BR>Optional field: use {@link #asn_compareType} to set the presence in the optional field.
       */
      asnMAXSINT compareType;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_compareValue} to set the presence in the optional field.
       */
      asnOctetString compareValue;
      /**
       * <BR> This is the value to compare the ECU response to.
       * <br>An INTEGER value.
       */
      asnMAXSINT delayUntilNextTriggerCommand;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asncdiagnosticCommandss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncdiagnosticCommandss(const asncdiagnosticCommandss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncdiagnosticCommandss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncdiagnosticCommandss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncdiagnosticCommandss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncdiagnosticCommandss(const asncdiagnosticCommandss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asncecusAndPartNumberss : public asnListElement
{
   public :
      /**
       * <br>A PrintableString value.
       */
      asnOctetString ecuAddress;
      /**
       * <BR> This shall contain the ECU ID for the first ECU
       * <br>A PrintableString value.
       */
      asnOctetString diagnosticPartNumber;


      /**
       * Default constructor.
       */
      asncecusAndPartNumberss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncecusAndPartNumberss(const asncecusAndPartNumberss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncecusAndPartNumberss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncecusAndPartNumberss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncecusAndPartNumberss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncecusAndPartNumberss(const asncecusAndPartNumberss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asncdiagnosticCommands : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString ecuAddress;
      /**
       * <BR> This is the ECU target address for the request. 
       * <br>A PrintableString value.
       */
      asnOctetString serviceId;
      /**
       * <BR> This is the UDS service to be used
       * <br>A PrintableString value.
       */
      asnOctetString input;
      /**
       * <BR> This is the input to be added after the UDS service, this can contain sub
       *  service ID,Identifiers and/or other input data to the ECU.
       * <br>An ENUMERATED value.
       * Use the following enumeration values :
       * <BR>{@link #equalto}
       * <BR>{@link #greaterthan}
       * <BR>{@link #greaterthanorequal}
       * <BR>{@link #lessthan}
       * <BR>{@link #lessthanorequal}
       * <BR>Optional field: use {@link #asn_compareType} to set the presence in the optional field.
       */
      asnMAXSINT compareType;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_compareValue} to set the presence in the optional field.
       */
      asnOctetString compareValue;
      /**
       * <BR> This is the value to compare the ECU response to.
       * <br>An INTEGER value.
       */
      asnMAXSINT delayUntilNextTriggerCommand;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asncdiagnosticCommands();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncdiagnosticCommands(const asncdiagnosticCommands& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncdiagnosticCommands();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncdiagnosticCommands
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncdiagnosticCommands&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncdiagnosticCommands(const asncdiagnosticCommands& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asncMeasurementAssignment__serviceParameterss : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString key;
      /**
       * <BR> different type of values, support int, string, boolean and timestamp
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_intVal} to set the presence in the optional field.
       */
      asnMAXSINT intVal;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__stringVal} to set the presence in the optional field.
       */
      asnOctetString stringVal;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__boolVal} to set the presence in the optional field.
       */
      asnBOOL boolVal;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_ServiceParameter__timestampVal} to set the presence in the optional field.
       */
      TimeStamp * timestampVal;
      /**
       * <br>An OCTET STRING value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__dataVal} to set the presence in the optional field.
       */
      asnOctetString dataVal;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asncMeasurementAssignment__serviceParameterss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncMeasurementAssignment__serviceParameterss(const asncMeasurementAssignment__serviceParameterss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncMeasurementAssignment__serviceParameterss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncMeasurementAssignment__serviceParameterss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncMeasurementAssignment__serviceParameterss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncMeasurementAssignment__serviceParameterss(const asncMeasurementAssignment__serviceParameterss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asncnewMass : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An INTEGER value.
       */
      asnMAXUINT maId;
      /**
       * <br>An INTEGER value.
       */
      asnMAXUINT maVersion;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString vin;
      /**
       * <BR> The VIN is used to make sure a MA is not sent to cars which are not supposed to
       *  have the MA. This is also used for Signature verification.
       * <br>An INTEGER value.
       */
      asnMAXUINT maFormatVersion;
      /**
       * <BR> Describes the protocol version of the MA. This must be the same as the SW in
       *  vehicle gateway
       * <br>An INTEGER value.
       */
      asnMAXSINT maExecutionPriority;
      /**
       * <BR> The execution priority of the MA
       * <br>A SEQUENCE value.
       * See {@link TelematicsParameters} for more informations.
       */
      TelematicsParameters * telematicsParameters;
      /**
       * <BR> This contains telematics parameters
       * <br>An INTEGER value.
       */
      asnMAXUINT usageModesAllowed;
      /**
       * <BR> Shall equal the usage mode signal, only values active or driving are allowed.
       * <br>A PrintableString value.
       */
      asnOctetString startCondition;
      /**
       * <BR> The start time for the MA
       * <br>A SEQUENCE value.
       * See {@link StopCondition} for more informations.
       */
      StopCondition * stopCondition;
      /**
       * <BR> The condition to stop the MA. At least one stop condition must be chosen. This
       *  shall be checked during parsing.
       * <br>A PrintableString value.
       */
      asnOctetString retentiondate;
      /**
       * <BR> The retention date for the MA.
       * <br>A SEQUENCE value.
       * See {@link AuthorizationStatus} for more informations.
       */
      AuthorizationStatus * authorizationStatus;
      /**
       * <BR> The authorization status needed to perform the MA  
       * <br>A SEQUENCE value.
       * See {@link ExecutionTrigger} for more informations.
       */
      ExecutionTrigger * executionTrigger;
      /**
       * <BR> The type of execution trigger in the MA. Only one trigger type can be chosen.
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncecusAndPartNumberss}.
       */
      asnList ecusAndPartNumbers; //elements are of class asncecusAndPartNumberss
      /**
       * <BR> The number of ECUs which are needed to perform MA.
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncdiagnosticCommands}.
       */
      asnList diagnosticCommand; //elements are of class asncdiagnosticCommands
      /**
       * <BR> Specifies the diagnostic commands to be executed
       * <br>A PrintableString value.
       */
      asnOctetString dataIntegrityCheck;
      /**
       * <BR> This shall be a CRC32 over the entire payload.
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncMeasurementAssignment__serviceParameterss}.
       * <BR>Optional field: use {@link #asn_MeasurementAssignment__serviceParameters} to set the presence in the optional field.
       */
      asnList serviceParameters; //elements are of class asncMeasurementAssignment__serviceParameterss

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asncnewMass();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncnewMass(const asncnewMass& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncnewMass();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncnewMass
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncnewMass&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncnewMass(const asncnewMass& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asncMaSynchronization__serviceParameterss : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString key;
      /**
       * <BR> different type of values, support int, string, boolean and timestamp
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_intVal} to set the presence in the optional field.
       */
      asnMAXSINT intVal;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__stringVal} to set the presence in the optional field.
       */
      asnOctetString stringVal;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__boolVal} to set the presence in the optional field.
       */
      asnBOOL boolVal;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_ServiceParameter__timestampVal} to set the presence in the optional field.
       */
      TimeStamp * timestampVal;
      /**
       * <br>An OCTET STRING value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__dataVal} to set the presence in the optional field.
       */
      asnOctetString dataVal;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asncMaSynchronization__serviceParameterss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncMaSynchronization__serviceParameterss(const asncMaSynchronization__serviceParameterss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncMaSynchronization__serviceParameterss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncMaSynchronization__serviceParameterss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncMaSynchronization__serviceParameterss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncMaSynchronization__serviceParameterss(const asncMaSynchronization__serviceParameterss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asncMeasurementDataPackage__serviceParameterss : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString key;
      /**
       * <BR> different type of values, support int, string, boolean and timestamp
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_intVal} to set the presence in the optional field.
       */
      asnMAXSINT intVal;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__stringVal} to set the presence in the optional field.
       */
      asnOctetString stringVal;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__boolVal} to set the presence in the optional field.
       */
      asnBOOL boolVal;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_ServiceParameter__timestampVal} to set the presence in the optional field.
       */
      TimeStamp * timestampVal;
      /**
       * <br>An OCTET STRING value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__dataVal} to set the presence in the optional field.
       */
      asnOctetString dataVal;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asncMeasurementDataPackage__serviceParameterss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncMeasurementDataPackage__serviceParameterss(const asncMeasurementDataPackage__serviceParameterss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncMeasurementDataPackage__serviceParameterss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncMeasurementDataPackage__serviceParameterss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncMeasurementDataPackage__serviceParameterss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncMeasurementDataPackage__serviceParameterss(const asncMeasurementDataPackage__serviceParameterss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asnctrackpointss : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       */
      TimeStamp * systemTime;
      /**
       * <br>A SEQUENCE value.
       * See {@link Position} for more informations.
       */
      Position * position;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT speed;
      /**
       * <BR> kmph
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_TrackPoint__direction} to set the presence in the optional field.
       */
      asnMAXSINT direction;
      /**
       * <BR> 0 means North, clockwise    
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_isSVT} to set the presence in the optional field.
       */
      asnBOOL isSVT;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_TrackPoint__odometer} to set the presence in the optional field.
       */
      asnMAXSINT odometer;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_travelDistanceSinceLastWaypoint} to set the presence in the optional field.
       */
      asnMAXSINT travelDistanceSinceLastWaypoint;
      /**
       * <BR>Consumed fuel since trip start/last waypoint . 
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_fuelConsumptionSinceLastWaypoint} to set the presence in the optional field.
       */
      asnMAXSINT fuelConsumptionSinceLastWaypoint;
      /**
       * <BR>Electrical consumption since last sample.
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_electricConsumptionSinceLastSample} to set the presence in the optional field.
       */
      asnMAXSINT electricConsumptionSinceLastSample;
      /**
       * <BR>Electrical regeneration since last sample. 
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_electricRegenerationSinceLastSample} to set the presence in the optional field.
       */
      asnMAXSINT electricRegenerationSinceLastSample;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asnctrackpointss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asnctrackpointss(const asnctrackpointss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asnctrackpointss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asnctrackpointss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asnctrackpointss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asnctrackpointss(const asnctrackpointss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asncwaypointss : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <BR> format: milliarcsecond <=> degree * 3600000
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_latitude} to set the presence in the optional field.
       */
      asnMAXSINT latitude;
      /**
       * <BR> 32 bits
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_longitude} to set the presence in the optional field.
       */
      asnMAXSINT longitude;
      /**
       * <BR> 32 bits
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_altitude} to set the presence in the optional field.
       */
      asnMAXSINT altitude;
      /**
       * <BR> the altitude in meter
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_posCanBeTrusted} to set the presence in the optional field.
       */
      asnBOOL posCanBeTrusted;
      /**
       * <BR> false means TEM use last position instead of GPS, default is true
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_carLocatorStatUploadEn} to set the presence in the optional field.
       */
      asnBOOL carLocatorStatUploadEn;
      /**
       * <BR> can TEM upload position, user can enable/disable through IHU, default is true
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_marsCoordinates} to set the presence in the optional field.
       */
      asnBOOL marsCoordinates;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asncwaypointss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncwaypointss(const asncwaypointss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncwaypointss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncwaypointss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncwaypointss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncwaypointss(const asncwaypointss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asnctripFragmentss : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       */
      TimeStamp * startTime;
      /**
       * <br>A SEQUENCE value.
       * See {@link Position} for more informations.
       * <BR>Optional field: use {@link #asn_startPosition} to set the presence in the optional field.
       */
      Position * startPosition;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_TripFragment__startOdometer} to set the presence in the optional field.
       */
      asnMAXSINT startOdometer;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_startFuelLevel} to set the presence in the optional field.
       */
      asnMAXSINT startFuelLevel;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_startElectricConsumption} to set the presence in the optional field.
       */
      asnMAXSINT startElectricConsumption;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_startElectricRegeneration} to set the presence in the optional field.
       */
      asnMAXSINT startElectricRegeneration;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_TripFragment__endTime} to set the presence in the optional field.
       */
      TimeStamp * endTime;
      /**
       * <br>A SEQUENCE value.
       * See {@link Position} for more informations.
       * <BR>Optional field: use {@link #asn_endPosition} to set the presence in the optional field.
       */
      Position * endPosition;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_TripFragment__endOdometer} to set the presence in the optional field.
       */
      asnMAXSINT endOdometer;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_endFuelLevel} to set the presence in the optional field.
       */
      asnMAXSINT endFuelLevel;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_endElectricConsumption} to set the presence in the optional field.
       */
      asnMAXSINT endElectricConsumption;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_endElectricRegeneration} to set the presence in the optional field.
       */
      asnMAXSINT endElectricRegeneration;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[2];

      /**
       * Default constructor.
       */
      asnctripFragmentss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asnctripFragmentss(const asnctripFragmentss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asnctripFragmentss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asnctripFragmentss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asnctripFragmentss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asnctripFragmentss(const asnctripFragmentss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asnctrackPointss : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       */
      TimeStamp * systemTime;
      /**
       * <br>A SEQUENCE value.
       * See {@link Position} for more informations.
       */
      Position * position;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT speed;
      /**
       * <BR> kmph
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_TrackPoint__direction} to set the presence in the optional field.
       */
      asnMAXSINT direction;
      /**
       * <BR> 0 means North, clockwise    
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_isSVT} to set the presence in the optional field.
       */
      asnBOOL isSVT;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_TrackPoint__odometer} to set the presence in the optional field.
       */
      asnMAXSINT odometer;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_travelDistanceSinceLastWaypoint} to set the presence in the optional field.
       */
      asnMAXSINT travelDistanceSinceLastWaypoint;
      /**
       * <BR>Consumed fuel since trip start/last waypoint . 
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_fuelConsumptionSinceLastWaypoint} to set the presence in the optional field.
       */
      asnMAXSINT fuelConsumptionSinceLastWaypoint;
      /**
       * <BR>Electrical consumption since last sample.
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_electricConsumptionSinceLastSample} to set the presence in the optional field.
       */
      asnMAXSINT electricConsumptionSinceLastSample;
      /**
       * <BR>Electrical regeneration since last sample. 
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_electricRegenerationSinceLastSample} to set the presence in the optional field.
       */
      asnMAXSINT electricRegenerationSinceLastSample;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asnctrackPointss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asnctrackPointss(const asnctrackPointss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asnctrackPointss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asnctrackPointss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asnctrackPointss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asnctrackPointss(const asnctrackPointss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SET OF type
 */
class asncdidDatas : public asnListElement
{
   public :
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT id;
      /**
       * <BR> ID for the specific DID
       * <br>An OCTET STRING value.
       */
      asnOctetString data;


      /**
       * Default constructor.
       */
      asncdidDatas();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncdidDatas(const asncdidDatas& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncdidDatas();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncdidDatas
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncdidDatas&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncdidDatas(const asncdidDatas& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SET OF type
 */
class asncdtcDatas : public asnListElement
{
   public :
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT id;
      /**
       * <BR> ID for the specific DTC
       * <br>An OCTET STRING value.
       */
      asnOctetString data;


      /**
       * Default constructor.
       */
      asncdtcDatas();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncdtcDatas(const asncdtcDatas& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncdtcDatas();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncdtcDatas
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncdtcDatas&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncdtcDatas(const asncdtcDatas& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SET OF type
 */
class asncdatas : public asnListElement
{
   public :
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT ecu;
      /**
       * <BR> The ECU ID 
       * <br>A PrintableString value.
       */
      asnOctetString diagnosticNumber;
      /**
       * <BR> Diagnostic Part number  
       * <br>Elements of this SET OF type.
       * <BR>Elements are of class {@link #asncdidDatas}.
       */
      asnList didData; //elements are of class asncdidDatas
      /**
       * <br>Elements of this SET OF type.
       * <BR>Elements are of class {@link #asncdtcDatas}.
       */
      asnList dtcData; //elements are of class asncdtcDatas


      /**
       * Default constructor.
       */
      asncdatas();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncdatas(const asncdatas& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncdatas();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncdatas
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncdatas&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncdatas(const asncdatas& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SET OF type
 */
class asncconditionss : public asnListElement
{
   public :
      /**
       * <br>A PrintableString value.
       */
      asnOctetString condition;


      /**
       * Default constructor.
       */
      asncconditionss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncconditionss(const asncconditionss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncconditionss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncconditionss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncconditionss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncconditionss(const asncconditionss& object);
#endif // asnCodCopytor
};


/**
 * This class represents one element of SEQUENCE OF type
 */
class asnctimerss : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT timerActivation;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_TimerInfo__duration} to set the presence in the optional field.
       */
      asnMAXSINT duration;
      /**
       * <br>An OCTET STRING value.
       * <BR>Optional field: use {@link #asn_dayofWeek} to set the presence in the optional field.
       */
      asnOctetString dayofWeek;
      /**
       * <br>An OCTET STRING value.
       * <BR>Optional field: use {@link #asn_TimerInfo__startTimeofDay} to set the presence in the optional field.
       */
      asnOctetString startTimeofDay;
      /**
       * <br>An OCTET STRING value.
       * <BR>Optional field: use {@link #asn_endtimeofDay} to set the presence in the optional field.
       */
      asnOctetString endtimeofDay;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asnctimerss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asnctimerss(const asnctimerss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asnctimerss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asnctimerss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asnctimerss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asnctimerss(const asnctimerss& object);
#endif // asnCodCopytor
};


/**
 * The flag to mark the presence of the element eventId in the optional field.
 */
enum{asn_eventId = 0};
/**
 * The flag to mark the presence of the element creatorId in the optional field.
 */
enum{asn_creatorId = 1};
/**
 * The flag to mark the presence of the element messageTTL in the optional field.
 */
enum{asn_messageTTL = 2};
/**
 * The flag to mark the presence of the element requestType in the optional field.
 */
enum{asn_requestType = 3};
/**
 * The flag to mark the presence of the element ackRequired in the optional field.
 */
enum{asn_ackRequired = 4};
/**
 * Class representing the RequestHeader type.
 * <BR> A request body specific for the type of service being executed
 */
class RequestHeader : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT requestid;
      /**
       * <BR> An identifier of this request, must be unique to the sending party. If this
       *  request is an ACK, this is the identifier of the request being acknowledged
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       */
      TimeStamp * timeStamp;
      /**
       * <BR> The time when this message was created
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_eventId} to set the presence in the optional field.
       */
      TimeStamp * eventId;
      /**
       * <BR> Identifier of the service event that is being executed, the value is the time
       *  when the event is created
       * <br>An ENUMERATED value.
       * Use the following enumeration values :
       * <BR>{@link #ecu}
       * <BR>{@link #cvc}
       * <BR>Optional field: use {@link #asn_creatorId} to set the presence in the optional field.
       */
      asnMAXSINT creatorId;
      /**
       * <BR> Identifies if this event was created by a TEM unit or CVC back-end
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_messageTTL} to set the presence in the optional field.
       */
      asnMAXSINT messageTTL;
      /**
       * <BR> Message time-to-live after which this request message should be discarded, no
       *  present means no limit
       * <br>An ENUMERATED value.
       * Use the following enumeration values :
       * <BR>{@link #serviceRequest}
       * <BR>{@link #ack}
       * <BR>Optional field: use {@link #asn_requestType} to set the presence in the optional field.
       */
      asnMAXSINT requestType;
      /**
       * <BR> Identifies the type of message, no presents means serviceRequest
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_ackRequired} to set the presence in the optional field.
       */
      asnBOOL ackRequired;

      /**
       * Default constructor.
       */
      RequestHeader();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const RequestHeader&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      RequestHeader(const RequestHeader& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      RequestHeader(const RequestHeader& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : RequestHeader
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~RequestHeader();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[106]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element milliseconds in the optional field.
 */
enum{asn_milliseconds = 0};
/**
 * Class representing the TimeStamp type.
 */
class TimeStamp : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT seconds;
      /**
       * <BR> UTC Timestamp
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_milliseconds} to set the presence in the optional field.
       */
      asnMAXSINT milliseconds;

      /**
       * Default constructor.
       */
      TimeStamp();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const TimeStamp&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      TimeStamp(const TimeStamp& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      TimeStamp(const TimeStamp& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : TimeStamp
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~TimeStamp();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[3]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element body in the optional field.
 */
enum{asn_body = 0};
/**
 * Class representing the VDServiceRequest type.
 */
class VDServiceRequest : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A SEQUENCE value.
       * See {@link RequestHeader} for more informations.
       */
      RequestHeader * header;
      /**
       * <BR> A request header, common for all requests
       * <br>A SEQUENCE value.
       * See {@link RequestBody} for more informations.
       * <BR>Optional field: use {@link #asn_body} to set the presence in the optional field.
       */
      RequestBody * body;

      /**
       * Default constructor.
       */
      VDServiceRequest();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const VDServiceRequest&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      VDServiceRequest(const VDServiceRequest& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      VDServiceRequest(const VDServiceRequest& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : VDServiceRequest
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~VDServiceRequest();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[107]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * Class representing the AssignmentData type.
 * <BR> The objective of this interface is to provide assignment data to vehicle.
 * <BR> apply to  geea2.0 ota 2.16.3
 */
class AssignmentData : public asntype
{
   public:
      /**
       * <BR>Unique Identifier of the Installation Order, or software, associated to the
       *  notification
       * <br>An UTF8String value.
       */
      asnOctetString installationOrderId;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString timestamp;
      /**
       * <BR>The download URL of the vbf file for software part. Need to support PKI and CDN
       *  Downloads
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncurlss}.
       */
      asnList urls; //elements are of class asncurlss

      /**
       * Default constructor.
       */
      AssignmentData();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const AssignmentData&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      AssignmentData(const AssignmentData& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      AssignmentData(const AssignmentData& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : AssignmentData
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~AssignmentData();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[64]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * Class representing the AssignmentFileInfo type.
 */
class AssignmentFileInfo : public asntype
{
   public:
      /**
       * <BR>file name
       * <br>A PrintableString value.
       */
      asnOctetString partidentifier;
      /**
       * <BR>Signature hash for the file 
       * <br>A PrintableString value.
       */
      asnOctetString softwarePartSignature;
      /**
       * <BR>CRC32 ethernet polynominal
       * <br>A PrintableString value.
       */
      asnOctetString fileCheckSum;

      /**
       * Default constructor.
       */
      AssignmentFileInfo();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const AssignmentFileInfo&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      AssignmentFileInfo(const AssignmentFileInfo& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      AssignmentFileInfo(const AssignmentFileInfo& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : AssignmentFileInfo
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~AssignmentFileInfo();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[67]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * Class representing the AssignmentValidation type.
 * <BR>Assignment Validation element
 */
class AssignmentValidation : public asntype
{
   public:
      /**
       * <BR>Validation Type
       * <br>A PrintableString value.
       */
      asnOctetString validationType;
      /**
       * <BR>ECU Address
       * <br>A PrintableString value.
       */
      asnOctetString ecuAddress;
      /**
       * <BR>Validation Key, used to obtain part identifiers from the target ECU
       * <br>A PrintableString value.
       */
      asnOctetString validationkey;
      /**
       * <BR>Part Identifier, unique identifier for expected part
       * <br>Elements of this SET OF type.
       * <BR>Elements are of class {@link #asncpartidentifierss}.
       */
      asnList partidentifiers; //elements are of class asncpartidentifierss

      /**
       * Default constructor.
       */
      AssignmentValidation();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const AssignmentValidation&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      AssignmentValidation(const AssignmentValidation& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      AssignmentValidation(const AssignmentValidation& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : AssignmentValidation
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~AssignmentValidation();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[56]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * The flag to mark the presence of the element dataCollection in the optional field.
 */
enum{asn_dataCollection = 0};
/**
 * The flag to mark the presence of the element remoteDiagnostics in the optional field.
 */
enum{asn_remoteDiagnostics = 1};
/**
 * Class representing the AuthorizationStatus type.
 * <BR> Authorization Status
 */
class AuthorizationStatus : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_dataCollection} to set the presence in the optional field.
       */
      asnBOOL dataCollection;
      /**
       * <BR> True if data collection is enabled
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_remoteDiagnostics} to set the presence in the optional field.
       */
      asnBOOL remoteDiagnostics;

      /**
       * Default constructor.
       */
      AuthorizationStatus();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const AuthorizationStatus&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      AuthorizationStatus(const AuthorizationStatus& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      AuthorizationStatus(const AuthorizationStatus& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : AuthorizationStatus
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~AuthorizationStatus();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[71]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element AvailableAssignment__reason in the optional field.
 */
enum{asn_AvailableAssignment__reason = 0};
/**
 * The flag to mark the presence of the element longDescription in the optional field.
 */
enum{asn_longDescription = 1};
/**
 * Class representing the AvailableAssignment type.
 * <BR> apply to  geea2.0 ota 2.7.3
 */
class AvailableAssignment : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <BR>Unique Identifier for the commissioned assignment. 
       * <br>An UTF8String value.
       */
      asnOctetString installationOrderId;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString timestamp;
      /**
       * <BR>Shall be set to 'true' if the assignment is intended for workshop preparation
       *  i.e. the assignment is only allowed to be installed in a workshop
       * <br>A BOOLEAN value.
       */
      asnBOOL workshopInstallation;
      /**
       * <BR>The total download size in kilobytes [kB] for the assignment. 
       * <br>An INTEGER value.
       */
      asnMAXSINT downloadsize;
      /**
       * <BR>The total installation time in seconds [s] for the assignment during which the
       *  vehicle will be unavailable
       * <br>An INTEGER value.
       */
      asnMAXSINT totalinstallationTime;
      /**
       * <BR>Notification of transition to new status or state
       * <br>A PrintableString value.
       */
      asnOctetString newstatus;
      /**
       * <BR>Reason for the transition
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_AvailableAssignment__reason} to set the presence in the optional field.
       */
      asnOctetString reason;
      /**
       * <BR>A descriptive title of the assignment. 
       * <br>An UTF8String value.
       */
      asnOctetString name;
      /**
       * <br>An UTF8String value.
       */
      asnOctetString shortDescription;
      /**
       * <BR>A combination of textblock, listelement and linefeed
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_longDescription} to set the presence in the optional field.
       */
      asnOctetString longDescription;

      /**
       * Default constructor.
       */
      AvailableAssignment();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const AvailableAssignment&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      AvailableAssignment(const AvailableAssignment& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      AvailableAssignment(const AvailableAssignment& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : AvailableAssignment
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~AvailableAssignment();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[51]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * Class representing the AvailableAssignmentRequest type.
 * <BR> apply to  geea2.0 ota 2.6.3
 */
class AvailableAssignmentRequest : public asntype
{
   public:
      /**
       * <br>A SEQUENCE value.
       * See {@link LanguageSetting} for more informations.
       */
      LanguageSetting * languageSetting;

      /**
       * Default constructor.
       */
      AvailableAssignmentRequest();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const AvailableAssignmentRequest&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      AvailableAssignmentRequest(const AvailableAssignmentRequest& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      AvailableAssignmentRequest(const AvailableAssignmentRequest& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : AvailableAssignmentRequest
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~AvailableAssignmentRequest();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[49]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * The flag to mark the presence of the element ecuInventory in the optional field.
 */
enum{asn_ecuInventory = 0};
/**
 * Class representing the ClientConfSyncRequest type.
 * <BR> The objective of this interface is to detect if match for the currently stored
 *  Client Configuration
 * <BR> (client_version) in vehicle and the currently stored Expected Client
 *  Configuration (server_version) in OTA server
 * <BR> apply to  geea2.0 ota 2.1.3,2.4.3
 */
class ClientConfSyncRequest : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <BR> The client recorded time of the notification
       * <br>A PrintableString value.
       */
      asnOctetString timestamp;
      /**
       * <BR> Client Version defining the Client Configuration version.
       * <br>A PrintableString value.
       */
      asnOctetString clientVersion;
      /**
       * <BR> ECU Inventory detailing the validated content of each a target ECU.
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncecuInventorys}.
       * <BR>Optional field: use {@link #asn_ecuInventory} to set the presence in the optional field.
       */
      asnList ecuInventory; //elements are of class asncecuInventorys

      /**
       * Default constructor.
       */
      ClientConfSyncRequest();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const ClientConfSyncRequest&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      ClientConfSyncRequest(const ClientConfSyncRequest& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      ClientConfSyncRequest(const ClientConfSyncRequest& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : ClientConfSyncRequest
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~ClientConfSyncRequest();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[45]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * Class representing the ClientHmiVehicleSettings type.
 * <BR> apply to  geea2.0 ota 2.15.3
 */
class ClientHmiVehicleSettings : public asntype
{
   public:
      /**
       * <BR>The over-the-air software download 
       * <BR>ON  the client is active i.e. the vehicle configuration will automatically
       *  synchronize with the backend in order to be able to discover and commission
       *  available assignments. 
       * <BR>OFF the client is inactive i.e. the vehicle configuration will no longer
       *  synchronize with the backend, assignments can no longer be discovered nor
       *  commissioned
       * <br>A BOOLEAN value.
       */
      asnBOOL otaSetting;
      /**
       * <BR>Automatic synchronization of assignments 
       * <BR>ON - the client will perform automatic synchronization of assignments and notify
       *  the user of any available assignments
       * <BR>OFF - manual trigger from HMI is needed in order to discover available updates
       * <br>A BOOLEAN value.
       */
      asnBOOL autoSync;
      /**
       * <BR>Automatic download of assignment data
       * <BR>ON - the client does not require manual user consent for downloading assignment
       *  data i.e. user consent for download is constant (GRANTED)
       * <BR>OFF - the client needs user consent before downloading assignment data
       * <br>A BOOLEAN value.
       */
      asnBOOL autoDownload;
      /**
       * <BR>Automatic installation of assignments
       * <BR>ON - the client does not require manual user consent for installing assignments
       *  i.e. user consent for installation is constant (GRANTED)
       * <BR>OFF - the client needs user consent before installation
       * <br>A BOOLEAN value.
       */
      asnBOOL autoInstallation;

      /**
       * Default constructor.
       */
      ClientHmiVehicleSettings();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const ClientHmiVehicleSettings&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      ClientHmiVehicleSettings(const ClientHmiVehicleSettings& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      ClientHmiVehicleSettings(const ClientHmiVehicleSettings& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : ClientHmiVehicleSettings
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~ClientHmiVehicleSettings();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[63]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * The flag to mark the presence of the element compareType in the optional field.
 */
enum{asn_compareType = 0};
/**
 * The flag to mark the presence of the element compareValue in the optional field.
 */
enum{asn_compareValue = 1};
/**
 * Class representing the DiagnosticCommand type.
 * <BR> if using in uds,compareType and compareValue are Mandatory ,Others are OPTIONAL
 */
class DiagnosticCommand : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString ecuAddress;
      /**
       * <BR> This is the ECU target address for the request. 
       * <br>A PrintableString value.
       */
      asnOctetString serviceId;
      /**
       * <BR> This is the UDS service to be used
       * <br>A PrintableString value.
       */
      asnOctetString input;
      /**
       * <BR> This is the input to be added after the UDS service, this can contain sub
       *  service ID,Identifiers and/or other input data to the ECU.
       * <br>An ENUMERATED value.
       * Use the following enumeration values :
       * <BR>{@link #equalto}
       * <BR>{@link #greaterthan}
       * <BR>{@link #greaterthanorequal}
       * <BR>{@link #lessthan}
       * <BR>{@link #lessthanorequal}
       * <BR>Optional field: use {@link #asn_compareType} to set the presence in the optional field.
       */
      asnMAXSINT compareType;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_compareValue} to set the presence in the optional field.
       */
      asnOctetString compareValue;
      /**
       * <BR> This is the value to compare the ECU response to.
       * <br>An INTEGER value.
       */
      asnMAXSINT delayUntilNextTriggerCommand;

      /**
       * Default constructor.
       */
      DiagnosticCommand();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const DiagnosticCommand&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      DiagnosticCommand(const DiagnosticCommand& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      DiagnosticCommand(const DiagnosticCommand& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : DiagnosticCommand
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~DiagnosticCommand();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[83]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * Class representing the EcuExceptionReport type.
 * <BR> The objective of this interface is to provide Exception Reports to OTA server.
 * <BR> apply to  geea2.0 ota 2.12.3
 */
class EcuExceptionReport : public asntype
{
   public:
      /**
       * <BR>Shall be used for OTA server to know how many exception reports will come for
       *  the UUID 
       * <br>An INTEGER value.
       */
      asnMAXSINT exceptionReportMsgRemaining;
      /**
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncexceptionReportss}.
       */
      asnList exceptionReports; //elements are of class asncexceptionReportss

      /**
       * Default constructor.
       */
      EcuExceptionReport();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const EcuExceptionReport&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      EcuExceptionReport(const EcuExceptionReport& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      EcuExceptionReport(const EcuExceptionReport& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : EcuExceptionReport
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~EcuExceptionReport();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[60]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * Class representing the EcuInstruction type.
 * <BR>Target ECU Installation Instructions detailing the instructions for each target
 *  ECU
 */
class EcuInstruction : public asntype
{
   public:
      /**
       * <BR>ECU Address
       * <br>A PrintableString value.
       */
      asnOctetString ecuAddress;
      /**
       * <BR>Number of Queued Request supported in by the target ECU
       * <br>An INTEGER value.
       */
      asnMAXSINT queuedRequest;
      /**
       * <BR>The Security Access Code shall be used by the on-board Installation Master BOOT
       *  during the installation attempt during program mode (BOOT)
       * <br>A PrintableString value.
       */
      asnOctetString securityKey;
      /**
       * <BR>Software Part Installation Instructions, detailing instructions and data
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncsoftwarePartInstallationInstructionss}.
       */
      asnList softwarePartInstallationInstructions; //elements are of class asncsoftwarePartInstallationInstructionss

      /**
       * Default constructor.
       */
      EcuInstruction();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const EcuInstruction&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      EcuInstruction(const EcuInstruction& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      EcuInstruction(const EcuInstruction& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : EcuInstruction
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~EcuInstruction();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[54]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * The flag to mark the presence of the element exceptionMessage in the optional field.
 */
enum{asn_exceptionMessage = 0};
/**
 * Class representing the EcuInventory type.
 * <BR> ECU inventory information
 */
class EcuInventory : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <BR> ECU Address
       * <br>A PrintableString value.
       */
      asnOctetString ecuAddress;
      /**
       * <BR> Validation Key (DID) used by the client to obtain ECU Part Identifiers using
       *  UDS
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncvalidationKeyss}.
       */
      asnList validationKeys; //elements are of class asncvalidationKeyss
      /**
       * <BR> Detailed Exception Message, detailing an exception
       * <BR> Detailed Exception Message, detailing an exception.
       * <BR> No response or final response received from the server (ECU) within timeout.
       * <BR> no-response (0),
       * <BR> The ECU response could not be interpreted by the client due to invalid length
       *  or data.
       * <BR> invalid-data (1),
       * <BR> ECU responds with negative response code (NRC) other than pending response.
       *  I.e. the ECU rejects the request.
       * <BR> nrc (2),
       * <BR> Maximum number of allowed repeat request times reached.
       * <BR> repeat-request-max-reached (3)
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_exceptionMessage} to set the presence in the optional field.
       */
      asnOctetString exceptionMessage;

      /**
       * Default constructor.
       */
      EcuInventory();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const EcuInventory&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      EcuInventory(const EcuInventory& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      EcuInventory(const EcuInventory& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : EcuInventory
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~EcuInventory();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[46]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * Class representing the EcuSummary type.
 * <BR> ECU Installation Summary.
 */
class EcuSummary : public asntype
{
   public:
      /**
       * <BR> ECU Address
       * <br>A PrintableString value.
       */
      asnOctetString ecuAddress;
      /**
       * <BR>Total number of ECU Retries
       * <br>An INTEGER value.
       */
      asnMAXSINT ecuRetries;
      /**
       * <BR> ECU Installation Status.
       * <br>A PrintableString value.
       */
      asnOctetString ecuStatus;
      /**
       * <BR> Software Part Installation Summary. 
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncsoftwarePartSummaryss}.
       */
      asnList softwarePartSummarys; //elements are of class asncsoftwarePartSummaryss

      /**
       * Default constructor.
       */
      EcuSummary();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const EcuSummary&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      EcuSummary(const EcuSummary& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      EcuSummary(const EcuSummary& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : EcuSummary
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~EcuSummary();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[58]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * Class representing the EcusAndPartNumber type.
 * <BR> generic service parameters used for extension
 */
class EcusAndPartNumber : public asntype
{
   public:
      /**
       * <br>A PrintableString value.
       */
      asnOctetString ecuAddress;
      /**
       * <BR> This shall contain the ECU ID for the first ECU
       * <br>A PrintableString value.
       */
      asnOctetString diagnosticPartNumber;

      /**
       * Default constructor.
       */
      EcusAndPartNumber();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const EcusAndPartNumber&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      EcusAndPartNumber(const EcusAndPartNumber& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      EcusAndPartNumber(const EcusAndPartNumber& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : EcusAndPartNumber
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~EcusAndPartNumber();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[85]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * Class representing the ExceptionMessage type.
 * <BR>Detailed Exception Message 
 */
class ExceptionMessage : public asntype
{
   public:
      /**
       * <BR>Activity Name detailing where/when the exception or failure occurred
       * <br>A PrintableString value.
       */
      asnOctetString activity;
      /**
       * <BR>Action Name detailing where/when the exception or failure occurred
       * <br>A PrintableString value.
       */
      asnOctetString action;
      /**
       * <BR>detail the failure or exception. 
       * <br>A PrintableString value.
       */
      asnOctetString exception;

      /**
       * Default constructor.
       */
      ExceptionMessage();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const ExceptionMessage&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      ExceptionMessage(const ExceptionMessage& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      ExceptionMessage(const ExceptionMessage& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : ExceptionMessage
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~ExceptionMessage();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[62]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * The flag to mark the presence of the element ExceptionReport__installationOrderId in the optional field.
 */
enum{asn_ExceptionReport__installationOrderId = 0};
/**
 * The flag to mark the presence of the element clientConfigurationId in the optional field.
 */
enum{asn_clientConfigurationId = 1};
/**
 * The flag to mark the presence of the element dataFileName in the optional field.
 */
enum{asn_dataFileName = 2};
/**
 * The flag to mark the presence of the element ecuAddress in the optional field.
 */
enum{asn_ecuAddress = 3};
/**
 * The flag to mark the presence of the element validationKey in the optional field.
 */
enum{asn_validationKey = 4};
/**
 * The flag to mark the presence of the element partIdentifier in the optional field.
 */
enum{asn_partIdentifier = 5};
/**
 * The flag to mark the presence of the element dataBlockNumber in the optional field.
 */
enum{asn_dataBlockNumber = 6};
/**
 * Class representing the ExceptionReport type.
 * <BR> Shall be maximum 3 reports
 */
class ExceptionReport : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <BR> Installation Order ID, optional if Client Version is used.
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_ExceptionReport__installationOrderId} to set the presence in the optional field.
       */
      asnOctetString installationOrderId;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString timestamp;
      /**
       * <BR>Issuer Identifier, identifying the issuer of the Exception report
       * <br>A PrintableString value.
       */
      asnOctetString issuerId;
      /**
       * <BR>Client Version, optional if Installation Oder ID is used
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_clientConfigurationId} to set the presence in the optional field.
       */
      asnOctetString clientConfigurationId;
      /**
       * <BR>Data File Name identifying the Data File.   
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_dataFileName} to set the presence in the optional field.
       */
      asnOctetString dataFileName;
      /**
       * <BR> ECU Address
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_ecuAddress} to set the presence in the optional field.
       */
      asnOctetString ecuAddress;
      /**
       * <BR>Validation Key used to obtain Software Part Identifier from Target ECU. 
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_validationKey} to set the presence in the optional field.
       */
      asnOctetString validationKey;
      /**
       * <BR>Part Identifier identifying the Software Part. 
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_partIdentifier} to set the presence in the optional field.
       */
      asnOctetString partIdentifier;
      /**
       * <BR>Data Block Sequence Number detailing where/when the exception or failure
       *  occurred
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_dataBlockNumber} to set the presence in the optional field.
       */
      asnMAXSINT dataBlockNumber;
      /**
       * <br>A SEQUENCE value.
       * See {@link ExceptionMessage} for more informations.
       */
      ExceptionMessage * exceptionMessage;

      /**
       * Default constructor.
       */
      ExceptionReport();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const ExceptionReport&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      ExceptionReport(const ExceptionReport& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      ExceptionReport(const ExceptionReport& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : ExceptionReport
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~ExceptionReport();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[61]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element uds in the optional field.
 */
enum{asn_uds = 0};
/**
 * The flag to mark the presence of the element ExecutionTrigger__time in the optional field.
 */
enum{asn_ExecutionTrigger__time = 1};
/**
 * The flag to mark the presence of the element drivingCycle in the optional field.
 */
enum{asn_drivingCycle = 2};
/**
 * Class representing the ExecutionTrigger type.
 * <BR> This contains the diagnostic part number
 */
class ExecutionTrigger : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <BR> Push MA is executed as soon as possible hence it does not have any specific
       *  trigger.
       * <br>A BOOLEAN value.
       */
      asnBOOL push;
      /**
       * <br>A SEQUENCE value.
       * See {@link UDS} for more informations.
       * <BR>Optional field: use {@link #asn_uds} to set the presence in the optional field.
       */
      UDS * uds;
      /**
       * <BR> Trigger is based on collection of UDS data and comparison, see requirement
       * <br>A SEQUENCE value.
       * See {@link Trigger} for more informations.
       * <BR>Optional field: use {@link #asn_ExecutionTrigger__time} to set the presence in the optional field.
       */
      Trigger * time;
      /**
       * <BR> Trigger is based on time interval
       * <br>A SEQUENCE value.
       * See {@link Trigger} for more informations.
       * <BR>Optional field: use {@link #asn_drivingCycle} to set the presence in the optional field.
       */
      Trigger * drivingCycle;

      /**
       * Default constructor.
       */
      ExecutionTrigger();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const ExecutionTrigger&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      ExecutionTrigger(const ExecutionTrigger& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      ExecutionTrigger(const ExecutionTrigger& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : ExecutionTrigger
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~ExecutionTrigger();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[81]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element FOTA__clientConfSyncRequest in the optional field.
 */
enum{asn_FOTA__clientConfSyncRequest = 0};
/**
 * The flag to mark the presence of the element FOTA__inventoryInstruction in the optional field.
 */
enum{asn_FOTA__inventoryInstruction = 1};
/**
 * The flag to mark the presence of the element FOTA__availableAssignmentRequest in the optional field.
 */
enum{asn_FOTA__availableAssignmentRequest = 2};
/**
 * The flag to mark the presence of the element FOTA__availableAssignment in the optional field.
 */
enum{asn_FOTA__availableAssignment = 3};
/**
 * The flag to mark the presence of the element FOTA__installationInstruction in the optional field.
 */
enum{asn_FOTA__installationInstruction = 4};
/**
 * The flag to mark the presence of the element FOTA__installationSummary in the optional field.
 */
enum{asn_FOTA__installationSummary = 5};
/**
 * The flag to mark the presence of the element FOTA__ecuExceptionReport in the optional field.
 */
enum{asn_FOTA__ecuExceptionReport = 6};
/**
 * The flag to mark the presence of the element FOTA__clientHmiVehicleSettings in the optional field.
 */
enum{asn_FOTA__clientHmiVehicleSettings = 7};
/**
 * The flag to mark the presence of the element FOTA__assignmentData in the optional field.
 */
enum{asn_FOTA__assignmentData = 8};
/**
 * The flag to mark the presence of the element FOTA__assignmentNotification in the optional field.
 */
enum{asn_FOTA__assignmentNotification = 9};
/**
 * The flag to mark the presence of the element FOTA__otaAssignmentFileInfo in the optional field.
 */
enum{asn_FOTA__otaAssignmentFileInfo = 10};
/**
 * Class representing the FOTA type.
 * <BR> RVDC END
 * <BR> FOTA START
 */
class FOTA : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An ENUMERATED value.
       * Use the following enumeration values :
       * <BR>{@link #ecarx}
       * <BR>{@link #geely}
       * <BR>{@link #lynkCoEn}
       * <BR>{@link #lynkCoCh}
       * <BR>{@link #proton}
       * <BR>{@link #lotus}
       */
      asnMAXSINT appId;
      /**
       * <BR> Which platform to use OTA Server
       * <BR> The VIN is used to make sure a MA is not sent to cars which are not supposed to
       *  have the MA. This is also used for Signature verification
       * <br>A PrintableString value.
       */
      asnOctetString vin;
      /**
       * <BR> Vehicle identification code 
       * <br>An ENUMERATED value.
       * Use the following enumeration values :
       * <BR>{@link #DataType__clientConfSyncRequest}
       * <BR>{@link #DataType__ecuExceptionReport}
       * <BR>{@link #DataType__inventoryInstruction}
       * <BR>{@link #DataType__availableAssignmentRequest}
       * <BR>{@link #DataType__availableAssignment}
       * <BR>{@link #DataType__installationInstruction}
       * <BR>{@link #DataType__assignmentNotification}
       * <BR>{@link #DataType__clientHmiVehicleSettings}
       * <BR>{@link #DataType__assignmentData}
       * <BR>{@link #DataType__otaAssignmentFileInfo}
       * <BR>{@link #DataType__installationSummary}
       */
      asnMAXSINT dataType;
      /**
       * <br>A SEQUENCE value.
       * See {@link ClientConfSyncRequest} for more informations.
       * <BR>Optional field: use {@link #asn_FOTA__clientConfSyncRequest} to set the presence in the optional field.
       */
      ClientConfSyncRequest * clientConfSyncRequest;
      /**
       * <BR> provide Client Configuration to OTA server.
       * <br>A SEQUENCE value.
       * See {@link InventoryInstruction} for more informations.
       * <BR>Optional field: use {@link #asn_FOTA__inventoryInstruction} to set the presence in the optional field.
       */
      InventoryInstruction * inventoryInstruction;
      /**
       * <BR> The objective of this interface is to provide Inventory Instruction to vehicle
       * <br>A SEQUENCE value.
       * See {@link AvailableAssignmentRequest} for more informations.
       * <BR>Optional field: use {@link #asn_FOTA__availableAssignmentRequest} to set the presence in the optional field.
       */
      AvailableAssignmentRequest * availableAssignmentRequest;
      /**
       * <BR> The objective of this interface is to request available assignment from OTA
       *  server.
       * <br>A SEQUENCE value.
       * See {@link AvailableAssignment} for more informations.
       * <BR>Optional field: use {@link #asn_FOTA__availableAssignment} to set the presence in the optional field.
       */
      AvailableAssignment * availableAssignment;
      /**
       * <BR> The objective of this interface is to provide available assignment to vehicle.
       * <br>A SEQUENCE value.
       * See {@link InstallationInstruction} for more informations.
       * <BR>Optional field: use {@link #asn_FOTA__installationInstruction} to set the presence in the optional field.
       */
      InstallationInstruction * installationInstruction;
      /**
       * <BR> The objective of this interface is to provide Installation Instructions to
       *  vehicle
       * <br>A SEQUENCE value.
       * See {@link InstallationSummary} for more informations.
       * <BR>Optional field: use {@link #asn_FOTA__installationSummary} to set the presence in the optional field.
       */
      InstallationSummary * installationSummary;
      /**
       * <BR> The objective of this interface is to provide Installation Summary to OTA
       *  server.
       * <br>A SEQUENCE value.
       * See {@link EcuExceptionReport} for more informations.
       * <BR>Optional field: use {@link #asn_FOTA__ecuExceptionReport} to set the presence in the optional field.
       */
      EcuExceptionReport * ecuExceptionReport;
      /**
       * <BR> The objective of this interface is to provide Exception Reports to OTA server
       * <br>A SEQUENCE value.
       * See {@link ClientHmiVehicleSettings} for more informations.
       * <BR>Optional field: use {@link #asn_FOTA__clientHmiVehicleSettings} to set the presence in the optional field.
       */
      ClientHmiVehicleSettings * clientHmiVehicleSettings;
      /**
       * <BR> Due to fleet management and administrative reasons, the backend may lock
       *  certain vehicle settings in order to force a setting value for specific
       *  vehicles
       * <br>A SEQUENCE value.
       * See {@link AssignmentData} for more informations.
       * <BR>Optional field: use {@link #asn_FOTA__assignmentData} to set the presence in the optional field.
       */
      AssignmentData * assignmentData;
      /**
       * <BR> The objective of this interface is to provide assignment data to vehicle 
       * <br>A SEQUENCE value.
       * See {@link FotaAssignmentNotification} for more informations.
       * <BR>Optional field: use {@link #asn_FOTA__assignmentNotification} to set the presence in the optional field.
       */
      FotaAssignmentNotification * assignmentNotification;
      /**
       * <br>A SEQUENCE value.
       * See {@link OtaAssignmentFileInfo} for more informations.
       * <BR>Optional field: use {@link #asn_FOTA__otaAssignmentFileInfo} to set the presence in the optional field.
       */
      OtaAssignmentFileInfo * otaAssignmentFileInfo;

      /**
       * Default constructor.
       */
      FOTA();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const FOTA&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      FOTA(const FOTA& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      FOTA(const FOTA& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : FOTA
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~FOTA();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[44]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[2];
};


/**
 * The flag to mark the presence of the element FotaAssignmentNotification__installationOrderId in the optional field.
 */
enum{asn_FotaAssignmentNotification__installationOrderId = 0};
/**
 * The flag to mark the presence of the element FotaAssignmentNotification__reason in the optional field.
 */
enum{asn_FotaAssignmentNotification__reason = 1};
/**
 * The flag to mark the presence of the element deltaTime in the optional field.
 */
enum{asn_deltaTime = 2};
/**
 * The flag to mark the presence of the element serviceParams in the optional field.
 */
enum{asn_serviceParams = 3};
/**
 * Class representing the FotaAssignmentNotification type.
 * <BR> apply to  geea2.0 ota 2.2.3,2.5.3,2.8.3,2.9.3,2.17.3,2.19.3
 */
class FotaAssignmentNotification : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <BR> Unique Identifier of the Installation Order, or software,associated to the
       *  notification.
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_FotaAssignmentNotification__installationOrderId} to set the presence in the optional field.
       */
      asnOctetString installationOrderId;
      /**
       * <BR> The client recorded time of the notification
       * <br>A PrintableString value.
       */
      asnOctetString timestamp;
      /**
       * <BR> Notification of transition to new status or state by the client (vehicle)
       * <br>A PrintableString value.
       */
      asnOctetString newStatus;
      /**
       * <BR> Reason for the transition
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_FotaAssignmentNotification__reason} to set the presence in the optional field.
       */
      asnOctetString reason;
      /**
       * <BR> This parameter used for scheduled update. unit s or null
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_deltaTime} to set the presence in the optional field.
       */
      asnMAXSINT deltaTime;
      /**
       * <BR> Extended Parameters. 
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncserviceParamss}.
       * <BR>Optional field: use {@link #asn_serviceParams} to set the presence in the optional field.
       */
      asnList serviceParams; //elements are of class asncserviceParamss

      /**
       * Default constructor.
       */
      FotaAssignmentNotification();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const FotaAssignmentNotification&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      FotaAssignmentNotification(const FotaAssignmentNotification& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      FotaAssignmentNotification(const FotaAssignmentNotification& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : FotaAssignmentNotification
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~FotaAssignmentNotification();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[65]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * Class representing the InstallationInstruction type.
 * <BR> The objective of this interface is to provide Installation Instructions to
 *  vehicle.
 * <BR> apply to  geea2.0 ota 2.10.3
 */
class InstallationInstruction : public asntype
{
   public:
      /**
       * <BR>Unique Identifier of the Installation Order, or software, associated to the
       *  notification.
       * <br>An UTF8String value.
       */
      asnOctetString installationOrderId;
      /**
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncinstructionss}.
       */
      asnList instructions; //elements are of class asncinstructionss

      /**
       * Default constructor.
       */
      InstallationInstruction();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const InstallationInstruction&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      InstallationInstruction(const InstallationInstruction& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      InstallationInstruction(const InstallationInstruction& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : InstallationInstruction
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~InstallationInstruction();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[52]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * Class representing the InstallationSummary type.
 * <BR> apply to  geea2.0 ota 2.11.3
 */
class InstallationSummary : public asntype
{
   public:
      /**
       * <BR>Installation Order ID
       * <br>An UTF8String value.
       */
      asnOctetString installationOrderId;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString timestamp;
      /**
       * <BR>Total number of resets consumed due to retries
       * <br>An INTEGER value.
       */
      asnMAXSINT repeatresets;
      /**
       * <BR> Total Installation Time for the assignment. defined in milliseconds (ms)
       * <br>An INTEGER value.
       */
      asnMAXUINT totalInstallationTime;
      /**
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncecuSummaryss}.
       */
      asnList ecuSummarys; //elements are of class asncecuSummaryss

      /**
       * Default constructor.
       */
      InstallationSummary();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const InstallationSummary&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      InstallationSummary(const InstallationSummary& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      InstallationSummary(const InstallationSummary& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : InstallationSummary
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~InstallationSummary();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[57]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * Class representing the Instruction type.
 * <BR>Installation Instructions are used to guide the correct installation of vehicle
 */
class Instruction : public asntype
{
   public:
      /**
       * <BR>Shall be decreased for each transmission of an Installation order ID, then final
       *  ECU shall have the value 0. 
       * <br>An INTEGER value.
       */
      asnMAXSINT ecuRemaining;
      /**
       * <BR>installation Instructions Version
       * <br>A PrintableString value.
       */
      asnOctetString installationInstructionSversion;
      /**
       * <BR>Required Preparation Time for the vehicle to perform installation. specified in
       *  milliseconds.
       * <br>An INTEGER value.
       */
      asnMAXUINT requiredPreparationTime;
      /**
       * <BR>Expected Installation Time for the complete assignment.specified in milliseconds
       * <br>An INTEGER value.
       */
      asnMAXUINT expectedInstallationTime;
      /**
       * <BR>Encrypted VIN unique security access code for CEM009
       * <br>A PrintableString value.
       */
      asnOctetString area1112SecurityCode;
      /**
       * <BR>Target ECU Installation Instructions detailing the instructions for each target
       *  ECU
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncInstruction__ecuInstructionss}.
       */
      asnList ecuInstructions; //elements are of class asncInstruction__ecuInstructionss
      /**
       * <BR>Assignment Validation element
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncassignmentValidationss}.
       */
      asnList assignmentValidations; //elements are of class asncassignmentValidationss

      /**
       * Default constructor.
       */
      Instruction();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const Instruction&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      Instruction(const Instruction& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      Instruction(const Instruction& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : Instruction
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~Instruction();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[53]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * Class representing the InventoryInstruction type.
 * <BR> Provide Inventory Instruction to vehicle. 
 * <BR> apply to  geea2.0 ota 2.3.3
 */
class InventoryInstruction : public asntype
{
   public:
      /**
       * <BR>The parsing structure used to mark inventory instruction
       * <br>A PrintableString value.
       */
      asnOctetString inventoryInstructionVersion;
      /**
       * <BR> ECU inventory information
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncInventoryInstruction__ecuInstructionss}.
       */
      asnList ecuInstructions; //elements are of class asncInventoryInstruction__ecuInstructionss

      /**
       * Default constructor.
       */
      InventoryInstruction();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const InventoryInstruction&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      InventoryInstruction(const InventoryInstruction& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      InventoryInstruction(const InventoryInstruction& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : InventoryInstruction
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~InventoryInstruction();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[48]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * Class representing the LanguageSetting type.
 * <BR> The objective of this interface is to provide the changed language setting of
 *  in-vehicle HMI to OTA server.
 */
class LanguageSetting : public asntype
{
   public:
      /**
       * <br>An ENUMERATED value.
       * Use the following enumeration values :
       * <BR>{@link #arabic}
       * <BR>{@link #bulgarian}
       * <BR>{@link #chineseTradCan}
       * <BR>{@link #chineseSimpMan}
       * <BR>{@link #chineseTradMan}
       * <BR>{@link #czech}
       * <BR>{@link #danish}
       * <BR>{@link #dutch}
       * <BR>{@link #australianEnglish}
       * <BR>{@link #ukEnglish}
       * <BR>{@link #americanEnglish}
       * <BR>{@link #estonian}
       * <BR>{@link #finnish}
       * <BR>{@link #flemish}
       * <BR>{@link #canadianFrench}
       * <BR>{@link #french}
       * <BR>{@link #german}
       * <BR>{@link #greek}
       * <BR>{@link #hungarian}
       * <BR>{@link #italian}
       * <BR>{@link #japanese}
       * <BR>{@link #korean}
       * <BR>{@link #latvian}
       * <BR>{@link #lithuanian}
       * <BR>{@link #norwegian}
       * <BR>{@link #polish}
       * <BR>{@link #brazilianPortuguese}
       * <BR>{@link #portuguese}
       * <BR>{@link #romanian}
       * <BR>{@link #russian}
       * <BR>{@link #slovak}
       * <BR>{@link #slovene}
       * <BR>{@link #spanish}
       * <BR>{@link #americanSpanish}
       * <BR>{@link #swedish}
       * <BR>{@link #thai}
       * <BR>{@link #turkish}
       */
      asnMAXSINT language;

      /**
       * Default constructor.
       */
      LanguageSetting();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const LanguageSetting&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      LanguageSetting(const LanguageSetting& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      LanguageSetting(const LanguageSetting& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : LanguageSetting
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~LanguageSetting();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[50]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * Class representing the Ma type.
 * <BR> generic service parameters used for extension
 */
class Ma : public asntype
{
   public:
      /**
       * <br>An INTEGER value.
       */
      asnMAXUINT maId;
      /**
       * <br>An INTEGER value.
       */
      asnMAXUINT maVersion;

      /**
       * Default constructor.
       */
      Ma();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const Ma&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      Ma(const Ma& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      Ma(const Ma& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : Ma
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~Ma();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[76]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * Class representing the MaSetting type.
 * <BR>The objective of this interface is to set RVDC Authorization Status for cloud to
 *  end or end to cloud
 */
class MaSetting : public asntype
{
   public:
      /**
       * <br>A BOOLEAN value.
       */
      asnBOOL collectFunction;
      /**
       * <BR> True if the RVDC function is activated and if set to false ,no matter what
       *  dataCollection and remoteDiagnostics to set,
       * <br>A SEQUENCE value.
       * See {@link AuthorizationStatus} for more informations.
       */
      AuthorizationStatus * authorizationStatus;

      /**
       * Default constructor.
       */
      MaSetting();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const MaSetting&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      MaSetting(const MaSetting& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      MaSetting(const MaSetting& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : MaSetting
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~MaSetting();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[70]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * The flag to mark the presence of the element removeMas in the optional field.
 */
enum{asn_removeMas = 0};
/**
 * The flag to mark the presence of the element newMas in the optional field.
 */
enum{asn_newMas = 1};
/**
 * The flag to mark the presence of the element MaSynchronization__serviceParameters in the optional field.
 */
enum{asn_MaSynchronization__serviceParameters = 2};
/**
 * Class representing the MaSynchronization type.
 * <BR> generic service parameters used for extension,
 * <BR> The objective of this interface is to provide MAs to vehicle.
 */
class MaSynchronization : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncremoveMass}.
       * <BR>Optional field: use {@link #asn_removeMas} to set the presence in the optional field.
       */
      asnList removeMas; //elements are of class asncremoveMass
      /**
       * <BR> These MAs shall be removed
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncnewMass}.
       * <BR>Optional field: use {@link #asn_newMas} to set the presence in the optional field.
       */
      asnList newMas; //elements are of class asncnewMass
      /**
       * <BR> New or updated MAs
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncMaSynchronization__serviceParameterss}.
       * <BR>Optional field: use {@link #asn_MaSynchronization__serviceParameters} to set the presence in the optional field.
       */
      asnList serviceParameters; //elements are of class asncMaSynchronization__serviceParameterss

      /**
       * Default constructor.
       */
      MaSynchronization();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const MaSynchronization&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      MaSynchronization(const MaSynchronization& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      MaSynchronization(const MaSynchronization& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : MaSynchronization
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~MaSynchronization();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[77]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element installedMa in the optional field.
 */
enum{asn_installedMa = 0};
/**
 * The flag to mark the presence of the element MaSynchronizationReq__serviceParameters in the optional field.
 */
enum{asn_MaSynchronizationReq__serviceParameters = 1};
/**
 * Class representing the MaSynchronizationReq type.
 * <BR> Reason for the transition
 * <BR> The objective of this interface is to request MAs from RVDC server
 * <BR> The message will be triggered from vehicle:
 * <BR> When automatic synchronization of assignments has been set by end-user the
 *  Vehicle
 * <BR> Diagnostic Data Collection shall trigger a MA synchronization as soon as
 *  possible after the latest request to the server has expired.
 */
class MaSynchronizationReq : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <BR> The current size of MA storage quota in kilobytes [kB] in vehicle resolution is
       *  100kb/bit
       * <br>An INTEGER value.
       */
      asnMAXUINT storageQuota;
      /**
       * <BR> Version derived from associated MA
       * <br>An INTEGER value.
       */
      asnMAXUINT maFormatVersion;
      /**
       * <BR> The cloud sends corresponding data according to the version reported by the
       *  vehicle. If the version of the vehicle changes, the cloud needs to be notified
       *  first.
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncinstalledMas}.
       * <BR>Optional field: use {@link #asn_installedMa} to set the presence in the optional field.
       */
      asnList installedMa; //elements are of class asncinstalledMas
      /**
       * <BR> installed measurements in vehicle
       * <BR> There is no special specification and no need to interpret this information
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncMaSynchronizationReq__serviceParameterss}.
       * <BR>Optional field: use {@link #asn_MaSynchronizationReq__serviceParameters} to set the presence in the optional field.
       */
      asnList serviceParameters; //elements are of class asncMaSynchronizationReq__serviceParameterss

      /**
       * Default constructor.
       */
      MaSynchronizationReq();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const MaSynchronizationReq&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      MaSynchronizationReq(const MaSynchronizationReq& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      MaSynchronizationReq(const MaSynchronizationReq& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : MaSynchronizationReq
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~MaSynchronizationReq();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[75]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element udsTriggerId in the optional field.
 */
enum{asn_udsTriggerId = 0};
/**
 * Class representing the Mdp type.
 * <BR> actual data payload
 */
class Mdp : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT mdpFormatVersion;
      /**
       * <BR> This is version of the MDP format which the ECU sends the data.
       * <br>A PrintableString value.
       */
      asnOctetString vin;
      /**
       * <BR> The VIN of the vehicle, used to make sure signature is car unique.
       * <br>A SEQUENCE value.
       * See {@link Ma} for more informations.
       */
      Ma * ma;
      /**
       * <br>An INTEGER value.
       */
      asnMAXUINT sequenceNumber;
      /**
       * <BR> Shall contain the MA Sequence counter value.
       * <br>A PrintableString value.
       */
      asnOctetString timestampReadOutStart;
      /**
       * <BR> The timestamp of the first diagnostic response was collected
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_udsTriggerId} to set the presence in the optional field.
       */
      asnOctetString udsTriggerId;
      /**
       * <BR> If the execution trigger was "UDS", this ELEMENT contains the ID of the
       *  condition which triggered the readout if the condition operator was set to
       *  "OR".
       * <br>A PrintableString value.
       */
      asnOctetString diagnosticResponse;

      /**
       * Default constructor.
       */
      Mdp();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const Mdp&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      Mdp(const Mdp& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      Mdp(const Mdp& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : Mdp
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~Mdp();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[88]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element MeasurementAssignment__serviceParameters in the optional field.
 */
enum{asn_MeasurementAssignment__serviceParameters = 0};
/**
 * Class representing the MeasurementAssignment type.
 * <BR> ForcedMA  
 */
class MeasurementAssignment : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An INTEGER value.
       */
      asnMAXUINT maId;
      /**
       * <br>An INTEGER value.
       */
      asnMAXUINT maVersion;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString vin;
      /**
       * <BR> The VIN is used to make sure a MA is not sent to cars which are not supposed to
       *  have the MA. This is also used for Signature verification.
       * <br>An INTEGER value.
       */
      asnMAXUINT maFormatVersion;
      /**
       * <BR> Describes the protocol version of the MA. This must be the same as the SW in
       *  vehicle gateway
       * <br>An INTEGER value.
       */
      asnMAXSINT maExecutionPriority;
      /**
       * <BR> The execution priority of the MA
       * <br>A SEQUENCE value.
       * See {@link TelematicsParameters} for more informations.
       */
      TelematicsParameters * telematicsParameters;
      /**
       * <BR> This contains telematics parameters
       * <br>An INTEGER value.
       */
      asnMAXUINT usageModesAllowed;
      /**
       * <BR> Shall equal the usage mode signal, only values active or driving are allowed.
       * <br>A PrintableString value.
       */
      asnOctetString startCondition;
      /**
       * <BR> The start time for the MA
       * <br>A SEQUENCE value.
       * See {@link StopCondition} for more informations.
       */
      StopCondition * stopCondition;
      /**
       * <BR> The condition to stop the MA. At least one stop condition must be chosen. This
       *  shall be checked during parsing.
       * <br>A PrintableString value.
       */
      asnOctetString retentiondate;
      /**
       * <BR> The retention date for the MA.
       * <br>A SEQUENCE value.
       * See {@link AuthorizationStatus} for more informations.
       */
      AuthorizationStatus * authorizationStatus;
      /**
       * <BR> The authorization status needed to perform the MA  
       * <br>A SEQUENCE value.
       * See {@link ExecutionTrigger} for more informations.
       */
      ExecutionTrigger * executionTrigger;
      /**
       * <BR> The type of execution trigger in the MA. Only one trigger type can be chosen.
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncecusAndPartNumberss}.
       */
      asnList ecusAndPartNumbers; //elements are of class asncecusAndPartNumberss
      /**
       * <BR> The number of ECUs which are needed to perform MA.
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncdiagnosticCommands}.
       */
      asnList diagnosticCommand; //elements are of class asncdiagnosticCommands
      /**
       * <BR> Specifies the diagnostic commands to be executed
       * <br>A PrintableString value.
       */
      asnOctetString dataIntegrityCheck;
      /**
       * <BR> This shall be a CRC32 over the entire payload.
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncMeasurementAssignment__serviceParameterss}.
       * <BR>Optional field: use {@link #asn_MeasurementAssignment__serviceParameters} to set the presence in the optional field.
       */
      asnList serviceParameters; //elements are of class asncMeasurementAssignment__serviceParameterss

      /**
       * Default constructor.
       */
      MeasurementAssignment();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const MeasurementAssignment&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      MeasurementAssignment(const MeasurementAssignment& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      MeasurementAssignment(const MeasurementAssignment& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : MeasurementAssignment
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~MeasurementAssignment();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[78]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element MeasurementDataPackage__serviceParameters in the optional field.
 */
enum{asn_MeasurementDataPackage__serviceParameters = 0};
/**
 * Class representing the MeasurementDataPackage type.
 * <BR> The stop time for the MA. The timestamp is defined in the requirement
 * <BR> The objective of this interface is to provide Measurement Data Package to RVDC
 *  server.
 * <BR> The message will be triggered from vehicle:  When the MDP upload conditions are
 *  met.
 */
class MeasurementDataPackage : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A SEQUENCE value.
       * See {@link TelematicsParameters} for more informations.
       */
      TelematicsParameters * telematicsParameters;
      /**
       * <BR> the onboard telematics unit parameters
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncMeasurementDataPackage__serviceParameterss}.
       * <BR>Optional field: use {@link #asn_MeasurementDataPackage__serviceParameters} to set the presence in the optional field.
       */
      asnList serviceParameters; //elements are of class asncMeasurementDataPackage__serviceParameterss
      /**
       * <BR> generic service parameters used for extension
       * <br>A SEQUENCE value.
       * See {@link Mdp} for more informations.
       */
      Mdp * mdp;

      /**
       * Default constructor.
       */
      MeasurementDataPackage();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const MeasurementDataPackage&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      MeasurementDataPackage(const MeasurementDataPackage& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      MeasurementDataPackage(const MeasurementDataPackage& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : MeasurementDataPackage
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~MeasurementDataPackage();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[87]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * Class representing the OtaAssignmentFileInfo type.
 * <BR> The objective of this interface is to provide all VBF signatures for a specific
 *  installation order ID to vehicle
 * <BR> provide all VBF signatures for a specific installation order ID to vehicle
 * <BR> apply to  geea2.0 ota 2.18.3
 */
class OtaAssignmentFileInfo : public asntype
{
   public:
      /**
       * <BR>Unique Identifier for the commissioned assignment
       * <br>An UTF8String value.
       */
      asnOctetString installationOrderId;
      /**
       * <BR> Contains all VBF signatures for a specific installation order ID
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncassignFileInfoss}.
       */
      asnList assignFileInfos; //elements are of class asncassignFileInfoss

      /**
       * Default constructor.
       */
      OtaAssignmentFileInfo();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const OtaAssignmentFileInfo&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      OtaAssignmentFileInfo(const OtaAssignmentFileInfo& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      OtaAssignmentFileInfo(const OtaAssignmentFileInfo& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : OtaAssignmentFileInfo
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~OtaAssignmentFileInfo();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[66]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * The flag to mark the presence of the element RVDC__rvdcSetting in the optional field.
 */
enum{asn_RVDC__rvdcSetting = 0};
/**
 * The flag to mark the presence of the element RVDC__assignmentNotification in the optional field.
 */
enum{asn_RVDC__assignmentNotification = 1};
/**
 * The flag to mark the presence of the element RVDC__maSynchronizationReq in the optional field.
 */
enum{asn_RVDC__maSynchronizationReq = 2};
/**
 * The flag to mark the presence of the element RVDC__maSynchronization in the optional field.
 */
enum{asn_RVDC__maSynchronization = 3};
/**
 * The flag to mark the presence of the element RVDC__exceptionHandling in the optional field.
 */
enum{asn_RVDC__exceptionHandling = 4};
/**
 * The flag to mark the presence of the element RVDC__measurementDataPackage in the optional field.
 */
enum{asn_RVDC__measurementDataPackage = 5};
/**
 * Class representing the RVDC type.
 * <BR> RVDC START
 */
class RVDC : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An ENUMERATED value.
       * Use the following enumeration values :
       * <BR>{@link #ecarx}
       * <BR>{@link #geely}
       * <BR>{@link #lynkCoEn}
       * <BR>{@link #lynkCoCh}
       * <BR>{@link #proton}
       * <BR>{@link #lotus}
       */
      asnMAXSINT appId;
      /**
       * <BR> Which platform to use OTA Server
       * <br>A PrintableString value.
       */
      asnOctetString maOrderId;
      /**
       * <BR> The orderId is generated by the command initiator, and the responder needs to
       *  response it to the initiator. 
       * <br>A PrintableString value.
       */
      asnOctetString timestamp;
      /**
       * <BR> The client recorded time of the notification
       * <BR> The VIN is used to make sure a MA is not sent to cars which are not supposed to
       *  have the MA. This is also used for Signature verification
       * <br>A PrintableString value.
       */
      asnOctetString vin;
      /**
       * <BR> Vehicle identification code 
       * <br>An ENUMERATED value.
       * Use the following enumeration values :
       * <BR>{@link #MaBusinessType__rvdcSetting}
       * <BR>{@link #MaBusinessType__assignmentNotification}
       * <BR>{@link #MaBusinessType__maSynchronizationReq}
       * <BR>{@link #MaBusinessType__maSynchronization}
       * <BR>{@link #MaBusinessType__exceptionHandling}
       * <BR>{@link #MaBusinessType__measurementDataPackage}
       */
      asnMAXSINT maBusinessType;
      /**
       * <BR> the business type of the current operation
       * <br>A SEQUENCE value.
       * See {@link RvdcSetting} for more informations.
       * <BR>Optional field: use {@link #asn_RVDC__rvdcSetting} to set the presence in the optional field.
       */
      RvdcSetting * rvdcSetting;
      /**
       * <br>A SEQUENCE value.
       * See {@link RvdcAssignmentNotification} for more informations.
       * <BR>Optional field: use {@link #asn_RVDC__assignmentNotification} to set the presence in the optional field.
       */
      RvdcAssignmentNotification * assignmentNotification;
      /**
       * <br>A SEQUENCE value.
       * See {@link MaSynchronizationReq} for more informations.
       * <BR>Optional field: use {@link #asn_RVDC__maSynchronizationReq} to set the presence in the optional field.
       */
      MaSynchronizationReq * maSynchronizationReq;
      /**
       * <br>A SEQUENCE value.
       * See {@link MaSynchronization} for more informations.
       * <BR>Optional field: use {@link #asn_RVDC__maSynchronization} to set the presence in the optional field.
       */
      MaSynchronization * maSynchronization;
      /**
       * <BR> Support vehicle request to cloud for response and cloud to vehicle for push
       * <br>A SEQUENCE value.
       * See {@link RvdcExceptionHandling} for more informations.
       * <BR>Optional field: use {@link #asn_RVDC__exceptionHandling} to set the presence in the optional field.
       */
      RvdcExceptionHandling * exceptionHandling;
      /**
       * <br>A SEQUENCE value.
       * See {@link MeasurementDataPackage} for more informations.
       * <BR>Optional field: use {@link #asn_RVDC__measurementDataPackage} to set the presence in the optional field.
       */
      MeasurementDataPackage * measurementDataPackage;

      /**
       * Default constructor.
       */
      RVDC();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const RVDC&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      RVDC(const RVDC& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      RVDC(const RVDC& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : RVDC
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~RVDC();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[68]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element maCarId in the optional field.
 */
enum{asn_maCarId = 0};
/**
 * The flag to mark the presence of the element maVersion in the optional field.
 */
enum{asn_maVersion = 1};
/**
 * The flag to mark the presence of the element RvdcAssignmentNotification__reason in the optional field.
 */
enum{asn_RvdcAssignmentNotification__reason = 2};
/**
 * Class representing the RvdcAssignmentNotification type.
 * <BR>  True if full remote diagnostics is enabled for the vehicle
 * <BR>The objective of this interface is to provide Synchronization status between
 *  Server and end
 * <BR> eg  
 * <BR> 1.When MA has installed or executed completed in vehicle 
 * <BR>  2.Exception occurs when synchronizing, downloading, installing the MA
 * <BR> 3.The objective of this interface is to provide the RVDC Authorization Status
 *  setting result to RVDC server.
 * <BR> 4.The objective of this interface is to provide current assignment notification
 *  to vehicle.
 */
class RvdcAssignmentNotification : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_maCarId} to set the presence in the optional field.
       */
      asnMAXUINT maCarId;
      /**
       * <BR> Identifier derived from associated MA
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_maVersion} to set the presence in the optional field.
       */
      asnMAXUINT maVersion;
      /**
       * <BR> Version derived from associated MA
       * <br>A PrintableString value.
       */
      asnOctetString newStatus;
      /**
       * <BR> Notification of transition to new status or state by the client (vehicle)
       * <br>A PrintableString value.
       */
      asnOctetString timestamp;
      /**
       * <BR> The client recorded time of the notification
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_RvdcAssignmentNotification__reason} to set the presence in the optional field.
       */
      asnOctetString reason;

      /**
       * Default constructor.
       */
      RvdcAssignmentNotification();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const RvdcAssignmentNotification&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      RvdcAssignmentNotification(const RvdcAssignmentNotification& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      RvdcAssignmentNotification(const RvdcAssignmentNotification& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : RvdcAssignmentNotification
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~RvdcAssignmentNotification();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[74]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element severity in the optional field.
 */
enum{asn_severity = 0};
/**
 * The flag to mark the presence of the element impact in the optional field.
 */
enum{asn_impact = 1};
/**
 * The flag to mark the presence of the element RvdcExceptionHandling__action in the optional field.
 */
enum{asn_RvdcExceptionHandling__action = 2};
/**
 * Class representing the RvdcExceptionHandling type.
 * <BR>The raw response of the diagnostic request. The string must have dynamic length.
 * <BR> The objective of this interface is to provide HMI Exception Handling to RVDC
 *  server.
 */
class RvdcExceptionHandling : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An UTF8String value.
       */
      asnOctetString exceptionName;
      /**
       * <br>An UTF8String value.
       */
      asnOctetString description;
      /**
       * <br>An UTF8String value.
       */
      asnOctetString publisher;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_severity} to set the presence in the optional field.
       */
      asnOctetString severity;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_impact} to set the presence in the optional field.
       */
      asnOctetString impact;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_RvdcExceptionHandling__action} to set the presence in the optional field.
       */
      asnOctetString action;

      /**
       * Default constructor.
       */
      RvdcExceptionHandling();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const RvdcExceptionHandling&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      RvdcExceptionHandling(const RvdcExceptionHandling& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      RvdcExceptionHandling(const RvdcExceptionHandling& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : RvdcExceptionHandling
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~RvdcExceptionHandling();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[86]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * Class representing the RvdcForcedSetting type.
 * <BR> generic service parameters used for extension
 * <BR> The objective of this interface is to provide a forced setting to vehicle to
 *  suppress, lock and make the RVDC setting invisible in the HMI.
 */
class RvdcForcedSetting : public asntype
{
   public:
      /**
       * <br>A BOOLEAN value.
       */
      asnBOOL visibility;
      /**
       * <BR> Shall be set to true when make the RVDC setting invisible in the HMI. 0 is
       *  Invisible, 1 is Visible
       * <br>A BOOLEAN value.
       */
      asnBOOL suppress;
      /**
       * <BR> Shall be set to true when make the RVDC setting suppress in the HMI. 0 is not
       *  suppress, 1 is suppress
       * <br>A BOOLEAN value.
       */
      asnBOOL lock;

      /**
       * Default constructor.
       */
      RvdcForcedSetting();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const RvdcForcedSetting&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      RvdcForcedSetting(const RvdcForcedSetting& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      RvdcForcedSetting(const RvdcForcedSetting& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : RvdcForcedSetting
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~RvdcForcedSetting();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[73]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * The flag to mark the presence of the element maSetting in the optional field.
 */
enum{asn_maSetting = 0};
/**
 * The flag to mark the presence of the element vehicleSetting in the optional field.
 */
enum{asn_vehicleSetting = 1};
/**
 * The flag to mark the presence of the element languageSetting in the optional field.
 */
enum{asn_languageSetting = 2};
/**
 * The flag to mark the presence of the element forcedSetting in the optional field.
 */
enum{asn_forcedSetting = 3};
/**
 * The flag to mark the presence of the element RvdcSetting__serviceParameters in the optional field.
 */
enum{asn_RvdcSetting__serviceParameters = 4};
/**
 * Class representing the RvdcSetting type.
 */
class RvdcSetting : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A SEQUENCE value.
       * See {@link MaSetting} for more informations.
       * <BR>Optional field: use {@link #asn_maSetting} to set the presence in the optional field.
       */
      MaSetting * maSetting;
      /**
       * <BR> The objective of this interface is to set RVDC Authorization Status for cloud
       *  to end or end to cloud
       * <br>A SEQUENCE value.
       * See {@link RvdcVehicleSetting} for more informations.
       * <BR>Optional field: use {@link #asn_vehicleSetting} to set the presence in the optional field.
       */
      RvdcVehicleSetting * vehicleSetting;
      /**
       * <BR> The objective of this interface is to provide RVDC vehicle settings to vehicle.
       * <br>A SEQUENCE value.
       * See {@link LanguageSetting} for more informations.
       * <BR>Optional field: use {@link #asn_languageSetting} to set the presence in the optional field.
       */
      LanguageSetting * languageSetting;
      /**
       * <BR> The objective of this interface is to provide the changed language setting of
       *  in-vehicle HMI to RVDC server.
       * <br>A SEQUENCE value.
       * See {@link RvdcForcedSetting} for more informations.
       * <BR>Optional field: use {@link #asn_forcedSetting} to set the presence in the optional field.
       */
      RvdcForcedSetting * forcedSetting;
      /**
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncRvdcSetting__serviceParameterss}.
       * <BR>Optional field: use {@link #asn_RvdcSetting__serviceParameters} to set the presence in the optional field.
       */
      asnList serviceParameters; //elements are of class asncRvdcSetting__serviceParameterss

      /**
       * Default constructor.
       */
      RvdcSetting();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const RvdcSetting&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      RvdcSetting(const RvdcSetting& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      RvdcSetting(const RvdcSetting& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : RvdcSetting
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~RvdcSetting();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[69]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * Class representing the RvdcVehicleSetting type.
 * <BR> Shall be set to true when make the RVDC setting lock in the HMI. 0 is unlock, 1
 *  is lock
 */
class RvdcVehicleSetting : public asntype
{
   public:
      /**
       * <BR> ON - the client (vehicle) is active for RVDC function, i.e. the vehicle will
       *  synchronize with the backend,measurement assignments will identified for
       *  download.
       * <BR> OFF - the client is inactive i.e. the vehicle will no longer synchronize with
       *  the backend, measurement assignments will no longer be identified for
       *  download.
       * <BR> The setting shall be disabled (OFF) until the end-user has agreed to the terms
       *  of service agreement (RVDC Customer setting).
       * <br>A BOOLEAN value.
       */
      asnBOOL rvdcFunction;
      /**
       * <BR>  Numeric value defining the number of milliseconds to delay start of MA
       *  execution after going to UM = Driving.
       * <BR> The default value is 60s.
       * <BR> UNIT:s
       * <br>An INTEGER value.
       */
      asnMAXSINT collectOffSetTime;

      /**
       * Default constructor.
       */
      RvdcVehicleSetting();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const RvdcVehicleSetting&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      RvdcVehicleSetting(const RvdcVehicleSetting& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      RvdcVehicleSetting(const RvdcVehicleSetting& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : RvdcVehicleSetting
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~RvdcVehicleSetting();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[72]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * Class representing the SoftwarePartInstallationInstruction type.
 * <BR>Software Part Installation Instructions, detailing instructions and data
 */
class SoftwarePartInstallationInstruction : public asntype
{
   public:
      /**
       * <BR>Part Identifier, unique identifier of the software part
       * <br>A PrintableString value.
       */
      asnOctetString partidentifier;
      /**
       * <BR> Estimated Installation Time,required by the data file, specified in
       *  milliseconds.
       * <br>An INTEGER value.
       */
      asnMAXUINT estimatedInstallationtime;

      /**
       * Default constructor.
       */
      SoftwarePartInstallationInstruction();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const SoftwarePartInstallationInstruction&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      SoftwarePartInstallationInstruction(const SoftwarePartInstallationInstruction& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      SoftwarePartInstallationInstruction(const SoftwarePartInstallationInstruction& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : SoftwarePartInstallationInstruction
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~SoftwarePartInstallationInstruction();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[55]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * Class representing the SoftwarePartSummary type.
 * <BR> Software Part Installation Summary.
 */
class SoftwarePartSummary : public asntype
{
   public:
      /**
       * <BR> Part Identifier identifying the Software Part
       * <br>A PrintableString value.
       */
      asnOctetString partIdentifier;
      /**
       * <BR> software Part Retries.
       * <br>An INTEGER value.
       */
      asnMAXSINT partRetries;
      /**
       * <BR>  Measured Installation Time defined in milliseconds (ms)
       * <br>An INTEGER value.
       */
      asnMAXSINT measuredInstallationTime;
      /**
       * <BR> Software Part Installation Status
       * <br>A PrintableString value.
       */
      asnOctetString softwarePartStatus;

      /**
       * Default constructor.
       */
      SoftwarePartSummary();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const SoftwarePartSummary&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      SoftwarePartSummary(const SoftwarePartSummary& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      SoftwarePartSummary(const SoftwarePartSummary& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : SoftwarePartSummary
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~SoftwarePartSummary();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[59]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * The flag to mark the presence of the element period in the optional field.
 */
enum{asn_period = 0};
/**
 * The flag to mark the presence of the element amount in the optional field.
 */
enum{asn_amount = 1};
/**
 * The flag to mark the presence of the element StopCondition__time in the optional field.
 */
enum{asn_StopCondition__time = 2};
/**
 * Class representing the StopCondition type.
 * <BR> This contains the type of upload channels the telematics unit can use.
 * <BR> The condition to stop the MA. At least one stop condition must be chosen. This
 *  shall be checked during parsing.
 */
class StopCondition : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_period} to set the presence in the optional field.
       */
      asnMAXSINT period;
      /**
       * <BR> The amount of days the MA shall be performed after the first successfully
       *  collected MDP.
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_amount} to set the presence in the optional field.
       */
      asnMAXSINT amount;
      /**
       * <BR> The amount of successful collections to be made.
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_StopCondition__time} to set the presence in the optional field.
       */
      asnOctetString time;

      /**
       * Default constructor.
       */
      StopCondition();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const StopCondition&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      StopCondition(const StopCondition& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      StopCondition(const StopCondition& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : StopCondition
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~StopCondition();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[80]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * Class representing the TelematicsParameters type.
 * <BR> This contains telematics parameters
 */
class TelematicsParameters : public asntype
{
   public:
      /**
       * <br>An INTEGER value.
       */
      asnMAXUINT timeToLive;
      /**
       * <BR> This ELEMENT describes how many seconds the maximum transmission time is before
       *  the MDP is discarded.
       * <br>An INTEGER value.
       */
      asnMAXSINT uploadPriority;

      /**
       * Default constructor.
       */
      TelematicsParameters();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const TelematicsParameters&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      TelematicsParameters(const TelematicsParameters& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      TelematicsParameters(const TelematicsParameters& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : TelematicsParameters
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~TelematicsParameters();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[79]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * Class representing the Trigger type.
 * <BR>Trigger is based on driving cycle interval
 */
class Trigger : public asntype
{
   public:
      /**
       * <br>An ENUMERATED value.
       * Use the following enumeration values :
       * <BR>{@link #startofdcy}
       * <BR>{@link #endofdcy}
       */
      asnMAXSINT trigger;
      /**
       * <BR> This contains if the collection of data shall be carried out on start or end of
       *  a DCY. startofdcy (0),endofdcy (1)
       * <BR> if Trigger is time ,interval is time interval. if Trigger is drivingCycle
       *  ,interval is driving cycle interval
       * <br>An INTEGER value.
       */
      asnMAXUINT interval;

      /**
       * Default constructor.
       */
      Trigger();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const Trigger&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      Trigger(const Trigger& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      Trigger(const Trigger& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : Trigger
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~Trigger();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[84]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * Class representing the UDS type.
 */
class UDS : public asntype
{
   public:
      /**
       * <br>An ENUMERATED value.
       * Use the following enumeration values :
       * <BR>{@link #Operator__or}
       * <BR>{@link #Operator__and}
       */
      asnMAXSINT a__operator;
      /**
       * <BR> The operator between the diagnostic trigger commands. 0 = Or 1 = And
       * <br>An INTEGER value.
       */
      asnMAXUINT delayForNextTriggerCheck;
      /**
       * <BR> This contains the time between two trigger checks, it is specified in seconds.
       * <BR> This is specifying an additional time delay until the next trigger check, after
       *  data has been collected. This can be used to not collected multiple MDPs with
       *  same content. The delay is specified in seconds. This delay can be 0.
       * <br>An INTEGER value.
       */
      asnMAXUINT delayAfterCollection;
      /**
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncdiagnosticCommandss}.
       */
      asnList diagnosticCommands; //elements are of class asncdiagnosticCommandss

      /**
       * Default constructor.
       */
      UDS();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const UDS&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      UDS(const UDS& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      UDS(const UDS& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : UDS
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~UDS();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[82]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * The flag to mark the presence of the element partIdentifiers in the optional field.
 */
enum{asn_partIdentifiers = 0};
/**
 * Class representing the ValidationKey type.
 */
class ValidationKey : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <BR> Validation Key (DID) used by the client to obtain ECU Part Identifiers using
       *  UDS
       * <br>A PrintableString value.
       */
      asnOctetString validationKey;
      /**
       * <BR> Part Identifier returned by the target ECU when requesting ECU key  
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncpartIdentifierss}.
       * <BR>Optional field: use {@link #asn_partIdentifiers} to set the presence in the optional field.
       */
      asnList partIdentifiers; //elements are of class asncpartIdentifierss

      /**
       * Default constructor.
       */
      ValidationKey();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const ValidationKey&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      ValidationKey(const ValidationKey& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      ValidationKey(const ValidationKey& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : ValidationKey
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~ValidationKey();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[47]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * Class representing the DIDData type.
 */
class DIDData : public asntype
{
   public:
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT id;
      /**
       * <BR> ID for the specific DID
       * <br>An OCTET STRING value.
       */
      asnOctetString data;

      /**
       * Default constructor.
       */
      DIDData();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const DIDData&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      DIDData(const DIDData& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      DIDData(const DIDData& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : DIDData
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~DIDData();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[99]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * Class representing the DTCData type.
 * <BR> DID READOUT
 */
class DTCData : public asntype
{
   public:
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT id;
      /**
       * <BR> ID for the specific DTC
       * <br>An OCTET STRING value.
       */
      asnOctetString data;

      /**
       * Default constructor.
       */
      DTCData();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const DTCData&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      DTCData(const DTCData& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      DTCData(const DTCData& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : DTCData
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~DTCData();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[100]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * Class representing the ECUData type.
 */
class ECUData : public asntype
{
   public:
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT ecu;
      /**
       * <BR> The ECU ID 
       * <br>A PrintableString value.
       */
      asnOctetString diagnosticNumber;
      /**
       * <BR> Diagnostic Part number  
       * <br>Elements of this SET OF type.
       * <BR>Elements are of class {@link #asncdidDatas}.
       */
      asnList didData; //elements are of class asncdidDatas
      /**
       * <br>Elements of this SET OF type.
       * <BR>Elements are of class {@link #asncdtcDatas}.
       */
      asnList dtcData; //elements are of class asncdtcDatas

      /**
       * Default constructor.
       */
      ECUData();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const ECUData&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      ECUData(const ECUData& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      ECUData(const ECUData& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : ECUData
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~ECUData();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[98]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * Class representing all CHOICE alternative classes
 * for EcuData type.
 * Use the following subclasses to set the alternative value :
 * <BR>&nbsp;{@link asncnoDiagData}
 * <BR>&nbsp;{@link asncEcuData__data}
 */
class EcuData__C : public asnChoice
{
   public:
      /**
       * Constructor.
       */
      EcuData__C(asnMAXUINT asnpAlt);
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      virtual ~EcuData__C();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : EcuData__C
       *    Operator ==
       */
      virtual asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};

/**
 * The identification number for the alternative noDiagData.
 * @see EcuData__C
 */
enum{asn_noDiagData = 0};

/**
 * Class representing the "noDiagData" alternative value.
 * <br>The alternative field takes the value asn_noDiagData.
 * @see EcuData__C
 * @see asn_noDiagData
 */
class asncnoDiagData: public EcuData__C

{
   public:
      /**
       * <br>A NULL value.
       * <br>UNUSED
       */
      asnbyte noDiagData;

      /**
       * Default constructor.
       */
      asncnoDiagData();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncnoDiagData(const asncnoDiagData& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncnoDiagData();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : EcuData__C
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncnoDiagData&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncnoDiagData(const asncnoDiagData& object);
#endif // asnCodCopytor
};

/**
 * The identification number for the alternative EcuData__data.
 * <BR> No diagnostic data included in the MDP due to Charging, end of driving cycle or
 *  tester with higher priority is present. 
 * @see EcuData__C
 */
enum{asn_EcuData__data = 1};

/**
 * Class representing the "data" alternative value.
 * <br>The alternative field takes the value asn_EcuData__data.
 * @see EcuData__C
 * @see asn_EcuData__data
 */
class asncEcuData__data: public EcuData__C

{
   public:
      /**
       * <br>Elements of this SET OF type.
       * <BR>Elements are of class {@link #asncdatas}.
       */
      asnList data; //elements are of class asncdatas

      /**
       * Default constructor.
       */
      asncEcuData__data();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncEcuData__data(const asncEcuData__data& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncEcuData__data();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : EcuData__C
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncEcuData__data&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncEcuData__data(const asncEcuData__data& object);
#endif // asnCodCopytor
};

/**
 * Class representing the EcuData type.
 */
class EcuData : public asntype
{
   public:
      /**
       * <br>The value of this CHOICE type is an instance of 
       * a subclass of {@link #EcuData__C}.
       * Use the following subclasses to set the alternative value :
       * <BR>&nbsp;{@link asncnoDiagData}
       * <BR>&nbsp;{@link asncEcuData__data}
       */
      EcuData__C * value;
      /**
       * Default constructor.
       */
      EcuData();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const EcuData&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      EcuData(const EcuData& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      EcuData(const EcuData& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : EcuData
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~EcuData();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[97]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * Class representing the NEVCoordinatesLongLat type.
 * <BR>Coordinates in degrees/360*2^32. Positive values are North and East 
 */
class NEVCoordinatesLongLat : public asntype
{
   public:
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT longitude;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT latitude;

      /**
       * Default constructor.
       */
      NEVCoordinatesLongLat();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const NEVCoordinatesLongLat&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      NEVCoordinatesLongLat(const NEVCoordinatesLongLat& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      NEVCoordinatesLongLat(const NEVCoordinatesLongLat& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : NEVCoordinatesLongLat
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~NEVCoordinatesLongLat();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[95]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * Class representing the NEVDRPositionData type.
 */
class NEVDRPositionData : public asntype
{
   public:
      /**
       * <br>A SEQUENCE value.
       * See {@link NEVCoordinatesLongLat} for more informations.
       */
      NEVCoordinatesLongLat * longLat;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT heading;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT speedKmph;
      /**
       * <BR>255=unknown 
       * <br>An INTEGER value.
       */
      asnMAXSINT hdopX10;
      /**
       * <BR>HDOP multiplied by 10. 255=unknown 
       * <br>An INTEGER value.
       */
      asnMAXSINT numSat;
      /**
       * <BR>Number of satellites used in fix. 127=unknown 
       * <br>A SEQUENCE value.
       * See {@link NEVDateTime} for more informations.
       */
      NEVDateTime * fixTime;
      /**
       * <BR>GPS time received with the fix 
       * <br>An ENUMERATED value.
       * Use the following enumeration values :
       * <BR>{@link #notAvailable}
       * <BR>{@link #noFix}
       * <BR>{@link #fix2D}
       * <BR>{@link #fix3D}
       * <BR>{@link #startupMode}
       */
      asnMAXSINT fixType;
      /**
       * <BR>Specifies the current GNSS fix, not regarding DR 
       * <br>An ENUMERATED value.
       * Use the following enumeration values :
       * <BR>{@link #noDr}
       * <BR>{@link #drNoMapMatch}
       * <BR>{@link #drMapMatched}
       */
      asnMAXSINT drType;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT drDistance;

      /**
       * Default constructor.
       */
      NEVDRPositionData();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const NEVDRPositionData&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      NEVDRPositionData(const NEVDRPositionData& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      NEVDRPositionData(const NEVDRPositionData& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : NEVDRPositionData
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~NEVDRPositionData();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[94]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * Class representing all CHOICE alternative classes
 * for NEVDRVehiclePosition type.
 * Use the following subclasses to set the alternative value :
 * <BR>&nbsp;{@link asncnoValidData}
 * <BR>&nbsp;{@link asncdrPosition}
 */
class NEVDRVehiclePosition__C : public asnChoice
{
   public:
      /**
       * Constructor.
       */
      NEVDRVehiclePosition__C(asnMAXUINT asnpAlt);
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      virtual ~NEVDRVehiclePosition__C();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : NEVDRVehiclePosition__C
       *    Operator ==
       */
      virtual asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};

/**
 * The identification number for the alternative noValidData.
 * @see NEVDRVehiclePosition__C
 */
enum{asn_noValidData = 0};

/**
 * Class representing the "noValidData" alternative value.
 * <br>The alternative field takes the value asn_noValidData.
 * @see NEVDRVehiclePosition__C
 * @see asn_noValidData
 */
class asncnoValidData: public NEVDRVehiclePosition__C

{
   public:
      /**
       * <br>A NULL value.
       * <br>UNUSED
       */
      asnbyte noValidData;

      /**
       * Default constructor.
       */
      asncnoValidData();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncnoValidData(const asncnoValidData& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncnoValidData();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : NEVDRVehiclePosition__C
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncnoValidData&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncnoValidData(const asncnoValidData& object);
#endif // asnCodCopytor
};

/**
 * The identification number for the alternative drPosition.
 * <BR>Used if the server can not provide a position of sufficient quality 
 * @see NEVDRVehiclePosition__C
 */
enum{asn_drPosition = 1};

/**
 * Class representing the "drPosition" alternative value.
 * <br>The alternative field takes the value asn_drPosition.
 * @see NEVDRVehiclePosition__C
 * @see asn_drPosition
 */
class asncdrPosition: public NEVDRVehiclePosition__C

{
   public:
      /**
       * <br>A SEQUENCE value.
       * See {@link NEVCoordinatesLongLat} for more informations.
       */
      NEVCoordinatesLongLat * longLat;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT heading;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT speedKmph;
      /**
       * <BR>255=unknown 
       * <br>An INTEGER value.
       */
      asnMAXSINT hdopX10;
      /**
       * <BR>HDOP multiplied by 10. 255=unknown 
       * <br>An INTEGER value.
       */
      asnMAXSINT numSat;
      /**
       * <BR>Number of satellites used in fix. 127=unknown 
       * <br>A SEQUENCE value.
       * See {@link NEVDateTime} for more informations.
       */
      NEVDateTime * fixTime;
      /**
       * <BR>GPS time received with the fix 
       * <br>An ENUMERATED value.
       * Use the following enumeration values :
       * <BR>{@link #notAvailable}
       * <BR>{@link #noFix}
       * <BR>{@link #fix2D}
       * <BR>{@link #fix3D}
       * <BR>{@link #startupMode}
       */
      asnMAXSINT fixType;
      /**
       * <BR>Specifies the current GNSS fix, not regarding DR 
       * <br>An ENUMERATED value.
       * Use the following enumeration values :
       * <BR>{@link #noDr}
       * <BR>{@link #drNoMapMatch}
       * <BR>{@link #drMapMatched}
       */
      asnMAXSINT drType;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT drDistance;


      /**
       * Default constructor.
       */
      asncdrPosition();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncdrPosition(const asncdrPosition& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncdrPosition();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : NEVDRVehiclePosition__C
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncdrPosition&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncdrPosition(const asncdrPosition& object);
#endif // asnCodCopytor
};

/**
 * Class representing the NEVDRVehiclePosition type.
 */
class NEVDRVehiclePosition : public asntype
{
   public:
      /**
       * <br>The value of this CHOICE type is an instance of 
       * a subclass of {@link #NEVDRVehiclePosition__C}.
       * Use the following subclasses to set the alternative value :
       * <BR>&nbsp;{@link asncnoValidData}
       * <BR>&nbsp;{@link asncdrPosition}
       */
      NEVDRVehiclePosition__C * value;
      /**
       * Default constructor.
       */
      NEVDRVehiclePosition();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const NEVDRVehiclePosition&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      NEVDRVehiclePosition(const NEVDRVehiclePosition& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      NEVDRVehiclePosition(const NEVDRVehiclePosition& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : NEVDRVehiclePosition
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~NEVDRVehiclePosition();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[93]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * Class representing the NEVDateTime type.
 * <BR> ECU data
 */
class NEVDateTime : public asntype
{
   public:
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT year;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT month;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT day;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT hour;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT minute;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT second;

      /**
       * Default constructor.
       */
      NEVDateTime();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const NEVDateTime&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      NEVDateTime(const NEVDateTime& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      NEVDateTime(const NEVDateTime& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : NEVDateTime
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~NEVDateTime();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[96]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * Class representing the NEVServiceData type.
 */
class NEVServiceData : public asntype
{
   public:
      /**
       * <br>A PrintableString value.
       */
      asnOctetString vehicleVin;
      /**
       * <br>A BOOLEAN value.
       */
      asnBOOL testVehicle;
      /**
       * <BR> TRUE=test vehicle, FALSE=customer vehicle
       * <br>An ENUMERATED value.
       * Use the following enumeration values :
       * <BR>{@link #periodicTrg}
       * <BR>{@link #umChangeTrg}
       * <BR>{@link #chargeStartTrg}
       * <BR>{@link #chargeStopTrg}
       * <BR>{@link #disableRmsTrg}
       */
      asnMAXSINT rvdcTriggerCondition;
      /**
       * <BR> periodicTrg (1) UM Driving (periodic MDP), umChangeTrg (2) UM Driving -> UM !=
       *  Driving (1 MDP), chargeStartTrg (3) Charging start (1 MDP), chargeStopTrg (4)
       *  Charging Stop (1 MDP), disableRmsTrg (5) Rms disabled
       * <br>An INTEGER value.
       */
      asnMAXUINT mdpID;
      /**
       * <BR>Increase by one by each measurement cycle. Starting from 0. 
       * <br>A PrintableString value.
       */
      asnOctetString maID;
      /**
       * <BR>Partnumber for MA file
       * <br>The value of this CHOICE type is an instance of
       * a subclass of {@link #NEVDRVehiclePosition__C}.
       * Use the following subclasses to set the alternative value :
       * <BR>&nbsp;{@link asncnoValidData}
       * <BR>&nbsp;{@link asncdrPosition}
       */
      NEVDRVehiclePosition__C * position;
      /**
       * <BR>GPS Data
       * <br>The value of this CHOICE type is an instance of
       * a subclass of {@link #EcuData__C}.
       * Use the following subclasses to set the alternative value :
       * <BR>&nbsp;{@link asncnoDiagData}
       * <BR>&nbsp;{@link asncEcuData__data}
       */
      EcuData__C * ecuData;

      /**
       * Default constructor.
       */
      NEVServiceData();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const NEVServiceData&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      NEVServiceData(const NEVServiceData& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      NEVServiceData(const NEVServiceData& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : NEVServiceData
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~NEVServiceData();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[92]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * Class representing the Configuration type.
 * <BR> true means GCJ-02 coordinaes, false means WGS-84, defult is false
 */
class Configuration : public asntype
{
   public:
      /**
       * <br>A PrintableString value.
       */
      asnOctetString version;
      /**
       * <br>Elements of this SET OF type.
       * <BR>Elements are of class {@link #asncConfiguration__itemss}.
       */
      asnList items; //elements are of class asncConfiguration__itemss

      /**
       * Default constructor.
       */
      Configuration();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const Configuration&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      Configuration(const Configuration& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      Configuration(const Configuration& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : Configuration
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~Configuration();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[13]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * Class representing the ConfigurationItem type.
 * <BR> configuration is a list of key:value pairs
 */
class ConfigurationItem : public asntype
{
   public:
      /**
       * <br>A PrintableString value.
       */
      asnOctetString name;
      /**
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncConfigurationItem__parameterss}.
       */
      asnList parameters; //elements are of class asncConfigurationItem__parameterss

      /**
       * Default constructor.
       */
      ConfigurationItem();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const ConfigurationItem&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      ConfigurationItem(const ConfigurationItem& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      ConfigurationItem(const ConfigurationItem& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : ConfigurationItem
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~ConfigurationItem();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[14]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * The flag to mark the presence of the element email in the optional field.
 */
enum{asn_email = 0};
/**
 * The flag to mark the presence of the element address in the optional field.
 */
enum{asn_address = 1};
/**
 * The flag to mark the presence of the element phone1 in the optional field.
 */
enum{asn_phone1 = 2};
/**
 * The flag to mark the presence of the element phone2 in the optional field.
 */
enum{asn_phone2 = 3};
/**
 * Class representing the ContactInfo type.
 */
class ContactInfo : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_email} to set the presence in the optional field.
       */
      asnOctetString email;
      /**
       * <br>A SEQUENCE value.
       * See {@link PostAddress} for more informations.
       * <BR>Optional field: use {@link #asn_address} to set the presence in the optional field.
       */
      PostAddress * address;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_phone1} to set the presence in the optional field.
       */
      asnOctetString phone1;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_phone2} to set the presence in the optional field.
       */
      asnOctetString phone2;

      /**
       * Default constructor.
       */
      ContactInfo();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const ContactInfo&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      ContactInfo(const ContactInfo& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      ContactInfo(const ContactInfo& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : ContactInfo
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~ContactInfo();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[11]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element vehicleErrorCode in the optional field.
 */
enum{asn_vehicleErrorCode = 0};
/**
 * The flag to mark the presence of the element Error__message in the optional field.
 */
enum{asn_Error__message = 1};
/**
 * Class representing the Error type.
 */
class Error : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An INTEGER value.
       * Use the following values :
       * <BR>{@link #incorrectState}
       * <BR>{@link #invalidData}
       * <BR>{@link #invalidFormat}
       * <BR>{@link #powderModeNotCorrect}
       * <BR>{@link #conditionsNotCorrect}
       * <BR>{@link #executionFailure}
       * <BR>{@link #permissionDenied}
       * <BR>{@link #timeout}
       * <BR>{@link #backupBatteryUsage}
       */
      asnMAXSINT code;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_vehicleErrorCode} to set the presence in the optional field.
       */
      asnMAXSINT vehicleErrorCode;
      /**
       * <BR> the error code from vehicle/TEM, OEM specific
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_Error__message} to set the presence in the optional field.
       */
      asnOctetString message;

      /**
       * Default constructor.
       */
      Error();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const Error&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      Error(const Error& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      Error(const Error& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : Error
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~Error();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[6]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element triggerTimes in the optional field.
 */
enum{asn_triggerTimes = 0};
/**
 * The flag to mark the presence of the element notifyInterval in the optional field.
 */
enum{asn_notifyInterval = 1};
/**
 * Class representing the EventAction type.
 * <BR> format: <vehicle_status> <operator> <target>
 */
class EventAction : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_triggerTimes} to set the presence in the optional field.
       */
      asnMAXSINT triggerTimes;
      /**
       * <BR> Trigger notification times, 0 means always trigger
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_notifyInterval} to set the presence in the optional field.
       */
      asnMAXSINT notifyInterval;

      /**
       * Default constructor.
       */
      EventAction();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const EventAction&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      EventAction(const EventAction& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      EventAction(const EventAction& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : EventAction
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~EventAction();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[103]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element startTime in the optional field.
 */
enum{asn_startTime = 0};
/**
 * The flag to mark the presence of the element EventRule__endTime in the optional field.
 */
enum{asn_EventRule__endTime = 1};
/**
 * The flag to mark the presence of the element conditions in the optional field.
 */
enum{asn_conditions = 2};
/**
 * The flag to mark the presence of the element EventRule__interval in the optional field.
 */
enum{asn_EventRule__interval = 3};
/**
 * The flag to mark the presence of the element EventRule__action in the optional field.
 */
enum{asn_EventRule__action = 4};
/**
 * Class representing the EventRule type.
 */
class EventRule : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT ruleId;
      /**
       * <BR> Rule identity
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_startTime} to set the presence in the optional field.
       */
      TimeStamp * startTime;
      /**
       * <BR> Rule should be effective since this time in TEM
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_EventRule__endTime} to set the presence in the optional field.
       */
      TimeStamp * endTime;
      /**
       * <BR> Rule should not be effective after this time in TEM
       * <br>Elements of this SET OF type.
       * <BR>Elements are of class {@link #asncconditionss}.
       * <BR>Optional field: use {@link #asn_conditions} to set the presence in the optional field.
       */
      asnList conditions; //elements are of class asncconditionss
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_EventRule__interval} to set the presence in the optional field.
       */
      asnMAXSINT interval;
      /**
       * <BR> Unit is second
       * <br>A SEQUENCE value.
       * See {@link EventAction} for more informations.
       * <BR>Optional field: use {@link #asn_EventRule__action} to set the presence in the optional field.
       */
      EventAction * action;

      /**
       * Default constructor.
       */
      EventRule();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const EventRule&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      EventRule(const EventRule& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      EventRule(const EventRule& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : EventRule
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~EventRule();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[101]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * Class representing all CHOICE alternative classes
 * for GeneralMessage type.
 * Use the following subclasses to set the alternative value :
 * <BR>&nbsp;{@link asncGeneralMessage__message}
 * <BR>&nbsp;{@link asncocetMessage}
 */
class GeneralMessage__C : public asnChoice
{
   public:
      /**
       * Constructor.
       */
      GeneralMessage__C(asnMAXUINT asnpAlt);
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      virtual ~GeneralMessage__C();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : GeneralMessage__C
       *    Operator ==
       */
      virtual asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};

/**
 * The identification number for the alternative GeneralMessage__message.
 * @see GeneralMessage__C
 */
enum{asn_GeneralMessage__message = 0};

/**
 * Class representing the "message" alternative value.
 * <br>The alternative field takes the value asn_GeneralMessage__message.
 * @see GeneralMessage__C
 * @see asn_GeneralMessage__message
 */
class asncGeneralMessage__message: public GeneralMessage__C

{
   public:
      /**
       * <br>An UTF8String value.
       */
      asnOctetString message;

      /**
       * Default constructor.
       */
      asncGeneralMessage__message();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncGeneralMessage__message(const asncGeneralMessage__message& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncGeneralMessage__message();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : GeneralMessage__C
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncGeneralMessage__message&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncGeneralMessage__message(const asncGeneralMessage__message& object);
#endif // asnCodCopytor
};

/**
 * The identification number for the alternative ocetMessage.
 * @see GeneralMessage__C
 */
enum{asn_ocetMessage = 1};

/**
 * Class representing the "ocetMessage" alternative value.
 * <br>The alternative field takes the value asn_ocetMessage.
 * @see GeneralMessage__C
 * @see asn_ocetMessage
 */
class asncocetMessage: public GeneralMessage__C

{
   public:
      /**
       * <br>An OCTET STRING value.
       */
      asnOctetString ocetMessage;

      /**
       * Default constructor.
       */
      asncocetMessage();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncocetMessage(const asncocetMessage& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncocetMessage();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : GeneralMessage__C
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncocetMessage&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncocetMessage(const asncocetMessage& object);
#endif // asnCodCopytor
};

/**
 * Class representing the GeneralMessage type.
 */
class GeneralMessage : public asntype
{
   public:
      /**
       * <br>The value of this CHOICE type is an instance of 
       * a subclass of {@link #GeneralMessage__C}.
       * Use the following subclasses to set the alternative value :
       * <BR>&nbsp;{@link asncGeneralMessage__message}
       * <BR>&nbsp;{@link asncocetMessage}
       */
      GeneralMessage__C * value;
      /**
       * Default constructor.
       */
      GeneralMessage();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const GeneralMessage&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      GeneralMessage(const GeneralMessage& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      GeneralMessage(const GeneralMessage& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : GeneralMessage
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~GeneralMessage();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[8]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * The flag to mark the presence of the element Notification__code in the optional field.
 */
enum{asn_Notification__code = 0};
/**
 * The flag to mark the presence of the element parameters in the optional field.
 */
enum{asn_parameters = 1};
/**
 * Class representing the Notification type.
 */
class Notification : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An INTEGER value.
       * Use the following values :
       * <BR>{@link #door_unlock}
       * <BR>{@link #event_trigger}
       * <BR>{@link #status_report}
       */
      asnMAXSINT reason;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       */
      TimeStamp * time;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_Notification__code} to set the presence in the optional field.
       */
      asnOctetString code;
      /**
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncNotification__parameterss}.
       * <BR>Optional field: use {@link #asn_parameters} to set the presence in the optional field.
       */
      asnList parameters; //elements are of class asncNotification__parameterss

      /**
       * Default constructor.
       */
      Notification();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const Notification&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      Notification(const Notification& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      Notification(const Notification& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : Notification
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~Notification();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[42]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element swModel in the optional field.
 */
enum{asn_swModel = 0};
/**
 * The flag to mark the presence of the element OTA__swVersion in the optional field.
 */
enum{asn_OTA__swVersion = 1};
/**
 * The flag to mark the presence of the element verificationCode in the optional field.
 */
enum{asn_verificationCode = 2};
/**
 * Class representing the OTA type.
 */
class OTA : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_swModel} to set the presence in the optional field.
       */
      asnOctetString swModel;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_OTA__swVersion} to set the presence in the optional field.
       */
      asnOctetString swVersion;
      /**
       * <BR> 0 means no version information
       * <br>An UTF8String value.
       */
      asnOctetString downloadUrl;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_verificationCode} to set the presence in the optional field.
       */
      asnOctetString verificationCode;

      /**
       * Default constructor.
       */
      OTA();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const OTA&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      OTA(const OTA& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      OTA(const OTA& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : OTA
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~OTA();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[43]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element position in the optional field.
 */
enum{asn_position = 0};
/**
 * The flag to mark the presence of the element type in the optional field.
 */
enum{asn_type = 1};
/**
 * The flag to mark the presence of the element contactInfo in the optional field.
 */
enum{asn_contactInfo = 2};
/**
 * The flag to mark the presence of the element url in the optional field.
 */
enum{asn_url = 3};
/**
 * The flag to mark the presence of the element attributes in the optional field.
 */
enum{asn_attributes = 4};
/**
 * Class representing the PointOfInterest type.
 */
class PointOfInterest : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An UTF8String value.
       */
      asnOctetString name;
      /**
       * <br>A SEQUENCE value.
       * See {@link Position} for more informations.
       * <BR>Optional field: use {@link #asn_position} to set the presence in the optional field.
       */
      Position * position;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_type} to set the presence in the optional field.
       */
      asnOctetString type;
      /**
       * <br>A SEQUENCE value.
       * See {@link ContactInfo} for more informations.
       * <BR>Optional field: use {@link #asn_contactInfo} to set the presence in the optional field.
       */
      ContactInfo * contactInfo;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_url} to set the presence in the optional field.
       */
      asnOctetString url;
      /**
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncattributess}.
       * <BR>Optional field: use {@link #asn_attributes} to set the presence in the optional field.
       */
      asnList attributes; //elements are of class asncattributess

      /**
       * Default constructor.
       */
      PointOfInterest();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const PointOfInterest&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      PointOfInterest(const PointOfInterest& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      PointOfInterest(const PointOfInterest& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : PointOfInterest
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~PointOfInterest();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[9]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element latitude in the optional field.
 */
enum{asn_latitude = 0};
/**
 * The flag to mark the presence of the element longitude in the optional field.
 */
enum{asn_longitude = 1};
/**
 * The flag to mark the presence of the element altitude in the optional field.
 */
enum{asn_altitude = 2};
/**
 * The flag to mark the presence of the element posCanBeTrusted in the optional field.
 */
enum{asn_posCanBeTrusted = 3};
/**
 * The flag to mark the presence of the element carLocatorStatUploadEn in the optional field.
 */
enum{asn_carLocatorStatUploadEn = 4};
/**
 * The flag to mark the presence of the element marsCoordinates in the optional field.
 */
enum{asn_marsCoordinates = 5};
/**
 * Class representing the Position type.
 */
class Position : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <BR> format: milliarcsecond <=> degree * 3600000
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_latitude} to set the presence in the optional field.
       */
      asnMAXSINT latitude;
      /**
       * <BR> 32 bits
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_longitude} to set the presence in the optional field.
       */
      asnMAXSINT longitude;
      /**
       * <BR> 32 bits
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_altitude} to set the presence in the optional field.
       */
      asnMAXSINT altitude;
      /**
       * <BR> the altitude in meter
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_posCanBeTrusted} to set the presence in the optional field.
       */
      asnBOOL posCanBeTrusted;
      /**
       * <BR> false means TEM use last position instead of GPS, default is true
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_carLocatorStatUploadEn} to set the presence in the optional field.
       */
      asnBOOL carLocatorStatUploadEn;
      /**
       * <BR> can TEM upload position, user can enable/disable through IHU, default is true
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_marsCoordinates} to set the presence in the optional field.
       */
      asnBOOL marsCoordinates;

      /**
       * Default constructor.
       */
      Position();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const Position&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      Position(const Position& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      Position(const Position& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : Position
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~Position();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[10]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element street in the optional field.
 */
enum{asn_street = 0};
/**
 * The flag to mark the presence of the element houseNumber in the optional field.
 */
enum{asn_houseNumber = 1};
/**
 * The flag to mark the presence of the element city in the optional field.
 */
enum{asn_city = 2};
/**
 * The flag to mark the presence of the element region in the optional field.
 */
enum{asn_region = 3};
/**
 * The flag to mark the presence of the element postcode in the optional field.
 */
enum{asn_postcode = 4};
/**
 * The flag to mark the presence of the element country in the optional field.
 */
enum{asn_country = 5};
/**
 * Class representing the PostAddress type.
 */
class PostAddress : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_street} to set the presence in the optional field.
       */
      asnOctetString street;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_houseNumber} to set the presence in the optional field.
       */
      asnOctetString houseNumber;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_city} to set the presence in the optional field.
       */
      asnOctetString city;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_region} to set the presence in the optional field.
       */
      asnOctetString region;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_postcode} to set the presence in the optional field.
       */
      asnOctetString postcode;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_country} to set the presence in the optional field.
       */
      asnOctetString country;

      /**
       * Default constructor.
       */
      PostAddress();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const PostAddress&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      PostAddress(const PostAddress& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      PostAddress(const PostAddress& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : PostAddress
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~PostAddress();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[12]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * Class representing the RuleCondition type.
 */
class RuleCondition : public asntype
{
   public:
      /**
       * <br>A PrintableString value.
       */
      asnOctetString condition;

      /**
       * Default constructor.
       */
      RuleCondition();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const RuleCondition&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      RuleCondition(const RuleCondition& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      RuleCondition(const RuleCondition& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : RuleCondition
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~RuleCondition();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[102]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * The flag to mark the presence of the element serviceTrigger in the optional field.
 */
enum{asn_serviceTrigger = 0};
/**
 * The flag to mark the presence of the element ServiceData__serviceParameters in the optional field.
 */
enum{asn_ServiceData__serviceParameters = 1};
/**
 * The flag to mark the presence of the element serviceCommand in the optional field.
 */
enum{asn_serviceCommand = 2};
/**
 * The flag to mark the presence of the element serviceResult in the optional field.
 */
enum{asn_serviceResult = 3};
/**
 * The flag to mark the presence of the element serviceStatus in the optional field.
 */
enum{asn_serviceStatus = 4};
/**
 * The flag to mark the presence of the element ServiceData__message in the optional field.
 */
enum{asn_ServiceData__message = 5};
/**
 * The flag to mark the presence of the element pois in the optional field.
 */
enum{asn_pois = 6};
/**
 * The flag to mark the presence of the element configuration in the optional field.
 */
enum{asn_configuration = 7};
/**
 * The flag to mark the presence of the element vehicleStatus in the optional field.
 */
enum{asn_vehicleStatus = 8};
/**
 * The flag to mark the presence of the element ServiceData__ota in the optional field.
 */
enum{asn_ServiceData__ota = 9};
/**
 * The flag to mark the presence of the element ServiceData__fota in the optional field.
 */
enum{asn_ServiceData__fota = 10};
/**
 * The flag to mark the presence of the element rvdc in the optional field.
 */
enum{asn_rvdc = 11};
/**
 * The flag to mark the presence of the element trip in the optional field.
 */
enum{asn_trip = 12};
/**
 * The flag to mark the presence of the element tripFragments in the optional field.
 */
enum{asn_tripFragments = 13};
/**
 * The flag to mark the presence of the element trackPoints in the optional field.
 */
enum{asn_trackPoints = 14};
/**
 * The flag to mark the presence of the element nevServiceData in the optional field.
 */
enum{asn_nevServiceData = 15};
/**
 * The flag to mark the presence of the element eventRule in the optional field.
 */
enum{asn_eventRule = 16};
/**
 * The flag to mark the presence of the element timerData in the optional field.
 */
enum{asn_timerData = 17};
/**
 * Class representing the ServiceData type.
 */
class ServiceData : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <BR> the following are service control related parameters
       * <br>A SEQUENCE value.
       * See {@link ServiceTrigger} for more informations.
       * <BR>Optional field: use {@link #asn_serviceTrigger} to set the presence in the optional field.
       */
      ServiceTrigger * serviceTrigger;
      /**
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncServiceData__serviceParameterss}.
       * <BR>Optional field: use {@link #asn_ServiceData__serviceParameters} to set the presence in the optional field.
       */
      asnList serviceParameters; //elements are of class asncServiceData__serviceParameterss
      /**
       * <BR> generic service parameters used for extension
       * <br>An INTEGER value.
       * Use the following values :
       * <BR>{@link #startService}
       * <BR>{@link #requestData}
       * <BR>{@link #responseData}
       * <BR>{@link #executionAction}
       * <BR>{@link #terminateService}
       * <BR>Optional field: use {@link #asn_serviceCommand} to set the presence in the optional field.
       */
      asnMAXSINT serviceCommand;
      /**
       * <BR> the service operation result
       * <br>A SEQUENCE value.
       * See {@link ServiceResult} for more informations.
       * <BR>Optional field: use {@link #asn_serviceResult} to set the presence in the optional field.
       */
      ServiceResult * serviceResult;
      /**
       * <BR> the service status in system
       * <br>A SEQUENCE value.
       * See {@link ServiceStatus} for more informations.
       * <BR>Optional field: use {@link #asn_serviceStatus} to set the presence in the optional field.
       */
      ServiceStatus * serviceStatus;
      /**
       * <BR> the data pushed to device  (downlink)
       * <br>The value of this CHOICE type is an instance of
       * a subclass of {@link #GeneralMessage__C}.
       * Use the following subclasses to set the alternative value :
       * <BR>&nbsp;{@link asncGeneralMessage__message}
       * <BR>&nbsp;{@link asncocetMessage}
       * <BR>Optional field: use {@link #asn_ServiceData__message} to set the presence in the optional field.
       */
      GeneralMessage__C * message;
      /**
       * <BR> The general message used to push notificaton
       * <br>Elements of this SET OF type.
       * <BR>Elements are of class {@link #asncpoiss}.
       * <BR>Optional field: use {@link #asn_pois} to set the presence in the optional field.
       */
      asnList pois; //elements are of class asncpoiss
      /**
       * <br>A SEQUENCE value.
       * See {@link Configuration} for more informations.
       * <BR>Optional field: use {@link #asn_configuration} to set the presence in the optional field.
       */
      Configuration * configuration;
      /**
       * <BR> the device status reported to cloud (uplink)
       * <br>A SEQUENCE value.
       * See {@link VehicleStatus} for more informations.
       * <BR>Optional field: use {@link #asn_vehicleStatus} to set the presence in the optional field.
       */
      VehicleStatus * vehicleStatus;
      /**
       * <BR> defined in specific device status ASN.1 file)
       * <br>A SEQUENCE value.
       * See {@link OTA} for more informations.
       * <BR>Optional field: use {@link #asn_ServiceData__ota} to set the presence in the optional field.
       */
      OTA * ota;
      /**
       * <br>A SEQUENCE value.
       * See {@link FOTA} for more informations.
       * <BR>Optional field: use {@link #asn_ServiceData__fota} to set the presence in the optional field.
       */
      FOTA * fota;
      /**
       * <BR> FOTA upgrade
       * <br>A SEQUENCE value.
       * See {@link RVDC} for more informations.
       * <BR>Optional field: use {@link #asn_rvdc} to set the presence in the optional field.
       */
      RVDC * rvdc;
      /**
       * <BR> GEEA2.0 RVDC
       * <BR> trip information from the vehicle
       * <br>A SEQUENCE value.
       * See {@link Trip} for more informations.
       * <BR>Optional field: use {@link #asn_trip} to set the presence in the optional field.
       */
      Trip * trip;
      /**
       * <BR> trip information from the vehicle FOR non-CMA 
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asnctripFragmentss}.
       * <BR>Optional field: use {@link #asn_tripFragments} to set the presence in the optional field.
       */
      asnList tripFragments; //elements are of class asnctripFragmentss
      /**
       * <BR> track points, can be used in SVT and Journey log
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asnctrackPointss}.
       * <BR>Optional field: use {@link #asn_trackPoints} to set the presence in the optional field.
       */
      asnList trackPoints; //elements are of class asnctrackPointss
      /**
       * <BR> NEV RMS service data
       * <br>A SEQUENCE value.
       * See {@link NEVServiceData} for more informations.
       * <BR>Optional field: use {@link #asn_nevServiceData} to set the presence in the optional field.
       */
      NEVServiceData * nevServiceData;
      /**
       * <BR> Event notification, rule
       * <br>A SEQUENCE value.
       * See {@link EventRule} for more informations.
       * <BR>Optional field: use {@link #asn_eventRule} to set the presence in the optional field.
       */
      EventRule * eventRule;
      /**
       * <BR>Charge location and timer
       * <br>A SEQUENCE value.
       * See {@link TimerData} for more informations.
       * <BR>Optional field: use {@link #asn_timerData} to set the presence in the optional field.
       */
      TimerData * timerData;

      /**
       * Default constructor.
       */
      ServiceData();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const ServiceData&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      ServiceData(const ServiceData& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      ServiceData(const ServiceData& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : ServiceData
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~ServiceData();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[1]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[3];
};


/**
 * The flag to mark the presence of the element intVal in the optional field.
 */
enum{asn_intVal = 0};
/**
 * The flag to mark the presence of the element ServiceParameter__stringVal in the optional field.
 */
enum{asn_ServiceParameter__stringVal = 1};
/**
 * The flag to mark the presence of the element ServiceParameter__boolVal in the optional field.
 */
enum{asn_ServiceParameter__boolVal = 2};
/**
 * The flag to mark the presence of the element ServiceParameter__timestampVal in the optional field.
 */
enum{asn_ServiceParameter__timestampVal = 3};
/**
 * The flag to mark the presence of the element ServiceParameter__dataVal in the optional field.
 */
enum{asn_ServiceParameter__dataVal = 4};
/**
 * Class representing the ServiceParameter type.
 */
class ServiceParameter : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString key;
      /**
       * <BR> different type of values, support int, string, boolean and timestamp
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_intVal} to set the presence in the optional field.
       */
      asnMAXSINT intVal;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__stringVal} to set the presence in the optional field.
       */
      asnOctetString stringVal;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__boolVal} to set the presence in the optional field.
       */
      asnBOOL boolVal;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_ServiceParameter__timestampVal} to set the presence in the optional field.
       */
      TimeStamp * timestampVal;
      /**
       * <br>An OCTET STRING value.
       * <BR>Optional field: use {@link #asn_ServiceParameter__dataVal} to set the presence in the optional field.
       */
      asnOctetString dataVal;

      /**
       * Default constructor.
       */
      ServiceParameter();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const ServiceParameter&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      ServiceParameter(const ServiceParameter& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      ServiceParameter(const ServiceParameter& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : ServiceParameter
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~ServiceParameter();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[4]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element error in the optional field.
 */
enum{asn_error = 0};
/**
 * Class representing the ServiceResult type.
 * <BR> minutes of day
 */
class ServiceResult : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A BOOLEAN value.
       */
      asnBOOL operationSucceeded;
      /**
       * <br>A SEQUENCE value.
       * See {@link Error} for more informations.
       * <BR>Optional field: use {@link #asn_error} to set the presence in the optional field.
       */
      Error * error;

      /**
       * Default constructor.
       */
      ServiceResult();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const ServiceResult&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      ServiceResult(const ServiceResult& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      ServiceResult(const ServiceResult& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : ServiceResult
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~ServiceResult();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[5]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * Class representing the ServiceStatus type.
 * <BR> should this be removed???
 */
class ServiceStatus : public asntype
{
   public:
      /**
       * <br>A BOOLEAN value.
       */
      asnBOOL remoteControlInhibited;

      /**
       * Default constructor.
       */
      ServiceStatus();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const ServiceStatus&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      ServiceStatus(const ServiceStatus& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      ServiceStatus(const ServiceStatus& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : ServiceStatus
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~ServiceStatus();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[7]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * The flag to mark the presence of the element scheduledTime in the optional field.
 */
enum{asn_scheduledTime = 0};
/**
 * The flag to mark the presence of the element recurrentOperation in the optional field.
 */
enum{asn_recurrentOperation = 1};
/**
 * The flag to mark the presence of the element ServiceTrigger__duration in the optional field.
 */
enum{asn_ServiceTrigger__duration = 2};
/**
 * The flag to mark the presence of the element ServiceTrigger__interval in the optional field.
 */
enum{asn_ServiceTrigger__interval = 3};
/**
 * The flag to mark the presence of the element occurs in the optional field.
 */
enum{asn_occurs = 4};
/**
 * The flag to mark the presence of the element ServiceTrigger__endTime in the optional field.
 */
enum{asn_ServiceTrigger__endTime = 5};
/**
 * The flag to mark the presence of the element ServiceTrigger__startTimeofDay in the optional field.
 */
enum{asn_ServiceTrigger__startTimeofDay = 6};
/**
 * Class representing the ServiceTrigger type.
 */
class ServiceTrigger : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <BR> no value means the service will be performed immediately
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_scheduledTime} to set the presence in the optional field.
       */
      TimeStamp * scheduledTime;
      /**
       * <BR> To indicate whether it's recurrent or one-time opperation, default is one-time
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_recurrentOperation} to set the presence in the optional field.
       */
      asnBOOL recurrentOperation;
      /**
       * <BR> Time in 10s increment, maxium 1 year
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_ServiceTrigger__duration} to set the presence in the optional field.
       */
      asnMAXSINT duration;
      /**
       * <BR> Time in 10s increment, maxium 10 days
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_ServiceTrigger__interval} to set the presence in the optional field.
       */
      asnMAXSINT interval;
      /**
       * <BR> number of time occurs, -1 indicates no limtes
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_occurs} to set the presence in the optional field.
       */
      asnMAXSINT occurs;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_ServiceTrigger__endTime} to set the presence in the optional field.
       */
      TimeStamp * endTime;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_ServiceTrigger__startTimeofDay} to set the presence in the optional field.
       */
      asnMAXSINT startTimeofDay;

      /**
       * Default constructor.
       */
      ServiceTrigger();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const ServiceTrigger&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      ServiceTrigger(const ServiceTrigger& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      ServiceTrigger(const ServiceTrigger& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : ServiceTrigger
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~ServiceTrigger();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[2]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element timers in the optional field.
 */
enum{asn_timers = 0};
/**
 * Class representing the TimerData type.
 * <BR> notify interval 
 */
class TimerData : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT timerId;
      /**
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asnctimerss}.
       * <BR>Optional field: use {@link #asn_timers} to set the presence in the optional field.
       */
      asnList timers; //elements are of class asnctimerss

      /**
       * Default constructor.
       */
      TimerData();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const TimerData&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      TimerData(const TimerData& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      TimerData(const TimerData& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : TimerData
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~TimerData();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[104]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element TimerInfo__duration in the optional field.
 */
enum{asn_TimerInfo__duration = 0};
/**
 * The flag to mark the presence of the element dayofWeek in the optional field.
 */
enum{asn_dayofWeek = 1};
/**
 * The flag to mark the presence of the element TimerInfo__startTimeofDay in the optional field.
 */
enum{asn_TimerInfo__startTimeofDay = 2};
/**
 * The flag to mark the presence of the element endtimeofDay in the optional field.
 */
enum{asn_endtimeofDay = 3};
/**
 * Class representing the TimerInfo type.
 */
class TimerInfo : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT timerActivation;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_TimerInfo__duration} to set the presence in the optional field.
       */
      asnMAXSINT duration;
      /**
       * <br>An OCTET STRING value.
       * <BR>Optional field: use {@link #asn_dayofWeek} to set the presence in the optional field.
       */
      asnOctetString dayofWeek;
      /**
       * <br>An OCTET STRING value.
       * <BR>Optional field: use {@link #asn_TimerInfo__startTimeofDay} to set the presence in the optional field.
       */
      asnOctetString startTimeofDay;
      /**
       * <br>An OCTET STRING value.
       * <BR>Optional field: use {@link #asn_endtimeofDay} to set the presence in the optional field.
       */
      asnOctetString endtimeofDay;

      /**
       * Default constructor.
       */
      TimerInfo();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const TimerInfo&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      TimerInfo(const TimerInfo& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      TimerInfo(const TimerInfo& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : TimerInfo
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~TimerInfo();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[105]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element TrackPoint__direction in the optional field.
 */
enum{asn_TrackPoint__direction = 0};
/**
 * The flag to mark the presence of the element isSVT in the optional field.
 */
enum{asn_isSVT = 1};
/**
 * The flag to mark the presence of the element TrackPoint__odometer in the optional field.
 */
enum{asn_TrackPoint__odometer = 2};
/**
 * The flag to mark the presence of the element travelDistanceSinceLastWaypoint in the optional field.
 */
enum{asn_travelDistanceSinceLastWaypoint = 3};
/**
 * The flag to mark the presence of the element fuelConsumptionSinceLastWaypoint in the optional field.
 */
enum{asn_fuelConsumptionSinceLastWaypoint = 4};
/**
 * The flag to mark the presence of the element electricConsumptionSinceLastSample in the optional field.
 */
enum{asn_electricConsumptionSinceLastSample = 5};
/**
 * The flag to mark the presence of the element electricRegenerationSinceLastSample in the optional field.
 */
enum{asn_electricRegenerationSinceLastSample = 6};
/**
 * Class representing the TrackPoint type.
 */
class TrackPoint : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       */
      TimeStamp * systemTime;
      /**
       * <br>A SEQUENCE value.
       * See {@link Position} for more informations.
       */
      Position * position;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT speed;
      /**
       * <BR> kmph
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_TrackPoint__direction} to set the presence in the optional field.
       */
      asnMAXSINT direction;
      /**
       * <BR> 0 means North, clockwise    
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_isSVT} to set the presence in the optional field.
       */
      asnBOOL isSVT;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_TrackPoint__odometer} to set the presence in the optional field.
       */
      asnMAXSINT odometer;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_travelDistanceSinceLastWaypoint} to set the presence in the optional field.
       */
      asnMAXSINT travelDistanceSinceLastWaypoint;
      /**
       * <BR>Consumed fuel since trip start/last waypoint . 
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_fuelConsumptionSinceLastWaypoint} to set the presence in the optional field.
       */
      asnMAXSINT fuelConsumptionSinceLastWaypoint;
      /**
       * <BR>Electrical consumption since last sample.
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_electricConsumptionSinceLastSample} to set the presence in the optional field.
       */
      asnMAXSINT electricConsumptionSinceLastSample;
      /**
       * <BR>Electrical regeneration since last sample. 
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_electricRegenerationSinceLastSample} to set the presence in the optional field.
       */
      asnMAXSINT electricRegenerationSinceLastSample;

      /**
       * Default constructor.
       */
      TrackPoint();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const TrackPoint&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      TrackPoint(const TrackPoint& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      TrackPoint(const TrackPoint& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : TrackPoint
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~TrackPoint();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[90]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element Trip__startOdometer in the optional field.
 */
enum{asn_Trip__startOdometer = 0};
/**
 * The flag to mark the presence of the element fuelConsumption in the optional field.
 */
enum{asn_fuelConsumption = 1};
/**
 * The flag to mark the presence of the element waypoints in the optional field.
 */
enum{asn_waypoints = 2};
/**
 * The flag to mark the presence of the element Trip__endOdometer in the optional field.
 */
enum{asn_Trip__endOdometer = 3};
/**
 * The flag to mark the presence of the element electricConsumption in the optional field.
 */
enum{asn_electricConsumption = 4};
/**
 * The flag to mark the presence of the element electricRegeneration in the optional field.
 */
enum{asn_electricRegeneration = 5};
/**
 * Class representing the Trip type.
 */
class Trip : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT tripId;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       */
      TimeStamp * startTime;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_Trip__startOdometer} to set the presence in the optional field.
       */
      asnMAXSINT startOdometer;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_fuelConsumption} to set the presence in the optional field.
       */
      asnMAXSINT fuelConsumption;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT traveledDistance;
      /**
       * <BR> km
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asnctrackpointss}.
       */
      asnList trackpoints; //elements are of class asnctrackpointss
      /**
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncwaypointss}.
       * <BR>Optional field: use {@link #asn_waypoints} to set the presence in the optional field.
       */
      asnList waypoints; //elements are of class asncwaypointss
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT avgSpeed;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       */
      TimeStamp * endTime;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_Trip__endOdometer} to set the presence in the optional field.
       */
      asnMAXSINT endOdometer;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_electricConsumption} to set the presence in the optional field.
       */
      asnMAXSINT electricConsumption;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_electricRegeneration} to set the presence in the optional field.
       */
      asnMAXSINT electricRegeneration;

      /**
       * Default constructor.
       */
      Trip();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const Trip&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      Trip(const Trip& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      Trip(const Trip& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : Trip
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~Trip();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[89]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element startPosition in the optional field.
 */
enum{asn_startPosition = 0};
/**
 * The flag to mark the presence of the element TripFragment__startOdometer in the optional field.
 */
enum{asn_TripFragment__startOdometer = 1};
/**
 * The flag to mark the presence of the element startFuelLevel in the optional field.
 */
enum{asn_startFuelLevel = 2};
/**
 * The flag to mark the presence of the element startElectricConsumption in the optional field.
 */
enum{asn_startElectricConsumption = 3};
/**
 * The flag to mark the presence of the element startElectricRegeneration in the optional field.
 */
enum{asn_startElectricRegeneration = 4};
/**
 * The flag to mark the presence of the element TripFragment__endTime in the optional field.
 */
enum{asn_TripFragment__endTime = 5};
/**
 * The flag to mark the presence of the element endPosition in the optional field.
 */
enum{asn_endPosition = 6};
/**
 * The flag to mark the presence of the element TripFragment__endOdometer in the optional field.
 */
enum{asn_TripFragment__endOdometer = 7};
/**
 * The flag to mark the presence of the element endFuelLevel in the optional field.
 */
enum{asn_endFuelLevel = 8};
/**
 * The flag to mark the presence of the element endElectricConsumption in the optional field.
 */
enum{asn_endElectricConsumption = 9};
/**
 * The flag to mark the presence of the element endElectricRegeneration in the optional field.
 */
enum{asn_endElectricRegeneration = 10};
/**
 * Class representing the TripFragment type.
 */
class TripFragment : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       */
      TimeStamp * startTime;
      /**
       * <br>A SEQUENCE value.
       * See {@link Position} for more informations.
       * <BR>Optional field: use {@link #asn_startPosition} to set the presence in the optional field.
       */
      Position * startPosition;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_TripFragment__startOdometer} to set the presence in the optional field.
       */
      asnMAXSINT startOdometer;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_startFuelLevel} to set the presence in the optional field.
       */
      asnMAXSINT startFuelLevel;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_startElectricConsumption} to set the presence in the optional field.
       */
      asnMAXSINT startElectricConsumption;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_startElectricRegeneration} to set the presence in the optional field.
       */
      asnMAXSINT startElectricRegeneration;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_TripFragment__endTime} to set the presence in the optional field.
       */
      TimeStamp * endTime;
      /**
       * <br>A SEQUENCE value.
       * See {@link Position} for more informations.
       * <BR>Optional field: use {@link #asn_endPosition} to set the presence in the optional field.
       */
      Position * endPosition;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_TripFragment__endOdometer} to set the presence in the optional field.
       */
      asnMAXSINT endOdometer;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_endFuelLevel} to set the presence in the optional field.
       */
      asnMAXSINT endFuelLevel;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_endElectricConsumption} to set the presence in the optional field.
       */
      asnMAXSINT endElectricConsumption;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_endElectricRegeneration} to set the presence in the optional field.
       */
      asnMAXSINT endElectricRegeneration;

      /**
       * Default constructor.
       */
      TripFragment();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const TripFragment&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      TripFragment(const TripFragment& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      TripFragment(const TripFragment& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : TripFragment
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~TripFragment();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[91]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[2];
};


/**
 * The flag to mark the presence of the element confAndId in the optional field.
 */
enum{asn_confAndId = 0};
/**
 * The flag to mark the presence of the element ecuWarningMessages in the optional field.
 */
enum{asn_ecuWarningMessages = 1};
/**
 * The flag to mark the presence of the element towStatus in the optional field.
 */
enum{asn_towStatus = 2};
/**
 * The flag to mark the presence of the element AdditionalStatus__signals in the optional field.
 */
enum{asn_AdditionalStatus__signals = 3};
/**
 * The flag to mark the presence of the element AdditionalStatus__data in the optional field.
 */
enum{asn_AdditionalStatus__data = 4};
/**
 * Class representing the AdditionalStatus type.
 */
class AdditionalStatus : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A SEQUENCE value.
       * See {@link ConfigurationAndIdentity} for more informations.
       * <BR>Optional field: use {@link #asn_confAndId} to set the presence in the optional field.
       */
      ConfigurationAndIdentity * confAndId;
      /**
       * <br>Elements of this SET OF type.
       * <BR>Elements are of class {@link #asncEcuWarningMessagess}.
       * <BR>Optional field: use {@link #asn_ecuWarningMessages} to set the presence in the optional field.
       */
      asnList ecuWarningMessages;
      /**
       * <br>A SEQUENCE value.
       * See {@link TowStatus} for more informations.
       * <BR>Optional field: use {@link #asn_towStatus} to set the presence in the optional field.
       */
      TowStatus * towStatus;
      /**
       * <BR> The extended signals which can be reported from the car
       * <br>Elements of this SET OF type.
       * <BR>Elements are of class {@link #asncAdditionalStatus__signalss}.
       * <BR>Optional field: use {@link #asn_AdditionalStatus__signals} to set the presence in the optional field.
       */
      asnList signals; //elements are of class asncAdditionalStatus__signalss
      /**
       * <BR> The binary chunk reserved for further usage
       * <br>An OCTET STRING value.
       * <BR>Optional field: use {@link #asn_AdditionalStatus__data} to set the presence in the optional field.
       */
      asnOctetString data;

      /**
       * Default constructor.
       */
      AdditionalStatus();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const AdditionalStatus&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      AdditionalStatus(const AdditionalStatus& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      AdditionalStatus(const AdditionalStatus& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : AdditionalStatus
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~AdditionalStatus();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[34]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element BasicVehicleStatus__vin in the optional field.
 */
enum{asn_BasicVehicleStatus__vin = 0};
/**
 * The flag to mark the presence of the element speedUnit in the optional field.
 */
enum{asn_speedUnit = 1};
/**
 * The flag to mark the presence of the element BasicVehicleStatus__speedValidity in the optional field.
 */
enum{asn_BasicVehicleStatus__speedValidity = 2};
/**
 * The flag to mark the presence of the element BasicVehicleStatus__direction in the optional field.
 */
enum{asn_BasicVehicleStatus__direction = 3};
/**
 * The flag to mark the presence of the element engineStatus in the optional field.
 */
enum{asn_engineStatus = 4};
/**
 * The flag to mark the presence of the element keyStatus in the optional field.
 */
enum{asn_keyStatus = 5};
/**
 * The flag to mark the presence of the element usageMode in the optional field.
 */
enum{asn_usageMode = 6};
/**
 * Class representing the BasicVehicleStatus type.
 * <BR> generic notification, e.g., vehicle unlock notification
 */
class BasicVehicleStatus : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_BasicVehicleStatus__vin} to set the presence in the optional field.
       */
      asnOctetString vin;
      /**
       * <br>A SEQUENCE value.
       * See {@link Position} for more informations.
       */
      Position * position;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT speed;
      /**
       * <BR> km/h   
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_speedUnit} to set the presence in the optional field.
       */
      asnOctetString speedUnit;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_BasicVehicleStatus__speedValidity} to set the presence in the optional field.
       */
      asnMAXSINT speedValidity;
      /**
       * <BR> 0x0: valid, 0x1: Invalid
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_BasicVehicleStatus__direction} to set the presence in the optional field.
       */
      asnMAXSINT direction;
      /**
       * <br>An INTEGER value.
       * Use the following values :
       * <BR>{@link #engine_running}
       * <BR>{@link #engine_off}
       * <BR>{@link #EngineStatus__unknown}
       * <BR>Optional field: use {@link #asn_engineStatus} to set the presence in the optional field.
       */
      asnMAXSINT engineStatus;
      /**
       * <br>An INTEGER value.
       * Use the following values :
       * <BR>{@link #no_key_inserted}
       * <BR>{@link #key_inserted}
       * <BR>{@link #KeyStatus__unknown}
       * <BR>Optional field: use {@link #asn_keyStatus} to set the presence in the optional field.
       */
      asnMAXSINT keyStatus;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_usageMode} to set the presence in the optional field.
       */
      asnMAXSINT usageMode;

      /**
       * Default constructor.
       */
      BasicVehicleStatus();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const BasicVehicleStatus&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      BasicVehicleStatus(const BasicVehicleStatus& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      BasicVehicleStatus(const BasicVehicleStatus& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : BasicVehicleStatus
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~BasicVehicleStatus();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[16]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element BatteryStatus__stateOfCharge in the optional field.
 */
enum{asn_BatteryStatus__stateOfCharge = 0};
/**
 * The flag to mark the presence of the element BatteryStatus__chargeLevel in the optional field.
 */
enum{asn_BatteryStatus__chargeLevel = 1};
/**
 * The flag to mark the presence of the element stateOfHealth in the optional field.
 */
enum{asn_stateOfHealth = 2};
/**
 * The flag to mark the presence of the element voltage in the optional field.
 */
enum{asn_voltage = 3};
/**
 * Class representing the BatteryStatus type.
 */
class BatteryStatus : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_BatteryStatus__stateOfCharge} to set the presence in the optional field.
       */
      asnMAXSINT stateOfCharge;
      /**
       * <BR> status, e.g. empty, low, normal, high, etc.
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_BatteryStatus__chargeLevel} to set the presence in the optional field.
       */
      asnMAXSINT chargeLevel;
      /**
       * <BR> the charge percentage
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_stateOfHealth} to set the presence in the optional field.
       */
      asnMAXSINT stateOfHealth;
      /**
       * <BR> the health of battery, to indicate whether the battery need to be replaced or
       *  not
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_voltage} to set the presence in the optional field.
       */
      asnMAXSINT voltage;

      /**
       * Default constructor.
       */
      BatteryStatus();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const BatteryStatus&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      BatteryStatus(const BatteryStatus& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      BatteryStatus(const BatteryStatus& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : BatteryStatus
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~BatteryStatus();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[19]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element heatedFrontSeats in the optional field.
 */
enum{asn_heatedFrontSeats = 0};
/**
 * The flag to mark the presence of the element parkingClimateLevel in the optional field.
 */
enum{asn_parkingClimateLevel = 1};
/**
 * The flag to mark the presence of the element heatedSteeringWheel in the optional field.
 */
enum{asn_heatedSteeringWheel = 2};
/**
 * The flag to mark the presence of the element CarConfig__items in the optional field.
 */
enum{asn_CarConfig__items = 3};
/**
 * Class representing the CarConfig type.
 */
class CarConfig : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_heatedFrontSeats} to set the presence in the optional field.
       */
      asnMAXSINT heatedFrontSeats;
      /**
       * <BR>  Heated front seats
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_parkingClimateLevel} to set the presence in the optional field.
       */
      asnMAXSINT parkingClimateLevel;
      /**
       * <BR> Parking Climate level
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_heatedSteeringWheel} to set the presence in the optional field.
       */
      asnMAXSINT heatedSteeringWheel;
      /**
       * <BR> Heated steering wheel
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncCarConfig__itemss}.
       * <BR>Optional field: use {@link #asn_CarConfig__items} to set the presence in the optional field.
       */
      asnList items; //elements are of class asncCarConfig__itemss

      /**
       * Default constructor.
       */
      CarConfig();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const CarConfig&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      CarConfig(const CarConfig& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      CarConfig(const CarConfig& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : CarConfig
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~CarConfig();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[33]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element interiorTemp in the optional field.
 */
enum{asn_interiorTemp = 0};
/**
 * The flag to mark the presence of the element exteriorTemp in the optional field.
 */
enum{asn_exteriorTemp = 1};
/**
 * The flag to mark the presence of the element preClimateActive in the optional field.
 */
enum{asn_preClimateActive = 2};
/**
 * The flag to mark the presence of the element airCleanSts in the optional field.
 */
enum{asn_airCleanSts = 3};
/**
 * The flag to mark the presence of the element drvHeatSts in the optional field.
 */
enum{asn_drvHeatSts = 4};
/**
 * The flag to mark the presence of the element passHeatingSts in the optional field.
 */
enum{asn_passHeatingSts = 5};
/**
 * The flag to mark the presence of the element rlHeatingSts in the optional field.
 */
enum{asn_rlHeatingSts = 6};
/**
 * The flag to mark the presence of the element rrHeatingSts in the optional field.
 */
enum{asn_rrHeatingSts = 7};
/**
 * The flag to mark the presence of the element drvVentSts in the optional field.
 */
enum{asn_drvVentSts = 8};
/**
 * The flag to mark the presence of the element passVentSts in the optional field.
 */
enum{asn_passVentSts = 9};
/**
 * The flag to mark the presence of the element rrVentSts in the optional field.
 */
enum{asn_rrVentSts = 10};
/**
 * The flag to mark the presence of the element rlVentSts in the optional field.
 */
enum{asn_rlVentSts = 11};
/**
 * The flag to mark the presence of the element interCO2Warning in the optional field.
 */
enum{asn_interCO2Warning = 12};
/**
 * The flag to mark the presence of the element fragStrs in the optional field.
 */
enum{asn_fragStrs = 13};
/**
 * Class representing the ClimateStatus type.
 * <BR> meter
 */
class ClimateStatus : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_interiorTemp} to set the presence in the optional field.
       */
      asnMAXSINT interiorTemp;
      /**
       * <BR> degree celcius
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_exteriorTemp} to set the presence in the optional field.
       */
      asnMAXSINT exteriorTemp;
      /**
       * <BR> degree celcius
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_preClimateActive} to set the presence in the optional field.
       */
      asnBOOL preClimateActive;
      /**
       * <BR>for ON/Off explaining if the PreClimate is running or not (ClimaActv)
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_airCleanSts} to set the presence in the optional field.
       */
      asnMAXSINT airCleanSts;
      /**
       * <BR> air conditioner clean status
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_drvHeatSts} to set the presence in the optional field.
       */
      asnMAXSINT drvHeatSts;
      /**
       * <BR> driver seat heating status
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_passHeatingSts} to set the presence in the optional field.
       */
      asnMAXSINT passHeatingSts;
      /**
       * <BR> front passenger seat heating status
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_rlHeatingSts} to set the presence in the optional field.
       */
      asnMAXSINT rlHeatingSts;
      /**
       * <BR> left rear seat heating status
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_rrHeatingSts} to set the presence in the optional field.
       */
      asnMAXSINT rrHeatingSts;
      /**
       * <BR> right rear seat heating status
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_drvVentSts} to set the presence in the optional field.
       */
      asnMAXSINT drvVentSts;
      /**
       * <BR> driver seat ventilation status
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_passVentSts} to set the presence in the optional field.
       */
      asnMAXSINT passVentSts;
      /**
       * <BR> front passenger seat ventilation status
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_rrVentSts} to set the presence in the optional field.
       */
      asnMAXSINT rrVentSts;
      /**
       * <BR> right rear seat ventilation status
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_rlVentSts} to set the presence in the optional field.
       */
      asnMAXSINT rlVentSts;
      /**
       * <BR> left rear seat ventilation status
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_interCO2Warning} to set the presence in the optional field.
       */
      asnMAXSINT interCO2Warning;
      /**
       * <br>A SEQUENCE value.
       * See {@link FragStrs} for more informations.
       * <BR>Optional field: use {@link #asn_fragStrs} to set the presence in the optional field.
       */
      FragStrs * fragStrs;

      /**
       * Default constructor.
       */
      ClimateStatus();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const ClimateStatus&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      ClimateStatus(const ClimateStatus& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      ClimateStatus(const ClimateStatus& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : ClimateStatus
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~ClimateStatus();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[21]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[2];
};


/**
 * The flag to mark the presence of the element ConfigurationAndIdentity__vin in the optional field.
 */
enum{asn_ConfigurationAndIdentity__vin = 0};
/**
 * The flag to mark the presence of the element fuelType in the optional field.
 */
enum{asn_fuelType = 1};
/**
 * Class representing the ConfigurationAndIdentity type.
 */
class ConfigurationAndIdentity : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_ConfigurationAndIdentity__vin} to set the presence in the optional field.
       */
      asnOctetString vin;
      /**
       * <br>An INTEGER value.
       * Use the following values :
       * <BR>{@link #petrol}
       * <BR>{@link #diesel}
       * <BR>{@link #petrolHybrid}
       * <BR>{@link #dieselHybrid}
       * <BR>{@link #ev}
       * <BR>{@link #hydrogenFuelcellEV}
       * <BR>{@link #compressedGas}
       * <BR>{@link #liquefiedPropaneGas}
       * <BR>{@link #FuelType__invalid}
       * <BR>Optional field: use {@link #asn_fuelType} to set the presence in the optional field.
       */
      asnMAXSINT fuelType;

      /**
       * Default constructor.
       */
      ConfigurationAndIdentity();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const ConfigurationAndIdentity&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      ConfigurationAndIdentity(const ConfigurationAndIdentity& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      ConfigurationAndIdentity(const ConfigurationAndIdentity& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : ConfigurationAndIdentity
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~ConfigurationAndIdentity();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[35]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element connectTime in the optional field.
 */
enum{asn_connectTime = 0};
/**
 * The flag to mark the presence of the element connectPosition in the optional field.
 */
enum{asn_connectPosition = 1};
/**
 * The flag to mark the presence of the element connectType in the optional field.
 */
enum{asn_connectType = 2};
/**
 * The flag to mark the presence of the element numRetriesConnect in the optional field.
 */
enum{asn_numRetriesConnect = 3};
/**
 * The flag to mark the presence of the element retryReason in the optional field.
 */
enum{asn_retryReason = 4};
/**
 * Class representing the ConnectivityInfo type.
 */
class ConnectivityInfo : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_connectTime} to set the presence in the optional field.
       */
      TimeStamp * connectTime;
      /**
       * <br>A SEQUENCE value.
       * See {@link Position} for more informations.
       * <BR>Optional field: use {@link #asn_connectPosition} to set the presence in the optional field.
       */
      Position * connectPosition;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_connectType} to set the presence in the optional field.
       */
      asnOctetString connectType;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_numRetriesConnect} to set the presence in the optional field.
       */
      asnMAXSINT numRetriesConnect;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_retryReason} to set the presence in the optional field.
       */
      asnOctetString retryReason;

      /**
       * Default constructor.
       */
      ConnectivityInfo();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const ConnectivityInfo&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      ConnectivityInfo(const ConnectivityInfo& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      ConnectivityInfo(const ConnectivityInfo& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : ConnectivityInfo
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~ConnectivityInfo();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[32]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element wakeupTime in the optional field.
 */
enum{asn_wakeupTime = 0};
/**
 * The flag to mark the presence of the element wPosition in the optional field.
 */
enum{asn_wPosition = 1};
/**
 * The flag to mark the presence of the element connectEstablishedList in the optional field.
 */
enum{asn_connectEstablishedList = 2};
/**
 * The flag to mark the presence of the element lostConnectionsList in the optional field.
 */
enum{asn_lostConnectionsList = 3};
/**
 * The flag to mark the presence of the element sleeptime in the optional field.
 */
enum{asn_sleeptime = 4};
/**
 * The flag to mark the presence of the element sPosition in the optional field.
 */
enum{asn_sPosition = 5};
/**
 * Class representing the ConnectivityStatus type.
 * <BR> 2G/3G/4G/wifi
 */
class ConnectivityStatus : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_wakeupTime} to set the presence in the optional field.
       */
      TimeStamp * wakeupTime;
      /**
       * <br>A SEQUENCE value.
       * See {@link Position} for more informations.
       * <BR>Optional field: use {@link #asn_wPosition} to set the presence in the optional field.
       */
      Position * wPosition;
      /**
       * <br>Elements of this SET OF type.
       * <BR>Elements are of class {@link #asncconnectEstablishedLists}.
       * <BR>Optional field: use {@link #asn_connectEstablishedList} to set the presence in the optional field.
       */
      asnList connectEstablishedList; //elements are of class asncconnectEstablishedLists
      /**
       * <br>Elements of this SET OF type.
       * <BR>Elements are of class {@link #asnclostConnectionsLists}.
       * <BR>Optional field: use {@link #asn_lostConnectionsList} to set the presence in the optional field.
       */
      asnList lostConnectionsList; //elements are of class asnclostConnectionsLists
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_sleeptime} to set the presence in the optional field.
       */
      TimeStamp * sleeptime;
      /**
       * <br>A SEQUENCE value.
       * See {@link Position} for more informations.
       * <BR>Optional field: use {@link #asn_sPosition} to set the presence in the optional field.
       */
      Position * sPosition;

      /**
       * Default constructor.
       */
      ConnectivityStatus();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const ConnectivityStatus&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      ConnectivityStatus(const ConnectivityStatus& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      ConnectivityStatus(const ConnectivityStatus& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : ConnectivityStatus
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~ConnectivityStatus();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[31]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element failureCount in the optional field.
 */
enum{asn_failureCount = 0};
/**
 * The flag to mark the presence of the element lastFail in the optional field.
 */
enum{asn_lastFail = 1};
/**
 * The flag to mark the presence of the element firtFail in the optional field.
 */
enum{asn_firtFail = 2};
/**
 * The flag to mark the presence of the element firstFailureOdometer in the optional field.
 */
enum{asn_firstFailureOdometer = 3};
/**
 * The flag to mark the presence of the element firstFailureBatteryVoltage in the optional field.
 */
enum{asn_firstFailureBatteryVoltage = 4};
/**
 * The flag to mark the presence of the element firstFailureVehicleSpeed in the optional field.
 */
enum{asn_firstFailureVehicleSpeed = 5};
/**
 * Class representing the DiagnosticTroubleCode type.
 * <BR>the code to identify the exception where the ECU cannot provide the DTCs, OEM
 *  specific
 */
class DiagnosticTroubleCode : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString dtc;
      /**
       * <BR>ID of the trouble code. OEM specific,
       * <br>A BIT STRING value.
       * Use the following values :
       * <BR>{@link #testFailed}
       * <BR>{@link #testFailedThisOperationCycle}
       * <BR>{@link #pendingDTC}
       * <BR>{@link #confirmedDTC}
       * <BR>{@link #testNotCompletedSinceLastClear}
       * <BR>{@link #testFailedSinceLastClear}
       * <BR>{@link #testNotCompletedThisOperationCycle}
       * <BR>{@link #warningIndicatorRequested}
       */
      asnNamedBitString status;
      /**
       * <BR>status of the DTC. Follows ISO 14229
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_failureCount} to set the presence in the optional field.
       */
      asnMAXSINT failureCount;
      /**
       * <BR>Failure counter.
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_lastFail} to set the presence in the optional field.
       */
      TimeStamp * lastFail;
      /**
       * <BR>Time of last failure
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_firtFail} to set the presence in the optional field.
       */
      TimeStamp * firtFail;
      /**
       * <BR>Time of first failure
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_firstFailureOdometer} to set the presence in the optional field.
       */
      asnMAXSINT firstFailureOdometer;
      /**
       * <BR>the odometer at the first failure
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_firstFailureBatteryVoltage} to set the presence in the optional field.
       */
      asnMAXSINT firstFailureBatteryVoltage;
      /**
       * <BR>the battery voltage at the first failure
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_firstFailureVehicleSpeed} to set the presence in the optional field.
       */
      asnMAXSINT firstFailureVehicleSpeed;

      /**
       * Default constructor.
       */
      DiagnosticTroubleCode();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const DiagnosticTroubleCode&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      DiagnosticTroubleCode(const DiagnosticTroubleCode& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      DiagnosticTroubleCode(const DiagnosticTroubleCode& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : DiagnosticTroubleCode
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~DiagnosticTroubleCode();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[28]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element dtcs in the optional field.
 */
enum{asn_dtcs = 0};
/**
 * The flag to mark the presence of the element exceptionCode in the optional field.
 */
enum{asn_exceptionCode = 1};
/**
 * Class representing the ECUDiagnostic type.
 */
class ECUDiagnostic : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString ecuID;
      /**
       * <BR>ECU ID which will be OEM specific,
       * <br>An INTEGER value.
       * Use the following values :
       * <BR>{@link #ok}
       * <BR>{@link #faulty}
       * <BR>{@link #HealthStatus__unknown}
       * <BR>{@link #HealthStatus__invalid}
       */
      asnMAXSINT diagnosticResult;
      /**
       * <BR> Diagnostic results
       * <br>Elements of this SET OF type.
       * <BR>Elements are of class {@link #asncdtcss}.
       * <BR>Optional field: use {@link #asn_dtcs} to set the presence in the optional field.
       */
      asnList dtcs; //elements are of class asncdtcss
      /**
       * <BR>the DTCs for the ECU
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_exceptionCode} to set the presence in the optional field.
       */
      asnMAXSINT exceptionCode;

      /**
       * Default constructor.
       */
      ECUDiagnostic();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const ECUDiagnostic&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      ECUDiagnostic(const ECUDiagnostic& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      ECUDiagnostic(const ECUDiagnostic& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : ECUDiagnostic
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~ECUDiagnostic();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[27]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * This class represents one element of SET OF type
 */
class asncECUDiagnosticss : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString ecuID;
      /**
       * <BR>ECU ID which will be OEM specific,
       * <br>An INTEGER value.
       * Use the following values :
       * <BR>{@link #ok}
       * <BR>{@link #faulty}
       * <BR>{@link #HealthStatus__unknown}
       * <BR>{@link #HealthStatus__invalid}
       */
      asnMAXSINT diagnosticResult;
      /**
       * <BR> Diagnostic results
       * <br>Elements of this SET OF type.
       * <BR>Elements are of class {@link #asncdtcss}.
       * <BR>Optional field: use {@link #asn_dtcs} to set the presence in the optional field.
       */
      asnList dtcs; //elements are of class asncdtcss
      /**
       * <BR>the DTCs for the ECU
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_exceptionCode} to set the presence in the optional field.
       */
      asnMAXSINT exceptionCode;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asncECUDiagnosticss();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncECUDiagnosticss(const asncECUDiagnosticss& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncECUDiagnosticss();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncECUDiagnosticss
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncECUDiagnosticss&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncECUDiagnosticss(const asncECUDiagnosticss& object);
#endif // asnCodCopytor
};

/**
 * Class representing the ECUDiagnostics type.
 */
class ECUDiagnostics : public asntype
{
   public:
      /**
       * <br>Elements of this SET OF type.
       * <BR>Elements are of class {@link #asncECUDiagnosticss}.
       */
      asnList value; //elements are of class asncECUDiagnosticss

      /**
       * Default constructor.
       */
      ECUDiagnostics();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const ECUDiagnostics&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      ECUDiagnostics(const ECUDiagnostics& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      ECUDiagnostics(const ECUDiagnostics& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : ECUDiagnostics
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~ECUDiagnostics();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[40]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * This class represents one element of SET OF type
 */
class asncEcuWarningMessagess : public asnListElement
{
   public :
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString key;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_collectTime} to set the presence in the optional field.
       */
      TimeStamp * collectTime;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_value} to set the presence in the optional field.
       */
      asnMAXSINT value;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_GenericVehicleSignal__stringVal} to set the presence in the optional field.
       */
      asnOctetString stringVal;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_GenericVehicleSignal__boolVal} to set the presence in the optional field.
       */
      asnBOOL boolVal;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_GenericVehicleSignal__timestampVal} to set the presence in the optional field.
       */
      TimeStamp * timestampVal;
      /**
       * <br>An OCTET STRING value.
       * <BR>Optional field: use {@link #asn_GenericVehicleSignal__dataVal} to set the presence in the optional field.
       */
      asnOctetString dataVal;

      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];

      /**
       * Default constructor.
       */
      asncEcuWarningMessagess();

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncEcuWarningMessagess(const asncEcuWarningMessagess& object);
#endif // asnCodCopytor
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~asncEcuWarningMessagess();
#endif

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : asncEcuWarningMessagess
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
private:
      /**
       * Assignment operator.
       */
      void operator=(const asncEcuWarningMessagess&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      asncEcuWarningMessagess(const asncEcuWarningMessagess& object);
#endif // asnCodCopytor
};

/**
 * Class representing the EcuWarningMessages type.
 * <BR> The extentable ECU Warning Message, each warning message will have a specified
 *  Key and the warning code as the Value
 */
class EcuWarningMessages : public asntype
{
   public:
      /**
       * <br>Elements of this SET OF type.
       * <BR>Elements are of class {@link #asncEcuWarningMessagess}.
       */
      asnList value; //elements are of class asncEcuWarningMessagess

      /**
       * Default constructor.
       */
      EcuWarningMessages();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const EcuWarningMessages&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      EcuWarningMessages(const EcuWarningMessages& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      EcuWarningMessages(const EcuWarningMessages& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : EcuWarningMessages
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~EcuWarningMessages();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[36]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * The flag to mark the presence of the element isCharging in the optional field.
 */
enum{asn_isCharging = 0};
/**
 * The flag to mark the presence of the element isPluggedIn in the optional field.
 */
enum{asn_isPluggedIn = 1};
/**
 * The flag to mark the presence of the element ElectricStatus__stateOfCharge in the optional field.
 */
enum{asn_ElectricStatus__stateOfCharge = 2};
/**
 * The flag to mark the presence of the element ElectricStatus__chargeLevel in the optional field.
 */
enum{asn_ElectricStatus__chargeLevel = 3};
/**
 * The flag to mark the presence of the element timeToFullyCharged in the optional field.
 */
enum{asn_timeToFullyCharged = 4};
/**
 * The flag to mark the presence of the element statusOfChargerConnection in the optional field.
 */
enum{asn_statusOfChargerConnection = 5};
/**
 * The flag to mark the presence of the element chargerState in the optional field.
 */
enum{asn_chargerState = 6};
/**
 * The flag to mark the presence of the element distanceToEmptyOnBatteryOnly in the optional field.
 */
enum{asn_distanceToEmptyOnBatteryOnly = 7};
/**
 * The flag to mark the presence of the element ems48VSOC in the optional field.
 */
enum{asn_ems48VSOC = 8};
/**
 * The flag to mark the presence of the element ems48VDisSOC in the optional field.
 */
enum{asn_ems48VDisSOC = 9};
/**
 * The flag to mark the presence of the element emsHVRBSError in the optional field.
 */
enum{asn_emsHVRBSError = 10};
/**
 * The flag to mark the presence of the element emsHVDC in the optional field.
 */
enum{asn_emsHVDC = 11};
/**
 * The flag to mark the presence of the element emsRBSModeDisplay in the optional field.
 */
enum{asn_emsRBSModeDisplay = 12};
/**
 * The flag to mark the presence of the element emsOVPActive in the optional field.
 */
enum{asn_emsOVPActive = 13};
/**
 * The flag to mark the presence of the element ems48vPackTemp1 in the optional field.
 */
enum{asn_ems48vPackTemp1 = 14};
/**
 * The flag to mark the presence of the element ems48vPackTemp2 in the optional field.
 */
enum{asn_ems48vPackTemp2 = 15};
/**
 * The flag to mark the presence of the element emsBMSLBuildSwVersion in the optional field.
 */
enum{asn_emsBMSLBuildSwVersion = 16};
/**
 * The flag to mark the presence of the element chargeHvSts in the optional field.
 */
enum{asn_chargeHvSts = 17};
/**
 * The flag to mark the presence of the element ptReady in the optional field.
 */
enum{asn_ptReady = 18};
/**
 * The flag to mark the presence of the element averPowerConsumption in the optional field.
 */
enum{asn_averPowerConsumption = 19};
/**
 * The flag to mark the presence of the element indPowerConsumption in the optional field.
 */
enum{asn_indPowerConsumption = 20};
/**
 * The flag to mark the presence of the element dcDcActvd in the optional field.
 */
enum{asn_dcDcActvd = 21};
/**
 * The flag to mark the presence of the element dcDcConnectStatus in the optional field.
 */
enum{asn_dcDcConnectStatus = 22};
/**
 * The flag to mark the presence of the element wptObjt in the optional field.
 */
enum{asn_wptObjt = 23};
/**
 * The flag to mark the presence of the element wptFineAlignt in the optional field.
 */
enum{asn_wptFineAlignt = 24};
/**
 * The flag to mark the presence of the element wptActived in the optional field.
 */
enum{asn_wptActived = 25};
/**
 * The flag to mark the presence of the element chargeIAct in the optional field.
 */
enum{asn_chargeIAct = 26};
/**
 * The flag to mark the presence of the element chargeUAct in the optional field.
 */
enum{asn_chargeUAct = 27};
/**
 * The flag to mark the presence of the element chargeSts in the optional field.
 */
enum{asn_chargeSts = 28};
/**
 * The flag to mark the presence of the element disChargeConnectStatus in the optional field.
 */
enum{asn_disChargeConnectStatus = 29};
/**
 * The flag to mark the presence of the element disChargeIAct in the optional field.
 */
enum{asn_disChargeIAct = 30};
/**
 * The flag to mark the presence of the element disChargeUAct in the optional field.
 */
enum{asn_disChargeUAct = 31};
/**
 * The flag to mark the presence of the element disChargeSts in the optional field.
 */
enum{asn_disChargeSts = 32};
/**
 * Class representing the ElectricStatus type.
 * <BR>Status for electrical or hybrid vehicle.
 */
class ElectricStatus : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_isCharging} to set the presence in the optional field.
       */
      asnBOOL isCharging;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_isPluggedIn} to set the presence in the optional field.
       */
      asnBOOL isPluggedIn;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_ElectricStatus__stateOfCharge} to set the presence in the optional field.
       */
      asnMAXSINT stateOfCharge;
      /**
       * <BR> status, e.g. empty, low, normal, high, etc.
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_ElectricStatus__chargeLevel} to set the presence in the optional field.
       */
      asnMAXSINT chargeLevel;
      /**
       * <BR> the charge percentage
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_timeToFullyCharged} to set the presence in the optional field.
       */
      asnMAXSINT timeToFullyCharged;
      /**
       * <BR> unit is defined according vehicle model
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_statusOfChargerConnection} to set the presence in the optional field.
       */
      asnMAXSINT statusOfChargerConnection;
      /**
       * <BR> Disconnected, ConnectedWithoutPower etc.
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_chargerState} to set the presence in the optional field.
       */
      asnMAXSINT chargerState;
      /**
       * <BR> idle, PreStrt etc.
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_distanceToEmptyOnBatteryOnly} to set the presence in the optional field.
       */
      asnMAXSINT distanceToEmptyOnBatteryOnly;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_ems48VSOC} to set the presence in the optional field.
       */
      asnMAXSINT ems48VSOC;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_ems48VDisSOC} to set the presence in the optional field.
       */
      asnMAXSINT ems48VDisSOC;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_emsHVRBSError} to set the presence in the optional field.
       */
      asnMAXSINT emsHVRBSError;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_emsHVDC} to set the presence in the optional field.
       */
      asnMAXSINT emsHVDC;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_emsRBSModeDisplay} to set the presence in the optional field.
       */
      asnMAXSINT emsRBSModeDisplay;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_emsOVPActive} to set the presence in the optional field.
       */
      asnMAXSINT emsOVPActive;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_ems48vPackTemp1} to set the presence in the optional field.
       */
      asnMAXSINT ems48vPackTemp1;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_ems48vPackTemp2} to set the presence in the optional field.
       */
      asnMAXSINT ems48vPackTemp2;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_emsBMSLBuildSwVersion} to set the presence in the optional field.
       */
      asnOctetString emsBMSLBuildSwVersion;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT emsCBRemainingLife;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_chargeHvSts} to set the presence in the optional field.
       */
      asnMAXSINT chargeHvSts;
      /**
       * <BR> 0x0: Undefined, 0x1: Failed, 0x2: Successful, 0x3: Reserved
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_ptReady} to set the presence in the optional field.
       */
      asnMAXSINT ptReady;
      /**
       * <BR> 0x0: PTReady Not Active, 0x1: PTReady Active
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_averPowerConsumption} to set the presence in the optional field.
       */
      asnMAXSINT averPowerConsumption;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_indPowerConsumption} to set the presence in the optional field.
       */
      asnMAXSINT indPowerConsumption;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_dcDcActvd} to set the presence in the optional field.
       */
      asnMAXSINT dcDcActvd;
      /**
       * <BR> 0x0:Not active ,0x1:active ,0x2:error,0x3:undefine
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_dcDcConnectStatus} to set the presence in the optional field.
       */
      asnMAXSINT dcDcConnectStatus;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_wptObjt} to set the presence in the optional field.
       */
      asnMAXSINT wptObjt;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_wptFineAlignt} to set the presence in the optional field.
       */
      asnMAXSINT wptFineAlignt;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_wptActived} to set the presence in the optional field.
       */
      asnMAXSINT wptActived;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_chargeIAct} to set the presence in the optional field.
       */
      asnMAXSINT chargeIAct;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_chargeUAct} to set the presence in the optional field.
       */
      asnMAXSINT chargeUAct;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_chargeSts} to set the presence in the optional field.
       */
      asnMAXSINT chargeSts;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_disChargeConnectStatus} to set the presence in the optional field.
       */
      asnMAXSINT disChargeConnectStatus;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_disChargeIAct} to set the presence in the optional field.
       */
      asnMAXSINT disChargeIAct;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_disChargeUAct} to set the presence in the optional field.
       */
      asnMAXSINT disChargeUAct;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_disChargeSts} to set the presence in the optional field.
       */
      asnMAXSINT disChargeSts;

      /**
       * Default constructor.
       */
      ElectricStatus();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const ElectricStatus&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      ElectricStatus(const ElectricStatus& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      ElectricStatus(const ElectricStatus& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : ElectricStatus
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~ElectricStatus();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[24]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[5];
};


/**
 * The flag to mark the presence of the element level in the optional field.
 */
enum{asn_level = 0};
/**
 * The flag to mark the presence of the element FragItem__code in the optional field.
 */
enum{asn_FragItem__code = 1};
/**
 * Class representing the FragItem type.
 */
class FragItem : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT id;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT activated;
      /**
       * <BR> 0x0 yes,0x1 no
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_level} to set the presence in the optional field.
       */
      asnMAXSINT level;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_FragItem__code} to set the presence in the optional field.
       */
      asnOctetString code;

      /**
       * Default constructor.
       */
      FragItem();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const FragItem&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      FragItem(const FragItem& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      FragItem(const FragItem& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : FragItem
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~FragItem();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[23]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element number in the optional field.
 */
enum{asn_number = 0};
/**
 * The flag to mark the presence of the element FragStrs__items in the optional field.
 */
enum{asn_FragStrs__items = 1};
/**
 * Class representing the FragStrs type.
 */
class FragStrs : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT activated;
      /**
       * <BR> 0x0 yes,0x1 no
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_number} to set the presence in the optional field.
       */
      asnMAXSINT number;
      /**
       * <br>Elements of this SET OF type.
       * <BR>Elements are of class {@link #asncFragStrs__itemss}.
       * <BR>Optional field: use {@link #asn_FragStrs__items} to set the presence in the optional field.
       */
      asnList items; //elements are of class asncFragStrs__itemss

      /**
       * Default constructor.
       */
      FragStrs();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const FragStrs&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      FragStrs(const FragStrs& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      FragStrs(const FragStrs& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : FragStrs
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~FragStrs();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[22]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element collectTime in the optional field.
 */
enum{asn_collectTime = 0};
/**
 * The flag to mark the presence of the element value in the optional field.
 */
enum{asn_value = 1};
/**
 * The flag to mark the presence of the element GenericVehicleSignal__stringVal in the optional field.
 */
enum{asn_GenericVehicleSignal__stringVal = 2};
/**
 * The flag to mark the presence of the element GenericVehicleSignal__boolVal in the optional field.
 */
enum{asn_GenericVehicleSignal__boolVal = 3};
/**
 * The flag to mark the presence of the element GenericVehicleSignal__timestampVal in the optional field.
 */
enum{asn_GenericVehicleSignal__timestampVal = 4};
/**
 * The flag to mark the presence of the element GenericVehicleSignal__dataVal in the optional field.
 */
enum{asn_GenericVehicleSignal__dataVal = 5};
/**
 * Class representing the GenericVehicleSignal type.
 */
class GenericVehicleSignal : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       */
      asnOctetString key;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_collectTime} to set the presence in the optional field.
       */
      TimeStamp * collectTime;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_value} to set the presence in the optional field.
       */
      asnMAXSINT value;
      /**
       * <br>An UTF8String value.
       * <BR>Optional field: use {@link #asn_GenericVehicleSignal__stringVal} to set the presence in the optional field.
       */
      asnOctetString stringVal;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_GenericVehicleSignal__boolVal} to set the presence in the optional field.
       */
      asnBOOL boolVal;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_GenericVehicleSignal__timestampVal} to set the presence in the optional field.
       */
      TimeStamp * timestampVal;
      /**
       * <br>An OCTET STRING value.
       * <BR>Optional field: use {@link #asn_GenericVehicleSignal__dataVal} to set the presence in the optional field.
       */
      asnOctetString dataVal;

      /**
       * Default constructor.
       */
      GenericVehicleSignal();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const GenericVehicleSignal&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      GenericVehicleSignal(const GenericVehicleSignal& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      GenericVehicleSignal(const GenericVehicleSignal& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : GenericVehicleSignal
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~GenericVehicleSignal();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[37]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element winStatusDriver in the optional field.
 */
enum{asn_winStatusDriver = 0};
/**
 * The flag to mark the presence of the element winStatusPassenger in the optional field.
 */
enum{asn_winStatusPassenger = 1};
/**
 * The flag to mark the presence of the element winStatusDriverRear in the optional field.
 */
enum{asn_winStatusDriverRear = 2};
/**
 * The flag to mark the presence of the element winStatusPassengerRear in the optional field.
 */
enum{asn_winStatusPassengerRear = 3};
/**
 * The flag to mark the presence of the element winStatusDriverWarning in the optional field.
 */
enum{asn_winStatusDriverWarning = 4};
/**
 * The flag to mark the presence of the element winStatusPassengerWarning in the optional field.
 */
enum{asn_winStatusPassengerWarning = 5};
/**
 * The flag to mark the presence of the element winStatusDriverRearWarning in the optional field.
 */
enum{asn_winStatusDriverRearWarning = 6};
/**
 * The flag to mark the presence of the element winStatusPassengerRearWarning in the optional field.
 */
enum{asn_winStatusPassengerRearWarning = 7};
/**
 * The flag to mark the presence of the element winPosDriver in the optional field.
 */
enum{asn_winPosDriver = 8};
/**
 * The flag to mark the presence of the element winPosPassenger in the optional field.
 */
enum{asn_winPosPassenger = 9};
/**
 * The flag to mark the presence of the element winPosDriverRear in the optional field.
 */
enum{asn_winPosDriverRear = 10};
/**
 * The flag to mark the presence of the element winPosPassengerRear in the optional field.
 */
enum{asn_winPosPassengerRear = 11};
/**
 * The flag to mark the presence of the element sunroofOpenStatus in the optional field.
 */
enum{asn_sunroofOpenStatus = 12};
/**
 * The flag to mark the presence of the element sunroofPos in the optional field.
 */
enum{asn_sunroofPos = 13};
/**
 * The flag to mark the presence of the element sunroofOpenStatusWarning in the optional field.
 */
enum{asn_sunroofOpenStatusWarning = 14};
/**
 * The flag to mark the presence of the element curtainOpenStatus in the optional field.
 */
enum{asn_curtainOpenStatus = 15};
/**
 * The flag to mark the presence of the element curtainPos in the optional field.
 */
enum{asn_curtainPos = 16};
/**
 * The flag to mark the presence of the element curtainWarning in the optional field.
 */
enum{asn_curtainWarning = 17};
/**
 * The flag to mark the presence of the element tankFlapStatus in the optional field.
 */
enum{asn_tankFlapStatus = 18};
/**
 * The flag to mark the presence of the element chargeLidRearStatus in the optional field.
 */
enum{asn_chargeLidRearStatus = 19};
/**
 * The flag to mark the presence of the element chargeLidFrontStatus in the optional field.
 */
enum{asn_chargeLidFrontStatus = 20};
/**
 * The flag to mark the presence of the element ventilateStatus in the optional field.
 */
enum{asn_ventilateStatus = 21};
/**
 * The flag to mark the presence of the element doorOpenStatusDriver in the optional field.
 */
enum{asn_doorOpenStatusDriver = 22};
/**
 * The flag to mark the presence of the element doorOpenStatusPassenger in the optional field.
 */
enum{asn_doorOpenStatusPassenger = 23};
/**
 * The flag to mark the presence of the element doorOpenStatusDriverRear in the optional field.
 */
enum{asn_doorOpenStatusDriverRear = 24};
/**
 * The flag to mark the presence of the element doorOpenStatusPassengerRear in the optional field.
 */
enum{asn_doorOpenStatusPassengerRear = 25};
/**
 * The flag to mark the presence of the element doorPosDriver in the optional field.
 */
enum{asn_doorPosDriver = 26};
/**
 * The flag to mark the presence of the element doorPosPassenger in the optional field.
 */
enum{asn_doorPosPassenger = 27};
/**
 * The flag to mark the presence of the element doorPosDriverRear in the optional field.
 */
enum{asn_doorPosDriverRear = 28};
/**
 * The flag to mark the presence of the element doorPosPassengerRear in the optional field.
 */
enum{asn_doorPosPassengerRear = 29};
/**
 * The flag to mark the presence of the element doorLockStatusDriver in the optional field.
 */
enum{asn_doorLockStatusDriver = 30};
/**
 * The flag to mark the presence of the element doorLockStatusPassenger in the optional field.
 */
enum{asn_doorLockStatusPassenger = 31};
/**
 * The flag to mark the presence of the element doorLockStatusDriverRear in the optional field.
 */
enum{asn_doorLockStatusDriverRear = 32};
/**
 * The flag to mark the presence of the element doorLockStatusPassengerRear in the optional field.
 */
enum{asn_doorLockStatusPassengerRear = 33};
/**
 * The flag to mark the presence of the element doorGripStatusDriver in the optional field.
 */
enum{asn_doorGripStatusDriver = 34};
/**
 * The flag to mark the presence of the element doorGripStatusPassenger in the optional field.
 */
enum{asn_doorGripStatusPassenger = 35};
/**
 * The flag to mark the presence of the element doorGripStatusDriverRear in the optional field.
 */
enum{asn_doorGripStatusDriverRear = 36};
/**
 * The flag to mark the presence of the element doorGripStatusPassengerRear in the optional field.
 */
enum{asn_doorGripStatusPassengerRear = 37};
/**
 * The flag to mark the presence of the element trunkOpenStatus in the optional field.
 */
enum{asn_trunkOpenStatus = 38};
/**
 * The flag to mark the presence of the element trunkLockStatus in the optional field.
 */
enum{asn_trunkLockStatus = 39};
/**
 * The flag to mark the presence of the element engineHoodOpenStatus in the optional field.
 */
enum{asn_engineHoodOpenStatus = 40};
/**
 * The flag to mark the presence of the element engineHoodLockStatus in the optional field.
 */
enum{asn_engineHoodLockStatus = 41};
/**
 * The flag to mark the presence of the element centralLockingStatus in the optional field.
 */
enum{asn_centralLockingStatus = 42};
/**
 * The flag to mark the presence of the element centralLockingDisStatus in the optional field.
 */
enum{asn_centralLockingDisStatus = 43};
/**
 * The flag to mark the presence of the element privateLockStatus in the optional field.
 */
enum{asn_privateLockStatus = 44};
/**
 * The flag to mark the presence of the element vehicleAlarm in the optional field.
 */
enum{asn_vehicleAlarm = 45};
/**
 * The flag to mark the presence of the element winCloseReminder in the optional field.
 */
enum{asn_winCloseReminder = 46};
/**
 * The flag to mark the presence of the element handBrakeStatus in the optional field.
 */
enum{asn_handBrakeStatus = 47};
/**
 * The flag to mark the presence of the element electricParkBrakeStatus in the optional field.
 */
enum{asn_electricParkBrakeStatus = 48};
/**
 * Class representing the LockStatus type.
 * <BR> only for CMA car
 */
class LockStatus : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <BR> the window status, e.g. open, closed, etc.
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_winStatusDriver} to set the presence in the optional field.
       */
      asnMAXSINT winStatusDriver;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_winStatusPassenger} to set the presence in the optional field.
       */
      asnMAXSINT winStatusPassenger;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_winStatusDriverRear} to set the presence in the optional field.
       */
      asnMAXSINT winStatusDriverRear;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_winStatusPassengerRear} to set the presence in the optional field.
       */
      asnMAXSINT winStatusPassengerRear;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_winStatusDriverWarning} to set the presence in the optional field.
       */
      asnMAXSINT winStatusDriverWarning;
      /**
       * <BR> 0x0: invalid, 0x1: valid
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_winStatusPassengerWarning} to set the presence in the optional field.
       */
      asnMAXSINT winStatusPassengerWarning;
      /**
       * <BR> 0x0: invalid, 0x1: valid
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_winStatusDriverRearWarning} to set the presence in the optional field.
       */
      asnMAXSINT winStatusDriverRearWarning;
      /**
       * <BR> 0x0: invalid, 0x1: valid
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_winStatusPassengerRearWarning} to set the presence in the optional field.
       */
      asnMAXSINT winStatusPassengerRearWarning;
      /**
       * <BR> 0x0: invalid, 0x1: valid
       * <BR> the windows position
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_winPosDriver} to set the presence in the optional field.
       */
      asnMAXSINT winPosDriver;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_winPosPassenger} to set the presence in the optional field.
       */
      asnMAXSINT winPosPassenger;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_winPosDriverRear} to set the presence in the optional field.
       */
      asnMAXSINT winPosDriverRear;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_winPosPassengerRear} to set the presence in the optional field.
       */
      asnMAXSINT winPosPassengerRear;
      /**
       * <BR> the sunroof open status, closed, raised, fullyopend, etc.
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_sunroofOpenStatus} to set the presence in the optional field.
       */
      asnMAXSINT sunroofOpenStatus;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_sunroofPos} to set the presence in the optional field.
       */
      asnMAXSINT sunroofPos;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_sunroofOpenStatusWarning} to set the presence in the optional field.
       */
      asnMAXSINT sunroofOpenStatusWarning;
      /**
       * <BR> 0x0: valid, 0x1: Invalid
       * <BR> the curtain open status
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_curtainOpenStatus} to set the presence in the optional field.
       */
      asnMAXSINT curtainOpenStatus;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_curtainPos} to set the presence in the optional field.
       */
      asnMAXSINT curtainPos;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_curtainWarning} to set the presence in the optional field.
       */
      asnMAXSINT curtainWarning;
      /**
       * <BR> 0x0: valid, 0x1: Invalid
       * <BR> the tankFlag or chargeLid open status, e.g. closed, open, etc.
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_tankFlapStatus} to set the presence in the optional field.
       */
      asnMAXSINT tankFlapStatus;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_chargeLidRearStatus} to set the presence in the optional field.
       */
      asnMAXSINT chargeLidRearStatus;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_chargeLidFrontStatus} to set the presence in the optional field.
       */
      asnMAXSINT chargeLidFrontStatus;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_ventilateStatus} to set the presence in the optional field.
       */
      asnMAXSINT ventilateStatus;
      /**
       * <BR> the door open status, e.g. open, closed,etc.
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_doorOpenStatusDriver} to set the presence in the optional field.
       */
      asnMAXSINT doorOpenStatusDriver;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_doorOpenStatusPassenger} to set the presence in the optional field.
       */
      asnMAXSINT doorOpenStatusPassenger;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_doorOpenStatusDriverRear} to set the presence in the optional field.
       */
      asnMAXSINT doorOpenStatusDriverRear;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_doorOpenStatusPassengerRear} to set the presence in the optional field.
       */
      asnMAXSINT doorOpenStatusPassengerRear;
      /**
       * <BR> the door position
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_doorPosDriver} to set the presence in the optional field.
       */
      asnMAXSINT doorPosDriver;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_doorPosPassenger} to set the presence in the optional field.
       */
      asnMAXSINT doorPosPassenger;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_doorPosDriverRear} to set the presence in the optional field.
       */
      asnMAXSINT doorPosDriverRear;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_doorPosPassengerRear} to set the presence in the optional field.
       */
      asnMAXSINT doorPosPassengerRear;
      /**
       * <BR> the door lock status, e.g. locked,  unlocked, safe locked,etc.
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_doorLockStatusDriver} to set the presence in the optional field.
       */
      asnMAXSINT doorLockStatusDriver;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_doorLockStatusPassenger} to set the presence in the optional field.
       */
      asnMAXSINT doorLockStatusPassenger;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_doorLockStatusDriverRear} to set the presence in the optional field.
       */
      asnMAXSINT doorLockStatusDriverRear;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_doorLockStatusPassengerRear} to set the presence in the optional field.
       */
      asnMAXSINT doorLockStatusPassengerRear;
      /**
       * <BR> the door grip status, e.g. 0:unknow,1:open,2:close
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_doorGripStatusDriver} to set the presence in the optional field.
       */
      asnMAXSINT doorGripStatusDriver;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_doorGripStatusPassenger} to set the presence in the optional field.
       */
      asnMAXSINT doorGripStatusPassenger;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_doorGripStatusDriverRear} to set the presence in the optional field.
       */
      asnMAXSINT doorGripStatusDriverRear;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_doorGripStatusPassengerRear} to set the presence in the optional field.
       */
      asnMAXSINT doorGripStatusPassengerRear;
      /**
       * <BR> the trunk or tailgate open status, e.g. closed, open, locked, unlocked, etc.
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_trunkOpenStatus} to set the presence in the optional field.
       */
      asnMAXSINT trunkOpenStatus;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_trunkLockStatus} to set the presence in the optional field.
       */
      asnMAXSINT trunkLockStatus;
      /**
       * <BR> to indicate whether the engine hood is open or closed
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_engineHoodOpenStatus} to set the presence in the optional field.
       */
      asnMAXSINT engineHoodOpenStatus;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_engineHoodLockStatus} to set the presence in the optional field.
       */
      asnMAXSINT engineHoodLockStatus;
      /**
       * <BR> to indicate central locking status to the user of the vehicle, e.g. open,
       *  closed, locked, safe locked
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_centralLockingStatus} to set the presence in the optional field.
       */
      asnMAXSINT centralLockingStatus;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_centralLockingDisStatus} to set the presence in the optional field.
       */
      asnMAXSINT centralLockingDisStatus;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_privateLockStatus} to set the presence in the optional field.
       */
      asnMAXSINT privateLockStatus;
      /**
       * <BR> vehicle alarm status, e.g. ok, perimeterAlarmOn,
       *  interiorAlarmOn,perimeterAndInteriorAlarmOn,towAwayActive,unauthMovement
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_vehicleAlarm} to set the presence in the optional field.
       */
      asnMAXSINT vehicleAlarm;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_winCloseReminder} to set the presence in the optional field.
       */
      asnMAXSINT winCloseReminder;
      /**
       * <BR> rain close the window to remind
       * <BR> park brake status 
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_handBrakeStatus} to set the presence in the optional field.
       */
      asnMAXSINT handBrakeStatus;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_electricParkBrakeStatus} to set the presence in the optional field.
       */
      asnMAXSINT electricParkBrakeStatus;

      /**
       * Default constructor.
       */
      LockStatus();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const LockStatus&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      LockStatus(const LockStatus& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      LockStatus(const LockStatus& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : LockStatus
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~LockStatus();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[17]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[7];
};


/**
 * The flag to mark the presence of the element mainBatteryStatus in the optional field.
 */
enum{asn_mainBatteryStatus = 0};
/**
 * The flag to mark the presence of the element tyreStatusDriver in the optional field.
 */
enum{asn_tyreStatusDriver = 1};
/**
 * The flag to mark the presence of the element tyreStatusPassenger in the optional field.
 */
enum{asn_tyreStatusPassenger = 2};
/**
 * The flag to mark the presence of the element tyreStatusDriverRear in the optional field.
 */
enum{asn_tyreStatusDriverRear = 3};
/**
 * The flag to mark the presence of the element tyreStatusPassengerRear in the optional field.
 */
enum{asn_tyreStatusPassengerRear = 4};
/**
 * The flag to mark the presence of the element engineHrsToService in the optional field.
 */
enum{asn_engineHrsToService = 5};
/**
 * The flag to mark the presence of the element distanceToService in the optional field.
 */
enum{asn_distanceToService = 6};
/**
 * The flag to mark the presence of the element daysToService in the optional field.
 */
enum{asn_daysToService = 7};
/**
 * The flag to mark the presence of the element serviceWarningStatus in the optional field.
 */
enum{asn_serviceWarningStatus = 8};
/**
 * The flag to mark the presence of the element serviceWarningTrigger in the optional field.
 */
enum{asn_serviceWarningTrigger = 9};
/**
 * The flag to mark the presence of the element engineOilLevelStatus in the optional field.
 */
enum{asn_engineOilLevelStatus = 10};
/**
 * The flag to mark the presence of the element engineOilTemperature in the optional field.
 */
enum{asn_engineOilTemperature = 11};
/**
 * The flag to mark the presence of the element engineOilPressureWarning in the optional field.
 */
enum{asn_engineOilPressureWarning = 12};
/**
 * The flag to mark the presence of the element engineCoolantTemperature in the optional field.
 */
enum{asn_engineCoolantTemperature = 13};
/**
 * The flag to mark the presence of the element engineCoolantLevelStatus in the optional field.
 */
enum{asn_engineCoolantLevelStatus = 14};
/**
 * The flag to mark the presence of the element brakeFluidLevelStatus in the optional field.
 */
enum{asn_brakeFluidLevelStatus = 15};
/**
 * The flag to mark the presence of the element washerFluidLevelStatus in the optional field.
 */
enum{asn_washerFluidLevelStatus = 16};
/**
 * The flag to mark the presence of the element indcrTurnLeWarning in the optional field.
 */
enum{asn_indcrTurnLeWarning = 17};
/**
 * The flag to mark the presence of the element indcrTurnRiWarning in the optional field.
 */
enum{asn_indcrTurnRiWarning = 18};
/**
 * The flag to mark the presence of the element indcrTurnOnPassSideWarning in the optional field.
 */
enum{asn_indcrTurnOnPassSideWarning = 19};
/**
 * The flag to mark the presence of the element indcrTurnOnDrvrSideWarning in the optional field.
 */
enum{asn_indcrTurnOnDrvrSideWarning = 20};
/**
 * The flag to mark the presence of the element indcrTurnLeFrntWarning in the optional field.
 */
enum{asn_indcrTurnLeFrntWarning = 21};
/**
 * The flag to mark the presence of the element fogLiReWarning in the optional field.
 */
enum{asn_fogLiReWarning = 22};
/**
 * The flag to mark the presence of the element bulbStatus in the optional field.
 */
enum{asn_bulbStatus = 23};
/**
 * Class representing the MaintenanceStatus type.
 */
class MaintenanceStatus : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A SEQUENCE value.
       * See {@link BatteryStatus} for more informations.
       * <BR>Optional field: use {@link #asn_mainBatteryStatus} to set the presence in the optional field.
       */
      BatteryStatus * mainBatteryStatus;
      /**
       * <BR> Vehicle battery status
       * <BR> tyre pressure
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_tyreStatusDriver} to set the presence in the optional field.
       */
      asnMAXSINT tyreStatusDriver;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_tyreStatusPassenger} to set the presence in the optional field.
       */
      asnMAXSINT tyreStatusPassenger;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_tyreStatusDriverRear} to set the presence in the optional field.
       */
      asnMAXSINT tyreStatusDriverRear;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_tyreStatusPassengerRear} to set the presence in the optional field.
       */
      asnMAXSINT tyreStatusPassengerRear;
      /**
       * <BR> engine hours to next service
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_engineHrsToService} to set the presence in the optional field.
       */
      asnMAXSINT engineHrsToService;
      /**
       * <BR> distance in KM to next service
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_distanceToService} to set the presence in the optional field.
       */
      asnMAXSINT distanceToService;
      /**
       * <BR> km
       * <BR> days to next service
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_daysToService} to set the presence in the optional field.
       */
      asnMAXSINT daysToService;
      /**
       * <BR> service warning status, e.g. normal(no need for service),
       *  almost-time-for-service, time-for-service, time-exceeded, unknown, etc.
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_serviceWarningStatus} to set the presence in the optional field.
       */
      asnMAXSINT serviceWarningStatus;
      /**
       * <BR> the reason for service, e.g. calendar, distance, engine hours, engine request,
       *  etc.
       * <br>An ENUMERATED value.
       * Use the following enumeration values :
       * <BR>{@link #calendar}
       * <BR>{@link #distance}
       * <BR>{@link #engineHours}
       * <BR>{@link #engineRequest}
       * <BR>{@link #other}
       * <BR>Optional field: use {@link #asn_serviceWarningTrigger} to set the presence in the optional field.
       */
      asnMAXSINT serviceWarningTrigger;
      /**
       * <BR> the engine oil level status, e.g. overfilled, high,  ok, low, veryLow
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_engineOilLevelStatus} to set the presence in the optional field.
       */
      asnMAXSINT engineOilLevelStatus;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_engineOilTemperature} to set the presence in the optional field.
       */
      asnMAXSINT engineOilTemperature;
      /**
       * <BR> the engine oil pressure, e.g. normal, low
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_engineOilPressureWarning} to set the presence in the optional field.
       */
      asnMAXSINT engineOilPressureWarning;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_engineCoolantTemperature} to set the presence in the optional field.
       */
      asnMAXSINT engineCoolantTemperature;
      /**
       * <BR> the engine coolant level status, e.g. normal, low, high, etc.
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_engineCoolantLevelStatus} to set the presence in the optional field.
       */
      asnMAXSINT engineCoolantLevelStatus;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_brakeFluidLevelStatus} to set the presence in the optional field.
       */
      asnMAXSINT brakeFluidLevelStatus;
      /**
       * <BR> the brake fluid level status, e.g. normal, low, high, etc.
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_washerFluidLevelStatus} to set the presence in the optional field.
       */
      asnMAXSINT washerFluidLevelStatus;
      /**
       * <BR> indicate washer fluid level low or not low
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_indcrTurnLeWarning} to set the presence in the optional field.
       */
      asnMAXSINT indcrTurnLeWarning;
      /**
       * <BR> 0x0: valid, 0x1: Invalid  
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_indcrTurnRiWarning} to set the presence in the optional field.
       */
      asnMAXSINT indcrTurnRiWarning;
      /**
       * <BR> 0x0: valid, 0x1: Invalid  
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_indcrTurnOnPassSideWarning} to set the presence in the optional field.
       */
      asnMAXSINT indcrTurnOnPassSideWarning;
      /**
       * <BR> 0x0: valid, 0x1: Invalid 
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_indcrTurnOnDrvrSideWarning} to set the presence in the optional field.
       */
      asnMAXSINT indcrTurnOnDrvrSideWarning;
      /**
       * <BR> 0x0: valid, 0x1: Invalid 
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_indcrTurnLeFrntWarning} to set the presence in the optional field.
       */
      asnMAXSINT indcrTurnLeFrntWarning;
      /**
       * <BR> 0x0: valid, 0x1: Invalid 
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_fogLiReWarning} to set the presence in the optional field.
       */
      asnMAXSINT fogLiReWarning;
      /**
       * <BR> 0x0: valid, 0x1: Invalid 
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_bulbStatus} to set the presence in the optional field.
       */
      asnMAXSINT bulbStatus;

      /**
       * Default constructor.
       */
      MaintenanceStatus();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const MaintenanceStatus&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      MaintenanceStatus(const MaintenanceStatus& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      MaintenanceStatus(const MaintenanceStatus& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : MaintenanceStatus
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~MaintenanceStatus();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[18]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[3];
};


/**
 * The flag to mark the presence of the element simInfo in the optional field.
 */
enum{asn_simInfo = 0};
/**
 * The flag to mark the presence of the element mobileNetwork in the optional field.
 */
enum{asn_mobileNetwork = 1};
/**
 * Class representing the NetworkAccessStatus type.
 */
class NetworkAccessStatus : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A SEQUENCE value.
       * See {@link SIMInfo} for more informations.
       * <BR>Optional field: use {@link #asn_simInfo} to set the presence in the optional field.
       */
      SIMInfo * simInfo;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_mobileNetwork} to set the presence in the optional field.
       */
      asnOctetString mobileNetwork;

      /**
       * Default constructor.
       */
      NetworkAccessStatus();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const NetworkAccessStatus&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      NetworkAccessStatus(const NetworkAccessStatus& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      NetworkAccessStatus(const NetworkAccessStatus& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : NetworkAccessStatus
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~NetworkAccessStatus();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[29]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element vehicleType in the optional field.
 */
enum{asn_vehicleType = 0};
/**
 * The flag to mark the presence of the element OEMMSD__vin in the optional field.
 */
enum{asn_OEMMSD__vin = 1};
/**
 * The flag to mark the presence of the element numberOfPassengers in the optional field.
 */
enum{asn_numberOfPassengers = 2};
/**
 * The flag to mark the presence of the element recentPositions in the optional field.
 */
enum{asn_recentPositions = 3};
/**
 * The flag to mark the presence of the element speed in the optional field.
 */
enum{asn_speed = 4};
/**
 * The flag to mark the presence of the element OEMMSD__speedValidity in the optional field.
 */
enum{asn_OEMMSD__speedValidity = 5};
/**
 * The flag to mark the presence of the element OEMMSD__signals in the optional field.
 */
enum{asn_OEMMSD__signals = 6};
/**
 * Class representing the OEMMSD type.
 * <BR> The OEM MSD for the emergency call
 */
class OEMMSD : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A BOOLEAN value.
       */
      asnBOOL automaticActivation;
      /**
       * <BR> Activation type: true - automatic call, false - manual call
       * <br>A BOOLEAN value.
       */
      asnBOOL testCall;
      /**
       * <BR> Call type: true - test call, false emergency call
       * <br>A SEQUENCE value.
       * See {@link Position} for more informations.
       */
      Position * position;
      /**
       * <br>An INTEGER value.
       * Use the following values :
       * <BR>{@link #passengerVehicle}
       * <BR>{@link #bus}
       * <BR>{@link #cargo}
       * <BR>{@link #motorCycle}
       * <BR>Optional field: use {@link #asn_vehicleType} to set the presence in the optional field.
       */
      asnMAXSINT vehicleType;
      /**
       * <BR> vehicle type, e.g. passenger vehicle, bus, cargo vehicle, motor cycle, etc, in 
       *  CSP this is passenger vehicle as always
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_OEMMSD__vin} to set the presence in the optional field.
       */
      asnOctetString vin;
      /**
       * <br>An INTEGER value.
       * Use the following values :
       * <BR>{@link #petrol}
       * <BR>{@link #diesel}
       * <BR>{@link #petrolHybrid}
       * <BR>{@link #dieselHybrid}
       * <BR>{@link #ev}
       * <BR>{@link #hydrogenFuelcellEV}
       * <BR>{@link #compressedGas}
       * <BR>{@link #liquefiedPropaneGas}
       * <BR>{@link #FuelType__invalid}
       */
      asnMAXSINT fuelType;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT direction;
      /**
       * <BR> 0 means North, clockwise
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_numberOfPassengers} to set the presence in the optional field.
       */
      asnMAXSINT numberOfPassengers;
      /**
       * <br>Elements of this SEQUENCE OF type.
       * <BR>Elements are of class {@link #asncrecentPositionss}.
       * <BR>Optional field: use {@link #asn_recentPositions} to set the presence in the optional field.
       */
      asnList recentPositions; //elements are of class asncrecentPositionss
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_speed} to set the presence in the optional field.
       */
      asnMAXSINT speed;
      /**
       * <BR> kmph
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_OEMMSD__speedValidity} to set the presence in the optional field.
       */
      asnMAXSINT speedValidity;
      /**
       * <BR> 0x0: valid, 0x1: Invalid
       * <br>Elements of this SET OF type.
       * <BR>Elements are of class {@link #asncOEMMSD__signalss}.
       * <BR>Optional field: use {@link #asn_OEMMSD__signals} to set the presence in the optional field.
       */
      asnList signals; //elements are of class asncOEMMSD__signalss

      /**
       * Default constructor.
       */
      OEMMSD();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const OEMMSD&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      OEMMSD(const OEMMSD& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      OEMMSD(const OEMMSD& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : OEMMSD
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~OEMMSD();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[39]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element interiorPM25 in the optional field.
 */
enum{asn_interiorPM25 = 0};
/**
 * The flag to mark the presence of the element exteriorPM25 in the optional field.
 */
enum{asn_exteriorPM25 = 1};
/**
 * The flag to mark the presence of the element interiorPM25Level in the optional field.
 */
enum{asn_interiorPM25Level = 2};
/**
 * The flag to mark the presence of the element exteriorPM25Level in the optional field.
 */
enum{asn_exteriorPM25Level = 3};
/**
 * Class representing the PollutionStatus type.
 * <BR>fragrance status
 */
class PollutionStatus : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <BR> -1 means invalid
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_interiorPM25} to set the presence in the optional field.
       */
      asnMAXSINT interiorPM25;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_exteriorPM25} to set the presence in the optional field.
       */
      asnMAXSINT exteriorPM25;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_interiorPM25Level} to set the presence in the optional field.
       */
      asnMAXSINT interiorPM25Level;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_exteriorPM25Level} to set the presence in the optional field.
       */
      asnMAXSINT exteriorPM25Level;

      /**
       * Default constructor.
       */
      PollutionStatus();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const PollutionStatus&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      PollutionStatus(const PollutionStatus& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      PollutionStatus(const PollutionStatus& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : PollutionStatus
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~PollutionStatus();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[25]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element srsStatus in the optional field.
 */
enum{asn_srsStatus = 0};
/**
 * The flag to mark the presence of the element srsCrashStatus in the optional field.
 */
enum{asn_srsCrashStatus = 1};
/**
 * The flag to mark the presence of the element RunningStatus__odometer in the optional field.
 */
enum{asn_RunningStatus__odometer = 2};
/**
 * The flag to mark the presence of the element fuelLevel in the optional field.
 */
enum{asn_fuelLevel = 3};
/**
 * The flag to mark the presence of the element fuelLevelStatus in the optional field.
 */
enum{asn_fuelLevelStatus = 4};
/**
 * The flag to mark the presence of the element fuelEnLevel in the optional field.
 */
enum{asn_fuelEnLevel = 5};
/**
 * The flag to mark the presence of the element fuelEnCnsFild in the optional field.
 */
enum{asn_fuelEnCnsFild = 6};
/**
 * The flag to mark the presence of the element fuelEnCns in the optional field.
 */
enum{asn_fuelEnCns = 7};
/**
 * The flag to mark the presence of the element fuelLow1WarningDriver in the optional field.
 */
enum{asn_fuelLow1WarningDriver = 8};
/**
 * The flag to mark the presence of the element fuelLow2WarningDriver in the optional field.
 */
enum{asn_fuelLow2WarningDriver = 9};
/**
 * The flag to mark the presence of the element distanceToEmpty in the optional field.
 */
enum{asn_distanceToEmpty = 10};
/**
 * The flag to mark the presence of the element trvlDistance in the optional field.
 */
enum{asn_trvlDistance = 11};
/**
 * The flag to mark the presence of the element aveFuelConsumption in the optional field.
 */
enum{asn_aveFuelConsumption = 12};
/**
 * The flag to mark the presence of the element aveFuelConsumptionInLatestDrivingCycle in the optional field.
 */
enum{asn_aveFuelConsumptionInLatestDrivingCycle = 13};
/**
 * The flag to mark the presence of the element avgSpeed in the optional field.
 */
enum{asn_avgSpeed = 14};
/**
 * The flag to mark the presence of the element avgSpeedLatestDrivingCycle in the optional field.
 */
enum{asn_avgSpeedLatestDrivingCycle = 15};
/**
 * The flag to mark the presence of the element aveFuelConsumptionUnit in the optional field.
 */
enum{asn_aveFuelConsumptionUnit = 16};
/**
 * The flag to mark the presence of the element indFuelConsumption in the optional field.
 */
enum{asn_indFuelConsumption = 17};
/**
 * The flag to mark the presence of the element notifForEmgyCallStatus in the optional field.
 */
enum{asn_notifForEmgyCallStatus = 18};
/**
 * The flag to mark the presence of the element tyrePreWarningDriver in the optional field.
 */
enum{asn_tyrePreWarningDriver = 19};
/**
 * The flag to mark the presence of the element tyrePreWarningPassenger in the optional field.
 */
enum{asn_tyrePreWarningPassenger = 20};
/**
 * The flag to mark the presence of the element tyrePreWarningDriverRear in the optional field.
 */
enum{asn_tyrePreWarningDriverRear = 21};
/**
 * The flag to mark the presence of the element tyrePreWarningPassengerRear in the optional field.
 */
enum{asn_tyrePreWarningPassengerRear = 22};
/**
 * The flag to mark the presence of the element seatBeltStatusDriver in the optional field.
 */
enum{asn_seatBeltStatusDriver = 23};
/**
 * The flag to mark the presence of the element seatBeltStatusPassenger in the optional field.
 */
enum{asn_seatBeltStatusPassenger = 24};
/**
 * The flag to mark the presence of the element seatBeltStatusDriverRear in the optional field.
 */
enum{asn_seatBeltStatusDriverRear = 25};
/**
 * The flag to mark the presence of the element seatBeltStatusPassengerRear in the optional field.
 */
enum{asn_seatBeltStatusPassengerRear = 26};
/**
 * The flag to mark the presence of the element seatBeltStatusDriverMid in the optional field.
 */
enum{asn_seatBeltStatusDriverMid = 27};
/**
 * The flag to mark the presence of the element seatBeltStatusThDriverRear in the optional field.
 */
enum{asn_seatBeltStatusThDriverRear = 28};
/**
 * The flag to mark the presence of the element seatBeltStatusThPassengerRear in the optional field.
 */
enum{asn_seatBeltStatusThPassengerRear = 29};
/**
 * The flag to mark the presence of the element seatBeltStatusThDriverMid in the optional field.
 */
enum{asn_seatBeltStatusThDriverMid = 30};
/**
 * The flag to mark the presence of the element brakePedalDepressed in the optional field.
 */
enum{asn_brakePedalDepressed = 31};
/**
 * The flag to mark the presence of the element gearManualStatus in the optional field.
 */
enum{asn_gearManualStatus = 32};
/**
 * The flag to mark the presence of the element gearAutoStatus in the optional field.
 */
enum{asn_gearAutoStatus = 33};
/**
 * The flag to mark the presence of the element engineSpeed in the optional field.
 */
enum{asn_engineSpeed = 34};
/**
 * The flag to mark the presence of the element transimissionGearPostion in the optional field.
 */
enum{asn_transimissionGearPostion = 35};
/**
 * The flag to mark the presence of the element cruiseControlStatus in the optional field.
 */
enum{asn_cruiseControlStatus = 36};
/**
 * The flag to mark the presence of the element engineBlockedStatus in the optional field.
 */
enum{asn_engineBlockedStatus = 37};
/**
 * The flag to mark the presence of the element tripMeter1 in the optional field.
 */
enum{asn_tripMeter1 = 38};
/**
 * The flag to mark the presence of the element tripMeter2 in the optional field.
 */
enum{asn_tripMeter2 = 39};
/**
 * Class representing the RunningStatus type.
 */
class RunningStatus : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An ENUMERATED value.
       * Use the following enumeration values :
       * <BR>{@link #no_srs_info}
       * <BR>{@link #srs_not_deployed}
       * <BR>{@link #srs_deployed}
       * <BR>Optional field: use {@link #asn_srsStatus} to set the presence in the optional field.
       */
      asnMAXSINT srsStatus;
      /**
       * <BR> SRS(airbag) status, deployed or non-deployed
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_srsCrashStatus} to set the presence in the optional field.
       */
      asnMAXSINT srsCrashStatus;
      /**
       * <BR> CrashStsSafe
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_RunningStatus__odometer} to set the presence in the optional field.
       */
      asnMAXSINT odometer;
      /**
       * <BR> meter, distance in total
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_fuelLevel} to set the presence in the optional field.
       */
      asnMAXSINT fuelLevel;
      /**
       * <BR> fuel level in liters or percentage
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_fuelLevelStatus} to set the presence in the optional field.
       */
      asnMAXSINT fuelLevelStatus;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_fuelEnLevel} to set the presence in the optional field.
       */
      asnMAXSINT fuelEnLevel;
      /**
       * <BR> fuel in enginer level in liters or percentage
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_fuelEnCnsFild} to set the presence in the optional field.
       */
      asnMAXSINT fuelEnCnsFild;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_fuelEnCns} to set the presence in the optional field.
       */
      asnMAXSINT fuelEnCns;
      /**
       * <BR>fuelWarning
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_fuelLow1WarningDriver} to set the presence in the optional field.
       */
      asnMAXSINT fuelLow1WarningDriver;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_fuelLow2WarningDriver} to set the presence in the optional field.
       */
      asnMAXSINT fuelLow2WarningDriver;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_distanceToEmpty} to set the presence in the optional field.
       */
      asnMAXSINT distanceToEmpty;
      /**
       * <BR> km
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_trvlDistance} to set the presence in the optional field.
       */
      asnMAXSINT trvlDistance;
      /**
       * <BR> m
       * <BR>   
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_aveFuelConsumption} to set the presence in the optional field.
       */
      asnMAXSINT aveFuelConsumption;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_aveFuelConsumptionInLatestDrivingCycle} to set the presence in the optional field.
       */
      asnMAXSINT aveFuelConsumptionInLatestDrivingCycle;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_avgSpeed} to set the presence in the optional field.
       */
      asnMAXSINT avgSpeed;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_avgSpeedLatestDrivingCycle} to set the presence in the optional field.
       */
      asnMAXSINT avgSpeedLatestDrivingCycle;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_aveFuelConsumptionUnit} to set the presence in the optional field.
       */
      asnOctetString aveFuelConsumptionUnit;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_indFuelConsumption} to set the presence in the optional field.
       */
      asnMAXSINT indFuelConsumption;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_notifForEmgyCallStatus} to set the presence in the optional field.
       */
      asnMAXSINT notifForEmgyCallStatus;
      /**
       * <BR> tyre pressure warning, e.g. normal, high, low-soft-warning, low-hard-warning,
       *  unknown, etc.
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_tyrePreWarningDriver} to set the presence in the optional field.
       */
      asnMAXSINT tyrePreWarningDriver;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_tyrePreWarningPassenger} to set the presence in the optional field.
       */
      asnMAXSINT tyrePreWarningPassenger;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_tyrePreWarningDriverRear} to set the presence in the optional field.
       */
      asnMAXSINT tyrePreWarningDriverRear;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_tyrePreWarningPassengerRear} to set the presence in the optional field.
       */
      asnMAXSINT tyrePreWarningPassengerRear;
      /**
       * <BR> the seat belt status, whether it's fastened or not
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_seatBeltStatusDriver} to set the presence in the optional field.
       */
      asnBOOL seatBeltStatusDriver;
      /**
       * <BR> ture = fastened
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_seatBeltStatusPassenger} to set the presence in the optional field.
       */
      asnBOOL seatBeltStatusPassenger;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_seatBeltStatusDriverRear} to set the presence in the optional field.
       */
      asnBOOL seatBeltStatusDriverRear;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_seatBeltStatusPassengerRear} to set the presence in the optional field.
       */
      asnBOOL seatBeltStatusPassengerRear;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_seatBeltStatusDriverMid} to set the presence in the optional field.
       */
      asnBOOL seatBeltStatusDriverMid;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_seatBeltStatusThDriverRear} to set the presence in the optional field.
       */
      asnBOOL seatBeltStatusThDriverRear;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_seatBeltStatusThPassengerRear} to set the presence in the optional field.
       */
      asnBOOL seatBeltStatusThPassengerRear;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_seatBeltStatusThDriverMid} to set the presence in the optional field.
       */
      asnBOOL seatBeltStatusThDriverMid;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_brakePedalDepressed} to set the presence in the optional field.
       */
      asnBOOL brakePedalDepressed;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_gearManualStatus} to set the presence in the optional field.
       */
      asnMAXSINT gearManualStatus;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_gearAutoStatus} to set the presence in the optional field.
       */
      asnMAXSINT gearAutoStatus;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_engineSpeed} to set the presence in the optional field.
       */
      asnMAXSINT engineSpeed;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_transimissionGearPostion} to set the presence in the optional field.
       */
      asnMAXSINT transimissionGearPostion;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_cruiseControlStatus} to set the presence in the optional field.
       */
      asnMAXSINT cruiseControlStatus;
      /**
       * <br>An ENUMERATED value.
       * Use the following enumeration values :
       * <BR>{@link #unblocked}
       * <BR>{@link #blocked}
       * <BR>Optional field: use {@link #asn_engineBlockedStatus} to set the presence in the optional field.
       */
      asnMAXSINT engineBlockedStatus;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_tripMeter1} to set the presence in the optional field.
       */
      asnMAXSINT tripMeter1;
      /**
       * <BR> meter
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_tripMeter2} to set the presence in the optional field.
       */
      asnMAXSINT tripMeter2;

      /**
       * Default constructor.
       */
      RunningStatus();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const RunningStatus&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      RunningStatus(const RunningStatus& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      RunningStatus(const RunningStatus& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : RunningStatus
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~RunningStatus();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[20]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[5];
};


/**
 * The flag to mark the presence of the element msisdn in the optional field.
 */
enum{asn_msisdn = 0};
/**
 * The flag to mark the presence of the element imsi in the optional field.
 */
enum{asn_imsi = 1};
/**
 * The flag to mark the presence of the element iccId in the optional field.
 */
enum{asn_iccId = 2};
/**
 * Class representing the SIMInfo type.
 */
class SIMInfo : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_msisdn} to set the presence in the optional field.
       */
      asnOctetString msisdn;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_imsi} to set the presence in the optional field.
       */
      asnOctetString imsi;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_iccId} to set the presence in the optional field.
       */
      asnOctetString iccId;

      /**
       * Default constructor.
       */
      SIMInfo();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const SIMInfo&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      SIMInfo(const SIMInfo& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      SIMInfo(const SIMInfo& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : SIMInfo
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~SIMInfo();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[30]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element TEMStatus__vin in the optional field.
 */
enum{asn_TEMStatus__vin = 0};
/**
 * The flag to mark the presence of the element serviceProvisoned in the optional field.
 */
enum{asn_serviceProvisoned = 1};
/**
 * The flag to mark the presence of the element healthStatus in the optional field.
 */
enum{asn_healthStatus = 2};
/**
 * The flag to mark the presence of the element TEMStatus__diagnostics in the optional field.
 */
enum{asn_TEMStatus__diagnostics = 3};
/**
 * The flag to mark the presence of the element TEMStatus__backupBattery in the optional field.
 */
enum{asn_TEMStatus__backupBattery = 4};
/**
 * The flag to mark the presence of the element sleepCycleNextWakeupTime in the optional field.
 */
enum{asn_sleepCycleNextWakeupTime = 5};
/**
 * The flag to mark the presence of the element serialNumber in the optional field.
 */
enum{asn_serialNumber = 6};
/**
 * The flag to mark the presence of the element completeECUPartNumbers in the optional field.
 */
enum{asn_completeECUPartNumbers = 7};
/**
 * The flag to mark the presence of the element networkAccessStatus in the optional field.
 */
enum{asn_networkAccessStatus = 8};
/**
 * The flag to mark the presence of the element imei in the optional field.
 */
enum{asn_imei = 9};
/**
 * The flag to mark the presence of the element connectivityStatus in the optional field.
 */
enum{asn_connectivityStatus = 10};
/**
 * The flag to mark the presence of the element hwVersion in the optional field.
 */
enum{asn_hwVersion = 11};
/**
 * The flag to mark the presence of the element TEMStatus__swVersion in the optional field.
 */
enum{asn_TEMStatus__swVersion = 12};
/**
 * The flag to mark the presence of the element mpuVersion in the optional field.
 */
enum{asn_mpuVersion = 13};
/**
 * The flag to mark the presence of the element mcuVersion in the optional field.
 */
enum{asn_mcuVersion = 14};
/**
 * Class representing the TEMStatus type.
 */
class TEMStatus : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_TEMStatus__vin} to set the presence in the optional field.
       */
      asnOctetString vin;
      /**
       * <br>An INTEGER value.
       * Use the following values :
       * <BR>{@link #mainBattery}
       * <BR>{@link #PowerSource__backupBattery}
       */
      asnMAXSINT powerSource;
      /**
       * <br>An ENUMERATED value.
       * Use the following enumeration values :
       * <BR>{@link #normal}
       * <BR>{@link #standby}
       * <BR>{@link #sleep_poll}
       * <BR>{@link #off}
       */
      asnMAXSINT powerMode;
      /**
       * <br>A BOOLEAN value.
       * <BR>Optional field: use {@link #asn_serviceProvisoned} to set the presence in the optional field.
       */
      asnBOOL serviceProvisoned;
      /**
       * <BR> refer to the TEM provision, to sync the status between TEM and CSP 
       * <br>An INTEGER value.
       * Use the following values :
       * <BR>{@link #ok}
       * <BR>{@link #faulty}
       * <BR>{@link #HealthStatus__unknown}
       * <BR>{@link #HealthStatus__invalid}
       * <BR>Optional field: use {@link #asn_healthStatus} to set the presence in the optional field.
       */
      asnMAXSINT healthStatus;
      /**
       * <br>A SEQUENCE value.
       * See {@link ECUDiagnostic} for more informations.
       * <BR>Optional field: use {@link #asn_TEMStatus__diagnostics} to set the presence in the optional field.
       */
      ECUDiagnostic * diagnostics;
      /**
       * <BR> for TEM DTC codes
       * <br>A SEQUENCE value.
       * See {@link BatteryStatus} for more informations.
       * <BR>Optional field: use {@link #asn_TEMStatus__backupBattery} to set the presence in the optional field.
       */
      BatteryStatus * backupBattery;
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       * <BR>Optional field: use {@link #asn_sleepCycleNextWakeupTime} to set the presence in the optional field.
       */
      TimeStamp * sleepCycleNextWakeupTime;
      /**
       * <BR> Thursday, 1 January 1970 means no information
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_serialNumber} to set the presence in the optional field.
       */
      asnOctetString serialNumber;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_completeECUPartNumbers} to set the presence in the optional field.
       */
      asnOctetString completeECUPartNumbers;
      /**
       * <br>A SEQUENCE value.
       * See {@link NetworkAccessStatus} for more informations.
       * <BR>Optional field: use {@link #asn_networkAccessStatus} to set the presence in the optional field.
       */
      NetworkAccessStatus * networkAccessStatus;
      /**
       * <BR> the network access information
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_imei} to set the presence in the optional field.
       */
      asnOctetString imei;
      /**
       * <br>A SEQUENCE value.
       * See {@link ConnectivityStatus} for more informations.
       * <BR>Optional field: use {@link #asn_connectivityStatus} to set the presence in the optional field.
       */
      ConnectivityStatus * connectivityStatus;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_hwVersion} to set the presence in the optional field.
       */
      asnOctetString hwVersion;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_TEMStatus__swVersion} to set the presence in the optional field.
       */
      asnOctetString swVersion;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_mpuVersion} to set the presence in the optional field.
       */
      asnOctetString mpuVersion;
      /**
       * <br>A PrintableString value.
       * <BR>Optional field: use {@link #asn_mcuVersion} to set the presence in the optional field.
       */
      asnOctetString mcuVersion;

      /**
       * Default constructor.
       */
      TEMStatus();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const TEMStatus&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      TEMStatus(const TEMStatus& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      TEMStatus(const TEMStatus& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : TEMStatus
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~TEMStatus();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[26]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[2];
};


/**
 * Class representing the TheftNotification type.
 */
class TheftNotification : public asntype
{
   public:
      /**
       * <br>A SEQUENCE value.
       * See {@link TimeStamp} for more informations.
       */
      TimeStamp * time;
      /**
       * <br>An INTEGER value.
       */
      asnMAXSINT activated;

      /**
       * Default constructor.
       */
      TheftNotification();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const TheftNotification&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      TheftNotification(const TheftNotification& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      TheftNotification(const TheftNotification& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : TheftNotification
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~TheftNotification();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[41]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
};


/**
 * The flag to mark the presence of the element trailerLampActiveChk in the optional field.
 */
enum{asn_trailerLampActiveChk = 0};
/**
 * The flag to mark the presence of the element trailerLampCheckSts in the optional field.
 */
enum{asn_trailerLampCheckSts = 1};
/**
 * The flag to mark the presence of the element trailerBreakLampSts in the optional field.
 */
enum{asn_trailerBreakLampSts = 2};
/**
 * The flag to mark the presence of the element trailerFogLampSts in the optional field.
 */
enum{asn_trailerFogLampSts = 3};
/**
 * The flag to mark the presence of the element trailerPosLampSts in the optional field.
 */
enum{asn_trailerPosLampSts = 4};
/**
 * The flag to mark the presence of the element trailerTurningLampSts in the optional field.
 */
enum{asn_trailerTurningLampSts = 5};
/**
 * The flag to mark the presence of the element trailerReversingLampSts in the optional field.
 */
enum{asn_trailerReversingLampSts = 6};
/**
 * Class representing the TowStatus type.
 * <BR> tpye code
 */
class TowStatus : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_trailerLampActiveChk} to set the presence in the optional field.
       */
      asnMAXSINT trailerLampActiveChk;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_trailerLampCheckSts} to set the presence in the optional field.
       */
      asnMAXSINT trailerLampCheckSts;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_trailerBreakLampSts} to set the presence in the optional field.
       */
      asnMAXSINT trailerBreakLampSts;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_trailerFogLampSts} to set the presence in the optional field.
       */
      asnMAXSINT trailerFogLampSts;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_trailerPosLampSts} to set the presence in the optional field.
       */
      asnMAXSINT trailerPosLampSts;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_trailerTurningLampSts} to set the presence in the optional field.
       */
      asnMAXSINT trailerTurningLampSts;
      /**
       * <br>An INTEGER value.
       * <BR>Optional field: use {@link #asn_trailerReversingLampSts} to set the presence in the optional field.
       */
      asnMAXSINT trailerReversingLampSts;

      /**
       * Default constructor.
       */
      TowStatus();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const TowStatus&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      TowStatus(const TowStatus& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      TowStatus(const TowStatus& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : TowStatus
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~TowStatus();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[38]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[1];
};


/**
 * The flag to mark the presence of the element basicVehicleStatus in the optional field.
 */
enum{asn_basicVehicleStatus = 0};
/**
 * The flag to mark the presence of the element lockStatus in the optional field.
 */
enum{asn_lockStatus = 1};
/**
 * The flag to mark the presence of the element maintenanceStatus in the optional field.
 */
enum{asn_maintenanceStatus = 2};
/**
 * The flag to mark the presence of the element runningStatus in the optional field.
 */
enum{asn_runningStatus = 3};
/**
 * The flag to mark the presence of the element climateStatus in the optional field.
 */
enum{asn_climateStatus = 4};
/**
 * The flag to mark the presence of the element electricStatus in the optional field.
 */
enum{asn_electricStatus = 5};
/**
 * The flag to mark the presence of the element pollutionStatus in the optional field.
 */
enum{asn_pollutionStatus = 6};
/**
 * The flag to mark the presence of the element temStatus in the optional field.
 */
enum{asn_temStatus = 7};
/**
 * The flag to mark the presence of the element carConfig in the optional field.
 */
enum{asn_carConfig = 8};
/**
 * The flag to mark the presence of the element additionalStatus in the optional field.
 */
enum{asn_additionalStatus = 9};
/**
 * The flag to mark the presence of the element msd in the optional field.
 */
enum{asn_msd = 10};
/**
 * The flag to mark the presence of the element VehicleStatus__diagnostics in the optional field.
 */
enum{asn_VehicleStatus__diagnostics = 11};
/**
 * The flag to mark the presence of the element theftNotification in the optional field.
 */
enum{asn_theftNotification = 12};
/**
 * The flag to mark the presence of the element notification in the optional field.
 */
enum{asn_notification = 13};
/**
 * Class representing the VehicleStatus type.
 * <BR>  the device status definition for vehicle telematics
 */
class VehicleStatus : public asntype
{
   public:
      /**
       * This field is used to indicate the presence or absence of each optional field of this sequence.
       */
      asnPresenceField optional;
      /**
       * <br>A SEQUENCE value.
       * See {@link BasicVehicleStatus} for more informations.
       * <BR>Optional field: use {@link #asn_basicVehicleStatus} to set the presence in the optional field.
       */
      BasicVehicleStatus * basicVehicleStatus;
      /**
       * <BR> the basic vehicle status
       * <br>A SEQUENCE value.
       * See {@link LockStatus} for more informations.
       * <BR>Optional field: use {@link #asn_lockStatus} to set the presence in the optional field.
       */
      LockStatus * lockStatus;
      /**
       * <BR> the vehicle lock status
       * <br>A SEQUENCE value.
       * See {@link MaintenanceStatus} for more informations.
       * <BR>Optional field: use {@link #asn_maintenanceStatus} to set the presence in the optional field.
       */
      MaintenanceStatus * maintenanceStatus;
      /**
       * <BR> the Vehicle maintenance status
       * <br>A SEQUENCE value.
       * See {@link RunningStatus} for more informations.
       * <BR>Optional field: use {@link #asn_runningStatus} to set the presence in the optional field.
       */
      RunningStatus * runningStatus;
      /**
       * <BR> the Vehicle Running status
       * <br>A SEQUENCE value.
       * See {@link ClimateStatus} for more informations.
       * <BR>Optional field: use {@link #asn_climateStatus} to set the presence in the optional field.
       */
      ClimateStatus * climateStatus;
      /**
       * <BR> the Vehicle climate status
       * <br>A SEQUENCE value.
       * See {@link ElectricStatus} for more informations.
       * <BR>Optional field: use {@link #asn_electricStatus} to set the presence in the optional field.
       */
      ElectricStatus * electricStatus;
      /**
       * <br>A SEQUENCE value.
       * See {@link PollutionStatus} for more informations.
       * <BR>Optional field: use {@link #asn_pollutionStatus} to set the presence in the optional field.
       */
      PollutionStatus * pollutionStatus;
      /**
       * <br>A SEQUENCE value.
       * See {@link TEMStatus} for more informations.
       * <BR>Optional field: use {@link #asn_temStatus} to set the presence in the optional field.
       */
      TEMStatus * temStatus;
      /**
       * <BR> the TEM status
       * <br>A SEQUENCE value.
       * See {@link CarConfig} for more informations.
       * <BR>Optional field: use {@link #asn_carConfig} to set the presence in the optional field.
       */
      CarConfig * carConfig;
      /**
       * <br>A SEQUENCE value.
       * See {@link AdditionalStatus} for more informations.
       * <BR>Optional field: use {@link #asn_additionalStatus} to set the presence in the optional field.
       */
      AdditionalStatus * additionalStatus;
      /**
       * <br>A SEQUENCE value.
       * See {@link OEMMSD} for more informations.
       * <BR>Optional field: use {@link #asn_msd} to set the presence in the optional field.
       */
      OEMMSD * msd;
      /**
       * <BR> Minimal Set of Data
       * <br>Elements of this SET OF type.
       * <BR>Elements are of class {@link #asncECUDiagnosticss}.
       * <BR>Optional field: use {@link #asn_VehicleStatus__diagnostics} to set the presence in the optional field.
       */
      asnList diagnostics;
      /**
       * <BR> Diagnostic Information for ECU
       * <br>A SEQUENCE value.
       * See {@link TheftNotification} for more informations.
       * <BR>Optional field: use {@link #asn_theftNotification} to set the presence in the optional field.
       */
      TheftNotification * theftNotification;
      /**
       * <BR> the theft notification
       * <br>A SEQUENCE value.
       * See {@link Notification} for more informations.
       * <BR>Optional field: use {@link #asn_notification} to set the presence in the optional field.
       */
      Notification * notification;

      /**
       * Default constructor.
       */
      VehicleStatus();
private:
      /**
       * Assignment Operator.
       */
      void operator=(const VehicleStatus&);

#ifndef asnCodCopytor
      /**
       * Copy constructor.
       */
      VehicleStatus(const VehicleStatus& object);
#endif // asnCodCopytor
public:

#ifdef asnCodCopytor
      /**
       * Copy constructor.
       */
      VehicleStatus(const VehicleStatus& object);
#endif // asnCodCopytor

#ifdef asnCodOpCmp
      /**
       *    TypeAssignment : VehicleStatus
       *    Operator ==
       */
      asnBOOL operator== (const asntype& obj) const;
#endif // asnCodOpCmp
#ifndef asnCodBalloc
      /**
       * Destructor.
       */
      ~VehicleStatus();
#endif
   public: // but only for runtime internal use

#ifdef asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       * Copy method.
       */
      void __copy (const asntype& obj);
#endif // asnCodCopytor
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      asnPOCTypeAssignment getTypeAssEntry() {return &(asnZOCTypeAssignment[15]);}
      /**
       * RUNTIME PRIVATE METHOD. ACCESS TO THIS METHOD IS FORBIDDEN TO THE USER.
       */
      static asntype * __create();
      /**
       * RUNTIME PRIVATE FIELD. ACCESS TO THIS FIELD IS FORBIDDEN TO THE USER.
       */
      asnbyte optionalField[2];
};


}
