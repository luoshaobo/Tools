<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="ee73dba8-092d-463c-af29-bd4614b1489e" activeEnvironment="Default" name="VC" resourceRoot="" soapui-version="5.3.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:restMockService id="839483f3-456c-40f8-b69a-a4f704ed2ea8" port="80" path="/" host="localhost" name="CN" docroot="$HOME/test/mockCloud/"><con:settings/><con:properties/><con:restMockAction name="HelloWorld" method="GET" resourcePath="/CN/HelloWorld" id="d8c07fd5-a945-433c-90d9-018b2a8882a9"><con:settings/><con:defaultResponse>Correct</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Correct" id="2998d0f1-b3fa-4c32-8ad3-4a12a8159724" httpResponseStatus="200" mediaType="text/plain"><con:settings/><con:responseContent>Hello World!</con:responseContent><con:header><con:name>Content-Type</con:name><con:value>text/plain</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="WebPage" method="GET" resourcePath="/CN/WebPage" id="0b11f55b-4426-416b-a297-b9cd46fa6538"><con:settings/><con:defaultResponse>Correct</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Correct" id="2cbc68a5-7a7a-400c-9489-1d0a3d2b1773" httpResponseStatus="200" mediaType="text/html"><con:settings/><con:responseContent><![CDATA[<html>
	<head></head>
	<body>
		<br />
		<h1 style="text-align: center">Web 2.0</h1>
		<br />
	</body>
</html>]]></con:responseContent><con:header><con:name>Content-Type</con:name><con:value>text/html</con:value></con:header></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>