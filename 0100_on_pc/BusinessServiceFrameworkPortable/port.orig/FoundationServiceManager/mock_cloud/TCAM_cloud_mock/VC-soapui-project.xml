<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="ee73dba8-092d-463c-af29-bd4614b1489e" activeEnvironment="Default" name="VC" resourceRoot="" soapui-version="5.4.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:restMockService id="839483f3-456c-40f8-b69a-a4f704ed2ea8" port="8089" path="/CN" host="192.168.1.113" name="CN" docroot="$HOME/test/mockCloud/CN"><con:settings/><con:properties/><con:restMockAction name="EntryPoint" method="GET" resourcePath="/EntryPoint" id="e902f6b5-9367-4ce7-905d-72ac080fa5d7"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath/><con:response name="Correct" id="14d769cc-7fa3-4e2e-99ec-b58d1ac24aee" httpResponseStatus="200"><con:settings/><con:responseContent><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<entry_point xmlns="http://schemas.volvocars.biz/conncar/foundation_services/entry_point" xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
  <this>/EntryPoint</this>
  <specification_version>1</specification_version>
  <implementation_version>1</implementation_version>
  <client_uri>http://192.168.1.113:8088/RN/Features</client_uri>
  <host>192.168.1.113</host>
  <port>8088</port>
  <signal_service_uri>192.168.1.113:1883</signal_service_uri>
</entry_point>
]]></con:responseContent><con:header><con:name>Content-Type</con:name><con:value>application/volvo.cloud.EntryPoint+XML</con:value></con:header></con:response></con:restMockAction></con:restMockService><con:restMockService id="1bce1dfb-00cd-494e-a0e0-7c4bba1e7bd9" port="8088" path="/RN" host="192.168.1.113" name="RN" docroot="$HOME/test/mockCloud/RN/doc.json"><con:settings/><con:properties/><con:restMockAction name="Features" method="GET" resourcePath="/Features" id="387edcd4-4d14-4104-ba20-a0794c330390"><con:settings/><con:defaultResponse>Success</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath/><con:response name="Success" id="46c34d81-d284-48cc-9268-f0e5ae47b24b" httpResponseStatus="200"><con:settings/><con:script>String fileName = "feature.xml"
String userDir = System.getProperty("user.dir")
String filePath = userDir + "/../../TCAM_cloud_mock/mock_content/BasicCarControl/" + fileName

File file = new File(filePath)

context.basicCarControl = file.text

filePath = userDir + "/../../TCAM_cloud_mock/mock_content/CarAccess/" + fileName

file = new File(filePath)

context.carAccess = file.text

filePath = userDir + "/../../TCAM_cloud_mock/mock_content/ExpiryNotification/" + fileName

file = new File(filePath)

context.expiryNotification = file.text

filePath = userDir + "/../../TCAM_cloud_mock/mock_content/ExternalDiagnostics/" + fileName

file = new File(filePath)

context.externalDiagnostics = file.text

filePath = userDir + "/../../TCAM_cloud_mock/mock_content/AssistanceCall/" + fileName

file = new File(filePath)

context.assistanceCall = file.text
</con:script><con:responseContent><![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<features xmlns="http://schemas.volvocars.biz/conncar/foundation_services/features" xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
  <this>/Features/</this>
  ${basicCarControl}
  ${carAccess}
  ${expiryNotification}
  ${externalDiagnostics}
  ${assistanceCall}
  <feature>
    <name>fsapitester</name>
    <enabled>true</enabled>
    <visible>false</visible>
    <uri>/fsapitester-1</uri>
    <description>For testing purposes only</description>
  </feature>
  <feature>
    <name>WikiLocations</name>
    <enabled>true</enabled>
    <visible>true</visible>
    <uri>/wikipedia-1</uri>
    <tags>
      <tag>ExternalNavi</tag>
      <tag>navigation</tag>
    </tags>
  </feature>
  <feature>
    <name>Places</name>
    <enabled>true</enabled>
    <visible>false</visible>
    <uri>/places-1</uri>
  </feature>
  <feature>
    <name>Pandora</name>
    <enabled>true</enabled>
    <visible>true</visible>
    <uri>/pandora-1</uri>
    <tags>
      <tag>radio</tag>
    </tags>
  </feature>
  <feature>
    <name>Documents</name>
    <enabled>true</enabled>
    <visible>false</visible>
    <uri>/documents-1</uri>
    <icon>/img/icon.png</icon>
    <description>Description of Documents</description>
  </feature>
</features>]]></con:responseContent><con:header><con:name>Content-Encoding</con:name><con:value>gzip</con:value></con:header><con:header><con:name>Content-Type</con:name><con:value>application/volvo.cloud.Features+XML</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="basic_car_control-1" method="GET" resourcePath="/basic_car_control-1" id="cb604b04-8c2e-400b-80c1-7d66849b91ce"><con:settings/><con:defaultResponse>SUCCESS</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="SUCCESS" id="62f3598a-a1f1-4477-ac61-45f331f014d0" httpResponseStatus="200" mediaType="application/volvo.cloud.BasicCarControl+CCM+ASN.1"><con:settings/><con:script>String fileName = "bcc_func_002_signal.bin"
String userDir = System.getProperty("user.dir")
String filePath = userDir + "/../../TCAM_cloud_mock/mock_content/BasicCarControl/" + fileName

File file = new File(filePath)

try {
	headers = mockRequest.requestHeaders
	headers.remove("Accept-Encoding")
	mockRequest.httpResponse.getOutputStream().write(file.bytes)
} catch (Exception e) {log.info e.getMessage()}</con:script><con:responseContent/></con:response></con:restMockAction><con:restMockAction name="caraccess-1" method="GET" resourcePath="/caraccess-1" id="16b6073e-d4ff-4f9f-8710-e2a190e6a160"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="SUCCESS" id="6cda8b29-bd9f-4855-aec7-6d8b566f4864" httpResponseStatus="200" mediaType="application/volvo.cloud.CarAccess+CCM+ASN.1"><con:settings/><con:script>String fileName = "ca_func_002_signal_all_topics.bin"
String userDir = System.getProperty("user.dir")
String filePath = userDir + "/../../TCAM_cloud_mock/mock_content/CarAccess/" + fileName

File file = new File(filePath)

try {
	headers = mockRequest.requestHeaders
	headers.remove("Accept-Encoding")
	mockRequest.httpResponse.getOutputStream().write(file.bytes)
} catch (Exception e) {log.info e.getMessage()}</con:script><con:responseContent/></con:response></con:restMockAction><con:restMockAction name="externaldiagnostics-1" method="GET" resourcePath="/externaldiagnostics-1" id="99b83647-e809-4544-885f-fcf1c3cb985d"><con:settings/><con:defaultResponse>SUCCESS</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="SUCCESS" id="9d9e85ab-82ae-4314-a99b-46a80af32f1b" httpResponseStatus="200" mediaType="volvo.cloud.ExternalDiagnostics+XML"><con:settings/><con:script>String fileName = "external_diagnostics.xml"
String userDir = System.getProperty("user.dir")
String filePath = userDir + "/../../TCAM_cloud_mock/mock_content/ExternalDiagnostics/" + fileName

File file = new File(filePath)

try {
	headers = mockRequest.requestHeaders
	headers.remove("Accept-Encoding")
	mockRequest.httpResponse.getOutputStream().write(file.bytes)
} catch (Exception e) {log.info e.getMessage()}</con:script><con:responseContent/></con:response></con:restMockAction><con:restMockAction name="externaldiagnostics-1/remotesession" method="GET" resourcePath="/externaldiagnostics-1/remotesession" id="556b4787-1bfe-450f-8040-382c9ccf7f52"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath/><con:response name="SUCCESS" id="6430959c-70c1-4ca5-a8c4-316e8e576457" httpResponseStatus="200" mediaType="volvo.cloud.RemoteSession+XML"><con:settings/><con:script>String fileName = "remote_session.xml"
String userDir = System.getProperty("user.dir")
String filePath = userDir + "/../../TCAM_cloud_mock/mock_content/ExternalDiagnostics/" + fileName

File file = new File(filePath)

try {
	headers = mockRequest.requestHeaders
	headers.remove("Accept-Encoding")
	mockRequest.httpResponse.getOutputStream().write(file.bytes)
} catch (Exception e) {log.info e.getMessage()}</con:script><con:responseContent/></con:response></con:restMockAction><con:restMockAction name="externaldiagnostics-1/clientcapabilities" method="GET" resourcePath="/externaldiagnostics-1/clientcapabilities" id="d08a3871-4549-46fa-97de-109fd5725b62"><con:settings/><con:defaultResponse>SUCCESS</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath/><con:response name="SUCCESS" id="e71d942f-1abc-4417-8006-bbb5237fc842" httpResponseStatus="200" mediaType="application/volvo.cloud.ClientCapabilities+XML"><con:settings/><con:script>String fileName = "client_capabilities.xml"
String userDir = System.getProperty("user.dir")
String filePath = userDir + "/../../TCAM_cloud_mock/mock_content/ExternalDiagnostics/" + fileName

File file = new File(filePath)

try {
	headers = mockRequest.requestHeaders
	headers.remove("Accept-Encoding")
	mockRequest.httpResponse.getOutputStream().write(file.bytes)
} catch (Exception e) {log.info e.getMessage()}</con:script><con:responseContent/></con:response></con:restMockAction><con:restMockAction name="assistancecall-1" method="GET" resourcePath="/assistancecall-1" id="1644bb71-5985-4fbc-97f7-462765966e0d"><con:settings/><con:defaultResponse>SUCCESS</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="SUCCESS" id="dd2d282f-39c6-4d9d-8e36-4dce43103ef6" httpResponseStatus="200" mediaType="application/volvo.cloud.AssistanceCall+CCM+ASN.1"><con:settings/><con:script>String fileName = "assistance_call.bin"
String userDir = System.getProperty("user.dir")
String filePath = userDir + "/../../TCAM_cloud_mock/mock_content/AssistanceCall/" + fileName

File file = new File(filePath)

try {
	headers = mockRequest.requestHeaders
	headers.remove("Accept-Encoding")
	mockRequest.httpResponse.getOutputStream().write(file.bytes)
} catch (Exception e) {log.info e.getMessage()}</con:script><con:responseContent/></con:response></con:restMockAction><con:restMockAction name="assistancecall-1/callcentersettings" method="GET" resourcePath="/assistancecall-1/callcentersettings" id="52ac452b-076c-437a-a3d9-a00191740bd3"><con:settings/><con:defaultResponse>SUCCESS</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="SUCCESS" id="d06eb0ad-6992-43b9-a9c9-1e482586564a" httpResponseStatus="200" mediaType="application/AssistanceCall.CallCenterSettings+CCM+ASN.1"><con:settings/><con:script>String fileName = "call_center_settings.bin"
String userDir = System.getProperty("user.dir")
String filePath = userDir + "/../../TCAM_cloud_mock/mock_content/AssistanceCall/" + fileName

File file = new File(filePath)

try {
	headers = mockRequest.requestHeaders
	headers.remove("Accept-Encoding")
	mockRequest.httpResponse.getOutputStream().write(file.bytes)
} catch (Exception e) {log.info e.getMessage()}</con:script><con:responseContent/></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>