////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2018 Continental Automotive GmbH
// Unless required by applicable law or agreed to in writing, // software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  @file thread.h
//  This file handles the communication with the VuC, using the OTP VCS-interface
 
// @project     GLY_TCAM
// @subsystem   VolvoOnCall
// @author      Jiaojiao Shen
// @Init date   12-Sep-2018
////////////////////////////////////////////////////////////////////////////

#include <rms/sys/thread.h>

using namespace std;
///////////////////////////////////////////////////////////////////////////////
//! \fn Thread::_run(Thread* obj)
//! \brief private function for runs thread
//! \param[in] obj A pointer to boost thread for execution
//! \return void
///////////////////////////////////////////////////////////////////////////////
void Thread::_run(Thread* obj) {
	obj->onStart();
	obj->run();
	obj->onStop();
}

///////////////////////////////////////////////////////////////////////////////
//! \fn Thread::Thread()
//! \brief constructor
//! \return void
////////////////////////////////////////////////////////////////////////////////
Thread::Thread() : mProccessing(false)
{
}

///////////////////////////////////////////////////////////////////////////////
//! \fn Thread::~Thread()
//! \brief destructor
//! \return void
////////////////////////////////////////////////////////////////////////////////
Thread::~Thread() {
}

///////////////////////////////////////////////////////////////////////////////
//! \fn Thread::onStart()
//! \brief Function will be called when thread has started. Executed in tread context
//! \return void
///////////////////////////////////////////////////////////////////////////////
void Thread::onStart() {
}

///////////////////////////////////////////////////////////////////////////////
//! \fn Thread::onStop()
//! \brief Function will be called when thread has stopped. Executed in tread context
//! \return void
///////////////////////////////////////////////////////////////////////////////
void Thread::onStop() {
}

///////////////////////////////////////////////////////////////////////////////
//! \fn Thread::vstop()
//! \brief Function will be called when thread has stopped. Executed in caller context
//! \return void
///////////////////////////////////////////////////////////////////////////////
void Thread::vstop() {
// do nothing
}

///////////////////////////////////////////////////////////////////////////////
//! \fn Thread::vstart()
//! \brief Function will be called when thread has started. Executed in caller context
//! \return void
///////////////////////////////////////////////////////////////////////////////
void Thread::vstart() {
// do nothing
}

///////////////////////////////////////////////////////////////////////////////
//! \fn Thread::stop()
//! \brief Stop thread
//! \return void
///////////////////////////////////////////////////////////////////////////////
void Thread::stop() {
    if (mProccessing) {
        mProccessing = false;
        vstop();
    }
}

///////////////////////////////////////////////////////////////////////////////
//! \fn Thread::start()
//! \brief Start thread
//! \return void
///////////////////////////////////////////////////////////////////////////////
void Thread::start()
{
    if (!mProccessing) {
        mProccessing = true;
        mThread.reset(new boost::thread(Thread::_run, this));
        mThread->detach();
        vstart();
    }
}

///////////////////////////////////////////////////////////////////////////////
//! \fn Thread::isRunning()const
//! \brief Check if thread running
//! \return true if running
///////////////////////////////////////////////////////////////////////////////
inline bool Thread::isRunning()const
{
    return mProccessing;
}
