/*
Copyright (C) 1999-2011 Marben Products. All rights reserved.

THIS FILE IS PROPRIETARY MATERIAL OF MARBEN PRODUCTS.
AND MAY BE USED ONLY BY DIRECT LICENSEES OF ASNSDK PRODUCT.
THIS FILE MAY NOT BE DISTRIBUTED.

===========================================================================

asnctor.cc: C++ API constructor methods

Generated by ASNSDK TCE-C++ ASN.1 Compiler v6.0 - REF_8.55 - REF_8.41

===========================================================================
*/

/**@file
 * C++ API constructor methods
 */

#include <asn.h>
asntype * RequestBody::__create() {return asnCppNew RequestBody();}
asntype * asncserviceParameterss::__create() {return asnCppNew asncserviceParameterss();}
asntype * asncattributess::__create() {return asnCppNew asncattributess();}
asntype * asncpoiss::__create() {return asnCppNew asncpoiss();}
asntype * asncConfigurationItem__parameterss::__create() {return asnCppNew asncConfigurationItem__parameterss();}
asntype * asncitemss::__create() {return asnCppNew asncitemss();}
asntype * asncAdditionalVehicleStatus__signalss::__create() {return asnCppNew asncAdditionalVehicleStatus__signalss();}
asntype * asncrecentPositionss::__create() {return asnCppNew asncrecentPositionss();}
asntype * asncOEMMSD__signalss::__create() {return asnCppNew asncOEMMSD__signalss();}
asntype * asncdtcss::__create() {return asnCppNew asncdtcss();}
asntype * asncNotification__parameterss::__create() {return asnCppNew asncNotification__parameterss();}
asntype * asnctrackpointss::__create() {return asnCppNew asnctrackpointss();}
asntype * asncwaypointss::__create() {return asnCppNew asncwaypointss();}
asntype * asnctripFragmentss::__create() {return asnCppNew asnctripFragmentss();}
asntype * asnctrackPointss::__create() {return asnCppNew asnctrackPointss();}
asntype * asncdidDatas::__create() {return asnCppNew asncdidDatas();}
asntype * asncdtcDatas::__create() {return asnCppNew asncdtcDatas();}
asntype * asncdatas::__create() {return asnCppNew asncdatas();}
asntype * asncconditionss::__create() {return asnCppNew asncconditionss();}
asntype * RequestHeader::__create() {return asnCppNew RequestHeader();}
asntype * TimeStamp::__create() {return asnCppNew TimeStamp();}
asntype * VDServiceRequest::__create() {return asnCppNew VDServiceRequest();}
asntype * DIDData::__create() {return asnCppNew DIDData();}
asntype * DTCData::__create() {return asnCppNew DTCData();}
asntype * ECUData::__create() {return asnCppNew ECUData();}
asntype * EcuData__C::__create() {return asnCppNew EcuData__C(asnExtAlternative);}
asntype * asncnoDiagData::__create() {return asnCppNew asncnoDiagData();}
asntype * asncEcuData__data::__create() {return asnCppNew asncEcuData__data();}
asntype * EcuData::__create() {return asnCppNew EcuData();}
asntype * NEVCoordinatesLongLat::__create() {return asnCppNew NEVCoordinatesLongLat();}
asntype * NEVDRPositionData::__create() {return asnCppNew NEVDRPositionData();}
asntype * NEVDRVehiclePosition__C::__create() {return asnCppNew NEVDRVehiclePosition__C(asnExtAlternative);}
asntype * asncnoValidData::__create() {return asnCppNew asncnoValidData();}
asntype * asncdrPosition::__create() {return asnCppNew asncdrPosition();}
asntype * NEVDRVehiclePosition::__create() {return asnCppNew NEVDRVehiclePosition();}
asntype * NEVDateTime::__create() {return asnCppNew NEVDateTime();}
asntype * NEVServiceData::__create() {return asnCppNew NEVServiceData();}
asntype * Configuration::__create() {return asnCppNew Configuration();}
asntype * ConfigurationItem::__create() {return asnCppNew ConfigurationItem();}
asntype * ContactInfo::__create() {return asnCppNew ContactInfo();}
asntype * Error::__create() {return asnCppNew Error();}
asntype * EventAction::__create() {return asnCppNew EventAction();}
asntype * EventRule::__create() {return asnCppNew EventRule();}
asntype * GeneralMessage__C::__create() {return asnCppNew GeneralMessage__C(asnExtAlternative);}
asntype * asncGeneralMessage__message::__create() {return asnCppNew asncGeneralMessage__message();}
asntype * asncocetMessage::__create() {return asnCppNew asncocetMessage();}
asntype * GeneralMessage::__create() {return asnCppNew GeneralMessage();}
asntype * Notification::__create() {return asnCppNew Notification();}
asntype * OTA::__create() {return asnCppNew OTA();}
asntype * PointOfInterest::__create() {return asnCppNew PointOfInterest();}
asntype * Position::__create() {return asnCppNew Position();}
asntype * PostAddress::__create() {return asnCppNew PostAddress();}
asntype * RuleCondition::__create() {return asnCppNew RuleCondition();}
asntype * ServiceData::__create() {return asnCppNew ServiceData();}
asntype * ServiceParameter::__create() {return asnCppNew ServiceParameter();}
asntype * ServiceResult::__create() {return asnCppNew ServiceResult();}
asntype * ServiceStatus::__create() {return asnCppNew ServiceStatus();}
asntype * ServiceTrigger::__create() {return asnCppNew ServiceTrigger();}
asntype * TrackPoint::__create() {return asnCppNew TrackPoint();}
asntype * Trip::__create() {return asnCppNew Trip();}
asntype * TripFragment::__create() {return asnCppNew TripFragment();}
asntype * AdditionalVehicleStatus::__create() {return asnCppNew AdditionalVehicleStatus();}
asntype * BasicVehicleStatus::__create() {return asnCppNew BasicVehicleStatus();}
asntype * BatteryStatus::__create() {return asnCppNew BatteryStatus();}
asntype * CarConfig::__create() {return asnCppNew CarConfig();}
asntype * ClimateStatus::__create() {return asnCppNew ClimateStatus();}
asntype * ConfigurationAndIdentity::__create() {return asnCppNew ConfigurationAndIdentity();}
asntype * DiagnosticTroubleCode::__create() {return asnCppNew DiagnosticTroubleCode();}
asntype * DrivingBehaviourStatus::__create() {return asnCppNew DrivingBehaviourStatus();}
asntype * DrivingSafetyStatus::__create() {return asnCppNew DrivingSafetyStatus();}
asntype * ECUDiagnostic::__create() {return asnCppNew ECUDiagnostic();}
asntype * asncECUDiagnosticss::__create() {return asnCppNew asncECUDiagnosticss();}
asntype * ECUDiagnostics::__create() {return asnCppNew ECUDiagnostics();}
asntype * asncEcuWarningMessagess::__create() {return asnCppNew asncEcuWarningMessagess();}
asntype * EcuWarningMessages::__create() {return asnCppNew EcuWarningMessages();}
asntype * ElectricVehicleStatus::__create() {return asnCppNew ElectricVehicleStatus();}
asntype * GenericVehicleSignal::__create() {return asnCppNew GenericVehicleSignal();}
asntype * MaintenanceStatus::__create() {return asnCppNew MaintenanceStatus();}
asntype * NetworkAccessStatus::__create() {return asnCppNew NetworkAccessStatus();}
asntype * OEMMSD::__create() {return asnCppNew OEMMSD();}
asntype * PollutionStatus::__create() {return asnCppNew PollutionStatus();}
asntype * RunningStatus::__create() {return asnCppNew RunningStatus();}
asntype * SIMInfo::__create() {return asnCppNew SIMInfo();}
asntype * TEMStatus::__create() {return asnCppNew TEMStatus();}
asntype * TheftNotification::__create() {return asnCppNew TheftNotification();}
asntype * VehicleStatus::__create() {return asnCppNew VehicleStatus();}
/**
 *    TypeAssignment : RequestBody
 *    Class constructor
 */
RequestBody::RequestBody()
   :optional(3,&optionalField[0])
   ,serviceId()
   ,serviceData()
   ,seq()
{
}

/**
 *    TypeAssignment : RequestHeader
 *    Class constructor
 */
RequestHeader::RequestHeader()
   :optional(5,&optionalField[0])
   ,requestid()
   ,timeStamp()
   ,eventId()
   ,creatorId()
   ,messageTTL()
   ,requestType()
   ,ackRequired()
{
}

/**
 *    TypeAssignment : TimeStamp
 *    Class constructor
 */
TimeStamp::TimeStamp()
   :optional(1,&optionalField[0])
   ,seconds()
   ,milliseconds()
{
}

/**
 *    TypeAssignment : VDServiceRequest
 *    Class constructor
 */
VDServiceRequest::VDServiceRequest()
   :optional(1,&optionalField[0])
   ,header()
   ,body()
{
}

/**
 *    TypeAssignment : DIDData
 *    Class constructor
 */
DIDData::DIDData()
   :id()
   ,data()
{
}

/**
 *    TypeAssignment : DTCData
 *    Class constructor
 */
DTCData::DTCData()
   :id()
   ,data()
{
}

/**
 *    TypeAssignment : ECUData
 *    Class constructor
 */
asncdidDatas::asncdidDatas()
   :id()
   ,data()
{
}

asncdtcDatas::asncdtcDatas()
   :id()
   ,data()
{
}

ECUData::ECUData()
   :ecu()
   ,diagnosticNumber()
   ,didData()
   ,dtcData()
{
}

/**
 *    TypeAssignment : EcuData
 *    Class constructor
 */
EcuData__C::EcuData__C(asnMAXUINT asnpAlt)
   : asnChoice(asnpAlt)
{
}

asncnoDiagData::asncnoDiagData()
   : EcuData__C(asn_noDiagData)
   , noDiagData()
{
}

asncdatas::asncdatas()
   :ecu()
   ,diagnosticNumber()
   ,didData()
   ,dtcData()
{
}

asncEcuData__data::asncEcuData__data()
   : EcuData__C(asn_EcuData__data)
   , data()
{
}

EcuData::EcuData():value()
{
}

/**
 *    TypeAssignment : NEVCoordinatesLongLat
 *    Class constructor
 */
NEVCoordinatesLongLat::NEVCoordinatesLongLat()
   :longitude()
   ,latitude()
{
}

/**
 *    TypeAssignment : NEVDRPositionData
 *    Class constructor
 */
NEVDRPositionData::NEVDRPositionData()
   :longLat()
   ,heading()
   ,speedKmph()
   ,hdopX10()
   ,numSat()
   ,fixTime()
   ,fixType()
   ,drType()
   ,drDistance()
{
}

/**
 *    TypeAssignment : NEVDRVehiclePosition
 *    Class constructor
 */
NEVDRVehiclePosition__C::NEVDRVehiclePosition__C(asnMAXUINT asnpAlt)
   : asnChoice(asnpAlt)
{
}

asncnoValidData::asncnoValidData()
   : NEVDRVehiclePosition__C(asn_noValidData)
   , noValidData()
{
}

asncdrPosition::asncdrPosition()
   : NEVDRVehiclePosition__C(asn_drPosition)
   ,longLat()
   ,heading()
   ,speedKmph()
   ,hdopX10()
   ,numSat()
   ,fixTime()
   ,fixType()
   ,drType()
   ,drDistance()
{
}

NEVDRVehiclePosition::NEVDRVehiclePosition():value()
{
}

/**
 *    TypeAssignment : NEVDateTime
 *    Class constructor
 */
NEVDateTime::NEVDateTime()
   :year()
   ,month()
   ,day()
   ,hour()
   ,minute()
   ,second()
{
}

/**
 *    TypeAssignment : NEVServiceData
 *    Class constructor
 */
NEVServiceData::NEVServiceData()
   :vehicleVin()
   ,testVehicle()
   ,rvdcTriggerCondition()
   ,mdpID()
   ,maID()
   ,position()
   ,ecuData()
{
}

/**
 *    TypeAssignment : Configuration
 *    Class constructor
 */
asncitemss::asncitemss()
   :name()
   ,parameters()
{
}

Configuration::Configuration()
   :version()
   ,items()
{
}

/**
 *    TypeAssignment : ConfigurationItem
 *    Class constructor
 */
asncConfigurationItem__parameterss::asncConfigurationItem__parameterss()
   :optional(5,&optionalField[0])
   ,key()
   ,intVal()
   ,stringVal()
   ,boolVal()
   ,timestampVal()
   ,dataVal()
{
}

ConfigurationItem::ConfigurationItem()
   :name()
   ,parameters()
{
}

/**
 *    TypeAssignment : ContactInfo
 *    Class constructor
 */
ContactInfo::ContactInfo()
   :optional(4,&optionalField[0])
   ,email()
   ,address()
   ,phone1()
   ,phone2()
{
}

/**
 *    TypeAssignment : Error
 *    Class constructor
 */
Error::Error()
   :optional(2,&optionalField[0])
   ,code()
   ,vehicleErrorCode()
   ,message()
{
}

/**
 *    TypeAssignment : EventAction
 *    Class constructor
 */
EventAction::EventAction()
   :optional(2,&optionalField[0])
   ,triggerTimes()
   ,notifyInterval()
{
}

/**
 *    TypeAssignment : EventRule
 *    Class constructor
 */
asncconditionss::asncconditionss()
   :condition()
{
}

EventRule::EventRule()
   :optional(5,&optionalField[0])
   ,ruleId()
   ,startTime()
   ,endTime()
   ,conditions()
   ,interval()
   ,action()
{
}

/**
 *    TypeAssignment : GeneralMessage
 *    Class constructor
 */
GeneralMessage__C::GeneralMessage__C(asnMAXUINT asnpAlt)
   : asnChoice(asnpAlt)
{
}

asncGeneralMessage__message::asncGeneralMessage__message()
   : GeneralMessage__C(asn_GeneralMessage__message)
   , message()
{
}

asncocetMessage::asncocetMessage()
   : GeneralMessage__C(asn_ocetMessage)
   , ocetMessage()
{
}

GeneralMessage::GeneralMessage():value()
{
}

/**
 *    TypeAssignment : Notification
 *    Class constructor
 */
asncNotification__parameterss::asncNotification__parameterss()
   :optional(5,&optionalField[0])
   ,key()
   ,intVal()
   ,stringVal()
   ,boolVal()
   ,timestampVal()
   ,dataVal()
{
}

Notification::Notification()
   :optional(1,&optionalField[0])
   ,reason()
   ,time()
   ,parameters()
{
}

/**
 *    TypeAssignment : OTA
 *    Class constructor
 */
OTA::OTA()
   :optional(3,&optionalField[0])
   ,swModel()
   ,swVersion()
   ,downloadUrl()
   ,verificationCode()
{
}

/**
 *    TypeAssignment : PointOfInterest
 *    Class constructor
 */
asncattributess::asncattributess()
   :optional(5,&optionalField[0])
   ,key()
   ,intVal()
   ,stringVal()
   ,boolVal()
   ,timestampVal()
   ,dataVal()
{
}

PointOfInterest::PointOfInterest()
   :optional(5,&optionalField[0])
   ,name()
   ,position()
   ,type()
   ,contactInfo()
   ,url()
   ,attributes()
{
}

/**
 *    TypeAssignment : Position
 *    Class constructor
 */
Position::Position()
   :optional(6,&optionalField[0])
   ,latitude()
   ,longitude()
   ,altitude()
   ,posCanBeTrusted()
   ,carLocatorStatUploadEn()
   ,marsCoordinates()
{
}

/**
 *    TypeAssignment : PostAddress
 *    Class constructor
 */
PostAddress::PostAddress()
   :optional(6,&optionalField[0])
   ,street()
   ,houseNumber()
   ,city()
   ,region()
   ,postcode()
   ,country()
{
}

/**
 *    TypeAssignment : RuleCondition
 *    Class constructor
 */
RuleCondition::RuleCondition()
   :condition()
{
}

/**
 *    TypeAssignment : ServiceData
 *    Class constructor
 */
asncserviceParameterss::asncserviceParameterss()
   :optional(5,&optionalField[0])
   ,key()
   ,intVal()
   ,stringVal()
   ,boolVal()
   ,timestampVal()
   ,dataVal()
{
}

asncpoiss::asncpoiss()
   :optional(5,&optionalField[0])
   ,name()
   ,position()
   ,type()
   ,contactInfo()
   ,url()
   ,attributes()
{
}

asnctripFragmentss::asnctripFragmentss()
   :optional(11,&optionalField[0])
   ,startTime()
   ,startPosition()
   ,startOdometer()
   ,startFuelLevel()
   ,startElectricConsumption()
   ,startElectricRegeneration()
   ,endTime()
   ,endPosition()
   ,endOdometer()
   ,endFuelLevel()
   ,endElectricConsumption()
   ,endElectricRegeneration()
{
}

asnctrackPointss::asnctrackPointss()
   :optional(7,&optionalField[0])
   ,systemTime()
   ,position()
   ,speed()
   ,direction()
   ,isSVT()
   ,odometer()
   ,travelDistanceSinceLastWaypoint()
   ,fuelConsumptionSinceLastWaypoint()
   ,electricConsumptionSinceLastSample()
   ,electricRegenerationSinceLastSample()
{
}

ServiceData::ServiceData()
   :optional(15,&optionalField[0])
   ,serviceTrigger()
   ,serviceParameters()
   ,serviceCommand()
   ,serviceResult()
   ,serviceStatus()
   ,message()
   ,pois()
   ,configuration()
   ,vehicleStatus()
   ,ota()
   ,trip()
   ,tripFragments()
   ,trackPoints()
   ,nevServiceData()
   ,eventRule()
{
}

/**
 *    TypeAssignment : ServiceParameter
 *    Class constructor
 */
ServiceParameter::ServiceParameter()
   :optional(5,&optionalField[0])
   ,key()
   ,intVal()
   ,stringVal()
   ,boolVal()
   ,timestampVal()
   ,dataVal()
{
}

/**
 *    TypeAssignment : ServiceResult
 *    Class constructor
 */
ServiceResult::ServiceResult()
   :optional(1,&optionalField[0])
   ,operationSucceeded()
   ,error()
{
}

/**
 *    TypeAssignment : ServiceStatus
 *    Class constructor
 */
ServiceStatus::ServiceStatus()
   :remoteControlInhibited()
{
}

/**
 *    TypeAssignment : ServiceTrigger
 *    Class constructor
 */
ServiceTrigger::ServiceTrigger()
   :optional(6,&optionalField[0])
   ,scheduledTime()
   ,recurrentOperation()
   ,duration()
   ,interval()
   ,occurs()
   ,endTime()
{
}

/**
 *    TypeAssignment : TrackPoint
 *    Class constructor
 */
TrackPoint::TrackPoint()
   :optional(7,&optionalField[0])
   ,systemTime()
   ,position()
   ,speed()
   ,direction()
   ,isSVT()
   ,odometer()
   ,travelDistanceSinceLastWaypoint()
   ,fuelConsumptionSinceLastWaypoint()
   ,electricConsumptionSinceLastSample()
   ,electricRegenerationSinceLastSample()
{
}

/**
 *    TypeAssignment : Trip
 *    Class constructor
 */
asnctrackpointss::asnctrackpointss()
   :optional(7,&optionalField[0])
   ,systemTime()
   ,position()
   ,speed()
   ,direction()
   ,isSVT()
   ,odometer()
   ,travelDistanceSinceLastWaypoint()
   ,fuelConsumptionSinceLastWaypoint()
   ,electricConsumptionSinceLastSample()
   ,electricRegenerationSinceLastSample()
{
}

asncwaypointss::asncwaypointss()
   :optional(6,&optionalField[0])
   ,latitude()
   ,longitude()
   ,altitude()
   ,posCanBeTrusted()
   ,carLocatorStatUploadEn()
   ,marsCoordinates()
{
}

Trip::Trip()
   :optional(6,&optionalField[0])
   ,tripId()
   ,startTime()
   ,startOdometer()
   ,fuelConsumption()
   ,traveledDistance()
   ,trackpoints()
   ,waypoints()
   ,avgSpeed()
   ,endTime()
   ,endOdometer()
   ,electricConsumption()
   ,electricRegeneration()
{
}

/**
 *    TypeAssignment : TripFragment
 *    Class constructor
 */
TripFragment::TripFragment()
   :optional(11,&optionalField[0])
   ,startTime()
   ,startPosition()
   ,startOdometer()
   ,startFuelLevel()
   ,startElectricConsumption()
   ,startElectricRegeneration()
   ,endTime()
   ,endPosition()
   ,endOdometer()
   ,endFuelLevel()
   ,endElectricConsumption()
   ,endElectricRegeneration()
{
}

/**
 *    TypeAssignment : AdditionalVehicleStatus
 *    Class constructor
 */
asncAdditionalVehicleStatus__signalss::asncAdditionalVehicleStatus__signalss()
   :optional(6,&optionalField[0])
   ,key()
   ,collectTime()
   ,value()
   ,stringVal()
   ,boolVal()
   ,timestampVal()
   ,dataVal()
{
}

AdditionalVehicleStatus::AdditionalVehicleStatus()
   :optional(12,&optionalField[0])
   ,confAndId()
   ,drivingSafetyStatus()
   ,maintenanceStatus()
   ,runningStatus()
   ,climateStatus()
   ,drivingBehaviourStatus()
   ,pollutionStatus()
   ,ecuWarningMessages()
   ,electricVehicleStatus()
   ,carConfig()
   ,signals()
   ,data()
{
}

/**
 *    TypeAssignment : BasicVehicleStatus
 *    Class constructor
 */
BasicVehicleStatus::BasicVehicleStatus()
   :optional(7,&optionalField[0])
   ,position()
   ,speed()
   ,speedValidity()
   ,direction()
   ,engineStatus()
   ,keyStatus()
   ,engineBlockedStatus()
   ,distanceToEmpty()
   ,usageMode()
{
}

/**
 *    TypeAssignment : BatteryStatus
 *    Class constructor
 */
BatteryStatus::BatteryStatus()
   :optional(4,&optionalField[0])
   ,stateOfCharge()
   ,chargeLevel()
   ,stateOfHealth()
   ,voltage()
{
}

/**
 *    TypeAssignment : CarConfig
 *    Class constructor
 */
CarConfig::CarConfig()
   :optional(3,&optionalField[0])
   ,heatedFrontSeats()
   ,parkingClimateLevel()
   ,heatedSteeringWheel()
{
}

/**
 *    TypeAssignment : ClimateStatus
 *    Class constructor
 */
ClimateStatus::ClimateStatus()
   :optional(29,&optionalField[0])
   ,winStatusDriver()
   ,winStatusDriverValidity()
   ,winStatusPassenger()
   ,winStatusPassengerValidity()
   ,winStatusDriverRear()
   ,winStatusDriverRearValidity()
   ,winStatusPassengerRear()
   ,winStatusPassengerRearValidity()
   ,sunroofOpenStatus()
   ,sunroofOpenStatusValidity()
   ,ventilateStatus()
   ,winPosDriver()
   ,winPosPassenger()
   ,winPosDriverRear()
   ,winPosPassengerRear()
   ,interiorTemp()
   ,exteriorTemp()
   ,exteriorTempValidity()
   ,preClimateActive()
   ,airCleanSts()
   ,winCloseReminder()
   ,drvHeatSts()
   ,passHeatingSts()
   ,rlHeatingSts()
   ,rrHeatingSts()
   ,drvVentSts()
   ,passVentSts()
   ,rrVentSts()
   ,rlVentSts()
{
}

/**
 *    TypeAssignment : ConfigurationAndIdentity
 *    Class constructor
 */
ConfigurationAndIdentity::ConfigurationAndIdentity()
   :optional(2,&optionalField[0])
   ,vin()
   ,fuelType()
{
}

/**
 *    TypeAssignment : DiagnosticTroubleCode
 *    Class constructor
 */
DiagnosticTroubleCode::DiagnosticTroubleCode()
   :optional(6,&optionalField[0])
   ,dtc()
   ,status()
   ,failureCount()
   ,lastFail()
   ,firtFail()
   ,firstFailureOdometer()
   ,firstFailureBatteryVoltage()
   ,firstFailureVehicleSpeed()
{
}

/**
 *    TypeAssignment : DrivingBehaviourStatus
 *    Class constructor
 */
DrivingBehaviourStatus::DrivingBehaviourStatus()
   :optional(6,&optionalField[0])
   ,brakePedalDepressed()
   ,brakePedalDepressedValidity()
   ,engineSpeed()
   ,engineSpeedValidity()
   ,transimissionGearPostion()
   ,cruiseControlStatus()
{
}

/**
 *    TypeAssignment : DrivingSafetyStatus
 *    Class constructor
 */
DrivingSafetyStatus::DrivingSafetyStatus()
   :optional(21,&optionalField[0])
   ,srsStatus()
   ,vehicleAlarm()
   ,doorOpenStatusDriver()
   ,doorOpenStatusPassenger()
   ,doorOpenStatusDriverRear()
   ,doorOpenStatusPassengerRear()
   ,doorLockStatusDriver()
   ,doorLockStatusPassenger()
   ,doorLockStatusDriverRear()
   ,doorLockStatusPassengerRear()
   ,trunkOpenStatus()
   ,trunkLockStatus()
   ,engineHoodOpenStatus()
   ,centralLockingStatus()
   ,seatBeltStatusDriver()
   ,seatBeltStatusPassenger()
   ,seatBeltStatusDriverRear()
   ,seatBeltStatusPassengerRear()
   ,handBrakeStatus()
   ,electricParkBrakeStatus()
   ,electricParkBrakeStatusValidity()
{
}

/**
 *    TypeAssignment : ECUDiagnostic
 *    Class constructor
 */
asncdtcss::asncdtcss()
   :optional(6,&optionalField[0])
   ,dtc()
   ,status()
   ,failureCount()
   ,lastFail()
   ,firtFail()
   ,firstFailureOdometer()
   ,firstFailureBatteryVoltage()
   ,firstFailureVehicleSpeed()
{
}

ECUDiagnostic::ECUDiagnostic()
   :optional(2,&optionalField[0])
   ,ecuID()
   ,diagnosticResult()
   ,dtcs()
   ,exceptionCode()
{
}

/**
 *    TypeAssignment : ECUDiagnostics
 *    Class constructor
 */
asncECUDiagnosticss::asncECUDiagnosticss()
   :optional(2,&optionalField[0])
   ,ecuID()
   ,diagnosticResult()
   ,dtcs()
   ,exceptionCode()
{
}

ECUDiagnostics::ECUDiagnostics(): value()
{
}

/**
 *    TypeAssignment : EcuWarningMessages
 *    Class constructor
 */
asncEcuWarningMessagess::asncEcuWarningMessagess()
   :optional(6,&optionalField[0])
   ,key()
   ,collectTime()
   ,value()
   ,stringVal()
   ,boolVal()
   ,timestampVal()
   ,dataVal()
{
}

EcuWarningMessages::EcuWarningMessages(): value()
{
}

/**
 *    TypeAssignment : ElectricVehicleStatus
 *    Class constructor
 */
ElectricVehicleStatus::ElectricVehicleStatus()
   :optional(15,&optionalField[0])
   ,isCharging()
   ,isPluggedIn()
   ,stateOfCharge()
   ,chargeLevel()
   ,timeToFullyCharged()
   ,statusOfChargerConnection()
   ,chargerState()
   ,distanceToEmptyOnBatteryOnly()
   ,ems48VSOC()
   ,emsHVRBSError()
   ,emsRBSModeDisplay()
   ,emsOVPActive()
   ,ems48vPackTemp1()
   ,ems48vPackTemp2()
   ,emsBMSLBuildSwVersion()
   ,emsCBRemainingLife()
   ,chargeHvSts()
   ,ptReady()
   ,averPowerConsumption()
   ,chargeSts()
{
}

/**
 *    TypeAssignment : GenericVehicleSignal
 *    Class constructor
 */
GenericVehicleSignal::GenericVehicleSignal()
   :optional(6,&optionalField[0])
   ,key()
   ,collectTime()
   ,value()
   ,stringVal()
   ,boolVal()
   ,timestampVal()
   ,dataVal()
{
}

/**
 *    TypeAssignment : MaintenanceStatus
 *    Class constructor
 */
MaintenanceStatus::MaintenanceStatus()
   :optional(17,&optionalField[0])
   ,mainBatteryStatus()
   ,tyreStatusDriver()
   ,tyreStatusPassenger()
   ,tyreStatusDriverRear()
   ,tyreStatusPassengerRear()
   ,tyrePreWarningDriver()
   ,tyrePreWarningPassenger()
   ,tyrePreWarningDriverRear()
   ,tyrePreWarningPassengerRear()
   ,engineHrsToService()
   ,distanceToService()
   ,daysToService()
   ,serviceWarningStatus()
   ,serviceWarningTrigger()
   ,odometer()
   ,brakeFluidLevelStatus()
   ,washerFluidLevelStatus()
{
}

/**
 *    TypeAssignment : NetworkAccessStatus
 *    Class constructor
 */
NetworkAccessStatus::NetworkAccessStatus()
   :optional(2,&optionalField[0])
   ,simInfo()
   ,mobileNetwork()
{
}

/**
 *    TypeAssignment : OEMMSD
 *    Class constructor
 */
asncrecentPositionss::asncrecentPositionss()
   :optional(6,&optionalField[0])
   ,latitude()
   ,longitude()
   ,altitude()
   ,posCanBeTrusted()
   ,carLocatorStatUploadEn()
   ,marsCoordinates()
{
}

asncOEMMSD__signalss::asncOEMMSD__signalss()
   :optional(6,&optionalField[0])
   ,key()
   ,collectTime()
   ,value()
   ,stringVal()
   ,boolVal()
   ,timestampVal()
   ,dataVal()
{
}

OEMMSD::OEMMSD()
   :optional(7,&optionalField[0])
   ,automaticActivation()
   ,testCall()
   ,position()
   ,vehicleType()
   ,vin()
   ,fuelType()
   ,direction()
   ,numberOfPassengers()
   ,recentPositions()
   ,speed()
   ,speedValidity()
   ,signals()
{
}

/**
 *    TypeAssignment : PollutionStatus
 *    Class constructor
 */
PollutionStatus::PollutionStatus()
   :optional(2,&optionalField[0])
   ,interiorPM25()
   ,exteriorPM25()
{
}

/**
 *    TypeAssignment : RunningStatus
 *    Class constructor
 */
RunningStatus::RunningStatus()
   :optional(14,&optionalField[0])
   ,engineOilLevelStatus()
   ,engineOilTemperature()
   ,engineOilPressureWarning()
   ,engineCoolantTemperature()
   ,engineCoolantTemperatureValidity()
   ,engineCoolantLevelStatus()
   ,fuelLevel()
   ,fuelLevelStatus()
   ,aveFuelConsumption()
   ,aveFuelConsumptionInLatestDrivingCycle()
   ,avgSpeed()
   ,tripMeter1()
   ,tripMeter2()
   ,bulbStatus()
{
}

/**
 *    TypeAssignment : SIMInfo
 *    Class constructor
 */
SIMInfo::SIMInfo()
   :optional(3,&optionalField[0])
   ,msisdn()
   ,imsi()
   ,iccId()
{
}

/**
 *    TypeAssignment : TEMStatus
 *    Class constructor
 */
TEMStatus::TEMStatus()
   :optional(14,&optionalField[0])
   ,vin()
   ,powerSource()
   ,backupBattery()
   ,powerMode()
   ,sleepCycleNextWakeupTime()
   ,serviceProvisoned()
   ,healthStatus()
   ,diagnostics()
   ,networkAccessStatus()
   ,serialNumber()
   ,completeECUPartNumbers()
   ,imei()
   ,hwVersion()
   ,swVersion()
   ,mpuVersion()
   ,mcuVersion()
{
}

/**
 *    TypeAssignment : TheftNotification
 *    Class constructor
 */
TheftNotification::TheftNotification()
   :time()
   ,activated()
{
}

/**
 *    TypeAssignment : VehicleStatus
 *    Class constructor
 */
VehicleStatus::VehicleStatus()
   :optional(7,&optionalField[0])
   ,basicVehicleStatus()
   ,additionalVehicleStatus()
   ,msd()
   ,temStatus()
   ,diagnostics()
   ,theftNotification()
   ,notification()
{
}


