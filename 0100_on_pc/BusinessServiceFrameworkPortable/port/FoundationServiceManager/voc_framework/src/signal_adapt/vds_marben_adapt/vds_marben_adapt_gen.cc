///////////////////////////////////////////////////////////////////
// Copyright (C) 2018 Continental Automotive GmbH
// Unless required by applicable law or agreed to in writing, // software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//	@file vds_marben_adapt_gen.h
//     Generated from VDS 1.3.12 and MarbenCode

// @project		GLY_TCAM
// @subsystem	FSM
// @author		Lin Haixia
// @Init date	22-Feb-2019
///////////////////////////////////////////////////////////////////

#include "dlt/dlt.h"
#include <string>
#include <vector>
#include <memory>
#include "vds_data_gen.h"
#include "vds_marben_adapt_gen.h"
#include "vds_marben_adapt_base.h"

DLT_IMPORT_CONTEXT(dlt_libfsm);


bool VdsMarbenAdaptGen::VDServiceRequest_Encode(const VDServiceRequest_Model &pData, asn_wrapper::VDServiceRequest* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::VDServiceRequest* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::VDServiceRequest*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (marbenData->header == nullptr )
    {
        marbenData->header = new asn_wrapper::RequestHeader();
    }
    RequestHeader_Encode(pData.header, marbenData->header);
    if (pData.body_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_body);
        if (marbenData->body == nullptr )
        {
            marbenData->body = new asn_wrapper::RequestBody();
        }
        RequestBody_Encode(pData.body, marbenData->body);
    }

    return true;
}

bool VdsMarbenAdaptGen::VDServiceRequest_Decode(const std::string &path, std::shared_ptr<VDServiceRequest_Model> &pData, asn_wrapper::VDServiceRequest* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::VDServiceRequest* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::VDServiceRequest*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (marbenData->header != nullptr )
    {
        std::shared_ptr<RequestHeader_Model> p_header = std::make_shared<RequestHeader_Model>();
        result = RequestHeader_Decode( "" , p_header , marbenData->header);
        if (result)
        {
            pData->header = (*p_header);
        }
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_body))
    {
        pData->body_presence = true;
        if (marbenData->body != nullptr )
        {
            std::shared_ptr<RequestBody_Model> p_body = std::make_shared<RequestBody_Model>();
            result = RequestBody_Decode( "" , p_body , marbenData->body);
            if (result)
            {
                pData->body = (*p_body);
            }
        }

    }

    return true;
}

bool VdsMarbenAdaptGen::RequestHeader_Encode(const RequestHeader_Model &pData, asn_wrapper::RequestHeader* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::RequestHeader* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::RequestHeader*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("requestid", (int64_t)pData.requestid, (int64_t)0, (int64_t)255))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.requestid = %d.", __FUNCTION__, pData.requestid);
        marbenData->requestid = pData.requestid;
    }
    if (marbenData->timeStamp == nullptr )
    {
        marbenData->timeStamp = new asn_wrapper::TimeStamp();
    }
    TimeStamp_Encode(pData.timeStamp, marbenData->timeStamp);
    if (pData.eventId_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_eventId);
        if (marbenData->eventId == nullptr )
        {
            marbenData->eventId = new asn_wrapper::TimeStamp();
        }
        TimeStamp_Encode(pData.eventId, marbenData->eventId);
    }
    if (pData.creatorId_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_creatorId);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.creatorId = %d.", __FUNCTION__, pData.creatorId);
        marbenData->creatorId = (int32_t)pData.creatorId;
    }
    if (pData.messageTTL_presence)
    {
        if (verifyScope("messageTTL", (int64_t)pData.messageTTL, (int64_t)0, (int64_t)86400))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_messageTTL);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.messageTTL = %d.", __FUNCTION__, pData.messageTTL);
            marbenData->messageTTL = pData.messageTTL;
        }
    }
    if (pData.requestType_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_requestType);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.requestType = %d.", __FUNCTION__, pData.requestType);
        marbenData->requestType = (int32_t)pData.requestType;
    }
    if (pData.ackRequired_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_ackRequired);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.ackRequired = %d.", __FUNCTION__, pData.ackRequired);
        marbenData->ackRequired = pData.ackRequired;
    }

    return true;
}

bool VdsMarbenAdaptGen::RequestHeader_Decode(const std::string &path, std::shared_ptr<RequestHeader_Model> &pData, asn_wrapper::RequestHeader* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::RequestHeader* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::RequestHeader*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->requestid = marbenData->requestid;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->requestid = %d.", __FUNCTION__, pData->requestid);
    if (marbenData->timeStamp != nullptr )
    {
        std::shared_ptr<TimeStamp_Model> p_timeStamp = std::make_shared<TimeStamp_Model>();
        result = TimeStamp_Decode( "" , p_timeStamp , marbenData->timeStamp);
        if (result)
        {
            pData->timeStamp = (*p_timeStamp);
        }
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_eventId))
    {
        pData->eventId_presence = true;
        if (marbenData->eventId != nullptr )
        {
            std::shared_ptr<TimeStamp_Model> p_eventId = std::make_shared<TimeStamp_Model>();
            result = TimeStamp_Decode( "" , p_eventId , marbenData->eventId);
            if (result)
            {
                pData->eventId = (*p_eventId);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_creatorId))
    {
        pData->creatorId_presence = true;
        pData->creatorId = (Vds_CreatorId)marbenData->creatorId;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->creatorId = %d.", __FUNCTION__, pData->creatorId);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_messageTTL))
    {
        pData->messageTTL_presence = true;
        pData->messageTTL = marbenData->messageTTL;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->messageTTL = %d.", __FUNCTION__, pData->messageTTL);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_requestType))
    {
        pData->requestType_presence = true;
        pData->requestType = (Vds_RequestType)marbenData->requestType;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->requestType = %d.", __FUNCTION__, pData->requestType);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_ackRequired))
    {
        pData->ackRequired_presence = true;
        pData->ackRequired = marbenData->ackRequired;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->ackRequired = %d.", __FUNCTION__, pData->ackRequired);
    }

    return true;
}

bool VdsMarbenAdaptGen::TimeStamp_Encode(const TimeStamp_Model &pData, asn_wrapper::TimeStamp* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::TimeStamp* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::TimeStamp*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("seconds", (int64_t)pData.seconds, (int64_t)0, (int64_t)2147483647))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.seconds = %d.", __FUNCTION__, pData.seconds);
        marbenData->seconds = pData.seconds;
    }
    if (pData.milliseconds_presence)
    {
        if (verifyScope("milliseconds", (int64_t)pData.milliseconds, (int64_t)0, (int64_t)999))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_milliseconds);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.milliseconds = %d.", __FUNCTION__, pData.milliseconds);
            marbenData->milliseconds = pData.milliseconds;
        }
    }

    return true;
}

bool VdsMarbenAdaptGen::TimeStamp_Decode(const std::string &path, std::shared_ptr<TimeStamp_Model> &pData, asn_wrapper::TimeStamp* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::TimeStamp* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::TimeStamp*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->seconds = marbenData->seconds;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->seconds = %d.", __FUNCTION__, pData->seconds);
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_milliseconds))
    {
        pData->milliseconds_presence = true;
        pData->milliseconds = marbenData->milliseconds;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->milliseconds = %d.", __FUNCTION__, pData->milliseconds);
    }

    return true;
}

bool VdsMarbenAdaptGen::RequestBody_Encode(const RequestBody_Model &pData, asn_wrapper::RequestBody* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::RequestBody* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::RequestBody*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (pData.serviceId_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_serviceId);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.serviceId = %d.", __FUNCTION__, pData.serviceId);
        marbenData->serviceId = (int32_t)pData.serviceId;
    }
    if (pData.serviceData_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_serviceData);
        if (marbenData->serviceData == nullptr )
        {
            marbenData->serviceData = new asn_wrapper::ServiceData();
        }
        ServiceData_Encode(pData.serviceData, marbenData->serviceData);
    }
    if (pData.seq_presence)
    {
        if (verifyScope("seq", (int64_t)pData.seq, (int64_t)0, (int64_t)255))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_seq);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.seq = %d.", __FUNCTION__, pData.seq);
            marbenData->seq = pData.seq;
        }
    }

    return true;
}

bool VdsMarbenAdaptGen::RequestBody_Decode(const std::string &path, std::shared_ptr<RequestBody_Model> &pData, asn_wrapper::RequestBody* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::RequestBody* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::RequestBody*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_serviceId))
    {
        pData->serviceId_presence = true;
        pData->serviceId = (Vds_ServiceId)marbenData->serviceId;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->serviceId = %d.", __FUNCTION__, pData->serviceId);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_serviceData))
    {
        pData->serviceData_presence = true;
        if (marbenData->serviceData != nullptr )
        {
            std::shared_ptr<ServiceData_Model> p_serviceData = std::make_shared<ServiceData_Model>();
            result = ServiceData_Decode( "" , p_serviceData , marbenData->serviceData);
            if (result)
            {
                pData->serviceData = (*p_serviceData);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_seq))
    {
        pData->seq_presence = true;
        pData->seq = marbenData->seq;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->seq = %d.", __FUNCTION__, pData->seq);
    }

    return true;
}

bool VdsMarbenAdaptGen::RVDC_Encode(const RVDC_Model &pData, asn_wrapper::RVDC* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::RVDC* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::RVDC*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.appId = %d.", __FUNCTION__, pData.appId);
    marbenData->appId = (int32_t)pData.appId;
    if (verifyPrintableString("maOrderId", pData.maOrderId))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.maOrderId = %s.", __FUNCTION__, pData.maOrderId.c_str());
        marbenData->maOrderId.copyOctetString(pData.maOrderId.length(), (asnbyte*)(unsigned char*)(pData.maOrderId.c_str()));
    }
    if (verifyScope("timestamp", (int64_t)pData.timestamp.size(), (int64_t)1, (int64_t)32))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.timestamp = %s.", __FUNCTION__, pData.timestamp.c_str());
        marbenData->timestamp.copyOctetString(pData.timestamp.length(), (asnbyte*)(unsigned char*)(pData.timestamp.c_str()));
    }
    if (verifyScope("vin", (int64_t)pData.vin.size(), (int64_t)1, (int64_t)128))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.vin = %s.", __FUNCTION__, pData.vin.c_str());
        marbenData->vin.copyOctetString(pData.vin.length(), (asnbyte*)(unsigned char*)(pData.vin.c_str()));
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.maBusinessType = %d.", __FUNCTION__, pData.maBusinessType);
    marbenData->maBusinessType = (int32_t)pData.maBusinessType;
    if (pData.rvdcSetting_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_RVDC__rvdcSetting);
        if (marbenData->rvdcSetting == nullptr )
        {
            marbenData->rvdcSetting = new asn_wrapper::RvdcSetting();
        }
        RvdcSetting_Encode(pData.rvdcSetting, marbenData->rvdcSetting);
    }
    if (pData.assignmentNotification_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_RVDC__assignmentNotification);
        if (marbenData->assignmentNotification == nullptr )
        {
            marbenData->assignmentNotification = new asn_wrapper::RvdcAssignmentNotification();
        }
        RvdcAssignmentNotification_Encode(pData.assignmentNotification, marbenData->assignmentNotification);
    }
    if (pData.maSynchronizationReq_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_RVDC__maSynchronizationReq);
        if (marbenData->maSynchronizationReq == nullptr )
        {
            marbenData->maSynchronizationReq = new asn_wrapper::MaSynchronizationReq();
        }
        MaSynchronizationReq_Encode(pData.maSynchronizationReq, marbenData->maSynchronizationReq);
    }
    if (pData.maSynchronization_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_RVDC__maSynchronization);
        if (marbenData->maSynchronization == nullptr )
        {
            marbenData->maSynchronization = new asn_wrapper::MaSynchronization();
        }
        MaSynchronization_Encode(pData.maSynchronization, marbenData->maSynchronization);
    }
    if (pData.exceptionHandling_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_RVDC__exceptionHandling);
        if (marbenData->exceptionHandling == nullptr )
        {
            marbenData->exceptionHandling = new asn_wrapper::RvdcExceptionHandling();
        }
        RvdcExceptionHandling_Encode(pData.exceptionHandling, marbenData->exceptionHandling);
    }
    if (pData.measurementDataPackage_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_RVDC__measurementDataPackage);
        if (marbenData->measurementDataPackage == nullptr )
        {
            marbenData->measurementDataPackage = new asn_wrapper::MeasurementDataPackage();
        }
        MeasurementDataPackage_Encode(pData.measurementDataPackage, marbenData->measurementDataPackage);
    }

    return true;
}

bool VdsMarbenAdaptGen::RVDC_Decode(const std::string &path, std::shared_ptr<RVDC_Model> &pData, asn_wrapper::RVDC* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::RVDC* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::RVDC*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->appId = (Vds_AppId)marbenData->appId;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->appId = %d.", __FUNCTION__, pData->appId);
    pData->maOrderId = std::string((const char*)marbenData->maOrderId.value, marbenData->maOrderId.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->maOrderId = %s.", __FUNCTION__, pData->maOrderId.c_str());
    pData->timestamp = std::string((const char*)marbenData->timestamp.value, marbenData->timestamp.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->timestamp = %s.", __FUNCTION__, pData->timestamp.c_str());
    pData->vin = std::string((const char*)marbenData->vin.value, marbenData->vin.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->vin = %s.", __FUNCTION__, pData->vin.c_str());
    pData->maBusinessType = (Vds_MaBusinessType)marbenData->maBusinessType;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->maBusinessType = %d.", __FUNCTION__, pData->maBusinessType);
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_RVDC__rvdcSetting))
    {
        pData->rvdcSetting_presence = true;
        if (marbenData->rvdcSetting != nullptr )
        {
            std::shared_ptr<RvdcSetting_Model> p_rvdcSetting = std::make_shared<RvdcSetting_Model>();
            result = RvdcSetting_Decode( "" , p_rvdcSetting , marbenData->rvdcSetting);
            if (result)
            {
                pData->rvdcSetting = (*p_rvdcSetting);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_RVDC__assignmentNotification))
    {
        pData->assignmentNotification_presence = true;
        if (marbenData->assignmentNotification != nullptr )
        {
            std::shared_ptr<RvdcAssignmentNotification_Model> p_assignmentNotification = std::make_shared<RvdcAssignmentNotification_Model>();
            result = RvdcAssignmentNotification_Decode( "" , p_assignmentNotification , marbenData->assignmentNotification);
            if (result)
            {
                pData->assignmentNotification = (*p_assignmentNotification);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_RVDC__maSynchronizationReq))
    {
        pData->maSynchronizationReq_presence = true;
        if (marbenData->maSynchronizationReq != nullptr )
        {
            std::shared_ptr<MaSynchronizationReq_Model> p_maSynchronizationReq = std::make_shared<MaSynchronizationReq_Model>();
            result = MaSynchronizationReq_Decode( "" , p_maSynchronizationReq , marbenData->maSynchronizationReq);
            if (result)
            {
                pData->maSynchronizationReq = (*p_maSynchronizationReq);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_RVDC__maSynchronization))
    {
        pData->maSynchronization_presence = true;
        if (marbenData->maSynchronization != nullptr )
        {
            std::shared_ptr<MaSynchronization_Model> p_maSynchronization = std::make_shared<MaSynchronization_Model>();
            result = MaSynchronization_Decode( "" , p_maSynchronization , marbenData->maSynchronization);
            if (result)
            {
                pData->maSynchronization = (*p_maSynchronization);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_RVDC__exceptionHandling))
    {
        pData->exceptionHandling_presence = true;
        if (marbenData->exceptionHandling != nullptr )
        {
            std::shared_ptr<RvdcExceptionHandling_Model> p_exceptionHandling = std::make_shared<RvdcExceptionHandling_Model>();
            result = RvdcExceptionHandling_Decode( "" , p_exceptionHandling , marbenData->exceptionHandling);
            if (result)
            {
                pData->exceptionHandling = (*p_exceptionHandling);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_RVDC__measurementDataPackage))
    {
        pData->measurementDataPackage_presence = true;
        if (marbenData->measurementDataPackage != nullptr )
        {
            std::shared_ptr<MeasurementDataPackage_Model> p_measurementDataPackage = std::make_shared<MeasurementDataPackage_Model>();
            result = MeasurementDataPackage_Decode( "" , p_measurementDataPackage , marbenData->measurementDataPackage);
            if (result)
            {
                pData->measurementDataPackage = (*p_measurementDataPackage);
            }
        }

    }

    return true;
}

bool VdsMarbenAdaptGen::RvdcSetting_Encode(const RvdcSetting_Model &pData, asn_wrapper::RvdcSetting* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::RvdcSetting* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::RvdcSetting*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (pData.maSetting_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_maSetting);
        if (marbenData->maSetting == nullptr )
        {
            marbenData->maSetting = new asn_wrapper::MaSetting();
        }
        MaSetting_Encode(pData.maSetting, marbenData->maSetting);
    }
    if (pData.vehicleSetting_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_vehicleSetting);
        if (marbenData->vehicleSetting == nullptr )
        {
            marbenData->vehicleSetting = new asn_wrapper::RvdcVehicleSetting();
        }
        RvdcVehicleSetting_Encode(pData.vehicleSetting, marbenData->vehicleSetting);
    }
    if (pData.languageSetting_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_languageSetting);
        if (marbenData->languageSetting == nullptr )
        {
            marbenData->languageSetting = new asn_wrapper::LanguageSetting();
        }
        LanguageSetting_Encode(pData.languageSetting, marbenData->languageSetting);
    }
    if (pData.forcedSetting_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_forcedSetting);
        if (marbenData->forcedSetting == nullptr )
        {
            marbenData->forcedSetting = new asn_wrapper::RvdcForcedSetting();
        }
        RvdcForcedSetting_Encode(pData.forcedSetting, marbenData->forcedSetting);
    }
    if (pData.serviceParameters_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_RvdcSetting__serviceParameters);
        
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.serviceParameters.size() = %d.", __FUNCTION__, pData.serviceParameters.size());
        for (auto p_serviceParameter = pData.serviceParameters.begin(); p_serviceParameter != pData.serviceParameters.end();) 
        {
            asn_wrapper::asncRvdcSetting__serviceParameterss *serviceParameter = new asn_wrapper::asncRvdcSetting__serviceParameterss();
            marbenData->serviceParameters.addElement(serviceParameter);

            if (verifyScope("key", (int64_t)p_serviceParameter->key.size(), (int64_t)0, (int64_t)250))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter->key = %s.", __FUNCTION__, p_serviceParameter->key.c_str());
                serviceParameter->key.copyOctetString(p_serviceParameter->key.length(), (asnbyte*)(unsigned char*)(p_serviceParameter->key.c_str()));
            }
            if (p_serviceParameter->intVal_presence)
            {
                serviceParameter->optional.setPresence(asn_wrapper::asn_intVal);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter->intVal = %d.", __FUNCTION__, p_serviceParameter->intVal);
                serviceParameter->intVal = p_serviceParameter->intVal;
            }
            if (p_serviceParameter->stringVal_presence)
            {
                if (verifyScope("stringVal", (int64_t)p_serviceParameter->stringVal.size(), (int64_t)0, (int64_t)65535))
                {
                    serviceParameter->optional.setPresence(asn_wrapper::asn_ServiceParameter__stringVal);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter->stringVal = %s.", __FUNCTION__, p_serviceParameter->stringVal.c_str());
                    serviceParameter->stringVal.copyOctetString(p_serviceParameter->stringVal.length(), (asnbyte*)(unsigned char*)(p_serviceParameter->stringVal.c_str()));
                }
            }
            if (p_serviceParameter->boolVal_presence)
            {
                serviceParameter->optional.setPresence(asn_wrapper::asn_ServiceParameter__boolVal);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter->boolVal = %d.", __FUNCTION__, p_serviceParameter->boolVal);
                serviceParameter->boolVal = p_serviceParameter->boolVal;
            }
            if (p_serviceParameter->timestampVal_presence)
            {
                serviceParameter->optional.setPresence(asn_wrapper::asn_ServiceParameter__timestampVal);
                if (serviceParameter->timestampVal == nullptr )
                {
                    serviceParameter->timestampVal = new asn_wrapper::TimeStamp();
                }
                TimeStamp_Encode(p_serviceParameter->timestampVal, serviceParameter->timestampVal);
            }
            if (p_serviceParameter->dataVal_presence)
            {
                if (verifyScope("dataVal", (int64_t)p_serviceParameter->dataVal.size(), (int64_t)1, (int64_t)65535))
                {
                    serviceParameter->optional.setPresence(asn_wrapper::asn_ServiceParameter__dataVal);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter->dataVal = %s.", __FUNCTION__, p_serviceParameter->dataVal.c_str());
                    int dataVal_length = 0;
                    unsigned char* dataVal_ptr = new unsigned char[p_serviceParameter->dataVal.length()];
                    StringToOctet(p_serviceParameter->dataVal,dataVal_ptr,dataVal_length);
                    serviceParameter->dataVal.copyOctetString(dataVal_length,(asnbytep)dataVal_ptr);
                    delete[] dataVal_ptr;
                }
            }
        
            ++p_serviceParameter;
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->serviceParameters.getCount() = %d.", __FUNCTION__, marbenData->serviceParameters.getCount());
        
    }

    return true;
}

bool VdsMarbenAdaptGen::RvdcSetting_Decode(const std::string &path, std::shared_ptr<RvdcSetting_Model> &pData, asn_wrapper::RvdcSetting* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::RvdcSetting* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::RvdcSetting*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_maSetting))
    {
        pData->maSetting_presence = true;
        if (marbenData->maSetting != nullptr )
        {
            std::shared_ptr<MaSetting_Model> p_maSetting = std::make_shared<MaSetting_Model>();
            result = MaSetting_Decode( "" , p_maSetting , marbenData->maSetting);
            if (result)
            {
                pData->maSetting = (*p_maSetting);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_vehicleSetting))
    {
        pData->vehicleSetting_presence = true;
        if (marbenData->vehicleSetting != nullptr )
        {
            std::shared_ptr<RvdcVehicleSetting_Model> p_vehicleSetting = std::make_shared<RvdcVehicleSetting_Model>();
            result = RvdcVehicleSetting_Decode( "" , p_vehicleSetting , marbenData->vehicleSetting);
            if (result)
            {
                pData->vehicleSetting = (*p_vehicleSetting);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_languageSetting))
    {
        pData->languageSetting_presence = true;
        if (marbenData->languageSetting != nullptr )
        {
            std::shared_ptr<LanguageSetting_Model> p_languageSetting = std::make_shared<LanguageSetting_Model>();
            result = LanguageSetting_Decode( "" , p_languageSetting , marbenData->languageSetting);
            if (result)
            {
                pData->languageSetting = (*p_languageSetting);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_forcedSetting))
    {
        pData->forcedSetting_presence = true;
        if (marbenData->forcedSetting != nullptr )
        {
            std::shared_ptr<RvdcForcedSetting_Model> p_forcedSetting = std::make_shared<RvdcForcedSetting_Model>();
            result = RvdcForcedSetting_Decode( "" , p_forcedSetting , marbenData->forcedSetting);
            if (result)
            {
                pData->forcedSetting = (*p_forcedSetting);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_RvdcSetting__serviceParameters))
    {
        pData->serviceParameters_presence = true;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->serviceParameters.getCount() = %d.", __FUNCTION__, marbenData->serviceParameters.getCount());
        unsigned int serviceParameterCount = marbenData->serviceParameters.getCount();
        asn_wrapper::asncRvdcSetting__serviceParameterss* serviceParameter = (asn_wrapper::asncRvdcSetting__serviceParameterss*)(marbenData->serviceParameters.getFirstElement());
        for (unsigned int i = 0; (i < serviceParameterCount || serviceParameter); i++) 
        {
            ServiceParameter_Model p_serviceParameter;
            p_serviceParameter.key = std::string((const char*)serviceParameter->key.value, serviceParameter->key.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter.key = %s.", __FUNCTION__, p_serviceParameter.key.c_str());
            if (asnTRUE == serviceParameter->optional.getPresence(asn_wrapper::asn_intVal))
            {
                p_serviceParameter.intVal_presence = true;
                p_serviceParameter.intVal = serviceParameter->intVal;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter.intVal = %d.", __FUNCTION__, p_serviceParameter.intVal);
            }
            if (asnTRUE == serviceParameter->optional.getPresence(asn_wrapper::asn_ServiceParameter__stringVal))
            {
                p_serviceParameter.stringVal_presence = true;
                p_serviceParameter.stringVal = std::string((const char*)serviceParameter->stringVal.value, serviceParameter->stringVal.length);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter.stringVal = %s.", __FUNCTION__, p_serviceParameter.stringVal.c_str());
            }
            if (asnTRUE == serviceParameter->optional.getPresence(asn_wrapper::asn_ServiceParameter__boolVal))
            {
                p_serviceParameter.boolVal_presence = true;
                p_serviceParameter.boolVal = serviceParameter->boolVal;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter.boolVal = %d.", __FUNCTION__, p_serviceParameter.boolVal);
            }
            if (asnTRUE == serviceParameter->optional.getPresence(asn_wrapper::asn_ServiceParameter__timestampVal))
            {
                p_serviceParameter.timestampVal_presence = true;
                if (serviceParameter->timestampVal != nullptr )
                {
                    std::shared_ptr<TimeStamp_Model> p_timestampVal = std::make_shared<TimeStamp_Model>();
                    result = TimeStamp_Decode( "" , p_timestampVal , serviceParameter->timestampVal);
                    if (result)
                    {
                        p_serviceParameter.timestampVal = (*p_timestampVal);
                    }
                }

            }
            if (asnTRUE == serviceParameter->optional.getPresence(asn_wrapper::asn_ServiceParameter__dataVal))
            {
                p_serviceParameter.dataVal_presence = true;
                asnbyte* dataVal_ptr;
                asnMAXUINT dataVal_length;
                serviceParameter->dataVal.getOctetString(&dataVal_length,&dataVal_ptr);
                char* dataVal_array = new char[dataVal_length*3-1];
                OctetToString(dataVal_ptr,dataVal_array,dataVal_length);
                p_serviceParameter.dataVal = dataVal_array;
                delete[] dataVal_array;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter.dataVal = %s.", __FUNCTION__, p_serviceParameter.dataVal.c_str());
            }
            pData->serviceParameters.push_back(p_serviceParameter);
            serviceParameter = (asn_wrapper::asncRvdcSetting__serviceParameterss*)(serviceParameter->getNextElement());
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->serviceParameters.size() = %d.", __FUNCTION__, pData->serviceParameters.size());
        
    }

    return true;
}

bool VdsMarbenAdaptGen::RvdcForcedSetting_Encode(const RvdcForcedSetting_Model &pData, asn_wrapper::RvdcForcedSetting* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::RvdcForcedSetting* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::RvdcForcedSetting*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.visibility = %d.", __FUNCTION__, pData.visibility);
    marbenData->visibility = pData.visibility;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.suppress = %d.", __FUNCTION__, pData.suppress);
    marbenData->suppress = pData.suppress;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.lock = %d.", __FUNCTION__, pData.lock);
    marbenData->lock = pData.lock;

    return true;
}

bool VdsMarbenAdaptGen::RvdcForcedSetting_Decode(const std::string &path, std::shared_ptr<RvdcForcedSetting_Model> &pData, asn_wrapper::RvdcForcedSetting* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::RvdcForcedSetting* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::RvdcForcedSetting*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->visibility = marbenData->visibility;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->visibility = %d.", __FUNCTION__, pData->visibility);
    pData->suppress = marbenData->suppress;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->suppress = %d.", __FUNCTION__, pData->suppress);
    pData->lock = marbenData->lock;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->lock = %d.", __FUNCTION__, pData->lock);

    return true;
}

bool VdsMarbenAdaptGen::RvdcVehicleSetting_Encode(const RvdcVehicleSetting_Model &pData, asn_wrapper::RvdcVehicleSetting* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::RvdcVehicleSetting* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::RvdcVehicleSetting*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.rvdcFunction = %d.", __FUNCTION__, pData.rvdcFunction);
    marbenData->rvdcFunction = pData.rvdcFunction;
    if (verifyScope("collectOffSetTime", (int64_t)pData.collectOffSetTime, (int64_t)1, (int64_t)512))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.collectOffSetTime = %d.", __FUNCTION__, pData.collectOffSetTime);
        marbenData->collectOffSetTime = pData.collectOffSetTime;
    }

    return true;
}

bool VdsMarbenAdaptGen::RvdcVehicleSetting_Decode(const std::string &path, std::shared_ptr<RvdcVehicleSetting_Model> &pData, asn_wrapper::RvdcVehicleSetting* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::RvdcVehicleSetting* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::RvdcVehicleSetting*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->rvdcFunction = marbenData->rvdcFunction;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->rvdcFunction = %d.", __FUNCTION__, pData->rvdcFunction);
    pData->collectOffSetTime = marbenData->collectOffSetTime;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->collectOffSetTime = %d.", __FUNCTION__, pData->collectOffSetTime);

    return true;
}

bool VdsMarbenAdaptGen::MaSetting_Encode(const MaSetting_Model &pData, asn_wrapper::MaSetting* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::MaSetting* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::MaSetting*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.collectFunction = %d.", __FUNCTION__, pData.collectFunction);
    marbenData->collectFunction = pData.collectFunction;
    if (marbenData->authorizationStatus == nullptr )
    {
        marbenData->authorizationStatus = new asn_wrapper::AuthorizationStatus();
    }
    AuthorizationStatus_Encode(pData.authorizationStatus, marbenData->authorizationStatus);

    return true;
}

bool VdsMarbenAdaptGen::MaSetting_Decode(const std::string &path, std::shared_ptr<MaSetting_Model> &pData, asn_wrapper::MaSetting* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::MaSetting* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::MaSetting*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->collectFunction = marbenData->collectFunction;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->collectFunction = %d.", __FUNCTION__, pData->collectFunction);
    if (marbenData->authorizationStatus != nullptr )
    {
        std::shared_ptr<AuthorizationStatus_Model> p_authorizationStatus = std::make_shared<AuthorizationStatus_Model>();
        result = AuthorizationStatus_Decode( "" , p_authorizationStatus , marbenData->authorizationStatus);
        if (result)
        {
            pData->authorizationStatus = (*p_authorizationStatus);
        }
    }


    return true;
}

bool VdsMarbenAdaptGen::AuthorizationStatus_Encode(const AuthorizationStatus_Model &pData, asn_wrapper::AuthorizationStatus* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::AuthorizationStatus* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::AuthorizationStatus*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (pData.dataCollection_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_dataCollection);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.dataCollection = %d.", __FUNCTION__, pData.dataCollection);
        marbenData->dataCollection = pData.dataCollection;
    }
    if (pData.remoteDiagnostics_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_remoteDiagnostics);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.remoteDiagnostics = %d.", __FUNCTION__, pData.remoteDiagnostics);
        marbenData->remoteDiagnostics = pData.remoteDiagnostics;
    }

    return true;
}

bool VdsMarbenAdaptGen::AuthorizationStatus_Decode(const std::string &path, std::shared_ptr<AuthorizationStatus_Model> &pData, asn_wrapper::AuthorizationStatus* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::AuthorizationStatus* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::AuthorizationStatus*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_dataCollection))
    {
        pData->dataCollection_presence = true;
        pData->dataCollection = marbenData->dataCollection;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->dataCollection = %d.", __FUNCTION__, pData->dataCollection);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_remoteDiagnostics))
    {
        pData->remoteDiagnostics_presence = true;
        pData->remoteDiagnostics = marbenData->remoteDiagnostics;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->remoteDiagnostics = %d.", __FUNCTION__, pData->remoteDiagnostics);
    }

    return true;
}

bool VdsMarbenAdaptGen::RvdcAssignmentNotification_Encode(const RvdcAssignmentNotification_Model &pData, asn_wrapper::RvdcAssignmentNotification* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::RvdcAssignmentNotification* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::RvdcAssignmentNotification*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (pData.maCarId_presence)
    {
        if (verifyScope("maCarId", (int64_t)pData.maCarId, (int64_t)1, (int64_t)4294967295))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_maCarId);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.maCarId = %d.", __FUNCTION__, pData.maCarId);
            marbenData->maCarId = pData.maCarId;
        }
    }
    if (pData.maVersion_presence)
    {
        if (verifyScope("maVersion", (int64_t)pData.maVersion, (int64_t)1, (int64_t)4294967295))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_maVersion);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.maVersion = %d.", __FUNCTION__, pData.maVersion);
            marbenData->maVersion = pData.maVersion;
        }
    }
    if (verifyScope("newStatus", (int64_t)pData.newStatus.size(), (int64_t)1, (int64_t)128))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.newStatus = %s.", __FUNCTION__, pData.newStatus.c_str());
        marbenData->newStatus.copyOctetString(pData.newStatus.length(), (asnbyte*)(unsigned char*)(pData.newStatus.c_str()));
    }
    if (verifyScope("timestamp", (int64_t)pData.timestamp.size(), (int64_t)1, (int64_t)32))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.timestamp = %s.", __FUNCTION__, pData.timestamp.c_str());
        marbenData->timestamp.copyOctetString(pData.timestamp.length(), (asnbyte*)(unsigned char*)(pData.timestamp.c_str()));
    }
    if (pData.reason_presence)
    {
        if (verifyScope("reason", (int64_t)pData.reason.size(), (int64_t)1, (int64_t)512))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_RvdcAssignmentNotification__reason);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.reason = %s.", __FUNCTION__, pData.reason.c_str());
            marbenData->reason.copyOctetString(pData.reason.length(), (asnbyte*)(unsigned char*)(pData.reason.c_str()));
        }
    }

    return true;
}

bool VdsMarbenAdaptGen::RvdcAssignmentNotification_Decode(const std::string &path, std::shared_ptr<RvdcAssignmentNotification_Model> &pData, asn_wrapper::RvdcAssignmentNotification* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::RvdcAssignmentNotification* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::RvdcAssignmentNotification*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_maCarId))
    {
        pData->maCarId_presence = true;
        pData->maCarId = marbenData->maCarId;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->maCarId = %d.", __FUNCTION__, pData->maCarId);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_maVersion))
    {
        pData->maVersion_presence = true;
        pData->maVersion = marbenData->maVersion;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->maVersion = %d.", __FUNCTION__, pData->maVersion);
    }
    pData->newStatus = std::string((const char*)marbenData->newStatus.value, marbenData->newStatus.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->newStatus = %s.", __FUNCTION__, pData->newStatus.c_str());
    pData->timestamp = std::string((const char*)marbenData->timestamp.value, marbenData->timestamp.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->timestamp = %s.", __FUNCTION__, pData->timestamp.c_str());
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_RvdcAssignmentNotification__reason))
    {
        pData->reason_presence = true;
        pData->reason = std::string((const char*)marbenData->reason.value, marbenData->reason.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->reason = %s.", __FUNCTION__, pData->reason.c_str());
    }

    return true;
}

bool VdsMarbenAdaptGen::MaSynchronizationReq_Encode(const MaSynchronizationReq_Model &pData, asn_wrapper::MaSynchronizationReq* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::MaSynchronizationReq* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::MaSynchronizationReq*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("storageQuota", (int64_t)pData.storageQuota, (int64_t)1, (int64_t)4294967295))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.storageQuota = %d.", __FUNCTION__, pData.storageQuota);
        marbenData->storageQuota = pData.storageQuota;
    }
    if (verifyScope("maFormatVersion", (int64_t)pData.maFormatVersion, (int64_t)1, (int64_t)4294967295))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.maFormatVersion = %d.", __FUNCTION__, pData.maFormatVersion);
        marbenData->maFormatVersion = pData.maFormatVersion;
    }
    if (pData.installedMa_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_installedMa);
        
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.installedMa.size() = %d.", __FUNCTION__, pData.installedMa.size());
        for (auto p_installedMa = pData.installedMa.begin(); p_installedMa != pData.installedMa.end();) 
        {
            asn_wrapper::asncinstalledMas *installedMa = new asn_wrapper::asncinstalledMas();
            marbenData->installedMa.addElement(installedMa);

            if (verifyScope("maId", (int64_t)p_installedMa->maId, (int64_t)1, (int64_t)4294967295))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_installedMa->maId = %d.", __FUNCTION__, p_installedMa->maId);
                installedMa->maId = p_installedMa->maId;
            }
            if (verifyScope("maVersion", (int64_t)p_installedMa->maVersion, (int64_t)1, (int64_t)4294967295))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_installedMa->maVersion = %d.", __FUNCTION__, p_installedMa->maVersion);
                installedMa->maVersion = p_installedMa->maVersion;
            }
        
            ++p_installedMa;
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->installedMa.getCount() = %d.", __FUNCTION__, marbenData->installedMa.getCount());
        
    }
    if (pData.serviceParameters_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_MaSynchronizationReq__serviceParameters);
        
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.serviceParameters.size() = %d.", __FUNCTION__, pData.serviceParameters.size());
        for (auto p_serviceParameter = pData.serviceParameters.begin(); p_serviceParameter != pData.serviceParameters.end();) 
        {
            asn_wrapper::asncMaSynchronizationReq__serviceParameterss *serviceParameter = new asn_wrapper::asncMaSynchronizationReq__serviceParameterss();
            marbenData->serviceParameters.addElement(serviceParameter);

            if (verifyScope("key", (int64_t)p_serviceParameter->key.size(), (int64_t)0, (int64_t)250))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter->key = %s.", __FUNCTION__, p_serviceParameter->key.c_str());
                serviceParameter->key.copyOctetString(p_serviceParameter->key.length(), (asnbyte*)(unsigned char*)(p_serviceParameter->key.c_str()));
            }
            if (p_serviceParameter->intVal_presence)
            {
                serviceParameter->optional.setPresence(asn_wrapper::asn_intVal);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter->intVal = %d.", __FUNCTION__, p_serviceParameter->intVal);
                serviceParameter->intVal = p_serviceParameter->intVal;
            }
            if (p_serviceParameter->stringVal_presence)
            {
                if (verifyScope("stringVal", (int64_t)p_serviceParameter->stringVal.size(), (int64_t)0, (int64_t)65535))
                {
                    serviceParameter->optional.setPresence(asn_wrapper::asn_ServiceParameter__stringVal);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter->stringVal = %s.", __FUNCTION__, p_serviceParameter->stringVal.c_str());
                    serviceParameter->stringVal.copyOctetString(p_serviceParameter->stringVal.length(), (asnbyte*)(unsigned char*)(p_serviceParameter->stringVal.c_str()));
                }
            }
            if (p_serviceParameter->boolVal_presence)
            {
                serviceParameter->optional.setPresence(asn_wrapper::asn_ServiceParameter__boolVal);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter->boolVal = %d.", __FUNCTION__, p_serviceParameter->boolVal);
                serviceParameter->boolVal = p_serviceParameter->boolVal;
            }
            if (p_serviceParameter->timestampVal_presence)
            {
                serviceParameter->optional.setPresence(asn_wrapper::asn_ServiceParameter__timestampVal);
                if (serviceParameter->timestampVal == nullptr )
                {
                    serviceParameter->timestampVal = new asn_wrapper::TimeStamp();
                }
                TimeStamp_Encode(p_serviceParameter->timestampVal, serviceParameter->timestampVal);
            }
            if (p_serviceParameter->dataVal_presence)
            {
                if (verifyScope("dataVal", (int64_t)p_serviceParameter->dataVal.size(), (int64_t)1, (int64_t)65535))
                {
                    serviceParameter->optional.setPresence(asn_wrapper::asn_ServiceParameter__dataVal);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter->dataVal = %s.", __FUNCTION__, p_serviceParameter->dataVal.c_str());
                    int dataVal_length = 0;
                    unsigned char* dataVal_ptr = new unsigned char[p_serviceParameter->dataVal.length()];
                    StringToOctet(p_serviceParameter->dataVal,dataVal_ptr,dataVal_length);
                    serviceParameter->dataVal.copyOctetString(dataVal_length,(asnbytep)dataVal_ptr);
                    delete[] dataVal_ptr;
                }
            }
        
            ++p_serviceParameter;
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->serviceParameters.getCount() = %d.", __FUNCTION__, marbenData->serviceParameters.getCount());
        
    }

    return true;
}

bool VdsMarbenAdaptGen::MaSynchronizationReq_Decode(const std::string &path, std::shared_ptr<MaSynchronizationReq_Model> &pData, asn_wrapper::MaSynchronizationReq* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::MaSynchronizationReq* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::MaSynchronizationReq*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->storageQuota = marbenData->storageQuota;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->storageQuota = %d.", __FUNCTION__, pData->storageQuota);
    pData->maFormatVersion = marbenData->maFormatVersion;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->maFormatVersion = %d.", __FUNCTION__, pData->maFormatVersion);
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_installedMa))
    {
        pData->installedMa_presence = true;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->installedMa.getCount() = %d.", __FUNCTION__, marbenData->installedMa.getCount());
        unsigned int installedMaCount = marbenData->installedMa.getCount();
        asn_wrapper::asncinstalledMas* installedMa = (asn_wrapper::asncinstalledMas*)(marbenData->installedMa.getFirstElement());
        for (unsigned int i = 0; (i < installedMaCount || installedMa); i++) 
        {
            Ma_Model p_installedMa;
            p_installedMa.maId = installedMa->maId;
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_installedMa.maId = %d.", __FUNCTION__, p_installedMa.maId);
            p_installedMa.maVersion = installedMa->maVersion;
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_installedMa.maVersion = %d.", __FUNCTION__, p_installedMa.maVersion);
            pData->installedMa.push_back(p_installedMa);
            installedMa = (asn_wrapper::asncinstalledMas*)(installedMa->getNextElement());
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->installedMa.size() = %d.", __FUNCTION__, pData->installedMa.size());
        
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_MaSynchronizationReq__serviceParameters))
    {
        pData->serviceParameters_presence = true;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->serviceParameters.getCount() = %d.", __FUNCTION__, marbenData->serviceParameters.getCount());
        unsigned int serviceParameterCount = marbenData->serviceParameters.getCount();
        asn_wrapper::asncMaSynchronizationReq__serviceParameterss* serviceParameter = (asn_wrapper::asncMaSynchronizationReq__serviceParameterss*)(marbenData->serviceParameters.getFirstElement());
        for (unsigned int i = 0; (i < serviceParameterCount || serviceParameter); i++) 
        {
            ServiceParameter_Model p_serviceParameter;
            p_serviceParameter.key = std::string((const char*)serviceParameter->key.value, serviceParameter->key.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter.key = %s.", __FUNCTION__, p_serviceParameter.key.c_str());
            if (asnTRUE == serviceParameter->optional.getPresence(asn_wrapper::asn_intVal))
            {
                p_serviceParameter.intVal_presence = true;
                p_serviceParameter.intVal = serviceParameter->intVal;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter.intVal = %d.", __FUNCTION__, p_serviceParameter.intVal);
            }
            if (asnTRUE == serviceParameter->optional.getPresence(asn_wrapper::asn_ServiceParameter__stringVal))
            {
                p_serviceParameter.stringVal_presence = true;
                p_serviceParameter.stringVal = std::string((const char*)serviceParameter->stringVal.value, serviceParameter->stringVal.length);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter.stringVal = %s.", __FUNCTION__, p_serviceParameter.stringVal.c_str());
            }
            if (asnTRUE == serviceParameter->optional.getPresence(asn_wrapper::asn_ServiceParameter__boolVal))
            {
                p_serviceParameter.boolVal_presence = true;
                p_serviceParameter.boolVal = serviceParameter->boolVal;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter.boolVal = %d.", __FUNCTION__, p_serviceParameter.boolVal);
            }
            if (asnTRUE == serviceParameter->optional.getPresence(asn_wrapper::asn_ServiceParameter__timestampVal))
            {
                p_serviceParameter.timestampVal_presence = true;
                if (serviceParameter->timestampVal != nullptr )
                {
                    std::shared_ptr<TimeStamp_Model> p_timestampVal = std::make_shared<TimeStamp_Model>();
                    result = TimeStamp_Decode( "" , p_timestampVal , serviceParameter->timestampVal);
                    if (result)
                    {
                        p_serviceParameter.timestampVal = (*p_timestampVal);
                    }
                }

            }
            if (asnTRUE == serviceParameter->optional.getPresence(asn_wrapper::asn_ServiceParameter__dataVal))
            {
                p_serviceParameter.dataVal_presence = true;
                asnbyte* dataVal_ptr;
                asnMAXUINT dataVal_length;
                serviceParameter->dataVal.getOctetString(&dataVal_length,&dataVal_ptr);
                char* dataVal_array = new char[dataVal_length*3-1];
                OctetToString(dataVal_ptr,dataVal_array,dataVal_length);
                p_serviceParameter.dataVal = dataVal_array;
                delete[] dataVal_array;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter.dataVal = %s.", __FUNCTION__, p_serviceParameter.dataVal.c_str());
            }
            pData->serviceParameters.push_back(p_serviceParameter);
            serviceParameter = (asn_wrapper::asncMaSynchronizationReq__serviceParameterss*)(serviceParameter->getNextElement());
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->serviceParameters.size() = %d.", __FUNCTION__, pData->serviceParameters.size());
        
    }

    return true;
}

bool VdsMarbenAdaptGen::MaSynchronization_Encode(const MaSynchronization_Model &pData, asn_wrapper::MaSynchronization* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::MaSynchronization* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::MaSynchronization*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (pData.removeMas_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_removeMas);
        
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.removeMas.size() = %d.", __FUNCTION__, pData.removeMas.size());
        for (auto p_removeMa = pData.removeMas.begin(); p_removeMa != pData.removeMas.end();) 
        {
            asn_wrapper::asncremoveMass *removeMa = new asn_wrapper::asncremoveMass();
            marbenData->removeMas.addElement(removeMa);

            if (verifyScope("maId", (int64_t)p_removeMa->maId, (int64_t)1, (int64_t)4294967295))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_removeMa->maId = %d.", __FUNCTION__, p_removeMa->maId);
                removeMa->maId = p_removeMa->maId;
            }
            if (verifyScope("maVersion", (int64_t)p_removeMa->maVersion, (int64_t)1, (int64_t)4294967295))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_removeMa->maVersion = %d.", __FUNCTION__, p_removeMa->maVersion);
                removeMa->maVersion = p_removeMa->maVersion;
            }
        
            ++p_removeMa;
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->removeMas.getCount() = %d.", __FUNCTION__, marbenData->removeMas.getCount());
        
    }
    if (pData.newMas_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_newMas);
        
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.newMas.size() = %d.", __FUNCTION__, pData.newMas.size());
        for (auto p_newMa = pData.newMas.begin(); p_newMa != pData.newMas.end();) 
        {
            asn_wrapper::asncnewMass *newMa = new asn_wrapper::asncnewMass();
            marbenData->newMas.addElement(newMa);

            if (verifyScope("maId", (int64_t)p_newMa->maId, (int64_t)1, (int64_t)4294967295))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_newMa->maId = %d.", __FUNCTION__, p_newMa->maId);
                newMa->maId = p_newMa->maId;
            }
            if (verifyScope("maVersion", (int64_t)p_newMa->maVersion, (int64_t)1, (int64_t)4294967295))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_newMa->maVersion = %d.", __FUNCTION__, p_newMa->maVersion);
                newMa->maVersion = p_newMa->maVersion;
            }
            if (verifyScope("vin", (int64_t)p_newMa->vin.size(), (int64_t)1, (int64_t)128))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_newMa->vin = %s.", __FUNCTION__, p_newMa->vin.c_str());
                newMa->vin.copyOctetString(p_newMa->vin.length(), (asnbyte*)(unsigned char*)(p_newMa->vin.c_str()));
            }
            if (verifyScope("maFormatVersion", (int64_t)p_newMa->maFormatVersion, (int64_t)1, (int64_t)4294967295))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_newMa->maFormatVersion = %d.", __FUNCTION__, p_newMa->maFormatVersion);
                newMa->maFormatVersion = p_newMa->maFormatVersion;
            }
            if (verifyScope("maExecutionPriority", (int64_t)p_newMa->maExecutionPriority, (int64_t)1, (int64_t)65535))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_newMa->maExecutionPriority = %d.", __FUNCTION__, p_newMa->maExecutionPriority);
                newMa->maExecutionPriority = p_newMa->maExecutionPriority;
            }
            if (newMa->telematicsParameters == nullptr )
            {
                newMa->telematicsParameters = new asn_wrapper::TelematicsParameters();
            }
            TelematicsParameters_Encode(p_newMa->telematicsParameters, newMa->telematicsParameters);
            if (verifyScope("usageModesAllowed", (int64_t)p_newMa->usageModesAllowed, (int64_t)1, (int64_t)4294967295))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_newMa->usageModesAllowed = %d.", __FUNCTION__, p_newMa->usageModesAllowed);
                newMa->usageModesAllowed = p_newMa->usageModesAllowed;
            }
            if (verifyScope("startCondition", (int64_t)p_newMa->startCondition.size(), (int64_t)1, (int64_t)32))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_newMa->startCondition = %s.", __FUNCTION__, p_newMa->startCondition.c_str());
                newMa->startCondition.copyOctetString(p_newMa->startCondition.length(), (asnbyte*)(unsigned char*)(p_newMa->startCondition.c_str()));
            }
            if (newMa->stopCondition == nullptr )
            {
                newMa->stopCondition = new asn_wrapper::StopCondition();
            }
            StopCondition_Encode(p_newMa->stopCondition, newMa->stopCondition);
            if (verifyScope("retentiondate", (int64_t)p_newMa->retentiondate.size(), (int64_t)1, (int64_t)32))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_newMa->retentiondate = %s.", __FUNCTION__, p_newMa->retentiondate.c_str());
                newMa->retentiondate.copyOctetString(p_newMa->retentiondate.length(), (asnbyte*)(unsigned char*)(p_newMa->retentiondate.c_str()));
            }
            if (newMa->authorizationStatus == nullptr )
            {
                newMa->authorizationStatus = new asn_wrapper::AuthorizationStatus();
            }
            AuthorizationStatus_Encode(p_newMa->authorizationStatus, newMa->authorizationStatus);
            if (newMa->executionTrigger == nullptr )
            {
                newMa->executionTrigger = new asn_wrapper::ExecutionTrigger();
            }
            ExecutionTrigger_Encode(p_newMa->executionTrigger, newMa->executionTrigger);
            
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_newMa->ecusAndPartNumbers.size() = %d.", __FUNCTION__, p_newMa->ecusAndPartNumbers.size());
            for (auto p_ecusAndPartNumber = p_newMa->ecusAndPartNumbers.begin(); p_ecusAndPartNumber != p_newMa->ecusAndPartNumbers.end();) 
            {
                asn_wrapper::asncecusAndPartNumberss *ecusAndPartNumber = new asn_wrapper::asncecusAndPartNumberss();
                newMa->ecusAndPartNumbers.addElement(ecusAndPartNumber);

                if (verifyScope("ecuAddress", (int64_t)p_ecusAndPartNumber->ecuAddress.size(), (int64_t)1, (int64_t)256))
                {
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecusAndPartNumber->ecuAddress = %s.", __FUNCTION__, p_ecusAndPartNumber->ecuAddress.c_str());
                    ecusAndPartNumber->ecuAddress.copyOctetString(p_ecusAndPartNumber->ecuAddress.length(), (asnbyte*)(unsigned char*)(p_ecusAndPartNumber->ecuAddress.c_str()));
                }
                if (verifyScope("diagnosticPartNumber", (int64_t)p_ecusAndPartNumber->diagnosticPartNumber.size(), (int64_t)1, (int64_t)64))
                {
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecusAndPartNumber->diagnosticPartNumber = %s.", __FUNCTION__, p_ecusAndPartNumber->diagnosticPartNumber.c_str());
                    ecusAndPartNumber->diagnosticPartNumber.copyOctetString(p_ecusAndPartNumber->diagnosticPartNumber.length(), (asnbyte*)(unsigned char*)(p_ecusAndPartNumber->diagnosticPartNumber.c_str()));
                }
            
                ++p_ecusAndPartNumber;
            }
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: newMa->ecusAndPartNumbers.getCount() = %d.", __FUNCTION__, newMa->ecusAndPartNumbers.getCount());
            
            
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_newMa->diagnosticCommand.size() = %d.", __FUNCTION__, p_newMa->diagnosticCommand.size());
            for (auto p_diagnosticCommand = p_newMa->diagnosticCommand.begin(); p_diagnosticCommand != p_newMa->diagnosticCommand.end();) 
            {
                asn_wrapper::asncdiagnosticCommands *diagnosticCommand = new asn_wrapper::asncdiagnosticCommands();
                newMa->diagnosticCommand.addElement(diagnosticCommand);

                if (verifyScope("ecuAddress", (int64_t)p_diagnosticCommand->ecuAddress.size(), (int64_t)1, (int64_t)256))
                {
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnosticCommand->ecuAddress = %s.", __FUNCTION__, p_diagnosticCommand->ecuAddress.c_str());
                    diagnosticCommand->ecuAddress.copyOctetString(p_diagnosticCommand->ecuAddress.length(), (asnbyte*)(unsigned char*)(p_diagnosticCommand->ecuAddress.c_str()));
                }
                if (verifyScope("serviceId", (int64_t)p_diagnosticCommand->serviceId.size(), (int64_t)1, (int64_t)64))
                {
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnosticCommand->serviceId = %s.", __FUNCTION__, p_diagnosticCommand->serviceId.c_str());
                    diagnosticCommand->serviceId.copyOctetString(p_diagnosticCommand->serviceId.length(), (asnbyte*)(unsigned char*)(p_diagnosticCommand->serviceId.c_str()));
                }
                if (verifyScope("input", (int64_t)p_diagnosticCommand->input.size(), (int64_t)1, (int64_t)65535))
                {
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnosticCommand->input = %s.", __FUNCTION__, p_diagnosticCommand->input.c_str());
                    diagnosticCommand->input.copyOctetString(p_diagnosticCommand->input.length(), (asnbyte*)(unsigned char*)(p_diagnosticCommand->input.c_str()));
                }
                if (p_diagnosticCommand->compareType_presence)
                {
                    diagnosticCommand->optional.setPresence(asn_wrapper::asn_compareType);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnosticCommand->compareType = %d.", __FUNCTION__, p_diagnosticCommand->compareType);
                    diagnosticCommand->compareType = (int32_t)p_diagnosticCommand->compareType;
                }
                if (p_diagnosticCommand->compareValue_presence)
                {
                    if (verifyScope("compareValue", (int64_t)p_diagnosticCommand->compareValue.size(), (int64_t)1, (int64_t)65535))
                    {
                        diagnosticCommand->optional.setPresence(asn_wrapper::asn_compareValue);
                        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnosticCommand->compareValue = %s.", __FUNCTION__, p_diagnosticCommand->compareValue.c_str());
                        diagnosticCommand->compareValue.copyOctetString(p_diagnosticCommand->compareValue.length(), (asnbyte*)(unsigned char*)(p_diagnosticCommand->compareValue.c_str()));
                    }
                }
                if (verifyScope("delayUntilNextTriggerCommand", (int64_t)p_diagnosticCommand->delayUntilNextTriggerCommand, (int64_t)1, (int64_t)512))
                {
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnosticCommand->delayUntilNextTriggerCommand = %d.", __FUNCTION__, p_diagnosticCommand->delayUntilNextTriggerCommand);
                    diagnosticCommand->delayUntilNextTriggerCommand = p_diagnosticCommand->delayUntilNextTriggerCommand;
                }
            
                ++p_diagnosticCommand;
            }
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: newMa->diagnosticCommand.getCount() = %d.", __FUNCTION__, newMa->diagnosticCommand.getCount());
            
            if (verifyScope("dataIntegrityCheck", (int64_t)p_newMa->dataIntegrityCheck.size(), (int64_t)1, (int64_t)64))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_newMa->dataIntegrityCheck = %s.", __FUNCTION__, p_newMa->dataIntegrityCheck.c_str());
                newMa->dataIntegrityCheck.copyOctetString(p_newMa->dataIntegrityCheck.length(), (asnbyte*)(unsigned char*)(p_newMa->dataIntegrityCheck.c_str()));
            }
            if (p_newMa->serviceParameters_presence)
            {
                newMa->optional.setPresence(asn_wrapper::asn_MeasurementAssignment__serviceParameters);
                
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_newMa->serviceParameters.size() = %d.", __FUNCTION__, p_newMa->serviceParameters.size());
                for (auto p_serviceParameter = p_newMa->serviceParameters.begin(); p_serviceParameter != p_newMa->serviceParameters.end();) 
                {
                    asn_wrapper::asncMeasurementAssignment__serviceParameterss *serviceParameter = new asn_wrapper::asncMeasurementAssignment__serviceParameterss();
                    newMa->serviceParameters.addElement(serviceParameter);

                    if (verifyScope("key", (int64_t)p_serviceParameter->key.size(), (int64_t)0, (int64_t)250))
                    {
                        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter->key = %s.", __FUNCTION__, p_serviceParameter->key.c_str());
                        serviceParameter->key.copyOctetString(p_serviceParameter->key.length(), (asnbyte*)(unsigned char*)(p_serviceParameter->key.c_str()));
                    }
                    if (p_serviceParameter->intVal_presence)
                    {
                        serviceParameter->optional.setPresence(asn_wrapper::asn_intVal);
                        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter->intVal = %d.", __FUNCTION__, p_serviceParameter->intVal);
                        serviceParameter->intVal = p_serviceParameter->intVal;
                    }
                    if (p_serviceParameter->stringVal_presence)
                    {
                        if (verifyScope("stringVal", (int64_t)p_serviceParameter->stringVal.size(), (int64_t)0, (int64_t)65535))
                        {
                            serviceParameter->optional.setPresence(asn_wrapper::asn_ServiceParameter__stringVal);
                            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter->stringVal = %s.", __FUNCTION__, p_serviceParameter->stringVal.c_str());
                            serviceParameter->stringVal.copyOctetString(p_serviceParameter->stringVal.length(), (asnbyte*)(unsigned char*)(p_serviceParameter->stringVal.c_str()));
                        }
                    }
                    if (p_serviceParameter->boolVal_presence)
                    {
                        serviceParameter->optional.setPresence(asn_wrapper::asn_ServiceParameter__boolVal);
                        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter->boolVal = %d.", __FUNCTION__, p_serviceParameter->boolVal);
                        serviceParameter->boolVal = p_serviceParameter->boolVal;
                    }
                    if (p_serviceParameter->timestampVal_presence)
                    {
                        serviceParameter->optional.setPresence(asn_wrapper::asn_ServiceParameter__timestampVal);
                        if (serviceParameter->timestampVal == nullptr )
                        {
                            serviceParameter->timestampVal = new asn_wrapper::TimeStamp();
                        }
                        TimeStamp_Encode(p_serviceParameter->timestampVal, serviceParameter->timestampVal);
                    }
                    if (p_serviceParameter->dataVal_presence)
                    {
                        if (verifyScope("dataVal", (int64_t)p_serviceParameter->dataVal.size(), (int64_t)1, (int64_t)65535))
                        {
                            serviceParameter->optional.setPresence(asn_wrapper::asn_ServiceParameter__dataVal);
                            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter->dataVal = %s.", __FUNCTION__, p_serviceParameter->dataVal.c_str());
                            int dataVal_length = 0;
                            unsigned char* dataVal_ptr = new unsigned char[p_serviceParameter->dataVal.length()];
                            StringToOctet(p_serviceParameter->dataVal,dataVal_ptr,dataVal_length);
                            serviceParameter->dataVal.copyOctetString(dataVal_length,(asnbytep)dataVal_ptr);
                            delete[] dataVal_ptr;
                        }
                    }
                
                    ++p_serviceParameter;
                }
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: newMa->serviceParameters.getCount() = %d.", __FUNCTION__, newMa->serviceParameters.getCount());
                
            }
        
            ++p_newMa;
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->newMas.getCount() = %d.", __FUNCTION__, marbenData->newMas.getCount());
        
    }
    if (pData.serviceParameters_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_MaSynchronization__serviceParameters);
        
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.serviceParameters.size() = %d.", __FUNCTION__, pData.serviceParameters.size());
        for (auto p_serviceParameter = pData.serviceParameters.begin(); p_serviceParameter != pData.serviceParameters.end();) 
        {
            asn_wrapper::asncMaSynchronization__serviceParameterss *serviceParameter = new asn_wrapper::asncMaSynchronization__serviceParameterss();
            marbenData->serviceParameters.addElement(serviceParameter);

            if (verifyScope("key", (int64_t)p_serviceParameter->key.size(), (int64_t)0, (int64_t)250))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter->key = %s.", __FUNCTION__, p_serviceParameter->key.c_str());
                serviceParameter->key.copyOctetString(p_serviceParameter->key.length(), (asnbyte*)(unsigned char*)(p_serviceParameter->key.c_str()));
            }
            if (p_serviceParameter->intVal_presence)
            {
                serviceParameter->optional.setPresence(asn_wrapper::asn_intVal);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter->intVal = %d.", __FUNCTION__, p_serviceParameter->intVal);
                serviceParameter->intVal = p_serviceParameter->intVal;
            }
            if (p_serviceParameter->stringVal_presence)
            {
                if (verifyScope("stringVal", (int64_t)p_serviceParameter->stringVal.size(), (int64_t)0, (int64_t)65535))
                {
                    serviceParameter->optional.setPresence(asn_wrapper::asn_ServiceParameter__stringVal);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter->stringVal = %s.", __FUNCTION__, p_serviceParameter->stringVal.c_str());
                    serviceParameter->stringVal.copyOctetString(p_serviceParameter->stringVal.length(), (asnbyte*)(unsigned char*)(p_serviceParameter->stringVal.c_str()));
                }
            }
            if (p_serviceParameter->boolVal_presence)
            {
                serviceParameter->optional.setPresence(asn_wrapper::asn_ServiceParameter__boolVal);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter->boolVal = %d.", __FUNCTION__, p_serviceParameter->boolVal);
                serviceParameter->boolVal = p_serviceParameter->boolVal;
            }
            if (p_serviceParameter->timestampVal_presence)
            {
                serviceParameter->optional.setPresence(asn_wrapper::asn_ServiceParameter__timestampVal);
                if (serviceParameter->timestampVal == nullptr )
                {
                    serviceParameter->timestampVal = new asn_wrapper::TimeStamp();
                }
                TimeStamp_Encode(p_serviceParameter->timestampVal, serviceParameter->timestampVal);
            }
            if (p_serviceParameter->dataVal_presence)
            {
                if (verifyScope("dataVal", (int64_t)p_serviceParameter->dataVal.size(), (int64_t)1, (int64_t)65535))
                {
                    serviceParameter->optional.setPresence(asn_wrapper::asn_ServiceParameter__dataVal);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter->dataVal = %s.", __FUNCTION__, p_serviceParameter->dataVal.c_str());
                    int dataVal_length = 0;
                    unsigned char* dataVal_ptr = new unsigned char[p_serviceParameter->dataVal.length()];
                    StringToOctet(p_serviceParameter->dataVal,dataVal_ptr,dataVal_length);
                    serviceParameter->dataVal.copyOctetString(dataVal_length,(asnbytep)dataVal_ptr);
                    delete[] dataVal_ptr;
                }
            }
        
            ++p_serviceParameter;
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->serviceParameters.getCount() = %d.", __FUNCTION__, marbenData->serviceParameters.getCount());
        
    }

    return true;
}

bool VdsMarbenAdaptGen::MaSynchronization_Decode(const std::string &path, std::shared_ptr<MaSynchronization_Model> &pData, asn_wrapper::MaSynchronization* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::MaSynchronization* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::MaSynchronization*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_removeMas))
    {
        pData->removeMas_presence = true;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->removeMas.getCount() = %d.", __FUNCTION__, marbenData->removeMas.getCount());
        unsigned int removeMaCount = marbenData->removeMas.getCount();
        asn_wrapper::asncremoveMass* removeMa = (asn_wrapper::asncremoveMass*)(marbenData->removeMas.getFirstElement());
        for (unsigned int i = 0; (i < removeMaCount || removeMa); i++) 
        {
            Ma_Model p_removeMa;
            p_removeMa.maId = removeMa->maId;
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_removeMa.maId = %d.", __FUNCTION__, p_removeMa.maId);
            p_removeMa.maVersion = removeMa->maVersion;
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_removeMa.maVersion = %d.", __FUNCTION__, p_removeMa.maVersion);
            pData->removeMas.push_back(p_removeMa);
            removeMa = (asn_wrapper::asncremoveMass*)(removeMa->getNextElement());
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->removeMas.size() = %d.", __FUNCTION__, pData->removeMas.size());
        
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_newMas))
    {
        pData->newMas_presence = true;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->newMas.getCount() = %d.", __FUNCTION__, marbenData->newMas.getCount());
        unsigned int newMaCount = marbenData->newMas.getCount();
        asn_wrapper::asncnewMass* newMa = (asn_wrapper::asncnewMass*)(marbenData->newMas.getFirstElement());
        for (unsigned int i = 0; (i < newMaCount || newMa); i++) 
        {
            MeasurementAssignment_Model p_newMa;
            p_newMa.maId = newMa->maId;
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_newMa.maId = %d.", __FUNCTION__, p_newMa.maId);
            p_newMa.maVersion = newMa->maVersion;
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_newMa.maVersion = %d.", __FUNCTION__, p_newMa.maVersion);
            p_newMa.vin = std::string((const char*)newMa->vin.value, newMa->vin.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_newMa.vin = %s.", __FUNCTION__, p_newMa.vin.c_str());
            p_newMa.maFormatVersion = newMa->maFormatVersion;
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_newMa.maFormatVersion = %d.", __FUNCTION__, p_newMa.maFormatVersion);
            p_newMa.maExecutionPriority = newMa->maExecutionPriority;
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_newMa.maExecutionPriority = %d.", __FUNCTION__, p_newMa.maExecutionPriority);
            if (newMa->telematicsParameters != nullptr )
            {
                std::shared_ptr<TelematicsParameters_Model> p_telematicsParameters = std::make_shared<TelematicsParameters_Model>();
                result = TelematicsParameters_Decode( "" , p_telematicsParameters , newMa->telematicsParameters);
                if (result)
                {
                    p_newMa.telematicsParameters = (*p_telematicsParameters);
                }
            }

            p_newMa.usageModesAllowed = newMa->usageModesAllowed;
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_newMa.usageModesAllowed = %d.", __FUNCTION__, p_newMa.usageModesAllowed);
            p_newMa.startCondition = std::string((const char*)newMa->startCondition.value, newMa->startCondition.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_newMa.startCondition = %s.", __FUNCTION__, p_newMa.startCondition.c_str());
            if (newMa->stopCondition != nullptr )
            {
                std::shared_ptr<StopCondition_Model> p_stopCondition = std::make_shared<StopCondition_Model>();
                result = StopCondition_Decode( "" , p_stopCondition , newMa->stopCondition);
                if (result)
                {
                    p_newMa.stopCondition = (*p_stopCondition);
                }
            }

            p_newMa.retentiondate = std::string((const char*)newMa->retentiondate.value, newMa->retentiondate.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_newMa.retentiondate = %s.", __FUNCTION__, p_newMa.retentiondate.c_str());
            if (newMa->authorizationStatus != nullptr )
            {
                std::shared_ptr<AuthorizationStatus_Model> p_authorizationStatus = std::make_shared<AuthorizationStatus_Model>();
                result = AuthorizationStatus_Decode( "" , p_authorizationStatus , newMa->authorizationStatus);
                if (result)
                {
                    p_newMa.authorizationStatus = (*p_authorizationStatus);
                }
            }

            if (newMa->executionTrigger != nullptr )
            {
                std::shared_ptr<ExecutionTrigger_Model> p_executionTrigger = std::make_shared<ExecutionTrigger_Model>();
                result = ExecutionTrigger_Decode( "" , p_executionTrigger , newMa->executionTrigger);
                if (result)
                {
                    p_newMa.executionTrigger = (*p_executionTrigger);
                }
            }

            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: newMa->ecusAndPartNumbers.getCount() = %d.", __FUNCTION__, newMa->ecusAndPartNumbers.getCount());
            unsigned int ecusAndPartNumberCount = newMa->ecusAndPartNumbers.getCount();
            asn_wrapper::asncecusAndPartNumberss* ecusAndPartNumber = (asn_wrapper::asncecusAndPartNumberss*)(newMa->ecusAndPartNumbers.getFirstElement());
            for (unsigned int ecusAndPartNumbers2 = 0; (ecusAndPartNumbers2 < ecusAndPartNumberCount || ecusAndPartNumber); ecusAndPartNumbers2++) 
            {
                EcusAndPartNumber_Model p_ecusAndPartNumber;
                p_ecusAndPartNumber.ecuAddress = std::string((const char*)ecusAndPartNumber->ecuAddress.value, ecusAndPartNumber->ecuAddress.length);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecusAndPartNumber.ecuAddress = %s.", __FUNCTION__, p_ecusAndPartNumber.ecuAddress.c_str());
                p_ecusAndPartNumber.diagnosticPartNumber = std::string((const char*)ecusAndPartNumber->diagnosticPartNumber.value, ecusAndPartNumber->diagnosticPartNumber.length);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecusAndPartNumber.diagnosticPartNumber = %s.", __FUNCTION__, p_ecusAndPartNumber.diagnosticPartNumber.c_str());
                p_newMa.ecusAndPartNumbers.push_back(p_ecusAndPartNumber);
                ecusAndPartNumber = (asn_wrapper::asncecusAndPartNumberss*)(ecusAndPartNumber->getNextElement());
            }
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_newMa.ecusAndPartNumbers.size() = %d.", __FUNCTION__, p_newMa.ecusAndPartNumbers.size());
            
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: newMa->diagnosticCommand.getCount() = %d.", __FUNCTION__, newMa->diagnosticCommand.getCount());
            unsigned int diagnosticCommandCount = newMa->diagnosticCommand.getCount();
            asn_wrapper::asncdiagnosticCommands* diagnosticCommand = (asn_wrapper::asncdiagnosticCommands*)(newMa->diagnosticCommand.getFirstElement());
            for (unsigned int diagnosticCommand2 = 0; (diagnosticCommand2 < diagnosticCommandCount || diagnosticCommand); diagnosticCommand2++) 
            {
                DiagnosticCommand_Model p_diagnosticCommand;
                p_diagnosticCommand.ecuAddress = std::string((const char*)diagnosticCommand->ecuAddress.value, diagnosticCommand->ecuAddress.length);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnosticCommand.ecuAddress = %s.", __FUNCTION__, p_diagnosticCommand.ecuAddress.c_str());
                p_diagnosticCommand.serviceId = std::string((const char*)diagnosticCommand->serviceId.value, diagnosticCommand->serviceId.length);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnosticCommand.serviceId = %s.", __FUNCTION__, p_diagnosticCommand.serviceId.c_str());
                p_diagnosticCommand.input = std::string((const char*)diagnosticCommand->input.value, diagnosticCommand->input.length);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnosticCommand.input = %s.", __FUNCTION__, p_diagnosticCommand.input.c_str());
                if (asnTRUE == diagnosticCommand->optional.getPresence(asn_wrapper::asn_compareType))
                {
                    p_diagnosticCommand.compareType_presence = true;
                    p_diagnosticCommand.compareType = (Vds_CompareType)diagnosticCommand->compareType;
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnosticCommand.compareType = %d.", __FUNCTION__, p_diagnosticCommand.compareType);
                }
                if (asnTRUE == diagnosticCommand->optional.getPresence(asn_wrapper::asn_compareValue))
                {
                    p_diagnosticCommand.compareValue_presence = true;
                    p_diagnosticCommand.compareValue = std::string((const char*)diagnosticCommand->compareValue.value, diagnosticCommand->compareValue.length);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnosticCommand.compareValue = %s.", __FUNCTION__, p_diagnosticCommand.compareValue.c_str());
                }
                p_diagnosticCommand.delayUntilNextTriggerCommand = diagnosticCommand->delayUntilNextTriggerCommand;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnosticCommand.delayUntilNextTriggerCommand = %d.", __FUNCTION__, p_diagnosticCommand.delayUntilNextTriggerCommand);
                p_newMa.diagnosticCommand.push_back(p_diagnosticCommand);
                diagnosticCommand = (asn_wrapper::asncdiagnosticCommands*)(diagnosticCommand->getNextElement());
            }
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_newMa.diagnosticCommand.size() = %d.", __FUNCTION__, p_newMa.diagnosticCommand.size());
            
            p_newMa.dataIntegrityCheck = std::string((const char*)newMa->dataIntegrityCheck.value, newMa->dataIntegrityCheck.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_newMa.dataIntegrityCheck = %s.", __FUNCTION__, p_newMa.dataIntegrityCheck.c_str());
            if (asnTRUE == newMa->optional.getPresence(asn_wrapper::asn_MeasurementAssignment__serviceParameters))
            {
                p_newMa.serviceParameters_presence = true;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: newMa->serviceParameters.getCount() = %d.", __FUNCTION__, newMa->serviceParameters.getCount());
                unsigned int serviceParameterCount = newMa->serviceParameters.getCount();
                asn_wrapper::asncMeasurementAssignment__serviceParameterss* serviceParameter = (asn_wrapper::asncMeasurementAssignment__serviceParameterss*)(newMa->serviceParameters.getFirstElement());
                for (unsigned int serviceParameters2 = 0; (serviceParameters2 < serviceParameterCount || serviceParameter); serviceParameters2++) 
                {
                    ServiceParameter_Model p_serviceParameter;
                    p_serviceParameter.key = std::string((const char*)serviceParameter->key.value, serviceParameter->key.length);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter.key = %s.", __FUNCTION__, p_serviceParameter.key.c_str());
                    if (asnTRUE == serviceParameter->optional.getPresence(asn_wrapper::asn_intVal))
                    {
                        p_serviceParameter.intVal_presence = true;
                        p_serviceParameter.intVal = serviceParameter->intVal;
                        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter.intVal = %d.", __FUNCTION__, p_serviceParameter.intVal);
                    }
                    if (asnTRUE == serviceParameter->optional.getPresence(asn_wrapper::asn_ServiceParameter__stringVal))
                    {
                        p_serviceParameter.stringVal_presence = true;
                        p_serviceParameter.stringVal = std::string((const char*)serviceParameter->stringVal.value, serviceParameter->stringVal.length);
                        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter.stringVal = %s.", __FUNCTION__, p_serviceParameter.stringVal.c_str());
                    }
                    if (asnTRUE == serviceParameter->optional.getPresence(asn_wrapper::asn_ServiceParameter__boolVal))
                    {
                        p_serviceParameter.boolVal_presence = true;
                        p_serviceParameter.boolVal = serviceParameter->boolVal;
                        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter.boolVal = %d.", __FUNCTION__, p_serviceParameter.boolVal);
                    }
                    if (asnTRUE == serviceParameter->optional.getPresence(asn_wrapper::asn_ServiceParameter__timestampVal))
                    {
                        p_serviceParameter.timestampVal_presence = true;
                        if (serviceParameter->timestampVal != nullptr )
                        {
                            std::shared_ptr<TimeStamp_Model> p_timestampVal = std::make_shared<TimeStamp_Model>();
                            result = TimeStamp_Decode( "" , p_timestampVal , serviceParameter->timestampVal);
                            if (result)
                            {
                                p_serviceParameter.timestampVal = (*p_timestampVal);
                            }
                        }

                    }
                    if (asnTRUE == serviceParameter->optional.getPresence(asn_wrapper::asn_ServiceParameter__dataVal))
                    {
                        p_serviceParameter.dataVal_presence = true;
                        asnbyte* dataVal_ptr;
                        asnMAXUINT dataVal_length;
                        serviceParameter->dataVal.getOctetString(&dataVal_length,&dataVal_ptr);
                        char* dataVal_array = new char[dataVal_length*3-1];
                        OctetToString(dataVal_ptr,dataVal_array,dataVal_length);
                        p_serviceParameter.dataVal = dataVal_array;
                        delete[] dataVal_array;
                        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter.dataVal = %s.", __FUNCTION__, p_serviceParameter.dataVal.c_str());
                    }
                    p_newMa.serviceParameters.push_back(p_serviceParameter);
                    serviceParameter = (asn_wrapper::asncMeasurementAssignment__serviceParameterss*)(serviceParameter->getNextElement());
                }
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_newMa.serviceParameters.size() = %d.", __FUNCTION__, p_newMa.serviceParameters.size());
                
            }
            pData->newMas.push_back(p_newMa);
            newMa = (asn_wrapper::asncnewMass*)(newMa->getNextElement());
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->newMas.size() = %d.", __FUNCTION__, pData->newMas.size());
        
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_MaSynchronization__serviceParameters))
    {
        pData->serviceParameters_presence = true;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->serviceParameters.getCount() = %d.", __FUNCTION__, marbenData->serviceParameters.getCount());
        unsigned int serviceParameterCount = marbenData->serviceParameters.getCount();
        asn_wrapper::asncMaSynchronization__serviceParameterss* serviceParameter = (asn_wrapper::asncMaSynchronization__serviceParameterss*)(marbenData->serviceParameters.getFirstElement());
        for (unsigned int i = 0; (i < serviceParameterCount || serviceParameter); i++) 
        {
            ServiceParameter_Model p_serviceParameter;
            p_serviceParameter.key = std::string((const char*)serviceParameter->key.value, serviceParameter->key.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter.key = %s.", __FUNCTION__, p_serviceParameter.key.c_str());
            if (asnTRUE == serviceParameter->optional.getPresence(asn_wrapper::asn_intVal))
            {
                p_serviceParameter.intVal_presence = true;
                p_serviceParameter.intVal = serviceParameter->intVal;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter.intVal = %d.", __FUNCTION__, p_serviceParameter.intVal);
            }
            if (asnTRUE == serviceParameter->optional.getPresence(asn_wrapper::asn_ServiceParameter__stringVal))
            {
                p_serviceParameter.stringVal_presence = true;
                p_serviceParameter.stringVal = std::string((const char*)serviceParameter->stringVal.value, serviceParameter->stringVal.length);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter.stringVal = %s.", __FUNCTION__, p_serviceParameter.stringVal.c_str());
            }
            if (asnTRUE == serviceParameter->optional.getPresence(asn_wrapper::asn_ServiceParameter__boolVal))
            {
                p_serviceParameter.boolVal_presence = true;
                p_serviceParameter.boolVal = serviceParameter->boolVal;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter.boolVal = %d.", __FUNCTION__, p_serviceParameter.boolVal);
            }
            if (asnTRUE == serviceParameter->optional.getPresence(asn_wrapper::asn_ServiceParameter__timestampVal))
            {
                p_serviceParameter.timestampVal_presence = true;
                if (serviceParameter->timestampVal != nullptr )
                {
                    std::shared_ptr<TimeStamp_Model> p_timestampVal = std::make_shared<TimeStamp_Model>();
                    result = TimeStamp_Decode( "" , p_timestampVal , serviceParameter->timestampVal);
                    if (result)
                    {
                        p_serviceParameter.timestampVal = (*p_timestampVal);
                    }
                }

            }
            if (asnTRUE == serviceParameter->optional.getPresence(asn_wrapper::asn_ServiceParameter__dataVal))
            {
                p_serviceParameter.dataVal_presence = true;
                asnbyte* dataVal_ptr;
                asnMAXUINT dataVal_length;
                serviceParameter->dataVal.getOctetString(&dataVal_length,&dataVal_ptr);
                char* dataVal_array = new char[dataVal_length*3-1];
                OctetToString(dataVal_ptr,dataVal_array,dataVal_length);
                p_serviceParameter.dataVal = dataVal_array;
                delete[] dataVal_array;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter.dataVal = %s.", __FUNCTION__, p_serviceParameter.dataVal.c_str());
            }
            pData->serviceParameters.push_back(p_serviceParameter);
            serviceParameter = (asn_wrapper::asncMaSynchronization__serviceParameterss*)(serviceParameter->getNextElement());
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->serviceParameters.size() = %d.", __FUNCTION__, pData->serviceParameters.size());
        
    }

    return true;
}

bool VdsMarbenAdaptGen::Ma_Encode(const Ma_Model &pData, asn_wrapper::Ma* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::Ma* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::Ma*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("maId", (int64_t)pData.maId, (int64_t)1, (int64_t)4294967295))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.maId = %d.", __FUNCTION__, pData.maId);
        marbenData->maId = pData.maId;
    }
    if (verifyScope("maVersion", (int64_t)pData.maVersion, (int64_t)1, (int64_t)4294967295))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.maVersion = %d.", __FUNCTION__, pData.maVersion);
        marbenData->maVersion = pData.maVersion;
    }

    return true;
}

bool VdsMarbenAdaptGen::Ma_Decode(const std::string &path, std::shared_ptr<Ma_Model> &pData, asn_wrapper::Ma* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::Ma* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::Ma*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->maId = marbenData->maId;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->maId = %d.", __FUNCTION__, pData->maId);
    pData->maVersion = marbenData->maVersion;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->maVersion = %d.", __FUNCTION__, pData->maVersion);

    return true;
}

bool VdsMarbenAdaptGen::MeasurementAssignment_Encode(const MeasurementAssignment_Model &pData, asn_wrapper::MeasurementAssignment* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::MeasurementAssignment* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::MeasurementAssignment*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("maId", (int64_t)pData.maId, (int64_t)1, (int64_t)4294967295))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.maId = %d.", __FUNCTION__, pData.maId);
        marbenData->maId = pData.maId;
    }
    if (verifyScope("maVersion", (int64_t)pData.maVersion, (int64_t)1, (int64_t)4294967295))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.maVersion = %d.", __FUNCTION__, pData.maVersion);
        marbenData->maVersion = pData.maVersion;
    }
    if (verifyScope("vin", (int64_t)pData.vin.size(), (int64_t)1, (int64_t)128))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.vin = %s.", __FUNCTION__, pData.vin.c_str());
        marbenData->vin.copyOctetString(pData.vin.length(), (asnbyte*)(unsigned char*)(pData.vin.c_str()));
    }
    if (verifyScope("maFormatVersion", (int64_t)pData.maFormatVersion, (int64_t)1, (int64_t)4294967295))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.maFormatVersion = %d.", __FUNCTION__, pData.maFormatVersion);
        marbenData->maFormatVersion = pData.maFormatVersion;
    }
    if (verifyScope("maExecutionPriority", (int64_t)pData.maExecutionPriority, (int64_t)1, (int64_t)65535))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.maExecutionPriority = %d.", __FUNCTION__, pData.maExecutionPriority);
        marbenData->maExecutionPriority = pData.maExecutionPriority;
    }
    if (marbenData->telematicsParameters == nullptr )
    {
        marbenData->telematicsParameters = new asn_wrapper::TelematicsParameters();
    }
    TelematicsParameters_Encode(pData.telematicsParameters, marbenData->telematicsParameters);
    if (verifyScope("usageModesAllowed", (int64_t)pData.usageModesAllowed, (int64_t)1, (int64_t)4294967295))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.usageModesAllowed = %d.", __FUNCTION__, pData.usageModesAllowed);
        marbenData->usageModesAllowed = pData.usageModesAllowed;
    }
    if (verifyScope("startCondition", (int64_t)pData.startCondition.size(), (int64_t)1, (int64_t)32))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.startCondition = %s.", __FUNCTION__, pData.startCondition.c_str());
        marbenData->startCondition.copyOctetString(pData.startCondition.length(), (asnbyte*)(unsigned char*)(pData.startCondition.c_str()));
    }
    if (marbenData->stopCondition == nullptr )
    {
        marbenData->stopCondition = new asn_wrapper::StopCondition();
    }
    StopCondition_Encode(pData.stopCondition, marbenData->stopCondition);
    if (verifyScope("retentiondate", (int64_t)pData.retentiondate.size(), (int64_t)1, (int64_t)32))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.retentiondate = %s.", __FUNCTION__, pData.retentiondate.c_str());
        marbenData->retentiondate.copyOctetString(pData.retentiondate.length(), (asnbyte*)(unsigned char*)(pData.retentiondate.c_str()));
    }
    if (marbenData->authorizationStatus == nullptr )
    {
        marbenData->authorizationStatus = new asn_wrapper::AuthorizationStatus();
    }
    AuthorizationStatus_Encode(pData.authorizationStatus, marbenData->authorizationStatus);
    if (marbenData->executionTrigger == nullptr )
    {
        marbenData->executionTrigger = new asn_wrapper::ExecutionTrigger();
    }
    ExecutionTrigger_Encode(pData.executionTrigger, marbenData->executionTrigger);
    
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.ecusAndPartNumbers.size() = %d.", __FUNCTION__, pData.ecusAndPartNumbers.size());
    for (auto p_ecusAndPartNumber = pData.ecusAndPartNumbers.begin(); p_ecusAndPartNumber != pData.ecusAndPartNumbers.end();) 
    {
        asn_wrapper::asncecusAndPartNumberss *ecusAndPartNumber = new asn_wrapper::asncecusAndPartNumberss();
        marbenData->ecusAndPartNumbers.addElement(ecusAndPartNumber);

        if (verifyScope("ecuAddress", (int64_t)p_ecusAndPartNumber->ecuAddress.size(), (int64_t)1, (int64_t)256))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecusAndPartNumber->ecuAddress = %s.", __FUNCTION__, p_ecusAndPartNumber->ecuAddress.c_str());
            ecusAndPartNumber->ecuAddress.copyOctetString(p_ecusAndPartNumber->ecuAddress.length(), (asnbyte*)(unsigned char*)(p_ecusAndPartNumber->ecuAddress.c_str()));
        }
        if (verifyScope("diagnosticPartNumber", (int64_t)p_ecusAndPartNumber->diagnosticPartNumber.size(), (int64_t)1, (int64_t)64))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecusAndPartNumber->diagnosticPartNumber = %s.", __FUNCTION__, p_ecusAndPartNumber->diagnosticPartNumber.c_str());
            ecusAndPartNumber->diagnosticPartNumber.copyOctetString(p_ecusAndPartNumber->diagnosticPartNumber.length(), (asnbyte*)(unsigned char*)(p_ecusAndPartNumber->diagnosticPartNumber.c_str()));
        }
    
        ++p_ecusAndPartNumber;
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->ecusAndPartNumbers.getCount() = %d.", __FUNCTION__, marbenData->ecusAndPartNumbers.getCount());
    
    
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.diagnosticCommand.size() = %d.", __FUNCTION__, pData.diagnosticCommand.size());
    for (auto p_diagnosticCommand = pData.diagnosticCommand.begin(); p_diagnosticCommand != pData.diagnosticCommand.end();) 
    {
        asn_wrapper::asncdiagnosticCommands *diagnosticCommand = new asn_wrapper::asncdiagnosticCommands();
        marbenData->diagnosticCommand.addElement(diagnosticCommand);

        if (verifyScope("ecuAddress", (int64_t)p_diagnosticCommand->ecuAddress.size(), (int64_t)1, (int64_t)256))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnosticCommand->ecuAddress = %s.", __FUNCTION__, p_diagnosticCommand->ecuAddress.c_str());
            diagnosticCommand->ecuAddress.copyOctetString(p_diagnosticCommand->ecuAddress.length(), (asnbyte*)(unsigned char*)(p_diagnosticCommand->ecuAddress.c_str()));
        }
        if (verifyScope("serviceId", (int64_t)p_diagnosticCommand->serviceId.size(), (int64_t)1, (int64_t)64))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnosticCommand->serviceId = %s.", __FUNCTION__, p_diagnosticCommand->serviceId.c_str());
            diagnosticCommand->serviceId.copyOctetString(p_diagnosticCommand->serviceId.length(), (asnbyte*)(unsigned char*)(p_diagnosticCommand->serviceId.c_str()));
        }
        if (verifyScope("input", (int64_t)p_diagnosticCommand->input.size(), (int64_t)1, (int64_t)65535))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnosticCommand->input = %s.", __FUNCTION__, p_diagnosticCommand->input.c_str());
            diagnosticCommand->input.copyOctetString(p_diagnosticCommand->input.length(), (asnbyte*)(unsigned char*)(p_diagnosticCommand->input.c_str()));
        }
        if (p_diagnosticCommand->compareType_presence)
        {
            diagnosticCommand->optional.setPresence(asn_wrapper::asn_compareType);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnosticCommand->compareType = %d.", __FUNCTION__, p_diagnosticCommand->compareType);
            diagnosticCommand->compareType = (int32_t)p_diagnosticCommand->compareType;
        }
        if (p_diagnosticCommand->compareValue_presence)
        {
            if (verifyScope("compareValue", (int64_t)p_diagnosticCommand->compareValue.size(), (int64_t)1, (int64_t)65535))
            {
                diagnosticCommand->optional.setPresence(asn_wrapper::asn_compareValue);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnosticCommand->compareValue = %s.", __FUNCTION__, p_diagnosticCommand->compareValue.c_str());
                diagnosticCommand->compareValue.copyOctetString(p_diagnosticCommand->compareValue.length(), (asnbyte*)(unsigned char*)(p_diagnosticCommand->compareValue.c_str()));
            }
        }
        if (verifyScope("delayUntilNextTriggerCommand", (int64_t)p_diagnosticCommand->delayUntilNextTriggerCommand, (int64_t)1, (int64_t)512))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnosticCommand->delayUntilNextTriggerCommand = %d.", __FUNCTION__, p_diagnosticCommand->delayUntilNextTriggerCommand);
            diagnosticCommand->delayUntilNextTriggerCommand = p_diagnosticCommand->delayUntilNextTriggerCommand;
        }
    
        ++p_diagnosticCommand;
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->diagnosticCommand.getCount() = %d.", __FUNCTION__, marbenData->diagnosticCommand.getCount());
    
    if (verifyScope("dataIntegrityCheck", (int64_t)pData.dataIntegrityCheck.size(), (int64_t)1, (int64_t)64))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.dataIntegrityCheck = %s.", __FUNCTION__, pData.dataIntegrityCheck.c_str());
        marbenData->dataIntegrityCheck.copyOctetString(pData.dataIntegrityCheck.length(), (asnbyte*)(unsigned char*)(pData.dataIntegrityCheck.c_str()));
    }
    if (pData.serviceParameters_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_MeasurementAssignment__serviceParameters);
        
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.serviceParameters.size() = %d.", __FUNCTION__, pData.serviceParameters.size());
        for (auto p_serviceParameter = pData.serviceParameters.begin(); p_serviceParameter != pData.serviceParameters.end();) 
        {
            asn_wrapper::asncMeasurementAssignment__serviceParameterss *serviceParameter = new asn_wrapper::asncMeasurementAssignment__serviceParameterss();
            marbenData->serviceParameters.addElement(serviceParameter);

            if (verifyScope("key", (int64_t)p_serviceParameter->key.size(), (int64_t)0, (int64_t)250))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter->key = %s.", __FUNCTION__, p_serviceParameter->key.c_str());
                serviceParameter->key.copyOctetString(p_serviceParameter->key.length(), (asnbyte*)(unsigned char*)(p_serviceParameter->key.c_str()));
            }
            if (p_serviceParameter->intVal_presence)
            {
                serviceParameter->optional.setPresence(asn_wrapper::asn_intVal);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter->intVal = %d.", __FUNCTION__, p_serviceParameter->intVal);
                serviceParameter->intVal = p_serviceParameter->intVal;
            }
            if (p_serviceParameter->stringVal_presence)
            {
                if (verifyScope("stringVal", (int64_t)p_serviceParameter->stringVal.size(), (int64_t)0, (int64_t)65535))
                {
                    serviceParameter->optional.setPresence(asn_wrapper::asn_ServiceParameter__stringVal);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter->stringVal = %s.", __FUNCTION__, p_serviceParameter->stringVal.c_str());
                    serviceParameter->stringVal.copyOctetString(p_serviceParameter->stringVal.length(), (asnbyte*)(unsigned char*)(p_serviceParameter->stringVal.c_str()));
                }
            }
            if (p_serviceParameter->boolVal_presence)
            {
                serviceParameter->optional.setPresence(asn_wrapper::asn_ServiceParameter__boolVal);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter->boolVal = %d.", __FUNCTION__, p_serviceParameter->boolVal);
                serviceParameter->boolVal = p_serviceParameter->boolVal;
            }
            if (p_serviceParameter->timestampVal_presence)
            {
                serviceParameter->optional.setPresence(asn_wrapper::asn_ServiceParameter__timestampVal);
                if (serviceParameter->timestampVal == nullptr )
                {
                    serviceParameter->timestampVal = new asn_wrapper::TimeStamp();
                }
                TimeStamp_Encode(p_serviceParameter->timestampVal, serviceParameter->timestampVal);
            }
            if (p_serviceParameter->dataVal_presence)
            {
                if (verifyScope("dataVal", (int64_t)p_serviceParameter->dataVal.size(), (int64_t)1, (int64_t)65535))
                {
                    serviceParameter->optional.setPresence(asn_wrapper::asn_ServiceParameter__dataVal);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter->dataVal = %s.", __FUNCTION__, p_serviceParameter->dataVal.c_str());
                    int dataVal_length = 0;
                    unsigned char* dataVal_ptr = new unsigned char[p_serviceParameter->dataVal.length()];
                    StringToOctet(p_serviceParameter->dataVal,dataVal_ptr,dataVal_length);
                    serviceParameter->dataVal.copyOctetString(dataVal_length,(asnbytep)dataVal_ptr);
                    delete[] dataVal_ptr;
                }
            }
        
            ++p_serviceParameter;
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->serviceParameters.getCount() = %d.", __FUNCTION__, marbenData->serviceParameters.getCount());
        
    }

    return true;
}

bool VdsMarbenAdaptGen::MeasurementAssignment_Decode(const std::string &path, std::shared_ptr<MeasurementAssignment_Model> &pData, asn_wrapper::MeasurementAssignment* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::MeasurementAssignment* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::MeasurementAssignment*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->maId = marbenData->maId;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->maId = %d.", __FUNCTION__, pData->maId);
    pData->maVersion = marbenData->maVersion;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->maVersion = %d.", __FUNCTION__, pData->maVersion);
    pData->vin = std::string((const char*)marbenData->vin.value, marbenData->vin.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->vin = %s.", __FUNCTION__, pData->vin.c_str());
    pData->maFormatVersion = marbenData->maFormatVersion;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->maFormatVersion = %d.", __FUNCTION__, pData->maFormatVersion);
    pData->maExecutionPriority = marbenData->maExecutionPriority;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->maExecutionPriority = %d.", __FUNCTION__, pData->maExecutionPriority);
    if (marbenData->telematicsParameters != nullptr )
    {
        std::shared_ptr<TelematicsParameters_Model> p_telematicsParameters = std::make_shared<TelematicsParameters_Model>();
        result = TelematicsParameters_Decode( "" , p_telematicsParameters , marbenData->telematicsParameters);
        if (result)
        {
            pData->telematicsParameters = (*p_telematicsParameters);
        }
    }

    pData->usageModesAllowed = marbenData->usageModesAllowed;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->usageModesAllowed = %d.", __FUNCTION__, pData->usageModesAllowed);
    pData->startCondition = std::string((const char*)marbenData->startCondition.value, marbenData->startCondition.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->startCondition = %s.", __FUNCTION__, pData->startCondition.c_str());
    if (marbenData->stopCondition != nullptr )
    {
        std::shared_ptr<StopCondition_Model> p_stopCondition = std::make_shared<StopCondition_Model>();
        result = StopCondition_Decode( "" , p_stopCondition , marbenData->stopCondition);
        if (result)
        {
            pData->stopCondition = (*p_stopCondition);
        }
    }

    pData->retentiondate = std::string((const char*)marbenData->retentiondate.value, marbenData->retentiondate.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->retentiondate = %s.", __FUNCTION__, pData->retentiondate.c_str());
    if (marbenData->authorizationStatus != nullptr )
    {
        std::shared_ptr<AuthorizationStatus_Model> p_authorizationStatus = std::make_shared<AuthorizationStatus_Model>();
        result = AuthorizationStatus_Decode( "" , p_authorizationStatus , marbenData->authorizationStatus);
        if (result)
        {
            pData->authorizationStatus = (*p_authorizationStatus);
        }
    }

    if (marbenData->executionTrigger != nullptr )
    {
        std::shared_ptr<ExecutionTrigger_Model> p_executionTrigger = std::make_shared<ExecutionTrigger_Model>();
        result = ExecutionTrigger_Decode( "" , p_executionTrigger , marbenData->executionTrigger);
        if (result)
        {
            pData->executionTrigger = (*p_executionTrigger);
        }
    }

    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->ecusAndPartNumbers.getCount() = %d.", __FUNCTION__, marbenData->ecusAndPartNumbers.getCount());
    unsigned int ecusAndPartNumberCount = marbenData->ecusAndPartNumbers.getCount();
    asn_wrapper::asncecusAndPartNumberss* ecusAndPartNumber = (asn_wrapper::asncecusAndPartNumberss*)(marbenData->ecusAndPartNumbers.getFirstElement());
    for (unsigned int i = 0; (i < ecusAndPartNumberCount || ecusAndPartNumber); i++) 
    {
        EcusAndPartNumber_Model p_ecusAndPartNumber;
        p_ecusAndPartNumber.ecuAddress = std::string((const char*)ecusAndPartNumber->ecuAddress.value, ecusAndPartNumber->ecuAddress.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecusAndPartNumber.ecuAddress = %s.", __FUNCTION__, p_ecusAndPartNumber.ecuAddress.c_str());
        p_ecusAndPartNumber.diagnosticPartNumber = std::string((const char*)ecusAndPartNumber->diagnosticPartNumber.value, ecusAndPartNumber->diagnosticPartNumber.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecusAndPartNumber.diagnosticPartNumber = %s.", __FUNCTION__, p_ecusAndPartNumber.diagnosticPartNumber.c_str());
        pData->ecusAndPartNumbers.push_back(p_ecusAndPartNumber);
        ecusAndPartNumber = (asn_wrapper::asncecusAndPartNumberss*)(ecusAndPartNumber->getNextElement());
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->ecusAndPartNumbers.size() = %d.", __FUNCTION__, pData->ecusAndPartNumbers.size());
    
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->diagnosticCommand.getCount() = %d.", __FUNCTION__, marbenData->diagnosticCommand.getCount());
    unsigned int diagnosticCommandCount = marbenData->diagnosticCommand.getCount();
    asn_wrapper::asncdiagnosticCommands* diagnosticCommand = (asn_wrapper::asncdiagnosticCommands*)(marbenData->diagnosticCommand.getFirstElement());
    for (unsigned int i = 0; (i < diagnosticCommandCount || diagnosticCommand); i++) 
    {
        DiagnosticCommand_Model p_diagnosticCommand;
        p_diagnosticCommand.ecuAddress = std::string((const char*)diagnosticCommand->ecuAddress.value, diagnosticCommand->ecuAddress.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnosticCommand.ecuAddress = %s.", __FUNCTION__, p_diagnosticCommand.ecuAddress.c_str());
        p_diagnosticCommand.serviceId = std::string((const char*)diagnosticCommand->serviceId.value, diagnosticCommand->serviceId.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnosticCommand.serviceId = %s.", __FUNCTION__, p_diagnosticCommand.serviceId.c_str());
        p_diagnosticCommand.input = std::string((const char*)diagnosticCommand->input.value, diagnosticCommand->input.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnosticCommand.input = %s.", __FUNCTION__, p_diagnosticCommand.input.c_str());
        if (asnTRUE == diagnosticCommand->optional.getPresence(asn_wrapper::asn_compareType))
        {
            p_diagnosticCommand.compareType_presence = true;
            p_diagnosticCommand.compareType = (Vds_CompareType)diagnosticCommand->compareType;
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnosticCommand.compareType = %d.", __FUNCTION__, p_diagnosticCommand.compareType);
        }
        if (asnTRUE == diagnosticCommand->optional.getPresence(asn_wrapper::asn_compareValue))
        {
            p_diagnosticCommand.compareValue_presence = true;
            p_diagnosticCommand.compareValue = std::string((const char*)diagnosticCommand->compareValue.value, diagnosticCommand->compareValue.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnosticCommand.compareValue = %s.", __FUNCTION__, p_diagnosticCommand.compareValue.c_str());
        }
        p_diagnosticCommand.delayUntilNextTriggerCommand = diagnosticCommand->delayUntilNextTriggerCommand;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnosticCommand.delayUntilNextTriggerCommand = %d.", __FUNCTION__, p_diagnosticCommand.delayUntilNextTriggerCommand);
        pData->diagnosticCommand.push_back(p_diagnosticCommand);
        diagnosticCommand = (asn_wrapper::asncdiagnosticCommands*)(diagnosticCommand->getNextElement());
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->diagnosticCommand.size() = %d.", __FUNCTION__, pData->diagnosticCommand.size());
    
    pData->dataIntegrityCheck = std::string((const char*)marbenData->dataIntegrityCheck.value, marbenData->dataIntegrityCheck.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->dataIntegrityCheck = %s.", __FUNCTION__, pData->dataIntegrityCheck.c_str());
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_MeasurementAssignment__serviceParameters))
    {
        pData->serviceParameters_presence = true;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->serviceParameters.getCount() = %d.", __FUNCTION__, marbenData->serviceParameters.getCount());
        unsigned int serviceParameterCount = marbenData->serviceParameters.getCount();
        asn_wrapper::asncMeasurementAssignment__serviceParameterss* serviceParameter = (asn_wrapper::asncMeasurementAssignment__serviceParameterss*)(marbenData->serviceParameters.getFirstElement());
        for (unsigned int i = 0; (i < serviceParameterCount || serviceParameter); i++) 
        {
            ServiceParameter_Model p_serviceParameter;
            p_serviceParameter.key = std::string((const char*)serviceParameter->key.value, serviceParameter->key.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter.key = %s.", __FUNCTION__, p_serviceParameter.key.c_str());
            if (asnTRUE == serviceParameter->optional.getPresence(asn_wrapper::asn_intVal))
            {
                p_serviceParameter.intVal_presence = true;
                p_serviceParameter.intVal = serviceParameter->intVal;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter.intVal = %d.", __FUNCTION__, p_serviceParameter.intVal);
            }
            if (asnTRUE == serviceParameter->optional.getPresence(asn_wrapper::asn_ServiceParameter__stringVal))
            {
                p_serviceParameter.stringVal_presence = true;
                p_serviceParameter.stringVal = std::string((const char*)serviceParameter->stringVal.value, serviceParameter->stringVal.length);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter.stringVal = %s.", __FUNCTION__, p_serviceParameter.stringVal.c_str());
            }
            if (asnTRUE == serviceParameter->optional.getPresence(asn_wrapper::asn_ServiceParameter__boolVal))
            {
                p_serviceParameter.boolVal_presence = true;
                p_serviceParameter.boolVal = serviceParameter->boolVal;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter.boolVal = %d.", __FUNCTION__, p_serviceParameter.boolVal);
            }
            if (asnTRUE == serviceParameter->optional.getPresence(asn_wrapper::asn_ServiceParameter__timestampVal))
            {
                p_serviceParameter.timestampVal_presence = true;
                if (serviceParameter->timestampVal != nullptr )
                {
                    std::shared_ptr<TimeStamp_Model> p_timestampVal = std::make_shared<TimeStamp_Model>();
                    result = TimeStamp_Decode( "" , p_timestampVal , serviceParameter->timestampVal);
                    if (result)
                    {
                        p_serviceParameter.timestampVal = (*p_timestampVal);
                    }
                }

            }
            if (asnTRUE == serviceParameter->optional.getPresence(asn_wrapper::asn_ServiceParameter__dataVal))
            {
                p_serviceParameter.dataVal_presence = true;
                asnbyte* dataVal_ptr;
                asnMAXUINT dataVal_length;
                serviceParameter->dataVal.getOctetString(&dataVal_length,&dataVal_ptr);
                char* dataVal_array = new char[dataVal_length*3-1];
                OctetToString(dataVal_ptr,dataVal_array,dataVal_length);
                p_serviceParameter.dataVal = dataVal_array;
                delete[] dataVal_array;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter.dataVal = %s.", __FUNCTION__, p_serviceParameter.dataVal.c_str());
            }
            pData->serviceParameters.push_back(p_serviceParameter);
            serviceParameter = (asn_wrapper::asncMeasurementAssignment__serviceParameterss*)(serviceParameter->getNextElement());
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->serviceParameters.size() = %d.", __FUNCTION__, pData->serviceParameters.size());
        
    }

    return true;
}

bool VdsMarbenAdaptGen::EcusAndPartNumber_Encode(const EcusAndPartNumber_Model &pData, asn_wrapper::EcusAndPartNumber* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::EcusAndPartNumber* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::EcusAndPartNumber*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("ecuAddress", (int64_t)pData.ecuAddress.size(), (int64_t)1, (int64_t)256))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.ecuAddress = %s.", __FUNCTION__, pData.ecuAddress.c_str());
        marbenData->ecuAddress.copyOctetString(pData.ecuAddress.length(), (asnbyte*)(unsigned char*)(pData.ecuAddress.c_str()));
    }
    if (verifyScope("diagnosticPartNumber", (int64_t)pData.diagnosticPartNumber.size(), (int64_t)1, (int64_t)64))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.diagnosticPartNumber = %s.", __FUNCTION__, pData.diagnosticPartNumber.c_str());
        marbenData->diagnosticPartNumber.copyOctetString(pData.diagnosticPartNumber.length(), (asnbyte*)(unsigned char*)(pData.diagnosticPartNumber.c_str()));
    }

    return true;
}

bool VdsMarbenAdaptGen::EcusAndPartNumber_Decode(const std::string &path, std::shared_ptr<EcusAndPartNumber_Model> &pData, asn_wrapper::EcusAndPartNumber* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::EcusAndPartNumber* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::EcusAndPartNumber*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->ecuAddress = std::string((const char*)marbenData->ecuAddress.value, marbenData->ecuAddress.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->ecuAddress = %s.", __FUNCTION__, pData->ecuAddress.c_str());
    pData->diagnosticPartNumber = std::string((const char*)marbenData->diagnosticPartNumber.value, marbenData->diagnosticPartNumber.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->diagnosticPartNumber = %s.", __FUNCTION__, pData->diagnosticPartNumber.c_str());

    return true;
}

bool VdsMarbenAdaptGen::ExecutionTrigger_Encode(const ExecutionTrigger_Model &pData, asn_wrapper::ExecutionTrigger* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::ExecutionTrigger* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::ExecutionTrigger*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.push = %d.", __FUNCTION__, pData.push);
    marbenData->push = pData.push;
    if (pData.uds_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_uds);
        if (marbenData->uds == nullptr )
        {
            marbenData->uds = new asn_wrapper::UDS();
        }
        UDS_Encode(pData.uds, marbenData->uds);
    }
    if (pData.time_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_ExecutionTrigger__time);
        if (marbenData->time == nullptr )
        {
            marbenData->time = new asn_wrapper::Trigger();
        }
        Trigger_Encode(pData.time, marbenData->time);
    }
    if (pData.drivingCycle_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_drivingCycle);
        if (marbenData->drivingCycle == nullptr )
        {
            marbenData->drivingCycle = new asn_wrapper::Trigger();
        }
        Trigger_Encode(pData.drivingCycle, marbenData->drivingCycle);
    }

    return true;
}

bool VdsMarbenAdaptGen::ExecutionTrigger_Decode(const std::string &path, std::shared_ptr<ExecutionTrigger_Model> &pData, asn_wrapper::ExecutionTrigger* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::ExecutionTrigger* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::ExecutionTrigger*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->push = marbenData->push;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->push = %d.", __FUNCTION__, pData->push);
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_uds))
    {
        pData->uds_presence = true;
        if (marbenData->uds != nullptr )
        {
            std::shared_ptr<UDS_Model> p_uds = std::make_shared<UDS_Model>();
            result = UDS_Decode( "" , p_uds , marbenData->uds);
            if (result)
            {
                pData->uds = (*p_uds);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_ExecutionTrigger__time))
    {
        pData->time_presence = true;
        if (marbenData->time != nullptr )
        {
            std::shared_ptr<Trigger_Model> p_time = std::make_shared<Trigger_Model>();
            result = Trigger_Decode( "" , p_time , marbenData->time);
            if (result)
            {
                pData->time = (*p_time);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_drivingCycle))
    {
        pData->drivingCycle_presence = true;
        if (marbenData->drivingCycle != nullptr )
        {
            std::shared_ptr<Trigger_Model> p_drivingCycle = std::make_shared<Trigger_Model>();
            result = Trigger_Decode( "" , p_drivingCycle , marbenData->drivingCycle);
            if (result)
            {
                pData->drivingCycle = (*p_drivingCycle);
            }
        }

    }

    return true;
}

bool VdsMarbenAdaptGen::Trigger_Encode(const Trigger_Model &pData, asn_wrapper::Trigger* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::Trigger* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::Trigger*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.trigger = %d.", __FUNCTION__, pData.trigger);
    marbenData->trigger = (int32_t)pData.trigger;
    if (verifyScope("interval", (int64_t)pData.interval, (int64_t)1, (int64_t)4294967295))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.interval = %d.", __FUNCTION__, pData.interval);
        marbenData->interval = pData.interval;
    }

    return true;
}

bool VdsMarbenAdaptGen::Trigger_Decode(const std::string &path, std::shared_ptr<Trigger_Model> &pData, asn_wrapper::Trigger* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::Trigger* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::Trigger*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->trigger = (Vds_TriggerType)marbenData->trigger;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->trigger = %d.", __FUNCTION__, pData->trigger);
    pData->interval = marbenData->interval;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->interval = %d.", __FUNCTION__, pData->interval);

    return true;
}

bool VdsMarbenAdaptGen::UDS_Encode(const UDS_Model &pData, asn_wrapper::UDS* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::UDS* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::UDS*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.Vds_operator = %d.", __FUNCTION__, pData.Vds_operator);
    marbenData->a__operator = (int32_t)pData.Vds_operator;
    if (verifyScope("delayForNextTriggerCheck", (int64_t)pData.delayForNextTriggerCheck, (int64_t)1, (int64_t)4294967295))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.delayForNextTriggerCheck = %d.", __FUNCTION__, pData.delayForNextTriggerCheck);
        marbenData->delayForNextTriggerCheck = pData.delayForNextTriggerCheck;
    }
    if (verifyScope("delayAfterCollection", (int64_t)pData.delayAfterCollection, (int64_t)1, (int64_t)4294967295))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.delayAfterCollection = %d.", __FUNCTION__, pData.delayAfterCollection);
        marbenData->delayAfterCollection = pData.delayAfterCollection;
    }
    
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.diagnosticCommands.size() = %d.", __FUNCTION__, pData.diagnosticCommands.size());
    for (auto p_diagnosticCommand = pData.diagnosticCommands.begin(); p_diagnosticCommand != pData.diagnosticCommands.end();) 
    {
        asn_wrapper::asncdiagnosticCommandss *diagnosticCommand = new asn_wrapper::asncdiagnosticCommandss();
        marbenData->diagnosticCommands.addElement(diagnosticCommand);

        if (verifyScope("ecuAddress", (int64_t)p_diagnosticCommand->ecuAddress.size(), (int64_t)1, (int64_t)256))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnosticCommand->ecuAddress = %s.", __FUNCTION__, p_diagnosticCommand->ecuAddress.c_str());
            diagnosticCommand->ecuAddress.copyOctetString(p_diagnosticCommand->ecuAddress.length(), (asnbyte*)(unsigned char*)(p_diagnosticCommand->ecuAddress.c_str()));
        }
        if (verifyScope("serviceId", (int64_t)p_diagnosticCommand->serviceId.size(), (int64_t)1, (int64_t)64))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnosticCommand->serviceId = %s.", __FUNCTION__, p_diagnosticCommand->serviceId.c_str());
            diagnosticCommand->serviceId.copyOctetString(p_diagnosticCommand->serviceId.length(), (asnbyte*)(unsigned char*)(p_diagnosticCommand->serviceId.c_str()));
        }
        if (verifyScope("input", (int64_t)p_diagnosticCommand->input.size(), (int64_t)1, (int64_t)65535))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnosticCommand->input = %s.", __FUNCTION__, p_diagnosticCommand->input.c_str());
            diagnosticCommand->input.copyOctetString(p_diagnosticCommand->input.length(), (asnbyte*)(unsigned char*)(p_diagnosticCommand->input.c_str()));
        }
        if (p_diagnosticCommand->compareType_presence)
        {
            diagnosticCommand->optional.setPresence(asn_wrapper::asn_compareType);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnosticCommand->compareType = %d.", __FUNCTION__, p_diagnosticCommand->compareType);
            diagnosticCommand->compareType = (int32_t)p_diagnosticCommand->compareType;
        }
        if (p_diagnosticCommand->compareValue_presence)
        {
            if (verifyScope("compareValue", (int64_t)p_diagnosticCommand->compareValue.size(), (int64_t)1, (int64_t)65535))
            {
                diagnosticCommand->optional.setPresence(asn_wrapper::asn_compareValue);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnosticCommand->compareValue = %s.", __FUNCTION__, p_diagnosticCommand->compareValue.c_str());
                diagnosticCommand->compareValue.copyOctetString(p_diagnosticCommand->compareValue.length(), (asnbyte*)(unsigned char*)(p_diagnosticCommand->compareValue.c_str()));
            }
        }
        if (verifyScope("delayUntilNextTriggerCommand", (int64_t)p_diagnosticCommand->delayUntilNextTriggerCommand, (int64_t)1, (int64_t)512))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnosticCommand->delayUntilNextTriggerCommand = %d.", __FUNCTION__, p_diagnosticCommand->delayUntilNextTriggerCommand);
            diagnosticCommand->delayUntilNextTriggerCommand = p_diagnosticCommand->delayUntilNextTriggerCommand;
        }
    
        ++p_diagnosticCommand;
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->diagnosticCommands.getCount() = %d.", __FUNCTION__, marbenData->diagnosticCommands.getCount());
    

    return true;
}

bool VdsMarbenAdaptGen::UDS_Decode(const std::string &path, std::shared_ptr<UDS_Model> &pData, asn_wrapper::UDS* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::UDS* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::UDS*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->Vds_operator = (Vds_Operator)marbenData->a__operator;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->Vds_operator = %d.", __FUNCTION__, pData->Vds_operator);
    pData->delayForNextTriggerCheck = marbenData->delayForNextTriggerCheck;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->delayForNextTriggerCheck = %d.", __FUNCTION__, pData->delayForNextTriggerCheck);
    pData->delayAfterCollection = marbenData->delayAfterCollection;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->delayAfterCollection = %d.", __FUNCTION__, pData->delayAfterCollection);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->diagnosticCommands.getCount() = %d.", __FUNCTION__, marbenData->diagnosticCommands.getCount());
    unsigned int diagnosticCommandCount = marbenData->diagnosticCommands.getCount();
    asn_wrapper::asncdiagnosticCommandss* diagnosticCommand = (asn_wrapper::asncdiagnosticCommandss*)(marbenData->diagnosticCommands.getFirstElement());
    for (unsigned int i = 0; (i < diagnosticCommandCount || diagnosticCommand); i++) 
    {
        DiagnosticCommand_Model p_diagnosticCommand;
        p_diagnosticCommand.ecuAddress = std::string((const char*)diagnosticCommand->ecuAddress.value, diagnosticCommand->ecuAddress.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnosticCommand.ecuAddress = %s.", __FUNCTION__, p_diagnosticCommand.ecuAddress.c_str());
        p_diagnosticCommand.serviceId = std::string((const char*)diagnosticCommand->serviceId.value, diagnosticCommand->serviceId.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnosticCommand.serviceId = %s.", __FUNCTION__, p_diagnosticCommand.serviceId.c_str());
        p_diagnosticCommand.input = std::string((const char*)diagnosticCommand->input.value, diagnosticCommand->input.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnosticCommand.input = %s.", __FUNCTION__, p_diagnosticCommand.input.c_str());
        if (asnTRUE == diagnosticCommand->optional.getPresence(asn_wrapper::asn_compareType))
        {
            p_diagnosticCommand.compareType_presence = true;
            p_diagnosticCommand.compareType = (Vds_CompareType)diagnosticCommand->compareType;
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnosticCommand.compareType = %d.", __FUNCTION__, p_diagnosticCommand.compareType);
        }
        if (asnTRUE == diagnosticCommand->optional.getPresence(asn_wrapper::asn_compareValue))
        {
            p_diagnosticCommand.compareValue_presence = true;
            p_diagnosticCommand.compareValue = std::string((const char*)diagnosticCommand->compareValue.value, diagnosticCommand->compareValue.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnosticCommand.compareValue = %s.", __FUNCTION__, p_diagnosticCommand.compareValue.c_str());
        }
        p_diagnosticCommand.delayUntilNextTriggerCommand = diagnosticCommand->delayUntilNextTriggerCommand;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnosticCommand.delayUntilNextTriggerCommand = %d.", __FUNCTION__, p_diagnosticCommand.delayUntilNextTriggerCommand);
        pData->diagnosticCommands.push_back(p_diagnosticCommand);
        diagnosticCommand = (asn_wrapper::asncdiagnosticCommandss*)(diagnosticCommand->getNextElement());
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->diagnosticCommands.size() = %d.", __FUNCTION__, pData->diagnosticCommands.size());
    

    return true;
}

bool VdsMarbenAdaptGen::DiagnosticCommand_Encode(const DiagnosticCommand_Model &pData, asn_wrapper::DiagnosticCommand* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::DiagnosticCommand* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::DiagnosticCommand*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("ecuAddress", (int64_t)pData.ecuAddress.size(), (int64_t)1, (int64_t)256))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.ecuAddress = %s.", __FUNCTION__, pData.ecuAddress.c_str());
        marbenData->ecuAddress.copyOctetString(pData.ecuAddress.length(), (asnbyte*)(unsigned char*)(pData.ecuAddress.c_str()));
    }
    if (verifyScope("serviceId", (int64_t)pData.serviceId.size(), (int64_t)1, (int64_t)64))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.serviceId = %s.", __FUNCTION__, pData.serviceId.c_str());
        marbenData->serviceId.copyOctetString(pData.serviceId.length(), (asnbyte*)(unsigned char*)(pData.serviceId.c_str()));
    }
    if (verifyScope("input", (int64_t)pData.input.size(), (int64_t)1, (int64_t)65535))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.input = %s.", __FUNCTION__, pData.input.c_str());
        marbenData->input.copyOctetString(pData.input.length(), (asnbyte*)(unsigned char*)(pData.input.c_str()));
    }
    if (pData.compareType_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_compareType);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.compareType = %d.", __FUNCTION__, pData.compareType);
        marbenData->compareType = (int32_t)pData.compareType;
    }
    if (pData.compareValue_presence)
    {
        if (verifyScope("compareValue", (int64_t)pData.compareValue.size(), (int64_t)1, (int64_t)65535))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_compareValue);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.compareValue = %s.", __FUNCTION__, pData.compareValue.c_str());
            marbenData->compareValue.copyOctetString(pData.compareValue.length(), (asnbyte*)(unsigned char*)(pData.compareValue.c_str()));
        }
    }
    if (verifyScope("delayUntilNextTriggerCommand", (int64_t)pData.delayUntilNextTriggerCommand, (int64_t)1, (int64_t)512))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.delayUntilNextTriggerCommand = %d.", __FUNCTION__, pData.delayUntilNextTriggerCommand);
        marbenData->delayUntilNextTriggerCommand = pData.delayUntilNextTriggerCommand;
    }

    return true;
}

bool VdsMarbenAdaptGen::DiagnosticCommand_Decode(const std::string &path, std::shared_ptr<DiagnosticCommand_Model> &pData, asn_wrapper::DiagnosticCommand* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::DiagnosticCommand* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::DiagnosticCommand*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->ecuAddress = std::string((const char*)marbenData->ecuAddress.value, marbenData->ecuAddress.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->ecuAddress = %s.", __FUNCTION__, pData->ecuAddress.c_str());
    pData->serviceId = std::string((const char*)marbenData->serviceId.value, marbenData->serviceId.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->serviceId = %s.", __FUNCTION__, pData->serviceId.c_str());
    pData->input = std::string((const char*)marbenData->input.value, marbenData->input.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->input = %s.", __FUNCTION__, pData->input.c_str());
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_compareType))
    {
        pData->compareType_presence = true;
        pData->compareType = (Vds_CompareType)marbenData->compareType;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->compareType = %d.", __FUNCTION__, pData->compareType);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_compareValue))
    {
        pData->compareValue_presence = true;
        pData->compareValue = std::string((const char*)marbenData->compareValue.value, marbenData->compareValue.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->compareValue = %s.", __FUNCTION__, pData->compareValue.c_str());
    }
    pData->delayUntilNextTriggerCommand = marbenData->delayUntilNextTriggerCommand;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->delayUntilNextTriggerCommand = %d.", __FUNCTION__, pData->delayUntilNextTriggerCommand);

    return true;
}

bool VdsMarbenAdaptGen::TelematicsParameters_Encode(const TelematicsParameters_Model &pData, asn_wrapper::TelematicsParameters* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::TelematicsParameters* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::TelematicsParameters*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("timeToLive", (int64_t)pData.timeToLive, (int64_t)1, (int64_t)4294967295))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.timeToLive = %d.", __FUNCTION__, pData.timeToLive);
        marbenData->timeToLive = pData.timeToLive;
    }
    if (verifyScope("uploadPriority", (int64_t)pData.uploadPriority, (int64_t)1, (int64_t)255))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.uploadPriority = %d.", __FUNCTION__, pData.uploadPriority);
        marbenData->uploadPriority = pData.uploadPriority;
    }

    return true;
}

bool VdsMarbenAdaptGen::TelematicsParameters_Decode(const std::string &path, std::shared_ptr<TelematicsParameters_Model> &pData, asn_wrapper::TelematicsParameters* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::TelematicsParameters* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::TelematicsParameters*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->timeToLive = marbenData->timeToLive;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->timeToLive = %d.", __FUNCTION__, pData->timeToLive);
    pData->uploadPriority = marbenData->uploadPriority;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->uploadPriority = %d.", __FUNCTION__, pData->uploadPriority);

    return true;
}

bool VdsMarbenAdaptGen::StopCondition_Encode(const StopCondition_Model &pData, asn_wrapper::StopCondition* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::StopCondition* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::StopCondition*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (pData.period_presence)
    {
        if (verifyScope("period", (int64_t)pData.period, (int64_t)1, (int64_t)65535))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_period);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.period = %d.", __FUNCTION__, pData.period);
            marbenData->period = pData.period;
        }
    }
    if (pData.amount_presence)
    {
        if (verifyScope("amount", (int64_t)pData.amount, (int64_t)1, (int64_t)65535))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_amount);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.amount = %d.", __FUNCTION__, pData.amount);
            marbenData->amount = pData.amount;
        }
    }
    if (pData.time_presence)
    {
        if (verifyScope("time", (int64_t)pData.time.size(), (int64_t)1, (int64_t)32))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_StopCondition__time);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.time = %s.", __FUNCTION__, pData.time.c_str());
            marbenData->time.copyOctetString(pData.time.length(), (asnbyte*)(unsigned char*)(pData.time.c_str()));
        }
    }

    return true;
}

bool VdsMarbenAdaptGen::StopCondition_Decode(const std::string &path, std::shared_ptr<StopCondition_Model> &pData, asn_wrapper::StopCondition* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::StopCondition* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::StopCondition*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_period))
    {
        pData->period_presence = true;
        pData->period = marbenData->period;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->period = %d.", __FUNCTION__, pData->period);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_amount))
    {
        pData->amount_presence = true;
        pData->amount = marbenData->amount;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->amount = %d.", __FUNCTION__, pData->amount);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_StopCondition__time))
    {
        pData->time_presence = true;
        pData->time = std::string((const char*)marbenData->time.value, marbenData->time.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->time = %s.", __FUNCTION__, pData->time.c_str());
    }

    return true;
}

bool VdsMarbenAdaptGen::MeasurementDataPackage_Encode(const MeasurementDataPackage_Model &pData, asn_wrapper::MeasurementDataPackage* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::MeasurementDataPackage* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::MeasurementDataPackage*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (marbenData->telematicsParameters == nullptr )
    {
        marbenData->telematicsParameters = new asn_wrapper::TelematicsParameters();
    }
    TelematicsParameters_Encode(pData.telematicsParameters, marbenData->telematicsParameters);
    if (pData.serviceParameters_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_MeasurementDataPackage__serviceParameters);
        
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.serviceParameters.size() = %d.", __FUNCTION__, pData.serviceParameters.size());
        for (auto p_serviceParameter = pData.serviceParameters.begin(); p_serviceParameter != pData.serviceParameters.end();) 
        {
            asn_wrapper::asncMeasurementDataPackage__serviceParameterss *serviceParameter = new asn_wrapper::asncMeasurementDataPackage__serviceParameterss();
            marbenData->serviceParameters.addElement(serviceParameter);

            if (verifyScope("key", (int64_t)p_serviceParameter->key.size(), (int64_t)0, (int64_t)250))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter->key = %s.", __FUNCTION__, p_serviceParameter->key.c_str());
                serviceParameter->key.copyOctetString(p_serviceParameter->key.length(), (asnbyte*)(unsigned char*)(p_serviceParameter->key.c_str()));
            }
            if (p_serviceParameter->intVal_presence)
            {
                serviceParameter->optional.setPresence(asn_wrapper::asn_intVal);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter->intVal = %d.", __FUNCTION__, p_serviceParameter->intVal);
                serviceParameter->intVal = p_serviceParameter->intVal;
            }
            if (p_serviceParameter->stringVal_presence)
            {
                if (verifyScope("stringVal", (int64_t)p_serviceParameter->stringVal.size(), (int64_t)0, (int64_t)65535))
                {
                    serviceParameter->optional.setPresence(asn_wrapper::asn_ServiceParameter__stringVal);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter->stringVal = %s.", __FUNCTION__, p_serviceParameter->stringVal.c_str());
                    serviceParameter->stringVal.copyOctetString(p_serviceParameter->stringVal.length(), (asnbyte*)(unsigned char*)(p_serviceParameter->stringVal.c_str()));
                }
            }
            if (p_serviceParameter->boolVal_presence)
            {
                serviceParameter->optional.setPresence(asn_wrapper::asn_ServiceParameter__boolVal);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter->boolVal = %d.", __FUNCTION__, p_serviceParameter->boolVal);
                serviceParameter->boolVal = p_serviceParameter->boolVal;
            }
            if (p_serviceParameter->timestampVal_presence)
            {
                serviceParameter->optional.setPresence(asn_wrapper::asn_ServiceParameter__timestampVal);
                if (serviceParameter->timestampVal == nullptr )
                {
                    serviceParameter->timestampVal = new asn_wrapper::TimeStamp();
                }
                TimeStamp_Encode(p_serviceParameter->timestampVal, serviceParameter->timestampVal);
            }
            if (p_serviceParameter->dataVal_presence)
            {
                if (verifyScope("dataVal", (int64_t)p_serviceParameter->dataVal.size(), (int64_t)1, (int64_t)65535))
                {
                    serviceParameter->optional.setPresence(asn_wrapper::asn_ServiceParameter__dataVal);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter->dataVal = %s.", __FUNCTION__, p_serviceParameter->dataVal.c_str());
                    int dataVal_length = 0;
                    unsigned char* dataVal_ptr = new unsigned char[p_serviceParameter->dataVal.length()];
                    StringToOctet(p_serviceParameter->dataVal,dataVal_ptr,dataVal_length);
                    serviceParameter->dataVal.copyOctetString(dataVal_length,(asnbytep)dataVal_ptr);
                    delete[] dataVal_ptr;
                }
            }
        
            ++p_serviceParameter;
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->serviceParameters.getCount() = %d.", __FUNCTION__, marbenData->serviceParameters.getCount());
        
    }
    if (marbenData->mdp == nullptr )
    {
        marbenData->mdp = new asn_wrapper::Mdp();
    }
    Mdp_Encode(pData.mdp, marbenData->mdp);

    return true;
}

bool VdsMarbenAdaptGen::MeasurementDataPackage_Decode(const std::string &path, std::shared_ptr<MeasurementDataPackage_Model> &pData, asn_wrapper::MeasurementDataPackage* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::MeasurementDataPackage* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::MeasurementDataPackage*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (marbenData->telematicsParameters != nullptr )
    {
        std::shared_ptr<TelematicsParameters_Model> p_telematicsParameters = std::make_shared<TelematicsParameters_Model>();
        result = TelematicsParameters_Decode( "" , p_telematicsParameters , marbenData->telematicsParameters);
        if (result)
        {
            pData->telematicsParameters = (*p_telematicsParameters);
        }
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_MeasurementDataPackage__serviceParameters))
    {
        pData->serviceParameters_presence = true;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->serviceParameters.getCount() = %d.", __FUNCTION__, marbenData->serviceParameters.getCount());
        unsigned int serviceParameterCount = marbenData->serviceParameters.getCount();
        asn_wrapper::asncMeasurementDataPackage__serviceParameterss* serviceParameter = (asn_wrapper::asncMeasurementDataPackage__serviceParameterss*)(marbenData->serviceParameters.getFirstElement());
        for (unsigned int i = 0; (i < serviceParameterCount || serviceParameter); i++) 
        {
            ServiceParameter_Model p_serviceParameter;
            p_serviceParameter.key = std::string((const char*)serviceParameter->key.value, serviceParameter->key.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter.key = %s.", __FUNCTION__, p_serviceParameter.key.c_str());
            if (asnTRUE == serviceParameter->optional.getPresence(asn_wrapper::asn_intVal))
            {
                p_serviceParameter.intVal_presence = true;
                p_serviceParameter.intVal = serviceParameter->intVal;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter.intVal = %d.", __FUNCTION__, p_serviceParameter.intVal);
            }
            if (asnTRUE == serviceParameter->optional.getPresence(asn_wrapper::asn_ServiceParameter__stringVal))
            {
                p_serviceParameter.stringVal_presence = true;
                p_serviceParameter.stringVal = std::string((const char*)serviceParameter->stringVal.value, serviceParameter->stringVal.length);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter.stringVal = %s.", __FUNCTION__, p_serviceParameter.stringVal.c_str());
            }
            if (asnTRUE == serviceParameter->optional.getPresence(asn_wrapper::asn_ServiceParameter__boolVal))
            {
                p_serviceParameter.boolVal_presence = true;
                p_serviceParameter.boolVal = serviceParameter->boolVal;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter.boolVal = %d.", __FUNCTION__, p_serviceParameter.boolVal);
            }
            if (asnTRUE == serviceParameter->optional.getPresence(asn_wrapper::asn_ServiceParameter__timestampVal))
            {
                p_serviceParameter.timestampVal_presence = true;
                if (serviceParameter->timestampVal != nullptr )
                {
                    std::shared_ptr<TimeStamp_Model> p_timestampVal = std::make_shared<TimeStamp_Model>();
                    result = TimeStamp_Decode( "" , p_timestampVal , serviceParameter->timestampVal);
                    if (result)
                    {
                        p_serviceParameter.timestampVal = (*p_timestampVal);
                    }
                }

            }
            if (asnTRUE == serviceParameter->optional.getPresence(asn_wrapper::asn_ServiceParameter__dataVal))
            {
                p_serviceParameter.dataVal_presence = true;
                asnbyte* dataVal_ptr;
                asnMAXUINT dataVal_length;
                serviceParameter->dataVal.getOctetString(&dataVal_length,&dataVal_ptr);
                char* dataVal_array = new char[dataVal_length*3-1];
                OctetToString(dataVal_ptr,dataVal_array,dataVal_length);
                p_serviceParameter.dataVal = dataVal_array;
                delete[] dataVal_array;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter.dataVal = %s.", __FUNCTION__, p_serviceParameter.dataVal.c_str());
            }
            pData->serviceParameters.push_back(p_serviceParameter);
            serviceParameter = (asn_wrapper::asncMeasurementDataPackage__serviceParameterss*)(serviceParameter->getNextElement());
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->serviceParameters.size() = %d.", __FUNCTION__, pData->serviceParameters.size());
        
    }
    if (marbenData->mdp != nullptr )
    {
        std::shared_ptr<Mdp_Model> p_mdp = std::make_shared<Mdp_Model>();
        result = Mdp_Decode( "" , p_mdp , marbenData->mdp);
        if (result)
        {
            pData->mdp = (*p_mdp);
        }
    }


    return true;
}

bool VdsMarbenAdaptGen::Mdp_Encode(const Mdp_Model &pData, asn_wrapper::Mdp* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::Mdp* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::Mdp*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("mdpFormatVersion", (int64_t)pData.mdpFormatVersion, (int64_t)1, (int64_t)256))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.mdpFormatVersion = %d.", __FUNCTION__, pData.mdpFormatVersion);
        marbenData->mdpFormatVersion = pData.mdpFormatVersion;
    }
    if (verifyScope("vin", (int64_t)pData.vin.size(), (int64_t)1, (int64_t)128))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.vin = %s.", __FUNCTION__, pData.vin.c_str());
        marbenData->vin.copyOctetString(pData.vin.length(), (asnbyte*)(unsigned char*)(pData.vin.c_str()));
    }
    if (marbenData->ma == nullptr )
    {
        marbenData->ma = new asn_wrapper::Ma();
    }
    Ma_Encode(pData.ma, marbenData->ma);
    if (verifyScope("sequenceNumber", (int64_t)pData.sequenceNumber, (int64_t)1, (int64_t)4294967295))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.sequenceNumber = %d.", __FUNCTION__, pData.sequenceNumber);
        marbenData->sequenceNumber = pData.sequenceNumber;
    }
    if (verifyScope("timestampReadOutStart", (int64_t)pData.timestampReadOutStart.size(), (int64_t)1, (int64_t)32))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.timestampReadOutStart = %s.", __FUNCTION__, pData.timestampReadOutStart.c_str());
        marbenData->timestampReadOutStart.copyOctetString(pData.timestampReadOutStart.length(), (asnbyte*)(unsigned char*)(pData.timestampReadOutStart.c_str()));
    }
    if (pData.udsTriggerId_presence)
    {
        if (verifyScope("udsTriggerId", (int64_t)pData.udsTriggerId.size(), (int64_t)1, (int64_t)64))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_udsTriggerId);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.udsTriggerId = %s.", __FUNCTION__, pData.udsTriggerId.c_str());
            marbenData->udsTriggerId.copyOctetString(pData.udsTriggerId.length(), (asnbyte*)(unsigned char*)(pData.udsTriggerId.c_str()));
        }
    }
    if (verifyScope("diagnosticResponse", (int64_t)pData.diagnosticResponse.size(), (int64_t)1, (int64_t)65535))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.diagnosticResponse = %s.", __FUNCTION__, pData.diagnosticResponse.c_str());
        marbenData->diagnosticResponse.copyOctetString(pData.diagnosticResponse.length(), (asnbyte*)(unsigned char*)(pData.diagnosticResponse.c_str()));
    }

    return true;
}

bool VdsMarbenAdaptGen::Mdp_Decode(const std::string &path, std::shared_ptr<Mdp_Model> &pData, asn_wrapper::Mdp* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::Mdp* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::Mdp*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->mdpFormatVersion = marbenData->mdpFormatVersion;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->mdpFormatVersion = %d.", __FUNCTION__, pData->mdpFormatVersion);
    pData->vin = std::string((const char*)marbenData->vin.value, marbenData->vin.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->vin = %s.", __FUNCTION__, pData->vin.c_str());
    if (marbenData->ma != nullptr )
    {
        std::shared_ptr<Ma_Model> p_ma = std::make_shared<Ma_Model>();
        result = Ma_Decode( "" , p_ma , marbenData->ma);
        if (result)
        {
            pData->ma = (*p_ma);
        }
    }

    pData->sequenceNumber = marbenData->sequenceNumber;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->sequenceNumber = %d.", __FUNCTION__, pData->sequenceNumber);
    pData->timestampReadOutStart = std::string((const char*)marbenData->timestampReadOutStart.value, marbenData->timestampReadOutStart.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->timestampReadOutStart = %s.", __FUNCTION__, pData->timestampReadOutStart.c_str());
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_udsTriggerId))
    {
        pData->udsTriggerId_presence = true;
        pData->udsTriggerId = std::string((const char*)marbenData->udsTriggerId.value, marbenData->udsTriggerId.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->udsTriggerId = %s.", __FUNCTION__, pData->udsTriggerId.c_str());
    }
    pData->diagnosticResponse = std::string((const char*)marbenData->diagnosticResponse.value, marbenData->diagnosticResponse.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->diagnosticResponse = %s.", __FUNCTION__, pData->diagnosticResponse.c_str());

    return true;
}

bool VdsMarbenAdaptGen::RvdcExceptionHandling_Encode(const RvdcExceptionHandling_Model &pData, asn_wrapper::RvdcExceptionHandling* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::RvdcExceptionHandling* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::RvdcExceptionHandling*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("exceptionName", (int64_t)pData.exceptionName.size(), (int64_t)1, (int64_t)128))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.exceptionName = %s.", __FUNCTION__, pData.exceptionName.c_str());
        marbenData->exceptionName.copyOctetString(pData.exceptionName.length(), (asnbyte*)(unsigned char*)(pData.exceptionName.c_str()));
    }
    if (verifyScope("description", (int64_t)pData.description.size(), (int64_t)1, (int64_t)512))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.description = %s.", __FUNCTION__, pData.description.c_str());
        marbenData->description.copyOctetString(pData.description.length(), (asnbyte*)(unsigned char*)(pData.description.c_str()));
    }
    if (verifyScope("publisher", (int64_t)pData.publisher.size(), (int64_t)1, (int64_t)128))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.publisher = %s.", __FUNCTION__, pData.publisher.c_str());
        marbenData->publisher.copyOctetString(pData.publisher.length(), (asnbyte*)(unsigned char*)(pData.publisher.c_str()));
    }
    if (pData.severity_presence)
    {
        if (verifyScope("severity", (int64_t)pData.severity.size(), (int64_t)1, (int64_t)128))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_severity);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.severity = %s.", __FUNCTION__, pData.severity.c_str());
            marbenData->severity.copyOctetString(pData.severity.length(), (asnbyte*)(unsigned char*)(pData.severity.c_str()));
        }
    }
    if (pData.impact_presence)
    {
        if (verifyScope("impact", (int64_t)pData.impact.size(), (int64_t)1, (int64_t)128))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_impact);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.impact = %s.", __FUNCTION__, pData.impact.c_str());
            marbenData->impact.copyOctetString(pData.impact.length(), (asnbyte*)(unsigned char*)(pData.impact.c_str()));
        }
    }
    if (pData.action_presence)
    {
        if (verifyScope("action", (int64_t)pData.action.size(), (int64_t)1, (int64_t)128))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_RvdcExceptionHandling__action);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.action = %s.", __FUNCTION__, pData.action.c_str());
            marbenData->action.copyOctetString(pData.action.length(), (asnbyte*)(unsigned char*)(pData.action.c_str()));
        }
    }

    return true;
}

bool VdsMarbenAdaptGen::RvdcExceptionHandling_Decode(const std::string &path, std::shared_ptr<RvdcExceptionHandling_Model> &pData, asn_wrapper::RvdcExceptionHandling* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::RvdcExceptionHandling* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::RvdcExceptionHandling*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->exceptionName = std::string((const char*)marbenData->exceptionName.value, marbenData->exceptionName.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->exceptionName = %s.", __FUNCTION__, pData->exceptionName.c_str());
    pData->description = std::string((const char*)marbenData->description.value, marbenData->description.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->description = %s.", __FUNCTION__, pData->description.c_str());
    pData->publisher = std::string((const char*)marbenData->publisher.value, marbenData->publisher.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->publisher = %s.", __FUNCTION__, pData->publisher.c_str());
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_severity))
    {
        pData->severity_presence = true;
        pData->severity = std::string((const char*)marbenData->severity.value, marbenData->severity.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->severity = %s.", __FUNCTION__, pData->severity.c_str());
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_impact))
    {
        pData->impact_presence = true;
        pData->impact = std::string((const char*)marbenData->impact.value, marbenData->impact.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->impact = %s.", __FUNCTION__, pData->impact.c_str());
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_RvdcExceptionHandling__action))
    {
        pData->action_presence = true;
        pData->action = std::string((const char*)marbenData->action.value, marbenData->action.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->action = %s.", __FUNCTION__, pData->action.c_str());
    }

    return true;
}

bool VdsMarbenAdaptGen::FOTA_Encode(const FOTA_Model &pData, asn_wrapper::FOTA* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::FOTA* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::FOTA*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.appId = %d.", __FUNCTION__, pData.appId);
    marbenData->appId = (int32_t)pData.appId;
    if (verifyScope("vin", (int64_t)pData.vin.size(), (int64_t)1, (int64_t)128))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.vin = %s.", __FUNCTION__, pData.vin.c_str());
        marbenData->vin.copyOctetString(pData.vin.length(), (asnbyte*)(unsigned char*)(pData.vin.c_str()));
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.dataType = %d.", __FUNCTION__, pData.dataType);
    marbenData->dataType = (int32_t)pData.dataType;
    if (pData.clientConfSyncRequest_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_FOTA__clientConfSyncRequest);
        if (marbenData->clientConfSyncRequest == nullptr )
        {
            marbenData->clientConfSyncRequest = new asn_wrapper::ClientConfSyncRequest();
        }
        ClientConfSyncRequest_Encode(pData.clientConfSyncRequest, marbenData->clientConfSyncRequest);
    }
    if (pData.inventoryInstruction_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_FOTA__inventoryInstruction);
        if (marbenData->inventoryInstruction == nullptr )
        {
            marbenData->inventoryInstruction = new asn_wrapper::InventoryInstruction();
        }
        InventoryInstruction_Encode(pData.inventoryInstruction, marbenData->inventoryInstruction);
    }
    if (pData.availableAssignmentRequest_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_FOTA__availableAssignmentRequest);
        if (marbenData->availableAssignmentRequest == nullptr )
        {
            marbenData->availableAssignmentRequest = new asn_wrapper::AvailableAssignmentRequest();
        }
        AvailableAssignmentRequest_Encode(pData.availableAssignmentRequest, marbenData->availableAssignmentRequest);
    }
    if (pData.availableAssignment_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_FOTA__availableAssignment);
        if (marbenData->availableAssignment == nullptr )
        {
            marbenData->availableAssignment = new asn_wrapper::AvailableAssignment();
        }
        AvailableAssignment_Encode(pData.availableAssignment, marbenData->availableAssignment);
    }
    if (pData.installationInstruction_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_FOTA__installationInstruction);
        if (marbenData->installationInstruction == nullptr )
        {
            marbenData->installationInstruction = new asn_wrapper::InstallationInstruction();
        }
        InstallationInstruction_Encode(pData.installationInstruction, marbenData->installationInstruction);
    }
    if (pData.installationSummary_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_FOTA__installationSummary);
        if (marbenData->installationSummary == nullptr )
        {
            marbenData->installationSummary = new asn_wrapper::InstallationSummary();
        }
        InstallationSummary_Encode(pData.installationSummary, marbenData->installationSummary);
    }
    if (pData.ecuExceptionReport_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_FOTA__ecuExceptionReport);
        if (marbenData->ecuExceptionReport == nullptr )
        {
            marbenData->ecuExceptionReport = new asn_wrapper::EcuExceptionReport();
        }
        EcuExceptionReport_Encode(pData.ecuExceptionReport, marbenData->ecuExceptionReport);
    }
    if (pData.clientHmiVehicleSettings_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_FOTA__clientHmiVehicleSettings);
        if (marbenData->clientHmiVehicleSettings == nullptr )
        {
            marbenData->clientHmiVehicleSettings = new asn_wrapper::ClientHmiVehicleSettings();
        }
        ClientHmiVehicleSettings_Encode(pData.clientHmiVehicleSettings, marbenData->clientHmiVehicleSettings);
    }
    if (pData.assignmentData_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_FOTA__assignmentData);
        if (marbenData->assignmentData == nullptr )
        {
            marbenData->assignmentData = new asn_wrapper::AssignmentData();
        }
        AssignmentData_Encode(pData.assignmentData, marbenData->assignmentData);
    }
    if (pData.assignmentNotification_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_FOTA__assignmentNotification);
        if (marbenData->assignmentNotification == nullptr )
        {
            marbenData->assignmentNotification = new asn_wrapper::FotaAssignmentNotification();
        }
        FotaAssignmentNotification_Encode(pData.assignmentNotification, marbenData->assignmentNotification);
    }
    if (pData.otaAssignmentFileInfo_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_FOTA__otaAssignmentFileInfo);
        if (marbenData->otaAssignmentFileInfo == nullptr )
        {
            marbenData->otaAssignmentFileInfo = new asn_wrapper::OtaAssignmentFileInfo();
        }
        OtaAssignmentFileInfo_Encode(pData.otaAssignmentFileInfo, marbenData->otaAssignmentFileInfo);
    }

    return true;
}

bool VdsMarbenAdaptGen::FOTA_Decode(const std::string &path, std::shared_ptr<FOTA_Model> &pData, asn_wrapper::FOTA* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::FOTA* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::FOTA*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->appId = (Vds_AppId)marbenData->appId;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->appId = %d.", __FUNCTION__, pData->appId);
    pData->vin = std::string((const char*)marbenData->vin.value, marbenData->vin.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->vin = %s.", __FUNCTION__, pData->vin.c_str());
    pData->dataType = (Vds_DataType)marbenData->dataType;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->dataType = %d.", __FUNCTION__, pData->dataType);
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_FOTA__clientConfSyncRequest))
    {
        pData->clientConfSyncRequest_presence = true;
        if (marbenData->clientConfSyncRequest != nullptr )
        {
            std::shared_ptr<ClientConfSyncRequest_Model> p_clientConfSyncRequest = std::make_shared<ClientConfSyncRequest_Model>();
            result = ClientConfSyncRequest_Decode( "" , p_clientConfSyncRequest , marbenData->clientConfSyncRequest);
            if (result)
            {
                pData->clientConfSyncRequest = (*p_clientConfSyncRequest);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_FOTA__inventoryInstruction))
    {
        pData->inventoryInstruction_presence = true;
        if (marbenData->inventoryInstruction != nullptr )
        {
            std::shared_ptr<InventoryInstruction_Model> p_inventoryInstruction = std::make_shared<InventoryInstruction_Model>();
            result = InventoryInstruction_Decode( "" , p_inventoryInstruction , marbenData->inventoryInstruction);
            if (result)
            {
                pData->inventoryInstruction = (*p_inventoryInstruction);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_FOTA__availableAssignmentRequest))
    {
        pData->availableAssignmentRequest_presence = true;
        if (marbenData->availableAssignmentRequest != nullptr )
        {
            std::shared_ptr<AvailableAssignmentRequest_Model> p_availableAssignmentRequest = std::make_shared<AvailableAssignmentRequest_Model>();
            result = AvailableAssignmentRequest_Decode( "" , p_availableAssignmentRequest , marbenData->availableAssignmentRequest);
            if (result)
            {
                pData->availableAssignmentRequest = (*p_availableAssignmentRequest);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_FOTA__availableAssignment))
    {
        pData->availableAssignment_presence = true;
        if (marbenData->availableAssignment != nullptr )
        {
            std::shared_ptr<AvailableAssignment_Model> p_availableAssignment = std::make_shared<AvailableAssignment_Model>();
            result = AvailableAssignment_Decode( "" , p_availableAssignment , marbenData->availableAssignment);
            if (result)
            {
                pData->availableAssignment = (*p_availableAssignment);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_FOTA__installationInstruction))
    {
        pData->installationInstruction_presence = true;
        if (marbenData->installationInstruction != nullptr )
        {
            std::shared_ptr<InstallationInstruction_Model> p_installationInstruction = std::make_shared<InstallationInstruction_Model>();
            result = InstallationInstruction_Decode( "" , p_installationInstruction , marbenData->installationInstruction);
            if (result)
            {
                pData->installationInstruction = (*p_installationInstruction);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_FOTA__installationSummary))
    {
        pData->installationSummary_presence = true;
        if (marbenData->installationSummary != nullptr )
        {
            std::shared_ptr<InstallationSummary_Model> p_installationSummary = std::make_shared<InstallationSummary_Model>();
            result = InstallationSummary_Decode( "" , p_installationSummary , marbenData->installationSummary);
            if (result)
            {
                pData->installationSummary = (*p_installationSummary);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_FOTA__ecuExceptionReport))
    {
        pData->ecuExceptionReport_presence = true;
        if (marbenData->ecuExceptionReport != nullptr )
        {
            std::shared_ptr<EcuExceptionReport_Model> p_ecuExceptionReport = std::make_shared<EcuExceptionReport_Model>();
            result = EcuExceptionReport_Decode( "" , p_ecuExceptionReport , marbenData->ecuExceptionReport);
            if (result)
            {
                pData->ecuExceptionReport = (*p_ecuExceptionReport);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_FOTA__clientHmiVehicleSettings))
    {
        pData->clientHmiVehicleSettings_presence = true;
        if (marbenData->clientHmiVehicleSettings != nullptr )
        {
            std::shared_ptr<ClientHmiVehicleSettings_Model> p_clientHmiVehicleSettings = std::make_shared<ClientHmiVehicleSettings_Model>();
            result = ClientHmiVehicleSettings_Decode( "" , p_clientHmiVehicleSettings , marbenData->clientHmiVehicleSettings);
            if (result)
            {
                pData->clientHmiVehicleSettings = (*p_clientHmiVehicleSettings);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_FOTA__assignmentData))
    {
        pData->assignmentData_presence = true;
        if (marbenData->assignmentData != nullptr )
        {
            std::shared_ptr<AssignmentData_Model> p_assignmentData = std::make_shared<AssignmentData_Model>();
            result = AssignmentData_Decode( "" , p_assignmentData , marbenData->assignmentData);
            if (result)
            {
                pData->assignmentData = (*p_assignmentData);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_FOTA__assignmentNotification))
    {
        pData->assignmentNotification_presence = true;
        if (marbenData->assignmentNotification != nullptr )
        {
            std::shared_ptr<FotaAssignmentNotification_Model> p_assignmentNotification = std::make_shared<FotaAssignmentNotification_Model>();
            result = FotaAssignmentNotification_Decode( "" , p_assignmentNotification , marbenData->assignmentNotification);
            if (result)
            {
                pData->assignmentNotification = (*p_assignmentNotification);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_FOTA__otaAssignmentFileInfo))
    {
        pData->otaAssignmentFileInfo_presence = true;
        if (marbenData->otaAssignmentFileInfo != nullptr )
        {
            std::shared_ptr<OtaAssignmentFileInfo_Model> p_otaAssignmentFileInfo = std::make_shared<OtaAssignmentFileInfo_Model>();
            result = OtaAssignmentFileInfo_Decode( "" , p_otaAssignmentFileInfo , marbenData->otaAssignmentFileInfo);
            if (result)
            {
                pData->otaAssignmentFileInfo = (*p_otaAssignmentFileInfo);
            }
        }

    }

    return true;
}

bool VdsMarbenAdaptGen::ClientConfSyncRequest_Encode(const ClientConfSyncRequest_Model &pData, asn_wrapper::ClientConfSyncRequest* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::ClientConfSyncRequest* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::ClientConfSyncRequest*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("timestamp", (int64_t)pData.timestamp.size(), (int64_t)1, (int64_t)32))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.timestamp = %s.", __FUNCTION__, pData.timestamp.c_str());
        marbenData->timestamp.copyOctetString(pData.timestamp.length(), (asnbyte*)(unsigned char*)(pData.timestamp.c_str()));
    }
    if (verifyScope("clientVersion", (int64_t)pData.clientVersion.size(), (int64_t)1, (int64_t)256))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.clientVersion = %s.", __FUNCTION__, pData.clientVersion.c_str());
        marbenData->clientVersion.copyOctetString(pData.clientVersion.length(), (asnbyte*)(unsigned char*)(pData.clientVersion.c_str()));
    }
    if (pData.ecuInventory_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_ecuInventory);
        
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.ecuInventory.size() = %d.", __FUNCTION__, pData.ecuInventory.size());
        for (auto p_ecuInventory = pData.ecuInventory.begin(); p_ecuInventory != pData.ecuInventory.end();) 
        {
            asn_wrapper::asncecuInventorys *ecuInventory = new asn_wrapper::asncecuInventorys();
            marbenData->ecuInventory.addElement(ecuInventory);

            if (verifyScope("ecuAddress", (int64_t)p_ecuInventory->ecuAddress.size(), (int64_t)1, (int64_t)256))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuInventory->ecuAddress = %s.", __FUNCTION__, p_ecuInventory->ecuAddress.c_str());
                ecuInventory->ecuAddress.copyOctetString(p_ecuInventory->ecuAddress.length(), (asnbyte*)(unsigned char*)(p_ecuInventory->ecuAddress.c_str()));
            }
            
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuInventory->validationKeys.size() = %d.", __FUNCTION__, p_ecuInventory->validationKeys.size());
            for (auto p_validationKey = p_ecuInventory->validationKeys.begin(); p_validationKey != p_ecuInventory->validationKeys.end();) 
            {
                asn_wrapper::asncvalidationKeyss *validationKey = new asn_wrapper::asncvalidationKeyss();
                ecuInventory->validationKeys.addElement(validationKey);

                if (verifyScope("validationKey", (int64_t)p_validationKey->validationKey.size(), (int64_t)1, (int64_t)256))
                {
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_validationKey->validationKey = %s.", __FUNCTION__, p_validationKey->validationKey.c_str());
                    validationKey->validationKey.copyOctetString(p_validationKey->validationKey.length(), (asnbyte*)(unsigned char*)(p_validationKey->validationKey.c_str()));
                }
                if (p_validationKey->partIdentifiers_presence)
                {
                        validationKey->optional.setPresence(asn_wrapper::asn_partIdentifiers);
                        
                        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_validationKey->partIdentifiers.size() = %d.", __FUNCTION__, p_validationKey->partIdentifiers.size());
                        for (auto p_partIdentifier = p_validationKey->partIdentifiers.begin(); p_partIdentifier != p_validationKey->partIdentifiers.end();) 
                        {
                            asn_wrapper::asncpartIdentifierss *partIdentifier = new asn_wrapper::asncpartIdentifierss();
                            validationKey->partIdentifiers.addElement(partIdentifier);

                            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_partIdentifier = %s.", __FUNCTION__, p_partIdentifier);
                            partIdentifier->value.copyOctetString(p_partIdentifier->length(), (asnbyte*)(unsigned char*)(p_partIdentifier->c_str()));                        
                            ++p_partIdentifier;
                        }
                        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: validationKey->partIdentifiers.getCount() = %d.", __FUNCTION__, validationKey->partIdentifiers.getCount());
                        
                }
            
                ++p_validationKey;
            }
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: ecuInventory->validationKeys.getCount() = %d.", __FUNCTION__, ecuInventory->validationKeys.getCount());
            
            if (p_ecuInventory->exceptionMessage_presence)
            {
                if (verifyScope("exceptionMessage", (int64_t)p_ecuInventory->exceptionMessage.size(), (int64_t)1, (int64_t)65535))
                {
                    ecuInventory->optional.setPresence(asn_wrapper::asn_exceptionMessage);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuInventory->exceptionMessage = %s.", __FUNCTION__, p_ecuInventory->exceptionMessage.c_str());
                    ecuInventory->exceptionMessage.copyOctetString(p_ecuInventory->exceptionMessage.length(), (asnbyte*)(unsigned char*)(p_ecuInventory->exceptionMessage.c_str()));
                }
            }
        
            ++p_ecuInventory;
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->ecuInventory.getCount() = %d.", __FUNCTION__, marbenData->ecuInventory.getCount());
        
    }

    return true;
}

bool VdsMarbenAdaptGen::ClientConfSyncRequest_Decode(const std::string &path, std::shared_ptr<ClientConfSyncRequest_Model> &pData, asn_wrapper::ClientConfSyncRequest* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::ClientConfSyncRequest* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::ClientConfSyncRequest*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->timestamp = std::string((const char*)marbenData->timestamp.value, marbenData->timestamp.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->timestamp = %s.", __FUNCTION__, pData->timestamp.c_str());
    pData->clientVersion = std::string((const char*)marbenData->clientVersion.value, marbenData->clientVersion.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->clientVersion = %s.", __FUNCTION__, pData->clientVersion.c_str());
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_ecuInventory))
    {
        pData->ecuInventory_presence = true;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->ecuInventory.getCount() = %d.", __FUNCTION__, marbenData->ecuInventory.getCount());
        unsigned int ecuInventoryCount = marbenData->ecuInventory.getCount();
        asn_wrapper::asncecuInventorys* ecuInventory = (asn_wrapper::asncecuInventorys*)(marbenData->ecuInventory.getFirstElement());
        for (unsigned int i = 0; (i < ecuInventoryCount || ecuInventory); i++) 
        {
            EcuInventory_Model p_ecuInventory;
            p_ecuInventory.ecuAddress = std::string((const char*)ecuInventory->ecuAddress.value, ecuInventory->ecuAddress.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuInventory.ecuAddress = %s.", __FUNCTION__, p_ecuInventory.ecuAddress.c_str());
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: ecuInventory->validationKeys.getCount() = %d.", __FUNCTION__, ecuInventory->validationKeys.getCount());
            unsigned int validationKeyCount = ecuInventory->validationKeys.getCount();
            asn_wrapper::asncvalidationKeyss* validationKey = (asn_wrapper::asncvalidationKeyss*)(ecuInventory->validationKeys.getFirstElement());
            for (unsigned int validationKeys2 = 0; (validationKeys2 < validationKeyCount || validationKey); validationKeys2++) 
            {
                ValidationKey_Model p_validationKey;
                p_validationKey.validationKey = std::string((const char*)validationKey->validationKey.value, validationKey->validationKey.length);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_validationKey.validationKey = %s.", __FUNCTION__, p_validationKey.validationKey.c_str());
                if (asnTRUE == validationKey->optional.getPresence(asn_wrapper::asn_partIdentifiers))
                {
                    p_validationKey.partIdentifiers_presence = true;
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: validationKey->partIdentifiers.getCount() = %d.", __FUNCTION__, validationKey->partIdentifiers.getCount());
                    unsigned int partIdentifierCount = validationKey->partIdentifiers.getCount();
                    asn_wrapper::asncpartIdentifierss* partIdentifier = (asn_wrapper::asncpartIdentifierss*)(validationKey->partIdentifiers.getFirstElement());
                    for (unsigned int partIdentifiers3 = 0; (partIdentifiers3 < partIdentifierCount || partIdentifier); partIdentifiers3++) 
                    {
                        std::string p_partIdentifier;
                        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_partIdentifier = %s.", __FUNCTION__, p_partIdentifier);
                        p_partIdentifier = std::string((const char*)partIdentifier->value.value, partIdentifier->value.length);
                        p_validationKey.partIdentifiers.push_back(p_partIdentifier);
                        partIdentifier = (asn_wrapper::asncpartIdentifierss*)(partIdentifier->getNextElement());
                    }
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_validationKey.partIdentifiers.size() = %d.", __FUNCTION__, p_validationKey.partIdentifiers.size());
                    
                }
                p_ecuInventory.validationKeys.push_back(p_validationKey);
                validationKey = (asn_wrapper::asncvalidationKeyss*)(validationKey->getNextElement());
            }
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuInventory.validationKeys.size() = %d.", __FUNCTION__, p_ecuInventory.validationKeys.size());
            
            if (asnTRUE == ecuInventory->optional.getPresence(asn_wrapper::asn_exceptionMessage))
            {
                p_ecuInventory.exceptionMessage_presence = true;
                p_ecuInventory.exceptionMessage = std::string((const char*)ecuInventory->exceptionMessage.value, ecuInventory->exceptionMessage.length);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuInventory.exceptionMessage = %s.", __FUNCTION__, p_ecuInventory.exceptionMessage.c_str());
            }
            pData->ecuInventory.push_back(p_ecuInventory);
            ecuInventory = (asn_wrapper::asncecuInventorys*)(ecuInventory->getNextElement());
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->ecuInventory.size() = %d.", __FUNCTION__, pData->ecuInventory.size());
        
    }

    return true;
}

bool VdsMarbenAdaptGen::InventoryInstruction_Encode(const InventoryInstruction_Model &pData, asn_wrapper::InventoryInstruction* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::InventoryInstruction* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::InventoryInstruction*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("inventoryInstructionVersion", (int64_t)pData.inventoryInstructionVersion.size(), (int64_t)1, (int64_t)32))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.inventoryInstructionVersion = %s.", __FUNCTION__, pData.inventoryInstructionVersion.c_str());
        marbenData->inventoryInstructionVersion.copyOctetString(pData.inventoryInstructionVersion.length(), (asnbyte*)(unsigned char*)(pData.inventoryInstructionVersion.c_str()));
    }
    
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.ecuInstructions.size() = %d.", __FUNCTION__, pData.ecuInstructions.size());
    for (auto p_ecuInstruction = pData.ecuInstructions.begin(); p_ecuInstruction != pData.ecuInstructions.end();) 
    {
        asn_wrapper::asncInventoryInstruction__ecuInstructionss *ecuInstruction = new asn_wrapper::asncInventoryInstruction__ecuInstructionss();
        marbenData->ecuInstructions.addElement(ecuInstruction);

        if (verifyScope("ecuAddress", (int64_t)p_ecuInstruction->ecuAddress.size(), (int64_t)1, (int64_t)256))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuInstruction->ecuAddress = %s.", __FUNCTION__, p_ecuInstruction->ecuAddress.c_str());
            ecuInstruction->ecuAddress.copyOctetString(p_ecuInstruction->ecuAddress.length(), (asnbyte*)(unsigned char*)(p_ecuInstruction->ecuAddress.c_str()));
        }
        
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuInstruction->validationKeys.size() = %d.", __FUNCTION__, p_ecuInstruction->validationKeys.size());
        for (auto p_validationKey = p_ecuInstruction->validationKeys.begin(); p_validationKey != p_ecuInstruction->validationKeys.end();) 
        {
            asn_wrapper::asncvalidationKeyss *validationKey = new asn_wrapper::asncvalidationKeyss();
            ecuInstruction->validationKeys.addElement(validationKey);

            if (verifyScope("validationKey", (int64_t)p_validationKey->validationKey.size(), (int64_t)1, (int64_t)256))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_validationKey->validationKey = %s.", __FUNCTION__, p_validationKey->validationKey.c_str());
                validationKey->validationKey.copyOctetString(p_validationKey->validationKey.length(), (asnbyte*)(unsigned char*)(p_validationKey->validationKey.c_str()));
            }
            if (p_validationKey->partIdentifiers_presence)
            {
                    validationKey->optional.setPresence(asn_wrapper::asn_partIdentifiers);
                    
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_validationKey->partIdentifiers.size() = %d.", __FUNCTION__, p_validationKey->partIdentifiers.size());
                    for (auto p_partIdentifier = p_validationKey->partIdentifiers.begin(); p_partIdentifier != p_validationKey->partIdentifiers.end();) 
                    {
                        asn_wrapper::asncpartIdentifierss *partIdentifier = new asn_wrapper::asncpartIdentifierss();
                        validationKey->partIdentifiers.addElement(partIdentifier);

                        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_partIdentifier = %s.", __FUNCTION__, p_partIdentifier);
                        partIdentifier->value.copyOctetString(p_partIdentifier->length(), (asnbyte*)(unsigned char*)(p_partIdentifier->c_str()));                    
                        ++p_partIdentifier;
                    }
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: validationKey->partIdentifiers.getCount() = %d.", __FUNCTION__, validationKey->partIdentifiers.getCount());
                    
            }
        
            ++p_validationKey;
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: ecuInstruction->validationKeys.getCount() = %d.", __FUNCTION__, ecuInstruction->validationKeys.getCount());
        
        if (p_ecuInstruction->exceptionMessage_presence)
        {
            if (verifyScope("exceptionMessage", (int64_t)p_ecuInstruction->exceptionMessage.size(), (int64_t)1, (int64_t)65535))
            {
                ecuInstruction->optional.setPresence(asn_wrapper::asn_exceptionMessage);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuInstruction->exceptionMessage = %s.", __FUNCTION__, p_ecuInstruction->exceptionMessage.c_str());
                ecuInstruction->exceptionMessage.copyOctetString(p_ecuInstruction->exceptionMessage.length(), (asnbyte*)(unsigned char*)(p_ecuInstruction->exceptionMessage.c_str()));
            }
        }
    
        ++p_ecuInstruction;
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->ecuInstructions.getCount() = %d.", __FUNCTION__, marbenData->ecuInstructions.getCount());
    

    return true;
}

bool VdsMarbenAdaptGen::InventoryInstruction_Decode(const std::string &path, std::shared_ptr<InventoryInstruction_Model> &pData, asn_wrapper::InventoryInstruction* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::InventoryInstruction* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::InventoryInstruction*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->inventoryInstructionVersion = std::string((const char*)marbenData->inventoryInstructionVersion.value, marbenData->inventoryInstructionVersion.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->inventoryInstructionVersion = %s.", __FUNCTION__, pData->inventoryInstructionVersion.c_str());
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->ecuInstructions.getCount() = %d.", __FUNCTION__, marbenData->ecuInstructions.getCount());
    unsigned int ecuInstructionCount = marbenData->ecuInstructions.getCount();
    asn_wrapper::asncInventoryInstruction__ecuInstructionss* ecuInstruction = (asn_wrapper::asncInventoryInstruction__ecuInstructionss*)(marbenData->ecuInstructions.getFirstElement());
    for (unsigned int i = 0; (i < ecuInstructionCount || ecuInstruction); i++) 
    {
        EcuInventory_Model p_ecuInstruction;
        p_ecuInstruction.ecuAddress = std::string((const char*)ecuInstruction->ecuAddress.value, ecuInstruction->ecuAddress.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuInstruction.ecuAddress = %s.", __FUNCTION__, p_ecuInstruction.ecuAddress.c_str());
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: ecuInstruction->validationKeys.getCount() = %d.", __FUNCTION__, ecuInstruction->validationKeys.getCount());
        unsigned int validationKeyCount = ecuInstruction->validationKeys.getCount();
        asn_wrapper::asncvalidationKeyss* validationKey = (asn_wrapper::asncvalidationKeyss*)(ecuInstruction->validationKeys.getFirstElement());
        for (unsigned int validationKeys2 = 0; (validationKeys2 < validationKeyCount || validationKey); validationKeys2++) 
        {
            ValidationKey_Model p_validationKey;
            p_validationKey.validationKey = std::string((const char*)validationKey->validationKey.value, validationKey->validationKey.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_validationKey.validationKey = %s.", __FUNCTION__, p_validationKey.validationKey.c_str());
            if (asnTRUE == validationKey->optional.getPresence(asn_wrapper::asn_partIdentifiers))
            {
                p_validationKey.partIdentifiers_presence = true;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: validationKey->partIdentifiers.getCount() = %d.", __FUNCTION__, validationKey->partIdentifiers.getCount());
                unsigned int partIdentifierCount = validationKey->partIdentifiers.getCount();
                asn_wrapper::asncpartIdentifierss* partIdentifier = (asn_wrapper::asncpartIdentifierss*)(validationKey->partIdentifiers.getFirstElement());
                for (unsigned int partIdentifiers3 = 0; (partIdentifiers3 < partIdentifierCount || partIdentifier); partIdentifiers3++) 
                {
                    std::string p_partIdentifier;
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_partIdentifier = %s.", __FUNCTION__, p_partIdentifier);
                    p_partIdentifier = std::string((const char*)partIdentifier->value.value, partIdentifier->value.length);
                    p_validationKey.partIdentifiers.push_back(p_partIdentifier);
                    partIdentifier = (asn_wrapper::asncpartIdentifierss*)(partIdentifier->getNextElement());
                }
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_validationKey.partIdentifiers.size() = %d.", __FUNCTION__, p_validationKey.partIdentifiers.size());
                
            }
            p_ecuInstruction.validationKeys.push_back(p_validationKey);
            validationKey = (asn_wrapper::asncvalidationKeyss*)(validationKey->getNextElement());
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuInstruction.validationKeys.size() = %d.", __FUNCTION__, p_ecuInstruction.validationKeys.size());
        
        if (asnTRUE == ecuInstruction->optional.getPresence(asn_wrapper::asn_exceptionMessage))
        {
            p_ecuInstruction.exceptionMessage_presence = true;
            p_ecuInstruction.exceptionMessage = std::string((const char*)ecuInstruction->exceptionMessage.value, ecuInstruction->exceptionMessage.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuInstruction.exceptionMessage = %s.", __FUNCTION__, p_ecuInstruction.exceptionMessage.c_str());
        }
        pData->ecuInstructions.push_back(p_ecuInstruction);
        ecuInstruction = (asn_wrapper::asncInventoryInstruction__ecuInstructionss*)(ecuInstruction->getNextElement());
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->ecuInstructions.size() = %d.", __FUNCTION__, pData->ecuInstructions.size());
    

    return true;
}

bool VdsMarbenAdaptGen::EcuInventory_Encode(const EcuInventory_Model &pData, asn_wrapper::EcuInventory* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::EcuInventory* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::EcuInventory*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("ecuAddress", (int64_t)pData.ecuAddress.size(), (int64_t)1, (int64_t)256))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.ecuAddress = %s.", __FUNCTION__, pData.ecuAddress.c_str());
        marbenData->ecuAddress.copyOctetString(pData.ecuAddress.length(), (asnbyte*)(unsigned char*)(pData.ecuAddress.c_str()));
    }
    
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.validationKeys.size() = %d.", __FUNCTION__, pData.validationKeys.size());
    for (auto p_validationKey = pData.validationKeys.begin(); p_validationKey != pData.validationKeys.end();) 
    {
        asn_wrapper::asncvalidationKeyss *validationKey = new asn_wrapper::asncvalidationKeyss();
        marbenData->validationKeys.addElement(validationKey);

        if (verifyScope("validationKey", (int64_t)p_validationKey->validationKey.size(), (int64_t)1, (int64_t)256))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_validationKey->validationKey = %s.", __FUNCTION__, p_validationKey->validationKey.c_str());
            validationKey->validationKey.copyOctetString(p_validationKey->validationKey.length(), (asnbyte*)(unsigned char*)(p_validationKey->validationKey.c_str()));
        }
        if (p_validationKey->partIdentifiers_presence)
        {
                validationKey->optional.setPresence(asn_wrapper::asn_partIdentifiers);
                
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_validationKey->partIdentifiers.size() = %d.", __FUNCTION__, p_validationKey->partIdentifiers.size());
                for (auto p_partIdentifier = p_validationKey->partIdentifiers.begin(); p_partIdentifier != p_validationKey->partIdentifiers.end();) 
                {
                    asn_wrapper::asncpartIdentifierss *partIdentifier = new asn_wrapper::asncpartIdentifierss();
                    validationKey->partIdentifiers.addElement(partIdentifier);

                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_partIdentifier = %s.", __FUNCTION__, p_partIdentifier);
                    partIdentifier->value.copyOctetString(p_partIdentifier->length(), (asnbyte*)(unsigned char*)(p_partIdentifier->c_str()));                
                    ++p_partIdentifier;
                }
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: validationKey->partIdentifiers.getCount() = %d.", __FUNCTION__, validationKey->partIdentifiers.getCount());
                
        }
    
        ++p_validationKey;
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->validationKeys.getCount() = %d.", __FUNCTION__, marbenData->validationKeys.getCount());
    
    if (pData.exceptionMessage_presence)
    {
        if (verifyScope("exceptionMessage", (int64_t)pData.exceptionMessage.size(), (int64_t)1, (int64_t)65535))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_exceptionMessage);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.exceptionMessage = %s.", __FUNCTION__, pData.exceptionMessage.c_str());
            marbenData->exceptionMessage.copyOctetString(pData.exceptionMessage.length(), (asnbyte*)(unsigned char*)(pData.exceptionMessage.c_str()));
        }
    }

    return true;
}

bool VdsMarbenAdaptGen::EcuInventory_Decode(const std::string &path, std::shared_ptr<EcuInventory_Model> &pData, asn_wrapper::EcuInventory* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::EcuInventory* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::EcuInventory*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->ecuAddress = std::string((const char*)marbenData->ecuAddress.value, marbenData->ecuAddress.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->ecuAddress = %s.", __FUNCTION__, pData->ecuAddress.c_str());
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->validationKeys.getCount() = %d.", __FUNCTION__, marbenData->validationKeys.getCount());
    unsigned int validationKeyCount = marbenData->validationKeys.getCount();
    asn_wrapper::asncvalidationKeyss* validationKey = (asn_wrapper::asncvalidationKeyss*)(marbenData->validationKeys.getFirstElement());
    for (unsigned int i = 0; (i < validationKeyCount || validationKey); i++) 
    {
        ValidationKey_Model p_validationKey;
        p_validationKey.validationKey = std::string((const char*)validationKey->validationKey.value, validationKey->validationKey.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_validationKey.validationKey = %s.", __FUNCTION__, p_validationKey.validationKey.c_str());
        if (asnTRUE == validationKey->optional.getPresence(asn_wrapper::asn_partIdentifiers))
        {
            p_validationKey.partIdentifiers_presence = true;
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: validationKey->partIdentifiers.getCount() = %d.", __FUNCTION__, validationKey->partIdentifiers.getCount());
            unsigned int partIdentifierCount = validationKey->partIdentifiers.getCount();
            asn_wrapper::asncpartIdentifierss* partIdentifier = (asn_wrapper::asncpartIdentifierss*)(validationKey->partIdentifiers.getFirstElement());
            for (unsigned int partIdentifiers2 = 0; (partIdentifiers2 < partIdentifierCount || partIdentifier); partIdentifiers2++) 
            {
                std::string p_partIdentifier;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_partIdentifier = %s.", __FUNCTION__, p_partIdentifier);
                p_partIdentifier = std::string((const char*)partIdentifier->value.value, partIdentifier->value.length);
                p_validationKey.partIdentifiers.push_back(p_partIdentifier);
                partIdentifier = (asn_wrapper::asncpartIdentifierss*)(partIdentifier->getNextElement());
            }
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_validationKey.partIdentifiers.size() = %d.", __FUNCTION__, p_validationKey.partIdentifiers.size());
            
        }
        pData->validationKeys.push_back(p_validationKey);
        validationKey = (asn_wrapper::asncvalidationKeyss*)(validationKey->getNextElement());
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->validationKeys.size() = %d.", __FUNCTION__, pData->validationKeys.size());
    
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_exceptionMessage))
    {
        pData->exceptionMessage_presence = true;
        pData->exceptionMessage = std::string((const char*)marbenData->exceptionMessage.value, marbenData->exceptionMessage.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->exceptionMessage = %s.", __FUNCTION__, pData->exceptionMessage.c_str());
    }

    return true;
}

bool VdsMarbenAdaptGen::ValidationKey_Encode(const ValidationKey_Model &pData, asn_wrapper::ValidationKey* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::ValidationKey* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::ValidationKey*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("validationKey", (int64_t)pData.validationKey.size(), (int64_t)1, (int64_t)256))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.validationKey = %s.", __FUNCTION__, pData.validationKey.c_str());
        marbenData->validationKey.copyOctetString(pData.validationKey.length(), (asnbyte*)(unsigned char*)(pData.validationKey.c_str()));
    }
    if (pData.partIdentifiers_presence)
    {
            marbenData->optional.setPresence(asn_wrapper::asn_partIdentifiers);
            
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.partIdentifiers.size() = %d.", __FUNCTION__, pData.partIdentifiers.size());
            for (auto p_partIdentifier = pData.partIdentifiers.begin(); p_partIdentifier != pData.partIdentifiers.end();) 
            {
                asn_wrapper::asncpartIdentifierss *partIdentifier = new asn_wrapper::asncpartIdentifierss();
                marbenData->partIdentifiers.addElement(partIdentifier);

                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_partIdentifier = %s.", __FUNCTION__, p_partIdentifier);
                partIdentifier->value.copyOctetString(p_partIdentifier->length(), (asnbyte*)(unsigned char*)(p_partIdentifier->c_str()));            
                ++p_partIdentifier;
            }
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->partIdentifiers.getCount() = %d.", __FUNCTION__, marbenData->partIdentifiers.getCount());
            
    }

    return true;
}

bool VdsMarbenAdaptGen::ValidationKey_Decode(const std::string &path, std::shared_ptr<ValidationKey_Model> &pData, asn_wrapper::ValidationKey* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::ValidationKey* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::ValidationKey*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->validationKey = std::string((const char*)marbenData->validationKey.value, marbenData->validationKey.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->validationKey = %s.", __FUNCTION__, pData->validationKey.c_str());
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_partIdentifiers))
    {
        pData->partIdentifiers_presence = true;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->partIdentifiers.getCount() = %d.", __FUNCTION__, marbenData->partIdentifiers.getCount());
        unsigned int partIdentifierCount = marbenData->partIdentifiers.getCount();
        asn_wrapper::asncpartIdentifierss* partIdentifier = (asn_wrapper::asncpartIdentifierss*)(marbenData->partIdentifiers.getFirstElement());
        for (unsigned int i = 0; (i < partIdentifierCount || partIdentifier); i++) 
        {
            std::string p_partIdentifier;
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_partIdentifier = %s.", __FUNCTION__, p_partIdentifier);
            p_partIdentifier = std::string((const char*)partIdentifier->value.value, partIdentifier->value.length);
            pData->partIdentifiers.push_back(p_partIdentifier);
            partIdentifier = (asn_wrapper::asncpartIdentifierss*)(partIdentifier->getNextElement());
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->partIdentifiers.size() = %d.", __FUNCTION__, pData->partIdentifiers.size());
        
    }

    return true;
}

bool VdsMarbenAdaptGen::AvailableAssignmentRequest_Encode(const AvailableAssignmentRequest_Model &pData, asn_wrapper::AvailableAssignmentRequest* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::AvailableAssignmentRequest* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::AvailableAssignmentRequest*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (marbenData->languageSetting == nullptr )
    {
        marbenData->languageSetting = new asn_wrapper::LanguageSetting();
    }
    LanguageSetting_Encode(pData.languageSetting, marbenData->languageSetting);

    return true;
}

bool VdsMarbenAdaptGen::AvailableAssignmentRequest_Decode(const std::string &path, std::shared_ptr<AvailableAssignmentRequest_Model> &pData, asn_wrapper::AvailableAssignmentRequest* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::AvailableAssignmentRequest* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::AvailableAssignmentRequest*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (marbenData->languageSetting != nullptr )
    {
        std::shared_ptr<LanguageSetting_Model> p_languageSetting = std::make_shared<LanguageSetting_Model>();
        result = LanguageSetting_Decode( "" , p_languageSetting , marbenData->languageSetting);
        if (result)
        {
            pData->languageSetting = (*p_languageSetting);
        }
    }


    return true;
}

bool VdsMarbenAdaptGen::AvailableAssignment_Encode(const AvailableAssignment_Model &pData, asn_wrapper::AvailableAssignment* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::AvailableAssignment* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::AvailableAssignment*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("installationOrderId", (int64_t)pData.installationOrderId.size(), (int64_t)1, (int64_t)256))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.installationOrderId = %s.", __FUNCTION__, pData.installationOrderId.c_str());
        marbenData->installationOrderId.copyOctetString(pData.installationOrderId.length(), (asnbyte*)(unsigned char*)(pData.installationOrderId.c_str()));
    }
    if (verifyScope("timestamp", (int64_t)pData.timestamp.size(), (int64_t)1, (int64_t)32))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.timestamp = %s.", __FUNCTION__, pData.timestamp.c_str());
        marbenData->timestamp.copyOctetString(pData.timestamp.length(), (asnbyte*)(unsigned char*)(pData.timestamp.c_str()));
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.workshopInstallation = %d.", __FUNCTION__, pData.workshopInstallation);
    marbenData->workshopInstallation = pData.workshopInstallation;
    if (verifyScope("downloadsize", (int64_t)pData.downloadsize, (int64_t)1, (int64_t)2147483647))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.downloadsize = %d.", __FUNCTION__, pData.downloadsize);
        marbenData->downloadsize = pData.downloadsize;
    }
    if (verifyScope("totalinstallationTime", (int64_t)pData.totalinstallationTime, (int64_t)1, (int64_t)36000000))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.totalinstallationTime = %d.", __FUNCTION__, pData.totalinstallationTime);
        marbenData->totalinstallationTime = pData.totalinstallationTime;
    }
    if (verifyScope("newstatus", (int64_t)pData.newstatus.size(), (int64_t)1, (int64_t)64))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.newstatus = %s.", __FUNCTION__, pData.newstatus.c_str());
        marbenData->newstatus.copyOctetString(pData.newstatus.length(), (asnbyte*)(unsigned char*)(pData.newstatus.c_str()));
    }
    if (pData.reason_presence)
    {
        if (verifyScope("reason", (int64_t)pData.reason.size(), (int64_t)1, (int64_t)256))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_AvailableAssignment__reason);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.reason = %s.", __FUNCTION__, pData.reason.c_str());
            marbenData->reason.copyOctetString(pData.reason.length(), (asnbyte*)(unsigned char*)(pData.reason.c_str()));
        }
    }
    if (verifyScope("name", (int64_t)pData.name.size(), (int64_t)1, (int64_t)256))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.name = %s.", __FUNCTION__, pData.name.c_str());
        marbenData->name.copyOctetString(pData.name.length(), (asnbyte*)(unsigned char*)(pData.name.c_str()));
    }
    if (verifyScope("shortDescription", (int64_t)pData.shortDescription.size(), (int64_t)1, (int64_t)1024))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.shortDescription = %s.", __FUNCTION__, pData.shortDescription.c_str());
        marbenData->shortDescription.copyOctetString(pData.shortDescription.length(), (asnbyte*)(unsigned char*)(pData.shortDescription.c_str()));
    }
    if (pData.longDescription_presence)
    {
        if (verifyScope("longDescription", (int64_t)pData.longDescription.size(), (int64_t)1, (int64_t)65535))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_longDescription);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.longDescription = %s.", __FUNCTION__, pData.longDescription.c_str());
            marbenData->longDescription.copyOctetString(pData.longDescription.length(), (asnbyte*)(unsigned char*)(pData.longDescription.c_str()));
        }
    }

    return true;
}

bool VdsMarbenAdaptGen::AvailableAssignment_Decode(const std::string &path, std::shared_ptr<AvailableAssignment_Model> &pData, asn_wrapper::AvailableAssignment* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::AvailableAssignment* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::AvailableAssignment*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->installationOrderId = std::string((const char*)marbenData->installationOrderId.value, marbenData->installationOrderId.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->installationOrderId = %s.", __FUNCTION__, pData->installationOrderId.c_str());
    pData->timestamp = std::string((const char*)marbenData->timestamp.value, marbenData->timestamp.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->timestamp = %s.", __FUNCTION__, pData->timestamp.c_str());
    pData->workshopInstallation = marbenData->workshopInstallation;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->workshopInstallation = %d.", __FUNCTION__, pData->workshopInstallation);
    pData->downloadsize = marbenData->downloadsize;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->downloadsize = %d.", __FUNCTION__, pData->downloadsize);
    pData->totalinstallationTime = marbenData->totalinstallationTime;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->totalinstallationTime = %d.", __FUNCTION__, pData->totalinstallationTime);
    pData->newstatus = std::string((const char*)marbenData->newstatus.value, marbenData->newstatus.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->newstatus = %s.", __FUNCTION__, pData->newstatus.c_str());
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_AvailableAssignment__reason))
    {
        pData->reason_presence = true;
        pData->reason = std::string((const char*)marbenData->reason.value, marbenData->reason.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->reason = %s.", __FUNCTION__, pData->reason.c_str());
    }
    pData->name = std::string((const char*)marbenData->name.value, marbenData->name.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->name = %s.", __FUNCTION__, pData->name.c_str());
    pData->shortDescription = std::string((const char*)marbenData->shortDescription.value, marbenData->shortDescription.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->shortDescription = %s.", __FUNCTION__, pData->shortDescription.c_str());
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_longDescription))
    {
        pData->longDescription_presence = true;
        pData->longDescription = std::string((const char*)marbenData->longDescription.value, marbenData->longDescription.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->longDescription = %s.", __FUNCTION__, pData->longDescription.c_str());
    }

    return true;
}

bool VdsMarbenAdaptGen::InstallationInstruction_Encode(const InstallationInstruction_Model &pData, asn_wrapper::InstallationInstruction* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::InstallationInstruction* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::InstallationInstruction*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("installationOrderId", (int64_t)pData.installationOrderId.size(), (int64_t)1, (int64_t)256))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.installationOrderId = %s.", __FUNCTION__, pData.installationOrderId.c_str());
        marbenData->installationOrderId.copyOctetString(pData.installationOrderId.length(), (asnbyte*)(unsigned char*)(pData.installationOrderId.c_str()));
    }
    
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.instructions.size() = %d.", __FUNCTION__, pData.instructions.size());
    for (auto p_instruction = pData.instructions.begin(); p_instruction != pData.instructions.end();) 
    {
        asn_wrapper::asncinstructionss *instruction = new asn_wrapper::asncinstructionss();
        marbenData->instructions.addElement(instruction);

        if (verifyScope("ecuRemaining", (int64_t)p_instruction->ecuRemaining, (int64_t)1, (int64_t)255))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_instruction->ecuRemaining = %d.", __FUNCTION__, p_instruction->ecuRemaining);
            instruction->ecuRemaining = p_instruction->ecuRemaining;
        }
        if (verifyScope("installationInstructionSversion", (int64_t)p_instruction->installationInstructionSversion.size(), (int64_t)1, (int64_t)256))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_instruction->installationInstructionSversion = %s.", __FUNCTION__, p_instruction->installationInstructionSversion.c_str());
            instruction->installationInstructionSversion.copyOctetString(p_instruction->installationInstructionSversion.length(), (asnbyte*)(unsigned char*)(p_instruction->installationInstructionSversion.c_str()));
        }
        if (verifyScope("requiredPreparationTime", (int64_t)p_instruction->requiredPreparationTime, (int64_t)1, (int64_t)4294967295))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_instruction->requiredPreparationTime = %d.", __FUNCTION__, p_instruction->requiredPreparationTime);
            instruction->requiredPreparationTime = p_instruction->requiredPreparationTime;
        }
        if (verifyScope("expectedInstallationTime", (int64_t)p_instruction->expectedInstallationTime, (int64_t)1, (int64_t)4294967295))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_instruction->expectedInstallationTime = %d.", __FUNCTION__, p_instruction->expectedInstallationTime);
            instruction->expectedInstallationTime = p_instruction->expectedInstallationTime;
        }
        if (verifyScope("area1112SecurityCode", (int64_t)p_instruction->area1112SecurityCode.size(), (int64_t)1, (int64_t)32))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_instruction->area1112SecurityCode = %s.", __FUNCTION__, p_instruction->area1112SecurityCode.c_str());
            instruction->area1112SecurityCode.copyOctetString(p_instruction->area1112SecurityCode.length(), (asnbyte*)(unsigned char*)(p_instruction->area1112SecurityCode.c_str()));
        }
        
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_instruction->ecuInstructions.size() = %d.", __FUNCTION__, p_instruction->ecuInstructions.size());
        for (auto p_ecuInstruction = p_instruction->ecuInstructions.begin(); p_ecuInstruction != p_instruction->ecuInstructions.end();) 
        {
            asn_wrapper::asncInstruction__ecuInstructionss *ecuInstruction = new asn_wrapper::asncInstruction__ecuInstructionss();
            instruction->ecuInstructions.addElement(ecuInstruction);

            if (verifyScope("ecuAddress", (int64_t)p_ecuInstruction->ecuAddress.size(), (int64_t)1, (int64_t)256))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuInstruction->ecuAddress = %s.", __FUNCTION__, p_ecuInstruction->ecuAddress.c_str());
                ecuInstruction->ecuAddress.copyOctetString(p_ecuInstruction->ecuAddress.length(), (asnbyte*)(unsigned char*)(p_ecuInstruction->ecuAddress.c_str()));
            }
            if (verifyScope("queuedRequest", (int64_t)p_ecuInstruction->queuedRequest, (int64_t)1, (int64_t)65535))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuInstruction->queuedRequest = %d.", __FUNCTION__, p_ecuInstruction->queuedRequest);
                ecuInstruction->queuedRequest = p_ecuInstruction->queuedRequest;
            }
            if (verifyScope("securityKey", (int64_t)p_ecuInstruction->securityKey.size(), (int64_t)1, (int64_t)256))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuInstruction->securityKey = %s.", __FUNCTION__, p_ecuInstruction->securityKey.c_str());
                ecuInstruction->securityKey.copyOctetString(p_ecuInstruction->securityKey.length(), (asnbyte*)(unsigned char*)(p_ecuInstruction->securityKey.c_str()));
            }
            
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuInstruction->softwarePartInstallationInstructions.size() = %d.", __FUNCTION__, p_ecuInstruction->softwarePartInstallationInstructions.size());
            for (auto p_softwarePartInstallationInstruction = p_ecuInstruction->softwarePartInstallationInstructions.begin(); p_softwarePartInstallationInstruction != p_ecuInstruction->softwarePartInstallationInstructions.end();) 
            {
                asn_wrapper::asncsoftwarePartInstallationInstructionss *softwarePartInstallationInstruction = new asn_wrapper::asncsoftwarePartInstallationInstructionss();
                ecuInstruction->softwarePartInstallationInstructions.addElement(softwarePartInstallationInstruction);

                if (verifyScope("partidentifier", (int64_t)p_softwarePartInstallationInstruction->partidentifier.size(), (int64_t)1, (int64_t)256))
                {
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_softwarePartInstallationInstruction->partidentifier = %s.", __FUNCTION__, p_softwarePartInstallationInstruction->partidentifier.c_str());
                    softwarePartInstallationInstruction->partidentifier.copyOctetString(p_softwarePartInstallationInstruction->partidentifier.length(), (asnbyte*)(unsigned char*)(p_softwarePartInstallationInstruction->partidentifier.c_str()));
                }
                if (verifyScope("estimatedInstallationtime", (int64_t)p_softwarePartInstallationInstruction->estimatedInstallationtime, (int64_t)1, (int64_t)4294967295))
                {
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_softwarePartInstallationInstruction->estimatedInstallationtime = %d.", __FUNCTION__, p_softwarePartInstallationInstruction->estimatedInstallationtime);
                    softwarePartInstallationInstruction->estimatedInstallationtime = p_softwarePartInstallationInstruction->estimatedInstallationtime;
                }
            
                ++p_softwarePartInstallationInstruction;
            }
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: ecuInstruction->softwarePartInstallationInstructions.getCount() = %d.", __FUNCTION__, ecuInstruction->softwarePartInstallationInstructions.getCount());
            
        
            ++p_ecuInstruction;
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: instruction->ecuInstructions.getCount() = %d.", __FUNCTION__, instruction->ecuInstructions.getCount());
        
        
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_instruction->assignmentValidations.size() = %d.", __FUNCTION__, p_instruction->assignmentValidations.size());
        for (auto p_assignmentValidation = p_instruction->assignmentValidations.begin(); p_assignmentValidation != p_instruction->assignmentValidations.end();) 
        {
            asn_wrapper::asncassignmentValidationss *assignmentValidation = new asn_wrapper::asncassignmentValidationss();
            instruction->assignmentValidations.addElement(assignmentValidation);

            if (verifyScope("validationType", (int64_t)p_assignmentValidation->validationType.size(), (int64_t)1, (int64_t)256))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_assignmentValidation->validationType = %s.", __FUNCTION__, p_assignmentValidation->validationType.c_str());
                assignmentValidation->validationType.copyOctetString(p_assignmentValidation->validationType.length(), (asnbyte*)(unsigned char*)(p_assignmentValidation->validationType.c_str()));
            }
            if (verifyScope("ecuAddress", (int64_t)p_assignmentValidation->ecuAddress.size(), (int64_t)1, (int64_t)256))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_assignmentValidation->ecuAddress = %s.", __FUNCTION__, p_assignmentValidation->ecuAddress.c_str());
                assignmentValidation->ecuAddress.copyOctetString(p_assignmentValidation->ecuAddress.length(), (asnbyte*)(unsigned char*)(p_assignmentValidation->ecuAddress.c_str()));
            }
            if (verifyScope("validationkey", (int64_t)p_assignmentValidation->validationkey.size(), (int64_t)1, (int64_t)256))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_assignmentValidation->validationkey = %s.", __FUNCTION__, p_assignmentValidation->validationkey.c_str());
                assignmentValidation->validationkey.copyOctetString(p_assignmentValidation->validationkey.length(), (asnbyte*)(unsigned char*)(p_assignmentValidation->validationkey.c_str()));
            }
                
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_assignmentValidation->partidentifiers.size() = %d.", __FUNCTION__, p_assignmentValidation->partidentifiers.size());
                for (auto p_partidentifier = p_assignmentValidation->partidentifiers.begin(); p_partidentifier != p_assignmentValidation->partidentifiers.end();) 
                {
                    asn_wrapper::asncpartidentifierss *partidentifier = new asn_wrapper::asncpartidentifierss();
                    assignmentValidation->partidentifiers.addElement(partidentifier);

                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_partidentifier = %s.", __FUNCTION__, p_partidentifier);
                    partidentifier->value.copyOctetString(p_partidentifier->length(), (asnbyte*)(unsigned char*)(p_partidentifier->c_str()));                
                    ++p_partidentifier;
                }
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: assignmentValidation->partidentifiers.getCount() = %d.", __FUNCTION__, assignmentValidation->partidentifiers.getCount());
                
        
            ++p_assignmentValidation;
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: instruction->assignmentValidations.getCount() = %d.", __FUNCTION__, instruction->assignmentValidations.getCount());
        
    
        ++p_instruction;
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->instructions.getCount() = %d.", __FUNCTION__, marbenData->instructions.getCount());
    

    return true;
}

bool VdsMarbenAdaptGen::InstallationInstruction_Decode(const std::string &path, std::shared_ptr<InstallationInstruction_Model> &pData, asn_wrapper::InstallationInstruction* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::InstallationInstruction* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::InstallationInstruction*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->installationOrderId = std::string((const char*)marbenData->installationOrderId.value, marbenData->installationOrderId.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->installationOrderId = %s.", __FUNCTION__, pData->installationOrderId.c_str());
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->instructions.getCount() = %d.", __FUNCTION__, marbenData->instructions.getCount());
    unsigned int instructionCount = marbenData->instructions.getCount();
    asn_wrapper::asncinstructionss* instruction = (asn_wrapper::asncinstructionss*)(marbenData->instructions.getFirstElement());
    for (unsigned int i = 0; (i < instructionCount || instruction); i++) 
    {
        Instruction_Model p_instruction;
        p_instruction.ecuRemaining = instruction->ecuRemaining;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_instruction.ecuRemaining = %d.", __FUNCTION__, p_instruction.ecuRemaining);
        p_instruction.installationInstructionSversion = std::string((const char*)instruction->installationInstructionSversion.value, instruction->installationInstructionSversion.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_instruction.installationInstructionSversion = %s.", __FUNCTION__, p_instruction.installationInstructionSversion.c_str());
        p_instruction.requiredPreparationTime = instruction->requiredPreparationTime;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_instruction.requiredPreparationTime = %d.", __FUNCTION__, p_instruction.requiredPreparationTime);
        p_instruction.expectedInstallationTime = instruction->expectedInstallationTime;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_instruction.expectedInstallationTime = %d.", __FUNCTION__, p_instruction.expectedInstallationTime);
        p_instruction.area1112SecurityCode = std::string((const char*)instruction->area1112SecurityCode.value, instruction->area1112SecurityCode.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_instruction.area1112SecurityCode = %s.", __FUNCTION__, p_instruction.area1112SecurityCode.c_str());
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: instruction->ecuInstructions.getCount() = %d.", __FUNCTION__, instruction->ecuInstructions.getCount());
        unsigned int ecuInstructionCount = instruction->ecuInstructions.getCount();
        asn_wrapper::asncInstruction__ecuInstructionss* ecuInstruction = (asn_wrapper::asncInstruction__ecuInstructionss*)(instruction->ecuInstructions.getFirstElement());
        for (unsigned int ecuInstructions2 = 0; (ecuInstructions2 < ecuInstructionCount || ecuInstruction); ecuInstructions2++) 
        {
            EcuInstruction_Model p_ecuInstruction;
            p_ecuInstruction.ecuAddress = std::string((const char*)ecuInstruction->ecuAddress.value, ecuInstruction->ecuAddress.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuInstruction.ecuAddress = %s.", __FUNCTION__, p_ecuInstruction.ecuAddress.c_str());
            p_ecuInstruction.queuedRequest = ecuInstruction->queuedRequest;
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuInstruction.queuedRequest = %d.", __FUNCTION__, p_ecuInstruction.queuedRequest);
            p_ecuInstruction.securityKey = std::string((const char*)ecuInstruction->securityKey.value, ecuInstruction->securityKey.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuInstruction.securityKey = %s.", __FUNCTION__, p_ecuInstruction.securityKey.c_str());
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: ecuInstruction->softwarePartInstallationInstructions.getCount() = %d.", __FUNCTION__, ecuInstruction->softwarePartInstallationInstructions.getCount());
            unsigned int softwarePartInstallationInstructionCount = ecuInstruction->softwarePartInstallationInstructions.getCount();
            asn_wrapper::asncsoftwarePartInstallationInstructionss* softwarePartInstallationInstruction = (asn_wrapper::asncsoftwarePartInstallationInstructionss*)(ecuInstruction->softwarePartInstallationInstructions.getFirstElement());
            for (unsigned int softwarePartInstallationInstructions3 = 0; (softwarePartInstallationInstructions3 < softwarePartInstallationInstructionCount || softwarePartInstallationInstruction); softwarePartInstallationInstructions3++) 
            {
                SoftwarePartInstallationInstruction_Model p_softwarePartInstallationInstruction;
                p_softwarePartInstallationInstruction.partidentifier = std::string((const char*)softwarePartInstallationInstruction->partidentifier.value, softwarePartInstallationInstruction->partidentifier.length);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_softwarePartInstallationInstruction.partidentifier = %s.", __FUNCTION__, p_softwarePartInstallationInstruction.partidentifier.c_str());
                p_softwarePartInstallationInstruction.estimatedInstallationtime = softwarePartInstallationInstruction->estimatedInstallationtime;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_softwarePartInstallationInstruction.estimatedInstallationtime = %d.", __FUNCTION__, p_softwarePartInstallationInstruction.estimatedInstallationtime);
                p_ecuInstruction.softwarePartInstallationInstructions.push_back(p_softwarePartInstallationInstruction);
                softwarePartInstallationInstruction = (asn_wrapper::asncsoftwarePartInstallationInstructionss*)(softwarePartInstallationInstruction->getNextElement());
            }
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuInstruction.softwarePartInstallationInstructions.size() = %d.", __FUNCTION__, p_ecuInstruction.softwarePartInstallationInstructions.size());
            
            p_instruction.ecuInstructions.push_back(p_ecuInstruction);
            ecuInstruction = (asn_wrapper::asncInstruction__ecuInstructionss*)(ecuInstruction->getNextElement());
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_instruction.ecuInstructions.size() = %d.", __FUNCTION__, p_instruction.ecuInstructions.size());
        
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: instruction->assignmentValidations.getCount() = %d.", __FUNCTION__, instruction->assignmentValidations.getCount());
        unsigned int assignmentValidationCount = instruction->assignmentValidations.getCount();
        asn_wrapper::asncassignmentValidationss* assignmentValidation = (asn_wrapper::asncassignmentValidationss*)(instruction->assignmentValidations.getFirstElement());
        for (unsigned int assignmentValidations2 = 0; (assignmentValidations2 < assignmentValidationCount || assignmentValidation); assignmentValidations2++) 
        {
            AssignmentValidation_Model p_assignmentValidation;
            p_assignmentValidation.validationType = std::string((const char*)assignmentValidation->validationType.value, assignmentValidation->validationType.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_assignmentValidation.validationType = %s.", __FUNCTION__, p_assignmentValidation.validationType.c_str());
            p_assignmentValidation.ecuAddress = std::string((const char*)assignmentValidation->ecuAddress.value, assignmentValidation->ecuAddress.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_assignmentValidation.ecuAddress = %s.", __FUNCTION__, p_assignmentValidation.ecuAddress.c_str());
            p_assignmentValidation.validationkey = std::string((const char*)assignmentValidation->validationkey.value, assignmentValidation->validationkey.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_assignmentValidation.validationkey = %s.", __FUNCTION__, p_assignmentValidation.validationkey.c_str());
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: assignmentValidation->partidentifiers.getCount() = %d.", __FUNCTION__, assignmentValidation->partidentifiers.getCount());
            unsigned int partidentifierCount = assignmentValidation->partidentifiers.getCount();
            asn_wrapper::asncpartidentifierss* partidentifier = (asn_wrapper::asncpartidentifierss*)(assignmentValidation->partidentifiers.getFirstElement());
            for (unsigned int partidentifiers3 = 0; (partidentifiers3 < partidentifierCount || partidentifier); partidentifiers3++) 
            {
                std::string p_partidentifier;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_partidentifier = %s.", __FUNCTION__, p_partidentifier);
                p_partidentifier = std::string((const char*)partidentifier->value.value, partidentifier->value.length);
                p_assignmentValidation.partidentifiers.push_back(p_partidentifier);
                partidentifier = (asn_wrapper::asncpartidentifierss*)(partidentifier->getNextElement());
            }
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_assignmentValidation.partidentifiers.size() = %d.", __FUNCTION__, p_assignmentValidation.partidentifiers.size());
            
            p_instruction.assignmentValidations.push_back(p_assignmentValidation);
            assignmentValidation = (asn_wrapper::asncassignmentValidationss*)(assignmentValidation->getNextElement());
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_instruction.assignmentValidations.size() = %d.", __FUNCTION__, p_instruction.assignmentValidations.size());
        
        pData->instructions.push_back(p_instruction);
        instruction = (asn_wrapper::asncinstructionss*)(instruction->getNextElement());
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->instructions.size() = %d.", __FUNCTION__, pData->instructions.size());
    

    return true;
}

bool VdsMarbenAdaptGen::Instruction_Encode(const Instruction_Model &pData, asn_wrapper::Instruction* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::Instruction* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::Instruction*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("ecuRemaining", (int64_t)pData.ecuRemaining, (int64_t)1, (int64_t)255))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.ecuRemaining = %d.", __FUNCTION__, pData.ecuRemaining);
        marbenData->ecuRemaining = pData.ecuRemaining;
    }
    if (verifyScope("installationInstructionSversion", (int64_t)pData.installationInstructionSversion.size(), (int64_t)1, (int64_t)256))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.installationInstructionSversion = %s.", __FUNCTION__, pData.installationInstructionSversion.c_str());
        marbenData->installationInstructionSversion.copyOctetString(pData.installationInstructionSversion.length(), (asnbyte*)(unsigned char*)(pData.installationInstructionSversion.c_str()));
    }
    if (verifyScope("requiredPreparationTime", (int64_t)pData.requiredPreparationTime, (int64_t)1, (int64_t)4294967295))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.requiredPreparationTime = %d.", __FUNCTION__, pData.requiredPreparationTime);
        marbenData->requiredPreparationTime = pData.requiredPreparationTime;
    }
    if (verifyScope("expectedInstallationTime", (int64_t)pData.expectedInstallationTime, (int64_t)1, (int64_t)4294967295))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.expectedInstallationTime = %d.", __FUNCTION__, pData.expectedInstallationTime);
        marbenData->expectedInstallationTime = pData.expectedInstallationTime;
    }
    if (verifyScope("area1112SecurityCode", (int64_t)pData.area1112SecurityCode.size(), (int64_t)1, (int64_t)32))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.area1112SecurityCode = %s.", __FUNCTION__, pData.area1112SecurityCode.c_str());
        marbenData->area1112SecurityCode.copyOctetString(pData.area1112SecurityCode.length(), (asnbyte*)(unsigned char*)(pData.area1112SecurityCode.c_str()));
    }
    
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.ecuInstructions.size() = %d.", __FUNCTION__, pData.ecuInstructions.size());
    for (auto p_ecuInstruction = pData.ecuInstructions.begin(); p_ecuInstruction != pData.ecuInstructions.end();) 
    {
        asn_wrapper::asncInstruction__ecuInstructionss *ecuInstruction = new asn_wrapper::asncInstruction__ecuInstructionss();
        marbenData->ecuInstructions.addElement(ecuInstruction);

        if (verifyScope("ecuAddress", (int64_t)p_ecuInstruction->ecuAddress.size(), (int64_t)1, (int64_t)256))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuInstruction->ecuAddress = %s.", __FUNCTION__, p_ecuInstruction->ecuAddress.c_str());
            ecuInstruction->ecuAddress.copyOctetString(p_ecuInstruction->ecuAddress.length(), (asnbyte*)(unsigned char*)(p_ecuInstruction->ecuAddress.c_str()));
        }
        if (verifyScope("queuedRequest", (int64_t)p_ecuInstruction->queuedRequest, (int64_t)1, (int64_t)65535))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuInstruction->queuedRequest = %d.", __FUNCTION__, p_ecuInstruction->queuedRequest);
            ecuInstruction->queuedRequest = p_ecuInstruction->queuedRequest;
        }
        if (verifyScope("securityKey", (int64_t)p_ecuInstruction->securityKey.size(), (int64_t)1, (int64_t)256))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuInstruction->securityKey = %s.", __FUNCTION__, p_ecuInstruction->securityKey.c_str());
            ecuInstruction->securityKey.copyOctetString(p_ecuInstruction->securityKey.length(), (asnbyte*)(unsigned char*)(p_ecuInstruction->securityKey.c_str()));
        }
        
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuInstruction->softwarePartInstallationInstructions.size() = %d.", __FUNCTION__, p_ecuInstruction->softwarePartInstallationInstructions.size());
        for (auto p_softwarePartInstallationInstruction = p_ecuInstruction->softwarePartInstallationInstructions.begin(); p_softwarePartInstallationInstruction != p_ecuInstruction->softwarePartInstallationInstructions.end();) 
        {
            asn_wrapper::asncsoftwarePartInstallationInstructionss *softwarePartInstallationInstruction = new asn_wrapper::asncsoftwarePartInstallationInstructionss();
            ecuInstruction->softwarePartInstallationInstructions.addElement(softwarePartInstallationInstruction);

            if (verifyScope("partidentifier", (int64_t)p_softwarePartInstallationInstruction->partidentifier.size(), (int64_t)1, (int64_t)256))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_softwarePartInstallationInstruction->partidentifier = %s.", __FUNCTION__, p_softwarePartInstallationInstruction->partidentifier.c_str());
                softwarePartInstallationInstruction->partidentifier.copyOctetString(p_softwarePartInstallationInstruction->partidentifier.length(), (asnbyte*)(unsigned char*)(p_softwarePartInstallationInstruction->partidentifier.c_str()));
            }
            if (verifyScope("estimatedInstallationtime", (int64_t)p_softwarePartInstallationInstruction->estimatedInstallationtime, (int64_t)1, (int64_t)4294967295))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_softwarePartInstallationInstruction->estimatedInstallationtime = %d.", __FUNCTION__, p_softwarePartInstallationInstruction->estimatedInstallationtime);
                softwarePartInstallationInstruction->estimatedInstallationtime = p_softwarePartInstallationInstruction->estimatedInstallationtime;
            }
        
            ++p_softwarePartInstallationInstruction;
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: ecuInstruction->softwarePartInstallationInstructions.getCount() = %d.", __FUNCTION__, ecuInstruction->softwarePartInstallationInstructions.getCount());
        
    
        ++p_ecuInstruction;
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->ecuInstructions.getCount() = %d.", __FUNCTION__, marbenData->ecuInstructions.getCount());
    
    
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.assignmentValidations.size() = %d.", __FUNCTION__, pData.assignmentValidations.size());
    for (auto p_assignmentValidation = pData.assignmentValidations.begin(); p_assignmentValidation != pData.assignmentValidations.end();) 
    {
        asn_wrapper::asncassignmentValidationss *assignmentValidation = new asn_wrapper::asncassignmentValidationss();
        marbenData->assignmentValidations.addElement(assignmentValidation);

        if (verifyScope("validationType", (int64_t)p_assignmentValidation->validationType.size(), (int64_t)1, (int64_t)256))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_assignmentValidation->validationType = %s.", __FUNCTION__, p_assignmentValidation->validationType.c_str());
            assignmentValidation->validationType.copyOctetString(p_assignmentValidation->validationType.length(), (asnbyte*)(unsigned char*)(p_assignmentValidation->validationType.c_str()));
        }
        if (verifyScope("ecuAddress", (int64_t)p_assignmentValidation->ecuAddress.size(), (int64_t)1, (int64_t)256))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_assignmentValidation->ecuAddress = %s.", __FUNCTION__, p_assignmentValidation->ecuAddress.c_str());
            assignmentValidation->ecuAddress.copyOctetString(p_assignmentValidation->ecuAddress.length(), (asnbyte*)(unsigned char*)(p_assignmentValidation->ecuAddress.c_str()));
        }
        if (verifyScope("validationkey", (int64_t)p_assignmentValidation->validationkey.size(), (int64_t)1, (int64_t)256))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_assignmentValidation->validationkey = %s.", __FUNCTION__, p_assignmentValidation->validationkey.c_str());
            assignmentValidation->validationkey.copyOctetString(p_assignmentValidation->validationkey.length(), (asnbyte*)(unsigned char*)(p_assignmentValidation->validationkey.c_str()));
        }
            
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_assignmentValidation->partidentifiers.size() = %d.", __FUNCTION__, p_assignmentValidation->partidentifiers.size());
            for (auto p_partidentifier = p_assignmentValidation->partidentifiers.begin(); p_partidentifier != p_assignmentValidation->partidentifiers.end();) 
            {
                asn_wrapper::asncpartidentifierss *partidentifier = new asn_wrapper::asncpartidentifierss();
                assignmentValidation->partidentifiers.addElement(partidentifier);

                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_partidentifier = %s.", __FUNCTION__, p_partidentifier);
                partidentifier->value.copyOctetString(p_partidentifier->length(), (asnbyte*)(unsigned char*)(p_partidentifier->c_str()));            
                ++p_partidentifier;
            }
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: assignmentValidation->partidentifiers.getCount() = %d.", __FUNCTION__, assignmentValidation->partidentifiers.getCount());
            
    
        ++p_assignmentValidation;
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->assignmentValidations.getCount() = %d.", __FUNCTION__, marbenData->assignmentValidations.getCount());
    

    return true;
}

bool VdsMarbenAdaptGen::Instruction_Decode(const std::string &path, std::shared_ptr<Instruction_Model> &pData, asn_wrapper::Instruction* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::Instruction* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::Instruction*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->ecuRemaining = marbenData->ecuRemaining;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->ecuRemaining = %d.", __FUNCTION__, pData->ecuRemaining);
    pData->installationInstructionSversion = std::string((const char*)marbenData->installationInstructionSversion.value, marbenData->installationInstructionSversion.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->installationInstructionSversion = %s.", __FUNCTION__, pData->installationInstructionSversion.c_str());
    pData->requiredPreparationTime = marbenData->requiredPreparationTime;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->requiredPreparationTime = %d.", __FUNCTION__, pData->requiredPreparationTime);
    pData->expectedInstallationTime = marbenData->expectedInstallationTime;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->expectedInstallationTime = %d.", __FUNCTION__, pData->expectedInstallationTime);
    pData->area1112SecurityCode = std::string((const char*)marbenData->area1112SecurityCode.value, marbenData->area1112SecurityCode.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->area1112SecurityCode = %s.", __FUNCTION__, pData->area1112SecurityCode.c_str());
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->ecuInstructions.getCount() = %d.", __FUNCTION__, marbenData->ecuInstructions.getCount());
    unsigned int ecuInstructionCount = marbenData->ecuInstructions.getCount();
    asn_wrapper::asncInstruction__ecuInstructionss* ecuInstruction = (asn_wrapper::asncInstruction__ecuInstructionss*)(marbenData->ecuInstructions.getFirstElement());
    for (unsigned int i = 0; (i < ecuInstructionCount || ecuInstruction); i++) 
    {
        EcuInstruction_Model p_ecuInstruction;
        p_ecuInstruction.ecuAddress = std::string((const char*)ecuInstruction->ecuAddress.value, ecuInstruction->ecuAddress.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuInstruction.ecuAddress = %s.", __FUNCTION__, p_ecuInstruction.ecuAddress.c_str());
        p_ecuInstruction.queuedRequest = ecuInstruction->queuedRequest;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuInstruction.queuedRequest = %d.", __FUNCTION__, p_ecuInstruction.queuedRequest);
        p_ecuInstruction.securityKey = std::string((const char*)ecuInstruction->securityKey.value, ecuInstruction->securityKey.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuInstruction.securityKey = %s.", __FUNCTION__, p_ecuInstruction.securityKey.c_str());
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: ecuInstruction->softwarePartInstallationInstructions.getCount() = %d.", __FUNCTION__, ecuInstruction->softwarePartInstallationInstructions.getCount());
        unsigned int softwarePartInstallationInstructionCount = ecuInstruction->softwarePartInstallationInstructions.getCount();
        asn_wrapper::asncsoftwarePartInstallationInstructionss* softwarePartInstallationInstruction = (asn_wrapper::asncsoftwarePartInstallationInstructionss*)(ecuInstruction->softwarePartInstallationInstructions.getFirstElement());
        for (unsigned int softwarePartInstallationInstructions2 = 0; (softwarePartInstallationInstructions2 < softwarePartInstallationInstructionCount || softwarePartInstallationInstruction); softwarePartInstallationInstructions2++) 
        {
            SoftwarePartInstallationInstruction_Model p_softwarePartInstallationInstruction;
            p_softwarePartInstallationInstruction.partidentifier = std::string((const char*)softwarePartInstallationInstruction->partidentifier.value, softwarePartInstallationInstruction->partidentifier.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_softwarePartInstallationInstruction.partidentifier = %s.", __FUNCTION__, p_softwarePartInstallationInstruction.partidentifier.c_str());
            p_softwarePartInstallationInstruction.estimatedInstallationtime = softwarePartInstallationInstruction->estimatedInstallationtime;
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_softwarePartInstallationInstruction.estimatedInstallationtime = %d.", __FUNCTION__, p_softwarePartInstallationInstruction.estimatedInstallationtime);
            p_ecuInstruction.softwarePartInstallationInstructions.push_back(p_softwarePartInstallationInstruction);
            softwarePartInstallationInstruction = (asn_wrapper::asncsoftwarePartInstallationInstructionss*)(softwarePartInstallationInstruction->getNextElement());
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuInstruction.softwarePartInstallationInstructions.size() = %d.", __FUNCTION__, p_ecuInstruction.softwarePartInstallationInstructions.size());
        
        pData->ecuInstructions.push_back(p_ecuInstruction);
        ecuInstruction = (asn_wrapper::asncInstruction__ecuInstructionss*)(ecuInstruction->getNextElement());
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->ecuInstructions.size() = %d.", __FUNCTION__, pData->ecuInstructions.size());
    
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->assignmentValidations.getCount() = %d.", __FUNCTION__, marbenData->assignmentValidations.getCount());
    unsigned int assignmentValidationCount = marbenData->assignmentValidations.getCount();
    asn_wrapper::asncassignmentValidationss* assignmentValidation = (asn_wrapper::asncassignmentValidationss*)(marbenData->assignmentValidations.getFirstElement());
    for (unsigned int i = 0; (i < assignmentValidationCount || assignmentValidation); i++) 
    {
        AssignmentValidation_Model p_assignmentValidation;
        p_assignmentValidation.validationType = std::string((const char*)assignmentValidation->validationType.value, assignmentValidation->validationType.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_assignmentValidation.validationType = %s.", __FUNCTION__, p_assignmentValidation.validationType.c_str());
        p_assignmentValidation.ecuAddress = std::string((const char*)assignmentValidation->ecuAddress.value, assignmentValidation->ecuAddress.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_assignmentValidation.ecuAddress = %s.", __FUNCTION__, p_assignmentValidation.ecuAddress.c_str());
        p_assignmentValidation.validationkey = std::string((const char*)assignmentValidation->validationkey.value, assignmentValidation->validationkey.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_assignmentValidation.validationkey = %s.", __FUNCTION__, p_assignmentValidation.validationkey.c_str());
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: assignmentValidation->partidentifiers.getCount() = %d.", __FUNCTION__, assignmentValidation->partidentifiers.getCount());
        unsigned int partidentifierCount = assignmentValidation->partidentifiers.getCount();
        asn_wrapper::asncpartidentifierss* partidentifier = (asn_wrapper::asncpartidentifierss*)(assignmentValidation->partidentifiers.getFirstElement());
        for (unsigned int partidentifiers2 = 0; (partidentifiers2 < partidentifierCount || partidentifier); partidentifiers2++) 
        {
            std::string p_partidentifier;
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_partidentifier = %s.", __FUNCTION__, p_partidentifier);
            p_partidentifier = std::string((const char*)partidentifier->value.value, partidentifier->value.length);
            p_assignmentValidation.partidentifiers.push_back(p_partidentifier);
            partidentifier = (asn_wrapper::asncpartidentifierss*)(partidentifier->getNextElement());
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_assignmentValidation.partidentifiers.size() = %d.", __FUNCTION__, p_assignmentValidation.partidentifiers.size());
        
        pData->assignmentValidations.push_back(p_assignmentValidation);
        assignmentValidation = (asn_wrapper::asncassignmentValidationss*)(assignmentValidation->getNextElement());
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->assignmentValidations.size() = %d.", __FUNCTION__, pData->assignmentValidations.size());
    

    return true;
}

bool VdsMarbenAdaptGen::EcuInstruction_Encode(const EcuInstruction_Model &pData, asn_wrapper::EcuInstruction* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::EcuInstruction* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::EcuInstruction*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("ecuAddress", (int64_t)pData.ecuAddress.size(), (int64_t)1, (int64_t)256))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.ecuAddress = %s.", __FUNCTION__, pData.ecuAddress.c_str());
        marbenData->ecuAddress.copyOctetString(pData.ecuAddress.length(), (asnbyte*)(unsigned char*)(pData.ecuAddress.c_str()));
    }
    if (verifyScope("queuedRequest", (int64_t)pData.queuedRequest, (int64_t)1, (int64_t)65535))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.queuedRequest = %d.", __FUNCTION__, pData.queuedRequest);
        marbenData->queuedRequest = pData.queuedRequest;
    }
    if (verifyScope("securityKey", (int64_t)pData.securityKey.size(), (int64_t)1, (int64_t)256))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.securityKey = %s.", __FUNCTION__, pData.securityKey.c_str());
        marbenData->securityKey.copyOctetString(pData.securityKey.length(), (asnbyte*)(unsigned char*)(pData.securityKey.c_str()));
    }
    
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.softwarePartInstallationInstructions.size() = %d.", __FUNCTION__, pData.softwarePartInstallationInstructions.size());
    for (auto p_softwarePartInstallationInstruction = pData.softwarePartInstallationInstructions.begin(); p_softwarePartInstallationInstruction != pData.softwarePartInstallationInstructions.end();) 
    {
        asn_wrapper::asncsoftwarePartInstallationInstructionss *softwarePartInstallationInstruction = new asn_wrapper::asncsoftwarePartInstallationInstructionss();
        marbenData->softwarePartInstallationInstructions.addElement(softwarePartInstallationInstruction);

        if (verifyScope("partidentifier", (int64_t)p_softwarePartInstallationInstruction->partidentifier.size(), (int64_t)1, (int64_t)256))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_softwarePartInstallationInstruction->partidentifier = %s.", __FUNCTION__, p_softwarePartInstallationInstruction->partidentifier.c_str());
            softwarePartInstallationInstruction->partidentifier.copyOctetString(p_softwarePartInstallationInstruction->partidentifier.length(), (asnbyte*)(unsigned char*)(p_softwarePartInstallationInstruction->partidentifier.c_str()));
        }
        if (verifyScope("estimatedInstallationtime", (int64_t)p_softwarePartInstallationInstruction->estimatedInstallationtime, (int64_t)1, (int64_t)4294967295))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_softwarePartInstallationInstruction->estimatedInstallationtime = %d.", __FUNCTION__, p_softwarePartInstallationInstruction->estimatedInstallationtime);
            softwarePartInstallationInstruction->estimatedInstallationtime = p_softwarePartInstallationInstruction->estimatedInstallationtime;
        }
    
        ++p_softwarePartInstallationInstruction;
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->softwarePartInstallationInstructions.getCount() = %d.", __FUNCTION__, marbenData->softwarePartInstallationInstructions.getCount());
    

    return true;
}

bool VdsMarbenAdaptGen::EcuInstruction_Decode(const std::string &path, std::shared_ptr<EcuInstruction_Model> &pData, asn_wrapper::EcuInstruction* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::EcuInstruction* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::EcuInstruction*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->ecuAddress = std::string((const char*)marbenData->ecuAddress.value, marbenData->ecuAddress.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->ecuAddress = %s.", __FUNCTION__, pData->ecuAddress.c_str());
    pData->queuedRequest = marbenData->queuedRequest;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->queuedRequest = %d.", __FUNCTION__, pData->queuedRequest);
    pData->securityKey = std::string((const char*)marbenData->securityKey.value, marbenData->securityKey.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->securityKey = %s.", __FUNCTION__, pData->securityKey.c_str());
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->softwarePartInstallationInstructions.getCount() = %d.", __FUNCTION__, marbenData->softwarePartInstallationInstructions.getCount());
    unsigned int softwarePartInstallationInstructionCount = marbenData->softwarePartInstallationInstructions.getCount();
    asn_wrapper::asncsoftwarePartInstallationInstructionss* softwarePartInstallationInstruction = (asn_wrapper::asncsoftwarePartInstallationInstructionss*)(marbenData->softwarePartInstallationInstructions.getFirstElement());
    for (unsigned int i = 0; (i < softwarePartInstallationInstructionCount || softwarePartInstallationInstruction); i++) 
    {
        SoftwarePartInstallationInstruction_Model p_softwarePartInstallationInstruction;
        p_softwarePartInstallationInstruction.partidentifier = std::string((const char*)softwarePartInstallationInstruction->partidentifier.value, softwarePartInstallationInstruction->partidentifier.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_softwarePartInstallationInstruction.partidentifier = %s.", __FUNCTION__, p_softwarePartInstallationInstruction.partidentifier.c_str());
        p_softwarePartInstallationInstruction.estimatedInstallationtime = softwarePartInstallationInstruction->estimatedInstallationtime;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_softwarePartInstallationInstruction.estimatedInstallationtime = %d.", __FUNCTION__, p_softwarePartInstallationInstruction.estimatedInstallationtime);
        pData->softwarePartInstallationInstructions.push_back(p_softwarePartInstallationInstruction);
        softwarePartInstallationInstruction = (asn_wrapper::asncsoftwarePartInstallationInstructionss*)(softwarePartInstallationInstruction->getNextElement());
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->softwarePartInstallationInstructions.size() = %d.", __FUNCTION__, pData->softwarePartInstallationInstructions.size());
    

    return true;
}

bool VdsMarbenAdaptGen::SoftwarePartInstallationInstruction_Encode(const SoftwarePartInstallationInstruction_Model &pData, asn_wrapper::SoftwarePartInstallationInstruction* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::SoftwarePartInstallationInstruction* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::SoftwarePartInstallationInstruction*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("partidentifier", (int64_t)pData.partidentifier.size(), (int64_t)1, (int64_t)256))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.partidentifier = %s.", __FUNCTION__, pData.partidentifier.c_str());
        marbenData->partidentifier.copyOctetString(pData.partidentifier.length(), (asnbyte*)(unsigned char*)(pData.partidentifier.c_str()));
    }
    if (verifyScope("estimatedInstallationtime", (int64_t)pData.estimatedInstallationtime, (int64_t)1, (int64_t)4294967295))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.estimatedInstallationtime = %d.", __FUNCTION__, pData.estimatedInstallationtime);
        marbenData->estimatedInstallationtime = pData.estimatedInstallationtime;
    }

    return true;
}

bool VdsMarbenAdaptGen::SoftwarePartInstallationInstruction_Decode(const std::string &path, std::shared_ptr<SoftwarePartInstallationInstruction_Model> &pData, asn_wrapper::SoftwarePartInstallationInstruction* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::SoftwarePartInstallationInstruction* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::SoftwarePartInstallationInstruction*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->partidentifier = std::string((const char*)marbenData->partidentifier.value, marbenData->partidentifier.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->partidentifier = %s.", __FUNCTION__, pData->partidentifier.c_str());
    pData->estimatedInstallationtime = marbenData->estimatedInstallationtime;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->estimatedInstallationtime = %d.", __FUNCTION__, pData->estimatedInstallationtime);

    return true;
}

bool VdsMarbenAdaptGen::AssignmentValidation_Encode(const AssignmentValidation_Model &pData, asn_wrapper::AssignmentValidation* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::AssignmentValidation* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::AssignmentValidation*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("validationType", (int64_t)pData.validationType.size(), (int64_t)1, (int64_t)256))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.validationType = %s.", __FUNCTION__, pData.validationType.c_str());
        marbenData->validationType.copyOctetString(pData.validationType.length(), (asnbyte*)(unsigned char*)(pData.validationType.c_str()));
    }
    if (verifyScope("ecuAddress", (int64_t)pData.ecuAddress.size(), (int64_t)1, (int64_t)256))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.ecuAddress = %s.", __FUNCTION__, pData.ecuAddress.c_str());
        marbenData->ecuAddress.copyOctetString(pData.ecuAddress.length(), (asnbyte*)(unsigned char*)(pData.ecuAddress.c_str()));
    }
    if (verifyScope("validationkey", (int64_t)pData.validationkey.size(), (int64_t)1, (int64_t)256))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.validationkey = %s.", __FUNCTION__, pData.validationkey.c_str());
        marbenData->validationkey.copyOctetString(pData.validationkey.length(), (asnbyte*)(unsigned char*)(pData.validationkey.c_str()));
    }
        
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.partidentifiers.size() = %d.", __FUNCTION__, pData.partidentifiers.size());
        for (auto p_partidentifier = pData.partidentifiers.begin(); p_partidentifier != pData.partidentifiers.end();) 
        {
            asn_wrapper::asncpartidentifierss *partidentifier = new asn_wrapper::asncpartidentifierss();
            marbenData->partidentifiers.addElement(partidentifier);

            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_partidentifier = %s.", __FUNCTION__, p_partidentifier);
            partidentifier->value.copyOctetString(p_partidentifier->length(), (asnbyte*)(unsigned char*)(p_partidentifier->c_str()));        
            ++p_partidentifier;
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->partidentifiers.getCount() = %d.", __FUNCTION__, marbenData->partidentifiers.getCount());
        

    return true;
}

bool VdsMarbenAdaptGen::AssignmentValidation_Decode(const std::string &path, std::shared_ptr<AssignmentValidation_Model> &pData, asn_wrapper::AssignmentValidation* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::AssignmentValidation* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::AssignmentValidation*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->validationType = std::string((const char*)marbenData->validationType.value, marbenData->validationType.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->validationType = %s.", __FUNCTION__, pData->validationType.c_str());
    pData->ecuAddress = std::string((const char*)marbenData->ecuAddress.value, marbenData->ecuAddress.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->ecuAddress = %s.", __FUNCTION__, pData->ecuAddress.c_str());
    pData->validationkey = std::string((const char*)marbenData->validationkey.value, marbenData->validationkey.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->validationkey = %s.", __FUNCTION__, pData->validationkey.c_str());
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->partidentifiers.getCount() = %d.", __FUNCTION__, marbenData->partidentifiers.getCount());
    unsigned int partidentifierCount = marbenData->partidentifiers.getCount();
    asn_wrapper::asncpartidentifierss* partidentifier = (asn_wrapper::asncpartidentifierss*)(marbenData->partidentifiers.getFirstElement());
    for (unsigned int i = 0; (i < partidentifierCount || partidentifier); i++) 
    {
        std::string p_partidentifier;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_partidentifier = %s.", __FUNCTION__, p_partidentifier);
        p_partidentifier = std::string((const char*)partidentifier->value.value, partidentifier->value.length);
        pData->partidentifiers.push_back(p_partidentifier);
        partidentifier = (asn_wrapper::asncpartidentifierss*)(partidentifier->getNextElement());
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->partidentifiers.size() = %d.", __FUNCTION__, pData->partidentifiers.size());
    

    return true;
}

bool VdsMarbenAdaptGen::FotaAssignmentNotification_Encode(const FotaAssignmentNotification_Model &pData, asn_wrapper::FotaAssignmentNotification* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::FotaAssignmentNotification* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::FotaAssignmentNotification*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (pData.installationOrderId_presence)
    {
        if (verifyScope("installationOrderId", (int64_t)pData.installationOrderId.size(), (int64_t)1, (int64_t)256))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_FotaAssignmentNotification__installationOrderId);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.installationOrderId = %s.", __FUNCTION__, pData.installationOrderId.c_str());
            marbenData->installationOrderId.copyOctetString(pData.installationOrderId.length(), (asnbyte*)(unsigned char*)(pData.installationOrderId.c_str()));
        }
    }
    if (verifyScope("timestamp", (int64_t)pData.timestamp.size(), (int64_t)1, (int64_t)32))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.timestamp = %s.", __FUNCTION__, pData.timestamp.c_str());
        marbenData->timestamp.copyOctetString(pData.timestamp.length(), (asnbyte*)(unsigned char*)(pData.timestamp.c_str()));
    }
    if (verifyScope("newStatus", (int64_t)pData.newStatus.size(), (int64_t)1, (int64_t)256))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.newStatus = %s.", __FUNCTION__, pData.newStatus.c_str());
        marbenData->newStatus.copyOctetString(pData.newStatus.length(), (asnbyte*)(unsigned char*)(pData.newStatus.c_str()));
    }
    if (pData.reason_presence)
    {
        if (verifyScope("reason", (int64_t)pData.reason.size(), (int64_t)1, (int64_t)256))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_FotaAssignmentNotification__reason);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.reason = %s.", __FUNCTION__, pData.reason.c_str());
            marbenData->reason.copyOctetString(pData.reason.length(), (asnbyte*)(unsigned char*)(pData.reason.c_str()));
        }
    }
    if (pData.deltaTime_presence)
    {
        if (verifyScope("deltaTime", (int64_t)pData.deltaTime, (int64_t)1, (int64_t)604800))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_deltaTime);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.deltaTime = %d.", __FUNCTION__, pData.deltaTime);
            marbenData->deltaTime = pData.deltaTime;
        }
    }
    if (pData.serviceParams_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_serviceParams);
        
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.serviceParams.size() = %d.", __FUNCTION__, pData.serviceParams.size());
        for (auto p_serviceParam = pData.serviceParams.begin(); p_serviceParam != pData.serviceParams.end();) 
        {
            asn_wrapper::asncserviceParamss *serviceParam = new asn_wrapper::asncserviceParamss();
            marbenData->serviceParams.addElement(serviceParam);

            if (verifyScope("key", (int64_t)p_serviceParam->key.size(), (int64_t)0, (int64_t)250))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParam->key = %s.", __FUNCTION__, p_serviceParam->key.c_str());
                serviceParam->key.copyOctetString(p_serviceParam->key.length(), (asnbyte*)(unsigned char*)(p_serviceParam->key.c_str()));
            }
            if (p_serviceParam->intVal_presence)
            {
                serviceParam->optional.setPresence(asn_wrapper::asn_intVal);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParam->intVal = %d.", __FUNCTION__, p_serviceParam->intVal);
                serviceParam->intVal = p_serviceParam->intVal;
            }
            if (p_serviceParam->stringVal_presence)
            {
                if (verifyScope("stringVal", (int64_t)p_serviceParam->stringVal.size(), (int64_t)0, (int64_t)65535))
                {
                    serviceParam->optional.setPresence(asn_wrapper::asn_ServiceParameter__stringVal);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParam->stringVal = %s.", __FUNCTION__, p_serviceParam->stringVal.c_str());
                    serviceParam->stringVal.copyOctetString(p_serviceParam->stringVal.length(), (asnbyte*)(unsigned char*)(p_serviceParam->stringVal.c_str()));
                }
            }
            if (p_serviceParam->boolVal_presence)
            {
                serviceParam->optional.setPresence(asn_wrapper::asn_ServiceParameter__boolVal);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParam->boolVal = %d.", __FUNCTION__, p_serviceParam->boolVal);
                serviceParam->boolVal = p_serviceParam->boolVal;
            }
            if (p_serviceParam->timestampVal_presence)
            {
                serviceParam->optional.setPresence(asn_wrapper::asn_ServiceParameter__timestampVal);
                if (serviceParam->timestampVal == nullptr )
                {
                    serviceParam->timestampVal = new asn_wrapper::TimeStamp();
                }
                TimeStamp_Encode(p_serviceParam->timestampVal, serviceParam->timestampVal);
            }
            if (p_serviceParam->dataVal_presence)
            {
                if (verifyScope("dataVal", (int64_t)p_serviceParam->dataVal.size(), (int64_t)1, (int64_t)65535))
                {
                    serviceParam->optional.setPresence(asn_wrapper::asn_ServiceParameter__dataVal);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParam->dataVal = %s.", __FUNCTION__, p_serviceParam->dataVal.c_str());
                    int dataVal_length = 0;
                    unsigned char* dataVal_ptr = new unsigned char[p_serviceParam->dataVal.length()];
                    StringToOctet(p_serviceParam->dataVal,dataVal_ptr,dataVal_length);
                    serviceParam->dataVal.copyOctetString(dataVal_length,(asnbytep)dataVal_ptr);
                    delete[] dataVal_ptr;
                }
            }
        
            ++p_serviceParam;
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->serviceParams.getCount() = %d.", __FUNCTION__, marbenData->serviceParams.getCount());
        
    }

    return true;
}

bool VdsMarbenAdaptGen::FotaAssignmentNotification_Decode(const std::string &path, std::shared_ptr<FotaAssignmentNotification_Model> &pData, asn_wrapper::FotaAssignmentNotification* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::FotaAssignmentNotification* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::FotaAssignmentNotification*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_FotaAssignmentNotification__installationOrderId))
    {
        pData->installationOrderId_presence = true;
        pData->installationOrderId = std::string((const char*)marbenData->installationOrderId.value, marbenData->installationOrderId.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->installationOrderId = %s.", __FUNCTION__, pData->installationOrderId.c_str());
    }
    pData->timestamp = std::string((const char*)marbenData->timestamp.value, marbenData->timestamp.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->timestamp = %s.", __FUNCTION__, pData->timestamp.c_str());
    pData->newStatus = std::string((const char*)marbenData->newStatus.value, marbenData->newStatus.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->newStatus = %s.", __FUNCTION__, pData->newStatus.c_str());
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_FotaAssignmentNotification__reason))
    {
        pData->reason_presence = true;
        pData->reason = std::string((const char*)marbenData->reason.value, marbenData->reason.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->reason = %s.", __FUNCTION__, pData->reason.c_str());
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_deltaTime))
    {
        pData->deltaTime_presence = true;
        pData->deltaTime = marbenData->deltaTime;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->deltaTime = %d.", __FUNCTION__, pData->deltaTime);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_serviceParams))
    {
        pData->serviceParams_presence = true;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->serviceParams.getCount() = %d.", __FUNCTION__, marbenData->serviceParams.getCount());
        unsigned int serviceParamCount = marbenData->serviceParams.getCount();
        asn_wrapper::asncserviceParamss* serviceParam = (asn_wrapper::asncserviceParamss*)(marbenData->serviceParams.getFirstElement());
        for (unsigned int i = 0; (i < serviceParamCount || serviceParam); i++) 
        {
            ServiceParameter_Model p_serviceParam;
            p_serviceParam.key = std::string((const char*)serviceParam->key.value, serviceParam->key.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParam.key = %s.", __FUNCTION__, p_serviceParam.key.c_str());
            if (asnTRUE == serviceParam->optional.getPresence(asn_wrapper::asn_intVal))
            {
                p_serviceParam.intVal_presence = true;
                p_serviceParam.intVal = serviceParam->intVal;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParam.intVal = %d.", __FUNCTION__, p_serviceParam.intVal);
            }
            if (asnTRUE == serviceParam->optional.getPresence(asn_wrapper::asn_ServiceParameter__stringVal))
            {
                p_serviceParam.stringVal_presence = true;
                p_serviceParam.stringVal = std::string((const char*)serviceParam->stringVal.value, serviceParam->stringVal.length);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParam.stringVal = %s.", __FUNCTION__, p_serviceParam.stringVal.c_str());
            }
            if (asnTRUE == serviceParam->optional.getPresence(asn_wrapper::asn_ServiceParameter__boolVal))
            {
                p_serviceParam.boolVal_presence = true;
                p_serviceParam.boolVal = serviceParam->boolVal;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParam.boolVal = %d.", __FUNCTION__, p_serviceParam.boolVal);
            }
            if (asnTRUE == serviceParam->optional.getPresence(asn_wrapper::asn_ServiceParameter__timestampVal))
            {
                p_serviceParam.timestampVal_presence = true;
                if (serviceParam->timestampVal != nullptr )
                {
                    std::shared_ptr<TimeStamp_Model> p_timestampVal = std::make_shared<TimeStamp_Model>();
                    result = TimeStamp_Decode( "" , p_timestampVal , serviceParam->timestampVal);
                    if (result)
                    {
                        p_serviceParam.timestampVal = (*p_timestampVal);
                    }
                }

            }
            if (asnTRUE == serviceParam->optional.getPresence(asn_wrapper::asn_ServiceParameter__dataVal))
            {
                p_serviceParam.dataVal_presence = true;
                asnbyte* dataVal_ptr;
                asnMAXUINT dataVal_length;
                serviceParam->dataVal.getOctetString(&dataVal_length,&dataVal_ptr);
                char* dataVal_array = new char[dataVal_length*3-1];
                OctetToString(dataVal_ptr,dataVal_array,dataVal_length);
                p_serviceParam.dataVal = dataVal_array;
                delete[] dataVal_array;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParam.dataVal = %s.", __FUNCTION__, p_serviceParam.dataVal.c_str());
            }
            pData->serviceParams.push_back(p_serviceParam);
            serviceParam = (asn_wrapper::asncserviceParamss*)(serviceParam->getNextElement());
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->serviceParams.size() = %d.", __FUNCTION__, pData->serviceParams.size());
        
    }

    return true;
}

bool VdsMarbenAdaptGen::InstallationSummary_Encode(const InstallationSummary_Model &pData, asn_wrapper::InstallationSummary* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::InstallationSummary* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::InstallationSummary*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("installationOrderId", (int64_t)pData.installationOrderId.size(), (int64_t)1, (int64_t)256))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.installationOrderId = %s.", __FUNCTION__, pData.installationOrderId.c_str());
        marbenData->installationOrderId.copyOctetString(pData.installationOrderId.length(), (asnbyte*)(unsigned char*)(pData.installationOrderId.c_str()));
    }
    if (verifyScope("timestamp", (int64_t)pData.timestamp.size(), (int64_t)1, (int64_t)32))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.timestamp = %s.", __FUNCTION__, pData.timestamp.c_str());
        marbenData->timestamp.copyOctetString(pData.timestamp.length(), (asnbyte*)(unsigned char*)(pData.timestamp.c_str()));
    }
    if (verifyScope("repeatresets", (int64_t)pData.repeatresets, (int64_t)1, (int64_t)255))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.repeatresets = %d.", __FUNCTION__, pData.repeatresets);
        marbenData->repeatresets = pData.repeatresets;
    }
    if (verifyScope("totalInstallationTime", (int64_t)pData.totalInstallationTime, (int64_t)1, (int64_t)4294967295))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.totalInstallationTime = %d.", __FUNCTION__, pData.totalInstallationTime);
        marbenData->totalInstallationTime = pData.totalInstallationTime;
    }
    
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.ecuSummarys.size() = %d.", __FUNCTION__, pData.ecuSummarys.size());
    for (auto p_ecuSummary = pData.ecuSummarys.begin(); p_ecuSummary != pData.ecuSummarys.end();) 
    {
        asn_wrapper::asncecuSummaryss *ecuSummary = new asn_wrapper::asncecuSummaryss();
        marbenData->ecuSummarys.addElement(ecuSummary);

        if (verifyScope("ecuAddress", (int64_t)p_ecuSummary->ecuAddress.size(), (int64_t)1, (int64_t)256))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuSummary->ecuAddress = %s.", __FUNCTION__, p_ecuSummary->ecuAddress.c_str());
            ecuSummary->ecuAddress.copyOctetString(p_ecuSummary->ecuAddress.length(), (asnbyte*)(unsigned char*)(p_ecuSummary->ecuAddress.c_str()));
        }
        if (verifyScope("ecuRetries", (int64_t)p_ecuSummary->ecuRetries, (int64_t)1, (int64_t)100))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuSummary->ecuRetries = %d.", __FUNCTION__, p_ecuSummary->ecuRetries);
            ecuSummary->ecuRetries = p_ecuSummary->ecuRetries;
        }
        if (verifyScope("ecuStatus", (int64_t)p_ecuSummary->ecuStatus.size(), (int64_t)1, (int64_t)256))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuSummary->ecuStatus = %s.", __FUNCTION__, p_ecuSummary->ecuStatus.c_str());
            ecuSummary->ecuStatus.copyOctetString(p_ecuSummary->ecuStatus.length(), (asnbyte*)(unsigned char*)(p_ecuSummary->ecuStatus.c_str()));
        }
        
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuSummary->softwarePartSummarys.size() = %d.", __FUNCTION__, p_ecuSummary->softwarePartSummarys.size());
        for (auto p_softwarePartSummary = p_ecuSummary->softwarePartSummarys.begin(); p_softwarePartSummary != p_ecuSummary->softwarePartSummarys.end();) 
        {
            asn_wrapper::asncsoftwarePartSummaryss *softwarePartSummary = new asn_wrapper::asncsoftwarePartSummaryss();
            ecuSummary->softwarePartSummarys.addElement(softwarePartSummary);

            if (verifyScope("partIdentifier", (int64_t)p_softwarePartSummary->partIdentifier.size(), (int64_t)1, (int64_t)256))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_softwarePartSummary->partIdentifier = %s.", __FUNCTION__, p_softwarePartSummary->partIdentifier.c_str());
                softwarePartSummary->partIdentifier.copyOctetString(p_softwarePartSummary->partIdentifier.length(), (asnbyte*)(unsigned char*)(p_softwarePartSummary->partIdentifier.c_str()));
            }
            if (verifyScope("partRetries", (int64_t)p_softwarePartSummary->partRetries, (int64_t)1, (int64_t)65535))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_softwarePartSummary->partRetries = %d.", __FUNCTION__, p_softwarePartSummary->partRetries);
                softwarePartSummary->partRetries = p_softwarePartSummary->partRetries;
            }
            if (verifyScope("measuredInstallationTime", (int64_t)p_softwarePartSummary->measuredInstallationTime, (int64_t)1, (int64_t)36000000))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_softwarePartSummary->measuredInstallationTime = %d.", __FUNCTION__, p_softwarePartSummary->measuredInstallationTime);
                softwarePartSummary->measuredInstallationTime = p_softwarePartSummary->measuredInstallationTime;
            }
            if (verifyScope("softwarePartStatus", (int64_t)p_softwarePartSummary->softwarePartStatus.size(), (int64_t)1, (int64_t)256))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_softwarePartSummary->softwarePartStatus = %s.", __FUNCTION__, p_softwarePartSummary->softwarePartStatus.c_str());
                softwarePartSummary->softwarePartStatus.copyOctetString(p_softwarePartSummary->softwarePartStatus.length(), (asnbyte*)(unsigned char*)(p_softwarePartSummary->softwarePartStatus.c_str()));
            }
        
            ++p_softwarePartSummary;
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: ecuSummary->softwarePartSummarys.getCount() = %d.", __FUNCTION__, ecuSummary->softwarePartSummarys.getCount());
        
    
        ++p_ecuSummary;
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->ecuSummarys.getCount() = %d.", __FUNCTION__, marbenData->ecuSummarys.getCount());
    

    return true;
}

bool VdsMarbenAdaptGen::InstallationSummary_Decode(const std::string &path, std::shared_ptr<InstallationSummary_Model> &pData, asn_wrapper::InstallationSummary* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::InstallationSummary* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::InstallationSummary*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->installationOrderId = std::string((const char*)marbenData->installationOrderId.value, marbenData->installationOrderId.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->installationOrderId = %s.", __FUNCTION__, pData->installationOrderId.c_str());
    pData->timestamp = std::string((const char*)marbenData->timestamp.value, marbenData->timestamp.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->timestamp = %s.", __FUNCTION__, pData->timestamp.c_str());
    pData->repeatresets = marbenData->repeatresets;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->repeatresets = %d.", __FUNCTION__, pData->repeatresets);
    pData->totalInstallationTime = marbenData->totalInstallationTime;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->totalInstallationTime = %d.", __FUNCTION__, pData->totalInstallationTime);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->ecuSummarys.getCount() = %d.", __FUNCTION__, marbenData->ecuSummarys.getCount());
    unsigned int ecuSummaryCount = marbenData->ecuSummarys.getCount();
    asn_wrapper::asncecuSummaryss* ecuSummary = (asn_wrapper::asncecuSummaryss*)(marbenData->ecuSummarys.getFirstElement());
    for (unsigned int i = 0; (i < ecuSummaryCount || ecuSummary); i++) 
    {
        EcuSummary_Model p_ecuSummary;
        p_ecuSummary.ecuAddress = std::string((const char*)ecuSummary->ecuAddress.value, ecuSummary->ecuAddress.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuSummary.ecuAddress = %s.", __FUNCTION__, p_ecuSummary.ecuAddress.c_str());
        p_ecuSummary.ecuRetries = ecuSummary->ecuRetries;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuSummary.ecuRetries = %d.", __FUNCTION__, p_ecuSummary.ecuRetries);
        p_ecuSummary.ecuStatus = std::string((const char*)ecuSummary->ecuStatus.value, ecuSummary->ecuStatus.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuSummary.ecuStatus = %s.", __FUNCTION__, p_ecuSummary.ecuStatus.c_str());
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: ecuSummary->softwarePartSummarys.getCount() = %d.", __FUNCTION__, ecuSummary->softwarePartSummarys.getCount());
        unsigned int softwarePartSummaryCount = ecuSummary->softwarePartSummarys.getCount();
        asn_wrapper::asncsoftwarePartSummaryss* softwarePartSummary = (asn_wrapper::asncsoftwarePartSummaryss*)(ecuSummary->softwarePartSummarys.getFirstElement());
        for (unsigned int softwarePartSummarys2 = 0; (softwarePartSummarys2 < softwarePartSummaryCount || softwarePartSummary); softwarePartSummarys2++) 
        {
            SoftwarePartSummary_Model p_softwarePartSummary;
            p_softwarePartSummary.partIdentifier = std::string((const char*)softwarePartSummary->partIdentifier.value, softwarePartSummary->partIdentifier.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_softwarePartSummary.partIdentifier = %s.", __FUNCTION__, p_softwarePartSummary.partIdentifier.c_str());
            p_softwarePartSummary.partRetries = softwarePartSummary->partRetries;
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_softwarePartSummary.partRetries = %d.", __FUNCTION__, p_softwarePartSummary.partRetries);
            p_softwarePartSummary.measuredInstallationTime = softwarePartSummary->measuredInstallationTime;
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_softwarePartSummary.measuredInstallationTime = %d.", __FUNCTION__, p_softwarePartSummary.measuredInstallationTime);
            p_softwarePartSummary.softwarePartStatus = std::string((const char*)softwarePartSummary->softwarePartStatus.value, softwarePartSummary->softwarePartStatus.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_softwarePartSummary.softwarePartStatus = %s.", __FUNCTION__, p_softwarePartSummary.softwarePartStatus.c_str());
            p_ecuSummary.softwarePartSummarys.push_back(p_softwarePartSummary);
            softwarePartSummary = (asn_wrapper::asncsoftwarePartSummaryss*)(softwarePartSummary->getNextElement());
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuSummary.softwarePartSummarys.size() = %d.", __FUNCTION__, p_ecuSummary.softwarePartSummarys.size());
        
        pData->ecuSummarys.push_back(p_ecuSummary);
        ecuSummary = (asn_wrapper::asncecuSummaryss*)(ecuSummary->getNextElement());
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->ecuSummarys.size() = %d.", __FUNCTION__, pData->ecuSummarys.size());
    

    return true;
}

bool VdsMarbenAdaptGen::EcuSummary_Encode(const EcuSummary_Model &pData, asn_wrapper::EcuSummary* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::EcuSummary* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::EcuSummary*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("ecuAddress", (int64_t)pData.ecuAddress.size(), (int64_t)1, (int64_t)256))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.ecuAddress = %s.", __FUNCTION__, pData.ecuAddress.c_str());
        marbenData->ecuAddress.copyOctetString(pData.ecuAddress.length(), (asnbyte*)(unsigned char*)(pData.ecuAddress.c_str()));
    }
    if (verifyScope("ecuRetries", (int64_t)pData.ecuRetries, (int64_t)1, (int64_t)100))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.ecuRetries = %d.", __FUNCTION__, pData.ecuRetries);
        marbenData->ecuRetries = pData.ecuRetries;
    }
    if (verifyScope("ecuStatus", (int64_t)pData.ecuStatus.size(), (int64_t)1, (int64_t)256))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.ecuStatus = %s.", __FUNCTION__, pData.ecuStatus.c_str());
        marbenData->ecuStatus.copyOctetString(pData.ecuStatus.length(), (asnbyte*)(unsigned char*)(pData.ecuStatus.c_str()));
    }
    
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.softwarePartSummarys.size() = %d.", __FUNCTION__, pData.softwarePartSummarys.size());
    for (auto p_softwarePartSummary = pData.softwarePartSummarys.begin(); p_softwarePartSummary != pData.softwarePartSummarys.end();) 
    {
        asn_wrapper::asncsoftwarePartSummaryss *softwarePartSummary = new asn_wrapper::asncsoftwarePartSummaryss();
        marbenData->softwarePartSummarys.addElement(softwarePartSummary);

        if (verifyScope("partIdentifier", (int64_t)p_softwarePartSummary->partIdentifier.size(), (int64_t)1, (int64_t)256))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_softwarePartSummary->partIdentifier = %s.", __FUNCTION__, p_softwarePartSummary->partIdentifier.c_str());
            softwarePartSummary->partIdentifier.copyOctetString(p_softwarePartSummary->partIdentifier.length(), (asnbyte*)(unsigned char*)(p_softwarePartSummary->partIdentifier.c_str()));
        }
        if (verifyScope("partRetries", (int64_t)p_softwarePartSummary->partRetries, (int64_t)1, (int64_t)65535))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_softwarePartSummary->partRetries = %d.", __FUNCTION__, p_softwarePartSummary->partRetries);
            softwarePartSummary->partRetries = p_softwarePartSummary->partRetries;
        }
        if (verifyScope("measuredInstallationTime", (int64_t)p_softwarePartSummary->measuredInstallationTime, (int64_t)1, (int64_t)36000000))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_softwarePartSummary->measuredInstallationTime = %d.", __FUNCTION__, p_softwarePartSummary->measuredInstallationTime);
            softwarePartSummary->measuredInstallationTime = p_softwarePartSummary->measuredInstallationTime;
        }
        if (verifyScope("softwarePartStatus", (int64_t)p_softwarePartSummary->softwarePartStatus.size(), (int64_t)1, (int64_t)256))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_softwarePartSummary->softwarePartStatus = %s.", __FUNCTION__, p_softwarePartSummary->softwarePartStatus.c_str());
            softwarePartSummary->softwarePartStatus.copyOctetString(p_softwarePartSummary->softwarePartStatus.length(), (asnbyte*)(unsigned char*)(p_softwarePartSummary->softwarePartStatus.c_str()));
        }
    
        ++p_softwarePartSummary;
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->softwarePartSummarys.getCount() = %d.", __FUNCTION__, marbenData->softwarePartSummarys.getCount());
    

    return true;
}

bool VdsMarbenAdaptGen::EcuSummary_Decode(const std::string &path, std::shared_ptr<EcuSummary_Model> &pData, asn_wrapper::EcuSummary* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::EcuSummary* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::EcuSummary*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->ecuAddress = std::string((const char*)marbenData->ecuAddress.value, marbenData->ecuAddress.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->ecuAddress = %s.", __FUNCTION__, pData->ecuAddress.c_str());
    pData->ecuRetries = marbenData->ecuRetries;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->ecuRetries = %d.", __FUNCTION__, pData->ecuRetries);
    pData->ecuStatus = std::string((const char*)marbenData->ecuStatus.value, marbenData->ecuStatus.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->ecuStatus = %s.", __FUNCTION__, pData->ecuStatus.c_str());
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->softwarePartSummarys.getCount() = %d.", __FUNCTION__, marbenData->softwarePartSummarys.getCount());
    unsigned int softwarePartSummaryCount = marbenData->softwarePartSummarys.getCount();
    asn_wrapper::asncsoftwarePartSummaryss* softwarePartSummary = (asn_wrapper::asncsoftwarePartSummaryss*)(marbenData->softwarePartSummarys.getFirstElement());
    for (unsigned int i = 0; (i < softwarePartSummaryCount || softwarePartSummary); i++) 
    {
        SoftwarePartSummary_Model p_softwarePartSummary;
        p_softwarePartSummary.partIdentifier = std::string((const char*)softwarePartSummary->partIdentifier.value, softwarePartSummary->partIdentifier.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_softwarePartSummary.partIdentifier = %s.", __FUNCTION__, p_softwarePartSummary.partIdentifier.c_str());
        p_softwarePartSummary.partRetries = softwarePartSummary->partRetries;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_softwarePartSummary.partRetries = %d.", __FUNCTION__, p_softwarePartSummary.partRetries);
        p_softwarePartSummary.measuredInstallationTime = softwarePartSummary->measuredInstallationTime;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_softwarePartSummary.measuredInstallationTime = %d.", __FUNCTION__, p_softwarePartSummary.measuredInstallationTime);
        p_softwarePartSummary.softwarePartStatus = std::string((const char*)softwarePartSummary->softwarePartStatus.value, softwarePartSummary->softwarePartStatus.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_softwarePartSummary.softwarePartStatus = %s.", __FUNCTION__, p_softwarePartSummary.softwarePartStatus.c_str());
        pData->softwarePartSummarys.push_back(p_softwarePartSummary);
        softwarePartSummary = (asn_wrapper::asncsoftwarePartSummaryss*)(softwarePartSummary->getNextElement());
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->softwarePartSummarys.size() = %d.", __FUNCTION__, pData->softwarePartSummarys.size());
    

    return true;
}

bool VdsMarbenAdaptGen::SoftwarePartSummary_Encode(const SoftwarePartSummary_Model &pData, asn_wrapper::SoftwarePartSummary* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::SoftwarePartSummary* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::SoftwarePartSummary*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("partIdentifier", (int64_t)pData.partIdentifier.size(), (int64_t)1, (int64_t)256))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.partIdentifier = %s.", __FUNCTION__, pData.partIdentifier.c_str());
        marbenData->partIdentifier.copyOctetString(pData.partIdentifier.length(), (asnbyte*)(unsigned char*)(pData.partIdentifier.c_str()));
    }
    if (verifyScope("partRetries", (int64_t)pData.partRetries, (int64_t)1, (int64_t)65535))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.partRetries = %d.", __FUNCTION__, pData.partRetries);
        marbenData->partRetries = pData.partRetries;
    }
    if (verifyScope("measuredInstallationTime", (int64_t)pData.measuredInstallationTime, (int64_t)1, (int64_t)36000000))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.measuredInstallationTime = %d.", __FUNCTION__, pData.measuredInstallationTime);
        marbenData->measuredInstallationTime = pData.measuredInstallationTime;
    }
    if (verifyScope("softwarePartStatus", (int64_t)pData.softwarePartStatus.size(), (int64_t)1, (int64_t)256))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.softwarePartStatus = %s.", __FUNCTION__, pData.softwarePartStatus.c_str());
        marbenData->softwarePartStatus.copyOctetString(pData.softwarePartStatus.length(), (asnbyte*)(unsigned char*)(pData.softwarePartStatus.c_str()));
    }

    return true;
}

bool VdsMarbenAdaptGen::SoftwarePartSummary_Decode(const std::string &path, std::shared_ptr<SoftwarePartSummary_Model> &pData, asn_wrapper::SoftwarePartSummary* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::SoftwarePartSummary* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::SoftwarePartSummary*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->partIdentifier = std::string((const char*)marbenData->partIdentifier.value, marbenData->partIdentifier.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->partIdentifier = %s.", __FUNCTION__, pData->partIdentifier.c_str());
    pData->partRetries = marbenData->partRetries;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->partRetries = %d.", __FUNCTION__, pData->partRetries);
    pData->measuredInstallationTime = marbenData->measuredInstallationTime;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->measuredInstallationTime = %d.", __FUNCTION__, pData->measuredInstallationTime);
    pData->softwarePartStatus = std::string((const char*)marbenData->softwarePartStatus.value, marbenData->softwarePartStatus.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->softwarePartStatus = %s.", __FUNCTION__, pData->softwarePartStatus.c_str());

    return true;
}

bool VdsMarbenAdaptGen::EcuExceptionReport_Encode(const EcuExceptionReport_Model &pData, asn_wrapper::EcuExceptionReport* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::EcuExceptionReport* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::EcuExceptionReport*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("exceptionReportMsgRemaining", (int64_t)pData.exceptionReportMsgRemaining, (int64_t)1, (int64_t)65535))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.exceptionReportMsgRemaining = %d.", __FUNCTION__, pData.exceptionReportMsgRemaining);
        marbenData->exceptionReportMsgRemaining = pData.exceptionReportMsgRemaining;
    }
    
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.exceptionReports.size() = %d.", __FUNCTION__, pData.exceptionReports.size());
    for (auto p_exceptionReport = pData.exceptionReports.begin(); p_exceptionReport != pData.exceptionReports.end();) 
    {
        asn_wrapper::asncexceptionReportss *exceptionReport = new asn_wrapper::asncexceptionReportss();
        marbenData->exceptionReports.addElement(exceptionReport);

        if (p_exceptionReport->installationOrderId_presence)
        {
            if (verifyScope("installationOrderId", (int64_t)p_exceptionReport->installationOrderId.size(), (int64_t)1, (int64_t)256))
            {
                exceptionReport->optional.setPresence(asn_wrapper::asn_ExceptionReport__installationOrderId);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_exceptionReport->installationOrderId = %s.", __FUNCTION__, p_exceptionReport->installationOrderId.c_str());
                exceptionReport->installationOrderId.copyOctetString(p_exceptionReport->installationOrderId.length(), (asnbyte*)(unsigned char*)(p_exceptionReport->installationOrderId.c_str()));
            }
        }
        if (verifyScope("timestamp", (int64_t)p_exceptionReport->timestamp.size(), (int64_t)1, (int64_t)32))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_exceptionReport->timestamp = %s.", __FUNCTION__, p_exceptionReport->timestamp.c_str());
            exceptionReport->timestamp.copyOctetString(p_exceptionReport->timestamp.length(), (asnbyte*)(unsigned char*)(p_exceptionReport->timestamp.c_str()));
        }
        if (verifyScope("issuerId", (int64_t)p_exceptionReport->issuerId.size(), (int64_t)1, (int64_t)256))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_exceptionReport->issuerId = %s.", __FUNCTION__, p_exceptionReport->issuerId.c_str());
            exceptionReport->issuerId.copyOctetString(p_exceptionReport->issuerId.length(), (asnbyte*)(unsigned char*)(p_exceptionReport->issuerId.c_str()));
        }
        if (p_exceptionReport->clientConfigurationId_presence)
        {
            if (verifyScope("clientConfigurationId", (int64_t)p_exceptionReport->clientConfigurationId.size(), (int64_t)1, (int64_t)256))
            {
                exceptionReport->optional.setPresence(asn_wrapper::asn_clientConfigurationId);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_exceptionReport->clientConfigurationId = %s.", __FUNCTION__, p_exceptionReport->clientConfigurationId.c_str());
                exceptionReport->clientConfigurationId.copyOctetString(p_exceptionReport->clientConfigurationId.length(), (asnbyte*)(unsigned char*)(p_exceptionReport->clientConfigurationId.c_str()));
            }
        }
        if (p_exceptionReport->dataFileName_presence)
        {
            if (verifyScope("dataFileName", (int64_t)p_exceptionReport->dataFileName.size(), (int64_t)1, (int64_t)256))
            {
                exceptionReport->optional.setPresence(asn_wrapper::asn_dataFileName);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_exceptionReport->dataFileName = %s.", __FUNCTION__, p_exceptionReport->dataFileName.c_str());
                exceptionReport->dataFileName.copyOctetString(p_exceptionReport->dataFileName.length(), (asnbyte*)(unsigned char*)(p_exceptionReport->dataFileName.c_str()));
            }
        }
        if (p_exceptionReport->ecuAddress_presence)
        {
            if (verifyScope("ecuAddress", (int64_t)p_exceptionReport->ecuAddress.size(), (int64_t)1, (int64_t)256))
            {
                exceptionReport->optional.setPresence(asn_wrapper::asn_ecuAddress);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_exceptionReport->ecuAddress = %s.", __FUNCTION__, p_exceptionReport->ecuAddress.c_str());
                exceptionReport->ecuAddress.copyOctetString(p_exceptionReport->ecuAddress.length(), (asnbyte*)(unsigned char*)(p_exceptionReport->ecuAddress.c_str()));
            }
        }
        if (p_exceptionReport->validationKey_presence)
        {
            if (verifyScope("validationKey", (int64_t)p_exceptionReport->validationKey.size(), (int64_t)1, (int64_t)256))
            {
                exceptionReport->optional.setPresence(asn_wrapper::asn_validationKey);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_exceptionReport->validationKey = %s.", __FUNCTION__, p_exceptionReport->validationKey.c_str());
                exceptionReport->validationKey.copyOctetString(p_exceptionReport->validationKey.length(), (asnbyte*)(unsigned char*)(p_exceptionReport->validationKey.c_str()));
            }
        }
        if (p_exceptionReport->partIdentifier_presence)
        {
            if (verifyScope("partIdentifier", (int64_t)p_exceptionReport->partIdentifier.size(), (int64_t)1, (int64_t)256))
            {
                exceptionReport->optional.setPresence(asn_wrapper::asn_partIdentifier);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_exceptionReport->partIdentifier = %s.", __FUNCTION__, p_exceptionReport->partIdentifier.c_str());
                exceptionReport->partIdentifier.copyOctetString(p_exceptionReport->partIdentifier.length(), (asnbyte*)(unsigned char*)(p_exceptionReport->partIdentifier.c_str()));
            }
        }
        if (p_exceptionReport->dataBlockNumber_presence)
        {
            if (verifyScope("dataBlockNumber", (int64_t)p_exceptionReport->dataBlockNumber, (int64_t)1, (int64_t)65535))
            {
                exceptionReport->optional.setPresence(asn_wrapper::asn_dataBlockNumber);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_exceptionReport->dataBlockNumber = %d.", __FUNCTION__, p_exceptionReport->dataBlockNumber);
                exceptionReport->dataBlockNumber = p_exceptionReport->dataBlockNumber;
            }
        }
        if (exceptionReport->exceptionMessage == nullptr )
        {
            exceptionReport->exceptionMessage = new asn_wrapper::ExceptionMessage();
        }
        ExceptionMessage_Encode(p_exceptionReport->exceptionMessage, exceptionReport->exceptionMessage);
    
        ++p_exceptionReport;
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->exceptionReports.getCount() = %d.", __FUNCTION__, marbenData->exceptionReports.getCount());
    

    return true;
}

bool VdsMarbenAdaptGen::EcuExceptionReport_Decode(const std::string &path, std::shared_ptr<EcuExceptionReport_Model> &pData, asn_wrapper::EcuExceptionReport* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::EcuExceptionReport* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::EcuExceptionReport*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->exceptionReportMsgRemaining = marbenData->exceptionReportMsgRemaining;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->exceptionReportMsgRemaining = %d.", __FUNCTION__, pData->exceptionReportMsgRemaining);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->exceptionReports.getCount() = %d.", __FUNCTION__, marbenData->exceptionReports.getCount());
    unsigned int exceptionReportCount = marbenData->exceptionReports.getCount();
    asn_wrapper::asncexceptionReportss* exceptionReport = (asn_wrapper::asncexceptionReportss*)(marbenData->exceptionReports.getFirstElement());
    for (unsigned int i = 0; (i < exceptionReportCount || exceptionReport); i++) 
    {
        ExceptionReport_Model p_exceptionReport;
        if (asnTRUE == exceptionReport->optional.getPresence(asn_wrapper::asn_ExceptionReport__installationOrderId))
        {
            p_exceptionReport.installationOrderId_presence = true;
            p_exceptionReport.installationOrderId = std::string((const char*)exceptionReport->installationOrderId.value, exceptionReport->installationOrderId.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_exceptionReport.installationOrderId = %s.", __FUNCTION__, p_exceptionReport.installationOrderId.c_str());
        }
        p_exceptionReport.timestamp = std::string((const char*)exceptionReport->timestamp.value, exceptionReport->timestamp.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_exceptionReport.timestamp = %s.", __FUNCTION__, p_exceptionReport.timestamp.c_str());
        p_exceptionReport.issuerId = std::string((const char*)exceptionReport->issuerId.value, exceptionReport->issuerId.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_exceptionReport.issuerId = %s.", __FUNCTION__, p_exceptionReport.issuerId.c_str());
        if (asnTRUE == exceptionReport->optional.getPresence(asn_wrapper::asn_clientConfigurationId))
        {
            p_exceptionReport.clientConfigurationId_presence = true;
            p_exceptionReport.clientConfigurationId = std::string((const char*)exceptionReport->clientConfigurationId.value, exceptionReport->clientConfigurationId.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_exceptionReport.clientConfigurationId = %s.", __FUNCTION__, p_exceptionReport.clientConfigurationId.c_str());
        }
        if (asnTRUE == exceptionReport->optional.getPresence(asn_wrapper::asn_dataFileName))
        {
            p_exceptionReport.dataFileName_presence = true;
            p_exceptionReport.dataFileName = std::string((const char*)exceptionReport->dataFileName.value, exceptionReport->dataFileName.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_exceptionReport.dataFileName = %s.", __FUNCTION__, p_exceptionReport.dataFileName.c_str());
        }
        if (asnTRUE == exceptionReport->optional.getPresence(asn_wrapper::asn_ecuAddress))
        {
            p_exceptionReport.ecuAddress_presence = true;
            p_exceptionReport.ecuAddress = std::string((const char*)exceptionReport->ecuAddress.value, exceptionReport->ecuAddress.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_exceptionReport.ecuAddress = %s.", __FUNCTION__, p_exceptionReport.ecuAddress.c_str());
        }
        if (asnTRUE == exceptionReport->optional.getPresence(asn_wrapper::asn_validationKey))
        {
            p_exceptionReport.validationKey_presence = true;
            p_exceptionReport.validationKey = std::string((const char*)exceptionReport->validationKey.value, exceptionReport->validationKey.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_exceptionReport.validationKey = %s.", __FUNCTION__, p_exceptionReport.validationKey.c_str());
        }
        if (asnTRUE == exceptionReport->optional.getPresence(asn_wrapper::asn_partIdentifier))
        {
            p_exceptionReport.partIdentifier_presence = true;
            p_exceptionReport.partIdentifier = std::string((const char*)exceptionReport->partIdentifier.value, exceptionReport->partIdentifier.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_exceptionReport.partIdentifier = %s.", __FUNCTION__, p_exceptionReport.partIdentifier.c_str());
        }
        if (asnTRUE == exceptionReport->optional.getPresence(asn_wrapper::asn_dataBlockNumber))
        {
            p_exceptionReport.dataBlockNumber_presence = true;
            p_exceptionReport.dataBlockNumber = exceptionReport->dataBlockNumber;
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_exceptionReport.dataBlockNumber = %d.", __FUNCTION__, p_exceptionReport.dataBlockNumber);
        }
        if (exceptionReport->exceptionMessage != nullptr )
        {
            std::shared_ptr<ExceptionMessage_Model> p_exceptionMessage = std::make_shared<ExceptionMessage_Model>();
            result = ExceptionMessage_Decode( "" , p_exceptionMessage , exceptionReport->exceptionMessage);
            if (result)
            {
                p_exceptionReport.exceptionMessage = (*p_exceptionMessage);
            }
        }

        pData->exceptionReports.push_back(p_exceptionReport);
        exceptionReport = (asn_wrapper::asncexceptionReportss*)(exceptionReport->getNextElement());
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->exceptionReports.size() = %d.", __FUNCTION__, pData->exceptionReports.size());
    

    return true;
}

bool VdsMarbenAdaptGen::ExceptionReport_Encode(const ExceptionReport_Model &pData, asn_wrapper::ExceptionReport* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::ExceptionReport* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::ExceptionReport*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (pData.installationOrderId_presence)
    {
        if (verifyScope("installationOrderId", (int64_t)pData.installationOrderId.size(), (int64_t)1, (int64_t)256))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_ExceptionReport__installationOrderId);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.installationOrderId = %s.", __FUNCTION__, pData.installationOrderId.c_str());
            marbenData->installationOrderId.copyOctetString(pData.installationOrderId.length(), (asnbyte*)(unsigned char*)(pData.installationOrderId.c_str()));
        }
    }
    if (verifyScope("timestamp", (int64_t)pData.timestamp.size(), (int64_t)1, (int64_t)32))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.timestamp = %s.", __FUNCTION__, pData.timestamp.c_str());
        marbenData->timestamp.copyOctetString(pData.timestamp.length(), (asnbyte*)(unsigned char*)(pData.timestamp.c_str()));
    }
    if (verifyScope("issuerId", (int64_t)pData.issuerId.size(), (int64_t)1, (int64_t)256))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.issuerId = %s.", __FUNCTION__, pData.issuerId.c_str());
        marbenData->issuerId.copyOctetString(pData.issuerId.length(), (asnbyte*)(unsigned char*)(pData.issuerId.c_str()));
    }
    if (pData.clientConfigurationId_presence)
    {
        if (verifyScope("clientConfigurationId", (int64_t)pData.clientConfigurationId.size(), (int64_t)1, (int64_t)256))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_clientConfigurationId);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.clientConfigurationId = %s.", __FUNCTION__, pData.clientConfigurationId.c_str());
            marbenData->clientConfigurationId.copyOctetString(pData.clientConfigurationId.length(), (asnbyte*)(unsigned char*)(pData.clientConfigurationId.c_str()));
        }
    }
    if (pData.dataFileName_presence)
    {
        if (verifyScope("dataFileName", (int64_t)pData.dataFileName.size(), (int64_t)1, (int64_t)256))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_dataFileName);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.dataFileName = %s.", __FUNCTION__, pData.dataFileName.c_str());
            marbenData->dataFileName.copyOctetString(pData.dataFileName.length(), (asnbyte*)(unsigned char*)(pData.dataFileName.c_str()));
        }
    }
    if (pData.ecuAddress_presence)
    {
        if (verifyScope("ecuAddress", (int64_t)pData.ecuAddress.size(), (int64_t)1, (int64_t)256))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_ecuAddress);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.ecuAddress = %s.", __FUNCTION__, pData.ecuAddress.c_str());
            marbenData->ecuAddress.copyOctetString(pData.ecuAddress.length(), (asnbyte*)(unsigned char*)(pData.ecuAddress.c_str()));
        }
    }
    if (pData.validationKey_presence)
    {
        if (verifyScope("validationKey", (int64_t)pData.validationKey.size(), (int64_t)1, (int64_t)256))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_validationKey);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.validationKey = %s.", __FUNCTION__, pData.validationKey.c_str());
            marbenData->validationKey.copyOctetString(pData.validationKey.length(), (asnbyte*)(unsigned char*)(pData.validationKey.c_str()));
        }
    }
    if (pData.partIdentifier_presence)
    {
        if (verifyScope("partIdentifier", (int64_t)pData.partIdentifier.size(), (int64_t)1, (int64_t)256))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_partIdentifier);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.partIdentifier = %s.", __FUNCTION__, pData.partIdentifier.c_str());
            marbenData->partIdentifier.copyOctetString(pData.partIdentifier.length(), (asnbyte*)(unsigned char*)(pData.partIdentifier.c_str()));
        }
    }
    if (pData.dataBlockNumber_presence)
    {
        if (verifyScope("dataBlockNumber", (int64_t)pData.dataBlockNumber, (int64_t)1, (int64_t)65535))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_dataBlockNumber);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.dataBlockNumber = %d.", __FUNCTION__, pData.dataBlockNumber);
            marbenData->dataBlockNumber = pData.dataBlockNumber;
        }
    }
    if (marbenData->exceptionMessage == nullptr )
    {
        marbenData->exceptionMessage = new asn_wrapper::ExceptionMessage();
    }
    ExceptionMessage_Encode(pData.exceptionMessage, marbenData->exceptionMessage);

    return true;
}

bool VdsMarbenAdaptGen::ExceptionReport_Decode(const std::string &path, std::shared_ptr<ExceptionReport_Model> &pData, asn_wrapper::ExceptionReport* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::ExceptionReport* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::ExceptionReport*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_ExceptionReport__installationOrderId))
    {
        pData->installationOrderId_presence = true;
        pData->installationOrderId = std::string((const char*)marbenData->installationOrderId.value, marbenData->installationOrderId.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->installationOrderId = %s.", __FUNCTION__, pData->installationOrderId.c_str());
    }
    pData->timestamp = std::string((const char*)marbenData->timestamp.value, marbenData->timestamp.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->timestamp = %s.", __FUNCTION__, pData->timestamp.c_str());
    pData->issuerId = std::string((const char*)marbenData->issuerId.value, marbenData->issuerId.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->issuerId = %s.", __FUNCTION__, pData->issuerId.c_str());
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_clientConfigurationId))
    {
        pData->clientConfigurationId_presence = true;
        pData->clientConfigurationId = std::string((const char*)marbenData->clientConfigurationId.value, marbenData->clientConfigurationId.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->clientConfigurationId = %s.", __FUNCTION__, pData->clientConfigurationId.c_str());
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_dataFileName))
    {
        pData->dataFileName_presence = true;
        pData->dataFileName = std::string((const char*)marbenData->dataFileName.value, marbenData->dataFileName.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->dataFileName = %s.", __FUNCTION__, pData->dataFileName.c_str());
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_ecuAddress))
    {
        pData->ecuAddress_presence = true;
        pData->ecuAddress = std::string((const char*)marbenData->ecuAddress.value, marbenData->ecuAddress.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->ecuAddress = %s.", __FUNCTION__, pData->ecuAddress.c_str());
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_validationKey))
    {
        pData->validationKey_presence = true;
        pData->validationKey = std::string((const char*)marbenData->validationKey.value, marbenData->validationKey.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->validationKey = %s.", __FUNCTION__, pData->validationKey.c_str());
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_partIdentifier))
    {
        pData->partIdentifier_presence = true;
        pData->partIdentifier = std::string((const char*)marbenData->partIdentifier.value, marbenData->partIdentifier.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->partIdentifier = %s.", __FUNCTION__, pData->partIdentifier.c_str());
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_dataBlockNumber))
    {
        pData->dataBlockNumber_presence = true;
        pData->dataBlockNumber = marbenData->dataBlockNumber;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->dataBlockNumber = %d.", __FUNCTION__, pData->dataBlockNumber);
    }
    if (marbenData->exceptionMessage != nullptr )
    {
        std::shared_ptr<ExceptionMessage_Model> p_exceptionMessage = std::make_shared<ExceptionMessage_Model>();
        result = ExceptionMessage_Decode( "" , p_exceptionMessage , marbenData->exceptionMessage);
        if (result)
        {
            pData->exceptionMessage = (*p_exceptionMessage);
        }
    }


    return true;
}

bool VdsMarbenAdaptGen::ExceptionMessage_Encode(const ExceptionMessage_Model &pData, asn_wrapper::ExceptionMessage* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::ExceptionMessage* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::ExceptionMessage*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("activity", (int64_t)pData.activity.size(), (int64_t)1, (int64_t)256))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.activity = %s.", __FUNCTION__, pData.activity.c_str());
        marbenData->activity.copyOctetString(pData.activity.length(), (asnbyte*)(unsigned char*)(pData.activity.c_str()));
    }
    if (verifyScope("action", (int64_t)pData.action.size(), (int64_t)1, (int64_t)256))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.action = %s.", __FUNCTION__, pData.action.c_str());
        marbenData->action.copyOctetString(pData.action.length(), (asnbyte*)(unsigned char*)(pData.action.c_str()));
    }
    if (verifyScope("exception", (int64_t)pData.exception.size(), (int64_t)1, (int64_t)1024))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.exception = %s.", __FUNCTION__, pData.exception.c_str());
        marbenData->exception.copyOctetString(pData.exception.length(), (asnbyte*)(unsigned char*)(pData.exception.c_str()));
    }

    return true;
}

bool VdsMarbenAdaptGen::ExceptionMessage_Decode(const std::string &path, std::shared_ptr<ExceptionMessage_Model> &pData, asn_wrapper::ExceptionMessage* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::ExceptionMessage* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::ExceptionMessage*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->activity = std::string((const char*)marbenData->activity.value, marbenData->activity.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->activity = %s.", __FUNCTION__, pData->activity.c_str());
    pData->action = std::string((const char*)marbenData->action.value, marbenData->action.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->action = %s.", __FUNCTION__, pData->action.c_str());
    pData->exception = std::string((const char*)marbenData->exception.value, marbenData->exception.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->exception = %s.", __FUNCTION__, pData->exception.c_str());

    return true;
}

bool VdsMarbenAdaptGen::ClientHmiVehicleSettings_Encode(const ClientHmiVehicleSettings_Model &pData, asn_wrapper::ClientHmiVehicleSettings* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::ClientHmiVehicleSettings* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::ClientHmiVehicleSettings*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.otaSetting = %d.", __FUNCTION__, pData.otaSetting);
    marbenData->otaSetting = pData.otaSetting;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.autoSync = %d.", __FUNCTION__, pData.autoSync);
    marbenData->autoSync = pData.autoSync;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.autoDownload = %d.", __FUNCTION__, pData.autoDownload);
    marbenData->autoDownload = pData.autoDownload;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.autoInstallation = %d.", __FUNCTION__, pData.autoInstallation);
    marbenData->autoInstallation = pData.autoInstallation;

    return true;
}

bool VdsMarbenAdaptGen::ClientHmiVehicleSettings_Decode(const std::string &path, std::shared_ptr<ClientHmiVehicleSettings_Model> &pData, asn_wrapper::ClientHmiVehicleSettings* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::ClientHmiVehicleSettings* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::ClientHmiVehicleSettings*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->otaSetting = marbenData->otaSetting;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->otaSetting = %d.", __FUNCTION__, pData->otaSetting);
    pData->autoSync = marbenData->autoSync;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->autoSync = %d.", __FUNCTION__, pData->autoSync);
    pData->autoDownload = marbenData->autoDownload;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->autoDownload = %d.", __FUNCTION__, pData->autoDownload);
    pData->autoInstallation = marbenData->autoInstallation;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->autoInstallation = %d.", __FUNCTION__, pData->autoInstallation);

    return true;
}

bool VdsMarbenAdaptGen::AssignmentData_Encode(const AssignmentData_Model &pData, asn_wrapper::AssignmentData* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::AssignmentData* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::AssignmentData*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("installationOrderId", (int64_t)pData.installationOrderId.size(), (int64_t)1, (int64_t)256))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.installationOrderId = %s.", __FUNCTION__, pData.installationOrderId.c_str());
        marbenData->installationOrderId.copyOctetString(pData.installationOrderId.length(), (asnbyte*)(unsigned char*)(pData.installationOrderId.c_str()));
    }
    if (verifyScope("timestamp", (int64_t)pData.timestamp.size(), (int64_t)1, (int64_t)32))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.timestamp = %s.", __FUNCTION__, pData.timestamp.c_str());
        marbenData->timestamp.copyOctetString(pData.timestamp.length(), (asnbyte*)(unsigned char*)(pData.timestamp.c_str()));
    }
        
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.urls.size() = %d.", __FUNCTION__, pData.urls.size());
        for (auto p_url = pData.urls.begin(); p_url != pData.urls.end();) 
        {
            asn_wrapper::asncurlss *url = new asn_wrapper::asncurlss();
            marbenData->urls.addElement(url);

            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_url = %s.", __FUNCTION__, p_url);
            url->value.copyOctetString(p_url->length(), (asnbyte*)(unsigned char*)(p_url->c_str()));        
            ++p_url;
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->urls.getCount() = %d.", __FUNCTION__, marbenData->urls.getCount());
        

    return true;
}

bool VdsMarbenAdaptGen::AssignmentData_Decode(const std::string &path, std::shared_ptr<AssignmentData_Model> &pData, asn_wrapper::AssignmentData* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::AssignmentData* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::AssignmentData*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->installationOrderId = std::string((const char*)marbenData->installationOrderId.value, marbenData->installationOrderId.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->installationOrderId = %s.", __FUNCTION__, pData->installationOrderId.c_str());
    pData->timestamp = std::string((const char*)marbenData->timestamp.value, marbenData->timestamp.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->timestamp = %s.", __FUNCTION__, pData->timestamp.c_str());
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->urls.getCount() = %d.", __FUNCTION__, marbenData->urls.getCount());
    unsigned int urlCount = marbenData->urls.getCount();
    asn_wrapper::asncurlss* url = (asn_wrapper::asncurlss*)(marbenData->urls.getFirstElement());
    for (unsigned int i = 0; (i < urlCount || url); i++) 
    {
        std::string p_url;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_url = %s.", __FUNCTION__, p_url);
        p_url = std::string((const char*)url->value.value, url->value.length);
        pData->urls.push_back(p_url);
        url = (asn_wrapper::asncurlss*)(url->getNextElement());
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->urls.size() = %d.", __FUNCTION__, pData->urls.size());
    

    return true;
}

bool VdsMarbenAdaptGen::OtaAssignmentFileInfo_Encode(const OtaAssignmentFileInfo_Model &pData, asn_wrapper::OtaAssignmentFileInfo* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::OtaAssignmentFileInfo* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::OtaAssignmentFileInfo*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("installationOrderId", (int64_t)pData.installationOrderId.size(), (int64_t)1, (int64_t)256))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.installationOrderId = %s.", __FUNCTION__, pData.installationOrderId.c_str());
        marbenData->installationOrderId.copyOctetString(pData.installationOrderId.length(), (asnbyte*)(unsigned char*)(pData.installationOrderId.c_str()));
    }
    
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.assignFileInfos.size() = %d.", __FUNCTION__, pData.assignFileInfos.size());
    for (auto p_assignFileInfo = pData.assignFileInfos.begin(); p_assignFileInfo != pData.assignFileInfos.end();) 
    {
        asn_wrapper::asncassignFileInfoss *assignFileInfo = new asn_wrapper::asncassignFileInfoss();
        marbenData->assignFileInfos.addElement(assignFileInfo);

        if (verifyScope("partidentifier", (int64_t)p_assignFileInfo->partidentifier.size(), (int64_t)1, (int64_t)256))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_assignFileInfo->partidentifier = %s.", __FUNCTION__, p_assignFileInfo->partidentifier.c_str());
            assignFileInfo->partidentifier.copyOctetString(p_assignFileInfo->partidentifier.length(), (asnbyte*)(unsigned char*)(p_assignFileInfo->partidentifier.c_str()));
        }
        if (verifyScope("softwarePartSignature", (int64_t)p_assignFileInfo->softwarePartSignature.size(), (int64_t)1, (int64_t)256))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_assignFileInfo->softwarePartSignature = %s.", __FUNCTION__, p_assignFileInfo->softwarePartSignature.c_str());
            assignFileInfo->softwarePartSignature.copyOctetString(p_assignFileInfo->softwarePartSignature.length(), (asnbyte*)(unsigned char*)(p_assignFileInfo->softwarePartSignature.c_str()));
        }
        if (verifyScope("fileCheckSum", (int64_t)p_assignFileInfo->fileCheckSum.size(), (int64_t)1, (int64_t)256))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_assignFileInfo->fileCheckSum = %s.", __FUNCTION__, p_assignFileInfo->fileCheckSum.c_str());
            assignFileInfo->fileCheckSum.copyOctetString(p_assignFileInfo->fileCheckSum.length(), (asnbyte*)(unsigned char*)(p_assignFileInfo->fileCheckSum.c_str()));
        }
    
        ++p_assignFileInfo;
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->assignFileInfos.getCount() = %d.", __FUNCTION__, marbenData->assignFileInfos.getCount());
    

    return true;
}

bool VdsMarbenAdaptGen::OtaAssignmentFileInfo_Decode(const std::string &path, std::shared_ptr<OtaAssignmentFileInfo_Model> &pData, asn_wrapper::OtaAssignmentFileInfo* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::OtaAssignmentFileInfo* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::OtaAssignmentFileInfo*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->installationOrderId = std::string((const char*)marbenData->installationOrderId.value, marbenData->installationOrderId.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->installationOrderId = %s.", __FUNCTION__, pData->installationOrderId.c_str());
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->assignFileInfos.getCount() = %d.", __FUNCTION__, marbenData->assignFileInfos.getCount());
    unsigned int assignFileInfoCount = marbenData->assignFileInfos.getCount();
    asn_wrapper::asncassignFileInfoss* assignFileInfo = (asn_wrapper::asncassignFileInfoss*)(marbenData->assignFileInfos.getFirstElement());
    for (unsigned int i = 0; (i < assignFileInfoCount || assignFileInfo); i++) 
    {
        AssignmentFileInfo_Model p_assignFileInfo;
        p_assignFileInfo.partidentifier = std::string((const char*)assignFileInfo->partidentifier.value, assignFileInfo->partidentifier.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_assignFileInfo.partidentifier = %s.", __FUNCTION__, p_assignFileInfo.partidentifier.c_str());
        p_assignFileInfo.softwarePartSignature = std::string((const char*)assignFileInfo->softwarePartSignature.value, assignFileInfo->softwarePartSignature.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_assignFileInfo.softwarePartSignature = %s.", __FUNCTION__, p_assignFileInfo.softwarePartSignature.c_str());
        p_assignFileInfo.fileCheckSum = std::string((const char*)assignFileInfo->fileCheckSum.value, assignFileInfo->fileCheckSum.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_assignFileInfo.fileCheckSum = %s.", __FUNCTION__, p_assignFileInfo.fileCheckSum.c_str());
        pData->assignFileInfos.push_back(p_assignFileInfo);
        assignFileInfo = (asn_wrapper::asncassignFileInfoss*)(assignFileInfo->getNextElement());
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->assignFileInfos.size() = %d.", __FUNCTION__, pData->assignFileInfos.size());
    

    return true;
}

bool VdsMarbenAdaptGen::AssignmentFileInfo_Encode(const AssignmentFileInfo_Model &pData, asn_wrapper::AssignmentFileInfo* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::AssignmentFileInfo* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::AssignmentFileInfo*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("partidentifier", (int64_t)pData.partidentifier.size(), (int64_t)1, (int64_t)256))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.partidentifier = %s.", __FUNCTION__, pData.partidentifier.c_str());
        marbenData->partidentifier.copyOctetString(pData.partidentifier.length(), (asnbyte*)(unsigned char*)(pData.partidentifier.c_str()));
    }
    if (verifyScope("softwarePartSignature", (int64_t)pData.softwarePartSignature.size(), (int64_t)1, (int64_t)256))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.softwarePartSignature = %s.", __FUNCTION__, pData.softwarePartSignature.c_str());
        marbenData->softwarePartSignature.copyOctetString(pData.softwarePartSignature.length(), (asnbyte*)(unsigned char*)(pData.softwarePartSignature.c_str()));
    }
    if (verifyScope("fileCheckSum", (int64_t)pData.fileCheckSum.size(), (int64_t)1, (int64_t)256))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.fileCheckSum = %s.", __FUNCTION__, pData.fileCheckSum.c_str());
        marbenData->fileCheckSum.copyOctetString(pData.fileCheckSum.length(), (asnbyte*)(unsigned char*)(pData.fileCheckSum.c_str()));
    }

    return true;
}

bool VdsMarbenAdaptGen::AssignmentFileInfo_Decode(const std::string &path, std::shared_ptr<AssignmentFileInfo_Model> &pData, asn_wrapper::AssignmentFileInfo* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::AssignmentFileInfo* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::AssignmentFileInfo*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->partidentifier = std::string((const char*)marbenData->partidentifier.value, marbenData->partidentifier.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->partidentifier = %s.", __FUNCTION__, pData->partidentifier.c_str());
    pData->softwarePartSignature = std::string((const char*)marbenData->softwarePartSignature.value, marbenData->softwarePartSignature.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->softwarePartSignature = %s.", __FUNCTION__, pData->softwarePartSignature.c_str());
    pData->fileCheckSum = std::string((const char*)marbenData->fileCheckSum.value, marbenData->fileCheckSum.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->fileCheckSum = %s.", __FUNCTION__, pData->fileCheckSum.c_str());

    return true;
}

bool VdsMarbenAdaptGen::LanguageSetting_Encode(const LanguageSetting_Model &pData, asn_wrapper::LanguageSetting* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::LanguageSetting* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::LanguageSetting*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.language = %d.", __FUNCTION__, pData.language);
    marbenData->language = (int32_t)pData.language;

    return true;
}

bool VdsMarbenAdaptGen::LanguageSetting_Decode(const std::string &path, std::shared_ptr<LanguageSetting_Model> &pData, asn_wrapper::LanguageSetting* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::LanguageSetting* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::LanguageSetting*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->language = (Vds_Language)marbenData->language;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->language = %d.", __FUNCTION__, pData->language);

    return true;
}

bool VdsMarbenAdaptGen::NEVServiceData_Encode(const NEVServiceData_Model &pData, asn_wrapper::NEVServiceData* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::NEVServiceData* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::NEVServiceData*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("vehicleVin", (int64_t)pData.vehicleVin.size(), (int64_t)17, (int64_t)17))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.vehicleVin = %s.", __FUNCTION__, pData.vehicleVin.c_str());
        marbenData->vehicleVin.copyOctetString(pData.vehicleVin.length(), (asnbyte*)(unsigned char*)(pData.vehicleVin.c_str()));
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.testVehicle = %d.", __FUNCTION__, pData.testVehicle);
    marbenData->testVehicle = pData.testVehicle;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.rvdcTriggerCondition = %d.", __FUNCTION__, pData.rvdcTriggerCondition);
    marbenData->rvdcTriggerCondition = (int32_t)pData.rvdcTriggerCondition;
    if (verifyScope("mdpID", (int64_t)pData.mdpID, (int64_t)0, (int64_t)4294967295))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.mdpID = %d.", __FUNCTION__, pData.mdpID);
        marbenData->mdpID = pData.mdpID;
    }
    if (verifyScope("maID", (int64_t)pData.maID.size(), (int64_t)0, (int64_t)20))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.maID = %s.", __FUNCTION__, pData.maID.c_str());
        marbenData->maID.copyOctetString(pData.maID.length(), (asnbyte*)(unsigned char*)(pData.maID.c_str()));
    }
    if (pData.position.noValidData_choice)
    {
        marbenData->position = new asn_wrapper::asncnoValidData(); 
        //TODO:noValidData;
    }
    if (pData.position.drPosition_choice)
    {
        marbenData->position = new asn_wrapper::asncdrPosition(); 
        if (((asn_wrapper::asncdrPosition*)marbenData->position)->longLat == nullptr )
        {
            ((asn_wrapper::asncdrPosition*)marbenData->position)->longLat = new asn_wrapper::NEVCoordinatesLongLat();
        }
        NEVCoordinatesLongLat_Encode(pData.position.drPosition.longLat, ((asn_wrapper::asncdrPosition*)marbenData->position)->longLat);
        if (verifyScope("heading", (int64_t)pData.position.drPosition.heading, (int64_t)0, (int64_t)360))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.position.drPosition.heading = %d.", __FUNCTION__, pData.position.drPosition.heading);
            ((asn_wrapper::asncdrPosition*)marbenData->position)->heading = pData.position.drPosition.heading;
        }
        if (verifyScope("speedKmph", (int64_t)pData.position.drPosition.speedKmph, (int64_t)0, (int64_t)255))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.position.drPosition.speedKmph = %d.", __FUNCTION__, pData.position.drPosition.speedKmph);
            ((asn_wrapper::asncdrPosition*)marbenData->position)->speedKmph = pData.position.drPosition.speedKmph;
        }
        if (verifyScope("hdopX10", (int64_t)pData.position.drPosition.hdopX10, (int64_t)0, (int64_t)255))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.position.drPosition.hdopX10 = %d.", __FUNCTION__, pData.position.drPosition.hdopX10);
            ((asn_wrapper::asncdrPosition*)marbenData->position)->hdopX10 = pData.position.drPosition.hdopX10;
        }
        if (verifyScope("numSat", (int64_t)pData.position.drPosition.numSat, (int64_t)0, (int64_t)127))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.position.drPosition.numSat = %d.", __FUNCTION__, pData.position.drPosition.numSat);
            ((asn_wrapper::asncdrPosition*)marbenData->position)->numSat = pData.position.drPosition.numSat;
        }
        if (((asn_wrapper::asncdrPosition*)marbenData->position)->fixTime == nullptr )
        {
            ((asn_wrapper::asncdrPosition*)marbenData->position)->fixTime = new asn_wrapper::NEVDateTime();
        }
        NEVDateTime_Encode(pData.position.drPosition.fixTime, ((asn_wrapper::asncdrPosition*)marbenData->position)->fixTime);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.position.drPosition.fixType = %d.", __FUNCTION__, pData.position.drPosition.fixType);
        ((asn_wrapper::asncdrPosition*)marbenData->position)->fixType = (int32_t)pData.position.drPosition.fixType;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.position.drPosition.drType = %d.", __FUNCTION__, pData.position.drPosition.drType);
        ((asn_wrapper::asncdrPosition*)marbenData->position)->drType = (int32_t)pData.position.drPosition.drType;
        if (verifyScope("drDistance", (int64_t)pData.position.drPosition.drDistance, (int64_t)0, (int64_t)65535))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.position.drPosition.drDistance = %d.", __FUNCTION__, pData.position.drPosition.drDistance);
            ((asn_wrapper::asncdrPosition*)marbenData->position)->drDistance = pData.position.drPosition.drDistance;
        }
    }
    if (pData.ecuData.noDiagData_choice)
    {
        marbenData->ecuData = new asn_wrapper::asncnoDiagData(); 
        //TODO:noDiagData;
    }
    if (pData.ecuData.data_choice)
    {
        
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.ecuData.data.size() = %d.", __FUNCTION__, pData.ecuData.data.size());
        for (auto p_data = pData.ecuData.data.begin(); p_data != pData.ecuData.data.end();) 
        {
            asn_wrapper::asncdatas *data = new asn_wrapper::asncdatas();
            ((asn_wrapper::asncEcuData__data*)marbenData->ecuData)->data.addElement(data);

            if (verifyScope("ecu", (int64_t)p_data->ecu, (int64_t)0, (int64_t)65535))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_data->ecu = %d.", __FUNCTION__, p_data->ecu);
                data->ecu = p_data->ecu;
            }
            if (verifyScope("diagnosticNumber", (int64_t)p_data->diagnosticNumber.size(), (int64_t)1, (int64_t)20))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_data->diagnosticNumber = %s.", __FUNCTION__, p_data->diagnosticNumber.c_str());
                data->diagnosticNumber.copyOctetString(p_data->diagnosticNumber.length(), (asnbyte*)(unsigned char*)(p_data->diagnosticNumber.c_str()));
            }
            
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_data->didData.size() = %d.", __FUNCTION__, p_data->didData.size());
            for (auto p_didData = p_data->didData.begin(); p_didData != p_data->didData.end();) 
            {
                asn_wrapper::asncdidDatas *didData = new asn_wrapper::asncdidDatas();
                data->didData.addElement(didData);

                if (verifyScope("id", (int64_t)p_didData->id, (int64_t)0, (int64_t)65535))
                {
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_didData->id = %d.", __FUNCTION__, p_didData->id);
                    didData->id = p_didData->id;
                }
                if (verifyScope("data", (int64_t)p_didData->data.size(), (int64_t)0, (int64_t)100))
                {
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_didData->data = %s.", __FUNCTION__, p_didData->data.c_str());
                    int data_length = 0;
                    unsigned char* data_ptr = new unsigned char[p_didData->data.length()];
                    StringToOctet(p_didData->data,data_ptr,data_length);
                    didData->data.copyOctetString(data_length,(asnbytep)data_ptr);
                    delete[] data_ptr;
                }
            
                ++p_didData;
            }
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: data->didData.getCount() = %d.", __FUNCTION__, data->didData.getCount());
            
            
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_data->dtcData.size() = %d.", __FUNCTION__, p_data->dtcData.size());
            for (auto p_dtcData = p_data->dtcData.begin(); p_dtcData != p_data->dtcData.end();) 
            {
                asn_wrapper::asncdtcDatas *dtcData = new asn_wrapper::asncdtcDatas();
                data->dtcData.addElement(dtcData);

                if (verifyScope("id", (int64_t)p_dtcData->id, (int64_t)0, (int64_t)16777215))
                {
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_dtcData->id = %d.", __FUNCTION__, p_dtcData->id);
                    dtcData->id = p_dtcData->id;
                }
                if (verifyScope("data", (int64_t)p_dtcData->data.size(), (int64_t)0, (int64_t)100))
                {
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_dtcData->data = %s.", __FUNCTION__, p_dtcData->data.c_str());
                    int data_length = 0;
                    unsigned char* data_ptr = new unsigned char[p_dtcData->data.length()];
                    StringToOctet(p_dtcData->data,data_ptr,data_length);
                    dtcData->data.copyOctetString(data_length,(asnbytep)data_ptr);
                    delete[] data_ptr;
                }
            
                ++p_dtcData;
            }
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: data->dtcData.getCount() = %d.", __FUNCTION__, data->dtcData.getCount());
            
        
            ++p_data;
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: ((asn_wrapper::asncEcuData__data*)marbenData->ecuData)->data.getCount() = %d.", __FUNCTION__, ((asn_wrapper::asncEcuData__data*)marbenData->ecuData)->data.getCount());
        
    }

    return true;
}

bool VdsMarbenAdaptGen::NEVServiceData_Decode(const std::string &path, std::shared_ptr<NEVServiceData_Model> &pData, asn_wrapper::NEVServiceData* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::NEVServiceData* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::NEVServiceData*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->vehicleVin = std::string((const char*)marbenData->vehicleVin.value, marbenData->vehicleVin.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->vehicleVin = %s.", __FUNCTION__, pData->vehicleVin.c_str());
    pData->testVehicle = marbenData->testVehicle;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->testVehicle = %d.", __FUNCTION__, pData->testVehicle);
    pData->rvdcTriggerCondition = (Vds_NEVTriggerCondition)marbenData->rvdcTriggerCondition;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->rvdcTriggerCondition = %d.", __FUNCTION__, pData->rvdcTriggerCondition);
    pData->mdpID = marbenData->mdpID;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->mdpID = %d.", __FUNCTION__, pData->mdpID);
    pData->maID = std::string((const char*)marbenData->maID.value, marbenData->maID.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->maID = %s.", __FUNCTION__, pData->maID.c_str());
    if (marbenData->position != nullptr )
    {
        if (marbenData->position->alternative == asn_wrapper::asn_noValidData)
        {
            pData->position.noValidData_choice = true;
            //TODO:noValidData;
        }
        if (marbenData->position->alternative == asn_wrapper::asn_drPosition)
        {
            pData->position.drPosition_choice = true;
            if (((asn_wrapper::asncdrPosition*)marbenData->position) != nullptr )
            {
                if (((asn_wrapper::asncdrPosition*)marbenData->position)->longLat != nullptr )
                {
                    std::shared_ptr<NEVCoordinatesLongLat_Model> p_longLat = std::make_shared<NEVCoordinatesLongLat_Model>();
                    result = NEVCoordinatesLongLat_Decode( "" , p_longLat , ((asn_wrapper::asncdrPosition*)marbenData->position)->longLat);
                    if (result)
                    {
                        pData->position.drPosition.longLat = (*p_longLat);
                    }
                }

                pData->position.drPosition.heading = ((asn_wrapper::asncdrPosition*)marbenData->position)->heading;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->position.drPosition.heading = %d.", __FUNCTION__, pData->position.drPosition.heading);
                pData->position.drPosition.speedKmph = ((asn_wrapper::asncdrPosition*)marbenData->position)->speedKmph;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->position.drPosition.speedKmph = %d.", __FUNCTION__, pData->position.drPosition.speedKmph);
                pData->position.drPosition.hdopX10 = ((asn_wrapper::asncdrPosition*)marbenData->position)->hdopX10;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->position.drPosition.hdopX10 = %d.", __FUNCTION__, pData->position.drPosition.hdopX10);
                pData->position.drPosition.numSat = ((asn_wrapper::asncdrPosition*)marbenData->position)->numSat;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->position.drPosition.numSat = %d.", __FUNCTION__, pData->position.drPosition.numSat);
                if (((asn_wrapper::asncdrPosition*)marbenData->position)->fixTime != nullptr )
                {
                    std::shared_ptr<NEVDateTime_Model> p_fixTime = std::make_shared<NEVDateTime_Model>();
                    result = NEVDateTime_Decode( "" , p_fixTime , ((asn_wrapper::asncdrPosition*)marbenData->position)->fixTime);
                    if (result)
                    {
                        pData->position.drPosition.fixTime = (*p_fixTime);
                    }
                }

                pData->position.drPosition.fixType = (Vds_NEVGnssFixType)((asn_wrapper::asncdrPosition*)marbenData->position)->fixType;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->position.drPosition.fixType = %d.", __FUNCTION__, pData->position.drPosition.fixType);
                pData->position.drPosition.drType = (Vds_NEVDeadReckoningType)((asn_wrapper::asncdrPosition*)marbenData->position)->drType;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->position.drPosition.drType = %d.", __FUNCTION__, pData->position.drPosition.drType);
                pData->position.drPosition.drDistance = ((asn_wrapper::asncdrPosition*)marbenData->position)->drDistance;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->position.drPosition.drDistance = %d.", __FUNCTION__, pData->position.drPosition.drDistance);
            }

        }
    }

    if (marbenData->ecuData != nullptr )
    {
        if (marbenData->ecuData->alternative == asn_wrapper::asn_noDiagData)
        {
            pData->ecuData.noDiagData_choice = true;
            //TODO:noDiagData;
        }
        if (marbenData->ecuData->alternative == asn_wrapper::asn_EcuData__data)
        {
            pData->ecuData.data_choice = true;
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: ((asn_wrapper::asncEcuData__data*)marbenData->ecuData)->data.getCount() = %d.", __FUNCTION__, ((asn_wrapper::asncEcuData__data*)marbenData->ecuData)->data.getCount());
            unsigned int dataCount = ((asn_wrapper::asncEcuData__data*)marbenData->ecuData)->data.getCount();
            asn_wrapper::asncdatas* data = (asn_wrapper::asncdatas*)(((asn_wrapper::asncEcuData__data*)marbenData->ecuData)->data.getFirstElement());
            for (unsigned int i = 0; (i < dataCount || data); i++) 
            {
                ECUData_Model p_data;
                p_data.ecu = data->ecu;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_data.ecu = %d.", __FUNCTION__, p_data.ecu);
                p_data.diagnosticNumber = std::string((const char*)data->diagnosticNumber.value, data->diagnosticNumber.length);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_data.diagnosticNumber = %s.", __FUNCTION__, p_data.diagnosticNumber.c_str());
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: data->didData.getCount() = %d.", __FUNCTION__, data->didData.getCount());
                unsigned int didDataCount = data->didData.getCount();
                asn_wrapper::asncdidDatas* didData = (asn_wrapper::asncdidDatas*)(data->didData.getFirstElement());
                for (unsigned int didData2 = 0; (didData2 < didDataCount || didData); didData2++) 
                {
                    DIDData_Model p_didData;
                    p_didData.id = didData->id;
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_didData.id = %d.", __FUNCTION__, p_didData.id);
                    asnbyte* data_ptr;
                    asnMAXUINT data_length;
                    didData->data.getOctetString(&data_length,&data_ptr);
                    char* data_array = new char[data_length*3-1];
                    OctetToString(data_ptr,data_array,data_length);
                    p_didData.data = data_array;
                    delete[] data_array;
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_didData.data = %s.", __FUNCTION__, p_didData.data.c_str());
                    p_data.didData.push_back(p_didData);
                    didData = (asn_wrapper::asncdidDatas*)(didData->getNextElement());
                }
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_data.didData.size() = %d.", __FUNCTION__, p_data.didData.size());
                
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: data->dtcData.getCount() = %d.", __FUNCTION__, data->dtcData.getCount());
                unsigned int dtcDataCount = data->dtcData.getCount();
                asn_wrapper::asncdtcDatas* dtcData = (asn_wrapper::asncdtcDatas*)(data->dtcData.getFirstElement());
                for (unsigned int dtcData2 = 0; (dtcData2 < dtcDataCount || dtcData); dtcData2++) 
                {
                    DTCData_Model p_dtcData;
                    p_dtcData.id = dtcData->id;
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_dtcData.id = %d.", __FUNCTION__, p_dtcData.id);
                    asnbyte* data_ptr;
                    asnMAXUINT data_length;
                    dtcData->data.getOctetString(&data_length,&data_ptr);
                    char* data_array = new char[data_length*3-1];
                    OctetToString(data_ptr,data_array,data_length);
                    p_dtcData.data = data_array;
                    delete[] data_array;
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_dtcData.data = %s.", __FUNCTION__, p_dtcData.data.c_str());
                    p_data.dtcData.push_back(p_dtcData);
                    dtcData = (asn_wrapper::asncdtcDatas*)(dtcData->getNextElement());
                }
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_data.dtcData.size() = %d.", __FUNCTION__, p_data.dtcData.size());
                
                pData->ecuData.data.push_back(p_data);
                data = (asn_wrapper::asncdatas*)(data->getNextElement());
            }
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->ecuData.data.size() = %d.", __FUNCTION__, pData->ecuData.data.size());
            
        }
    }


    return true;
}

bool VdsMarbenAdaptGen::NEVDateTime_Encode(const NEVDateTime_Model &pData, asn_wrapper::NEVDateTime* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::NEVDateTime* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::NEVDateTime*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("year", (int64_t)pData.year, (int64_t)2000, (int64_t)2127))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.year = %d.", __FUNCTION__, pData.year);
        marbenData->year = pData.year;
    }
    if (verifyScope("month", (int64_t)pData.month, (int64_t)1, (int64_t)12))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.month = %d.", __FUNCTION__, pData.month);
        marbenData->month = pData.month;
    }
    if (verifyScope("day", (int64_t)pData.day, (int64_t)1, (int64_t)31))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.day = %d.", __FUNCTION__, pData.day);
        marbenData->day = pData.day;
    }
    if (verifyScope("hour", (int64_t)pData.hour, (int64_t)0, (int64_t)23))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.hour = %d.", __FUNCTION__, pData.hour);
        marbenData->hour = pData.hour;
    }
    if (verifyScope("minute", (int64_t)pData.minute, (int64_t)0, (int64_t)59))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.minute = %d.", __FUNCTION__, pData.minute);
        marbenData->minute = pData.minute;
    }
    if (verifyScope("second", (int64_t)pData.second, (int64_t)0, (int64_t)59))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.second = %d.", __FUNCTION__, pData.second);
        marbenData->second = pData.second;
    }

    return true;
}

bool VdsMarbenAdaptGen::NEVDateTime_Decode(const std::string &path, std::shared_ptr<NEVDateTime_Model> &pData, asn_wrapper::NEVDateTime* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::NEVDateTime* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::NEVDateTime*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->year = marbenData->year;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->year = %d.", __FUNCTION__, pData->year);
    pData->month = marbenData->month;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->month = %d.", __FUNCTION__, pData->month);
    pData->day = marbenData->day;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->day = %d.", __FUNCTION__, pData->day);
    pData->hour = marbenData->hour;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->hour = %d.", __FUNCTION__, pData->hour);
    pData->minute = marbenData->minute;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->minute = %d.", __FUNCTION__, pData->minute);
    pData->second = marbenData->second;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->second = %d.", __FUNCTION__, pData->second);

    return true;
}

bool VdsMarbenAdaptGen::NEVDRPositionData_Encode(const NEVDRPositionData_Model &pData, asn_wrapper::NEVDRPositionData* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::NEVDRPositionData* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::NEVDRPositionData*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (marbenData->longLat == nullptr )
    {
        marbenData->longLat = new asn_wrapper::NEVCoordinatesLongLat();
    }
    NEVCoordinatesLongLat_Encode(pData.longLat, marbenData->longLat);
    if (verifyScope("heading", (int64_t)pData.heading, (int64_t)0, (int64_t)360))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.heading = %d.", __FUNCTION__, pData.heading);
        marbenData->heading = pData.heading;
    }
    if (verifyScope("speedKmph", (int64_t)pData.speedKmph, (int64_t)0, (int64_t)255))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.speedKmph = %d.", __FUNCTION__, pData.speedKmph);
        marbenData->speedKmph = pData.speedKmph;
    }
    if (verifyScope("hdopX10", (int64_t)pData.hdopX10, (int64_t)0, (int64_t)255))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.hdopX10 = %d.", __FUNCTION__, pData.hdopX10);
        marbenData->hdopX10 = pData.hdopX10;
    }
    if (verifyScope("numSat", (int64_t)pData.numSat, (int64_t)0, (int64_t)127))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.numSat = %d.", __FUNCTION__, pData.numSat);
        marbenData->numSat = pData.numSat;
    }
    if (marbenData->fixTime == nullptr )
    {
        marbenData->fixTime = new asn_wrapper::NEVDateTime();
    }
    NEVDateTime_Encode(pData.fixTime, marbenData->fixTime);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.fixType = %d.", __FUNCTION__, pData.fixType);
    marbenData->fixType = (int32_t)pData.fixType;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.drType = %d.", __FUNCTION__, pData.drType);
    marbenData->drType = (int32_t)pData.drType;
    if (verifyScope("drDistance", (int64_t)pData.drDistance, (int64_t)0, (int64_t)65535))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.drDistance = %d.", __FUNCTION__, pData.drDistance);
        marbenData->drDistance = pData.drDistance;
    }

    return true;
}

bool VdsMarbenAdaptGen::NEVDRPositionData_Decode(const std::string &path, std::shared_ptr<NEVDRPositionData_Model> &pData, asn_wrapper::NEVDRPositionData* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::NEVDRPositionData* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::NEVDRPositionData*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (marbenData->longLat != nullptr )
    {
        std::shared_ptr<NEVCoordinatesLongLat_Model> p_longLat = std::make_shared<NEVCoordinatesLongLat_Model>();
        result = NEVCoordinatesLongLat_Decode( "" , p_longLat , marbenData->longLat);
        if (result)
        {
            pData->longLat = (*p_longLat);
        }
    }

    pData->heading = marbenData->heading;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->heading = %d.", __FUNCTION__, pData->heading);
    pData->speedKmph = marbenData->speedKmph;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->speedKmph = %d.", __FUNCTION__, pData->speedKmph);
    pData->hdopX10 = marbenData->hdopX10;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->hdopX10 = %d.", __FUNCTION__, pData->hdopX10);
    pData->numSat = marbenData->numSat;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->numSat = %d.", __FUNCTION__, pData->numSat);
    if (marbenData->fixTime != nullptr )
    {
        std::shared_ptr<NEVDateTime_Model> p_fixTime = std::make_shared<NEVDateTime_Model>();
        result = NEVDateTime_Decode( "" , p_fixTime , marbenData->fixTime);
        if (result)
        {
            pData->fixTime = (*p_fixTime);
        }
    }

    pData->fixType = (Vds_NEVGnssFixType)marbenData->fixType;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->fixType = %d.", __FUNCTION__, pData->fixType);
    pData->drType = (Vds_NEVDeadReckoningType)marbenData->drType;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->drType = %d.", __FUNCTION__, pData->drType);
    pData->drDistance = marbenData->drDistance;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->drDistance = %d.", __FUNCTION__, pData->drDistance);

    return true;
}

bool VdsMarbenAdaptGen::NEVCoordinatesLongLat_Encode(const NEVCoordinatesLongLat_Model &pData, asn_wrapper::NEVCoordinatesLongLat* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::NEVCoordinatesLongLat* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::NEVCoordinatesLongLat*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("longitude", (int64_t)pData.longitude, (int64_t)-2147483648, (int64_t)2147483647))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.longitude = %d.", __FUNCTION__, pData.longitude);
        marbenData->longitude = pData.longitude;
    }
    if (verifyScope("latitude", (int64_t)pData.latitude, (int64_t)-2147483648, (int64_t)2147483647))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.latitude = %d.", __FUNCTION__, pData.latitude);
        marbenData->latitude = pData.latitude;
    }

    return true;
}

bool VdsMarbenAdaptGen::NEVCoordinatesLongLat_Decode(const std::string &path, std::shared_ptr<NEVCoordinatesLongLat_Model> &pData, asn_wrapper::NEVCoordinatesLongLat* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::NEVCoordinatesLongLat* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::NEVCoordinatesLongLat*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->longitude = marbenData->longitude;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->longitude = %d.", __FUNCTION__, pData->longitude);
    pData->latitude = marbenData->latitude;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->latitude = %d.", __FUNCTION__, pData->latitude);

    return true;
}

bool VdsMarbenAdaptGen::ECUData_Encode(const ECUData_Model &pData, asn_wrapper::ECUData* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::ECUData* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::ECUData*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("ecu", (int64_t)pData.ecu, (int64_t)0, (int64_t)65535))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.ecu = %d.", __FUNCTION__, pData.ecu);
        marbenData->ecu = pData.ecu;
    }
    if (verifyScope("diagnosticNumber", (int64_t)pData.diagnosticNumber.size(), (int64_t)1, (int64_t)20))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.diagnosticNumber = %s.", __FUNCTION__, pData.diagnosticNumber.c_str());
        marbenData->diagnosticNumber.copyOctetString(pData.diagnosticNumber.length(), (asnbyte*)(unsigned char*)(pData.diagnosticNumber.c_str()));
    }
    
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.didData.size() = %d.", __FUNCTION__, pData.didData.size());
    for (auto p_didData = pData.didData.begin(); p_didData != pData.didData.end();) 
    {
        asn_wrapper::asncdidDatas *didData = new asn_wrapper::asncdidDatas();
        marbenData->didData.addElement(didData);

        if (verifyScope("id", (int64_t)p_didData->id, (int64_t)0, (int64_t)65535))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_didData->id = %d.", __FUNCTION__, p_didData->id);
            didData->id = p_didData->id;
        }
        if (verifyScope("data", (int64_t)p_didData->data.size(), (int64_t)0, (int64_t)100))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_didData->data = %s.", __FUNCTION__, p_didData->data.c_str());
            int data_length = 0;
            unsigned char* data_ptr = new unsigned char[p_didData->data.length()];
            StringToOctet(p_didData->data,data_ptr,data_length);
            didData->data.copyOctetString(data_length,(asnbytep)data_ptr);
            delete[] data_ptr;
        }
    
        ++p_didData;
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->didData.getCount() = %d.", __FUNCTION__, marbenData->didData.getCount());
    
    
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.dtcData.size() = %d.", __FUNCTION__, pData.dtcData.size());
    for (auto p_dtcData = pData.dtcData.begin(); p_dtcData != pData.dtcData.end();) 
    {
        asn_wrapper::asncdtcDatas *dtcData = new asn_wrapper::asncdtcDatas();
        marbenData->dtcData.addElement(dtcData);

        if (verifyScope("id", (int64_t)p_dtcData->id, (int64_t)0, (int64_t)16777215))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_dtcData->id = %d.", __FUNCTION__, p_dtcData->id);
            dtcData->id = p_dtcData->id;
        }
        if (verifyScope("data", (int64_t)p_dtcData->data.size(), (int64_t)0, (int64_t)100))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_dtcData->data = %s.", __FUNCTION__, p_dtcData->data.c_str());
            int data_length = 0;
            unsigned char* data_ptr = new unsigned char[p_dtcData->data.length()];
            StringToOctet(p_dtcData->data,data_ptr,data_length);
            dtcData->data.copyOctetString(data_length,(asnbytep)data_ptr);
            delete[] data_ptr;
        }
    
        ++p_dtcData;
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->dtcData.getCount() = %d.", __FUNCTION__, marbenData->dtcData.getCount());
    

    return true;
}

bool VdsMarbenAdaptGen::ECUData_Decode(const std::string &path, std::shared_ptr<ECUData_Model> &pData, asn_wrapper::ECUData* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::ECUData* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::ECUData*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->ecu = marbenData->ecu;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->ecu = %d.", __FUNCTION__, pData->ecu);
    pData->diagnosticNumber = std::string((const char*)marbenData->diagnosticNumber.value, marbenData->diagnosticNumber.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->diagnosticNumber = %s.", __FUNCTION__, pData->diagnosticNumber.c_str());
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->didData.getCount() = %d.", __FUNCTION__, marbenData->didData.getCount());
    unsigned int didDataCount = marbenData->didData.getCount();
    asn_wrapper::asncdidDatas* didData = (asn_wrapper::asncdidDatas*)(marbenData->didData.getFirstElement());
    for (unsigned int i = 0; (i < didDataCount || didData); i++) 
    {
        DIDData_Model p_didData;
        p_didData.id = didData->id;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_didData.id = %d.", __FUNCTION__, p_didData.id);
        asnbyte* data_ptr;
        asnMAXUINT data_length;
        didData->data.getOctetString(&data_length,&data_ptr);
        char* data_array = new char[data_length*3-1];
        OctetToString(data_ptr,data_array,data_length);
        p_didData.data = data_array;
        delete[] data_array;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_didData.data = %s.", __FUNCTION__, p_didData.data.c_str());
        pData->didData.push_back(p_didData);
        didData = (asn_wrapper::asncdidDatas*)(didData->getNextElement());
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->didData.size() = %d.", __FUNCTION__, pData->didData.size());
    
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->dtcData.getCount() = %d.", __FUNCTION__, marbenData->dtcData.getCount());
    unsigned int dtcDataCount = marbenData->dtcData.getCount();
    asn_wrapper::asncdtcDatas* dtcData = (asn_wrapper::asncdtcDatas*)(marbenData->dtcData.getFirstElement());
    for (unsigned int i = 0; (i < dtcDataCount || dtcData); i++) 
    {
        DTCData_Model p_dtcData;
        p_dtcData.id = dtcData->id;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_dtcData.id = %d.", __FUNCTION__, p_dtcData.id);
        asnbyte* data_ptr;
        asnMAXUINT data_length;
        dtcData->data.getOctetString(&data_length,&data_ptr);
        char* data_array = new char[data_length*3-1];
        OctetToString(data_ptr,data_array,data_length);
        p_dtcData.data = data_array;
        delete[] data_array;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_dtcData.data = %s.", __FUNCTION__, p_dtcData.data.c_str());
        pData->dtcData.push_back(p_dtcData);
        dtcData = (asn_wrapper::asncdtcDatas*)(dtcData->getNextElement());
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->dtcData.size() = %d.", __FUNCTION__, pData->dtcData.size());
    

    return true;
}

bool VdsMarbenAdaptGen::DIDData_Encode(const DIDData_Model &pData, asn_wrapper::DIDData* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::DIDData* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::DIDData*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("id", (int64_t)pData.id, (int64_t)0, (int64_t)65535))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.id = %d.", __FUNCTION__, pData.id);
        marbenData->id = pData.id;
    }
    if (verifyScope("data", (int64_t)pData.data.size(), (int64_t)0, (int64_t)100))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.data = %s.", __FUNCTION__, pData.data.c_str());
        int data_length = 0;
        unsigned char* data_ptr = new unsigned char[pData.data.length()];
        StringToOctet(pData.data,data_ptr,data_length);
        marbenData->data.copyOctetString(data_length,(asnbytep)data_ptr);
        delete[] data_ptr;
    }

    return true;
}

bool VdsMarbenAdaptGen::DIDData_Decode(const std::string &path, std::shared_ptr<DIDData_Model> &pData, asn_wrapper::DIDData* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::DIDData* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::DIDData*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->id = marbenData->id;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->id = %d.", __FUNCTION__, pData->id);
    asnbyte* data_ptr;
    asnMAXUINT data_length;
    marbenData->data.getOctetString(&data_length,&data_ptr);
    char* data_array = new char[data_length*3-1];
    OctetToString(data_ptr,data_array,data_length);
    pData->data = data_array;
    delete[] data_array;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->data = %s.", __FUNCTION__, pData->data.c_str());

    return true;
}

bool VdsMarbenAdaptGen::DTCData_Encode(const DTCData_Model &pData, asn_wrapper::DTCData* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::DTCData* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::DTCData*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("id", (int64_t)pData.id, (int64_t)0, (int64_t)16777215))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.id = %d.", __FUNCTION__, pData.id);
        marbenData->id = pData.id;
    }
    if (verifyScope("data", (int64_t)pData.data.size(), (int64_t)0, (int64_t)100))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.data = %s.", __FUNCTION__, pData.data.c_str());
        int data_length = 0;
        unsigned char* data_ptr = new unsigned char[pData.data.length()];
        StringToOctet(pData.data,data_ptr,data_length);
        marbenData->data.copyOctetString(data_length,(asnbytep)data_ptr);
        delete[] data_ptr;
    }

    return true;
}

bool VdsMarbenAdaptGen::DTCData_Decode(const std::string &path, std::shared_ptr<DTCData_Model> &pData, asn_wrapper::DTCData* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::DTCData* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::DTCData*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->id = marbenData->id;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->id = %d.", __FUNCTION__, pData->id);
    asnbyte* data_ptr;
    asnMAXUINT data_length;
    marbenData->data.getOctetString(&data_length,&data_ptr);
    char* data_array = new char[data_length*3-1];
    OctetToString(data_ptr,data_array,data_length);
    pData->data = data_array;
    delete[] data_array;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->data = %s.", __FUNCTION__, pData->data.c_str());

    return true;
}

bool VdsMarbenAdaptGen::ServiceData_Encode(const ServiceData_Model &pData, asn_wrapper::ServiceData* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::ServiceData* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::ServiceData*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (pData.serviceTrigger_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_serviceTrigger);
        if (marbenData->serviceTrigger == nullptr )
        {
            marbenData->serviceTrigger = new asn_wrapper::ServiceTrigger();
        }
        ServiceTrigger_Encode(pData.serviceTrigger, marbenData->serviceTrigger);
    }
    if (pData.serviceParameters_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_ServiceData__serviceParameters);
        
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.serviceParameters.size() = %d.", __FUNCTION__, pData.serviceParameters.size());
        for (auto p_serviceParameter = pData.serviceParameters.begin(); p_serviceParameter != pData.serviceParameters.end();) 
        {
            asn_wrapper::asncServiceData__serviceParameterss *serviceParameter = new asn_wrapper::asncServiceData__serviceParameterss();
            marbenData->serviceParameters.addElement(serviceParameter);

            if (verifyScope("key", (int64_t)p_serviceParameter->key.size(), (int64_t)0, (int64_t)250))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter->key = %s.", __FUNCTION__, p_serviceParameter->key.c_str());
                serviceParameter->key.copyOctetString(p_serviceParameter->key.length(), (asnbyte*)(unsigned char*)(p_serviceParameter->key.c_str()));
            }
            if (p_serviceParameter->intVal_presence)
            {
                serviceParameter->optional.setPresence(asn_wrapper::asn_intVal);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter->intVal = %d.", __FUNCTION__, p_serviceParameter->intVal);
                serviceParameter->intVal = p_serviceParameter->intVal;
            }
            if (p_serviceParameter->stringVal_presence)
            {
                if (verifyScope("stringVal", (int64_t)p_serviceParameter->stringVal.size(), (int64_t)0, (int64_t)65535))
                {
                    serviceParameter->optional.setPresence(asn_wrapper::asn_ServiceParameter__stringVal);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter->stringVal = %s.", __FUNCTION__, p_serviceParameter->stringVal.c_str());
                    serviceParameter->stringVal.copyOctetString(p_serviceParameter->stringVal.length(), (asnbyte*)(unsigned char*)(p_serviceParameter->stringVal.c_str()));
                }
            }
            if (p_serviceParameter->boolVal_presence)
            {
                serviceParameter->optional.setPresence(asn_wrapper::asn_ServiceParameter__boolVal);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter->boolVal = %d.", __FUNCTION__, p_serviceParameter->boolVal);
                serviceParameter->boolVal = p_serviceParameter->boolVal;
            }
            if (p_serviceParameter->timestampVal_presence)
            {
                serviceParameter->optional.setPresence(asn_wrapper::asn_ServiceParameter__timestampVal);
                if (serviceParameter->timestampVal == nullptr )
                {
                    serviceParameter->timestampVal = new asn_wrapper::TimeStamp();
                }
                TimeStamp_Encode(p_serviceParameter->timestampVal, serviceParameter->timestampVal);
            }
            if (p_serviceParameter->dataVal_presence)
            {
                if (verifyScope("dataVal", (int64_t)p_serviceParameter->dataVal.size(), (int64_t)1, (int64_t)65535))
                {
                    serviceParameter->optional.setPresence(asn_wrapper::asn_ServiceParameter__dataVal);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter->dataVal = %s.", __FUNCTION__, p_serviceParameter->dataVal.c_str());
                    int dataVal_length = 0;
                    unsigned char* dataVal_ptr = new unsigned char[p_serviceParameter->dataVal.length()];
                    StringToOctet(p_serviceParameter->dataVal,dataVal_ptr,dataVal_length);
                    serviceParameter->dataVal.copyOctetString(dataVal_length,(asnbytep)dataVal_ptr);
                    delete[] dataVal_ptr;
                }
            }
        
            ++p_serviceParameter;
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->serviceParameters.getCount() = %d.", __FUNCTION__, marbenData->serviceParameters.getCount());
        
    }
    if (pData.serviceCommand_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_serviceCommand);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.serviceCommand = %d.", __FUNCTION__, pData.serviceCommand);
        marbenData->serviceCommand = (int32_t)pData.serviceCommand;
    }
    if (pData.serviceResult_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_serviceResult);
        if (marbenData->serviceResult == nullptr )
        {
            marbenData->serviceResult = new asn_wrapper::ServiceResult();
        }
        ServiceResult_Encode(pData.serviceResult, marbenData->serviceResult);
    }
    if (pData.serviceStatus_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_serviceStatus);
        if (marbenData->serviceStatus == nullptr )
        {
            marbenData->serviceStatus = new asn_wrapper::ServiceStatus();
        }
        ServiceStatus_Encode(pData.serviceStatus, marbenData->serviceStatus);
    }
    if (pData.message_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_ServiceData__message);
        if (pData.message.message_choice)
        {
            if (verifyScope("message", (int64_t)pData.message.message.size(), (int64_t)0, (int64_t)65535))
            {
                marbenData->message = new asn_wrapper::asncGeneralMessage__message(); 
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.message.message = %s.", __FUNCTION__, pData.message.message.c_str());
                ((asn_wrapper::asncGeneralMessage__message*)marbenData->message)->message.copyOctetString(pData.message.message.length(), (asnbyte*)(unsigned char*)(pData.message.message.c_str()));
            }
        }
        if (pData.message.ocetMessage_choice)
        {
            if (verifyScope("ocetMessage", (int64_t)pData.message.ocetMessage.size(), (int64_t)1, (int64_t)65535))
            {
                marbenData->message = new asn_wrapper::asncocetMessage(); 
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.message.ocetMessage = %s.", __FUNCTION__, pData.message.ocetMessage.c_str());
                int ocetMessage_length = 0;
                unsigned char* ocetMessage_ptr = new unsigned char[pData.message.ocetMessage.length()];
                StringToOctet(pData.message.ocetMessage,ocetMessage_ptr,ocetMessage_length);
                ((asn_wrapper::asncocetMessage*)marbenData->message)->ocetMessage.copyOctetString(ocetMessage_length,(asnbytep)ocetMessage_ptr);
                delete[] ocetMessage_ptr;
            }
        }
    }
    if (pData.pois_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_pois);
        
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.pois.size() = %d.", __FUNCTION__, pData.pois.size());
        for (auto p_poi = pData.pois.begin(); p_poi != pData.pois.end();) 
        {
            asn_wrapper::asncpoiss *poi = new asn_wrapper::asncpoiss();
            marbenData->pois.addElement(poi);

            if (verifyScope("name", (int64_t)p_poi->name.size(), (int64_t)0, (int64_t)100))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_poi->name = %s.", __FUNCTION__, p_poi->name.c_str());
                poi->name.copyOctetString(p_poi->name.length(), (asnbyte*)(unsigned char*)(p_poi->name.c_str()));
            }
            if (p_poi->position_presence)
            {
                poi->optional.setPresence(asn_wrapper::asn_PointOfInterest__position);
                if (poi->position == nullptr )
                {
                    poi->position = new asn_wrapper::Position();
                }
                Position_Encode(p_poi->position, poi->position);
            }
            if (p_poi->type_presence)
            {
                if (verifyScope("type", (int64_t)p_poi->type.size(), (int64_t)0, (int64_t)255))
                {
                    poi->optional.setPresence(asn_wrapper::asn_type);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_poi->type = %s.", __FUNCTION__, p_poi->type.c_str());
                    poi->type.copyOctetString(p_poi->type.length(), (asnbyte*)(unsigned char*)(p_poi->type.c_str()));
                }
            }
            if (p_poi->contactInfo_presence)
            {
                poi->optional.setPresence(asn_wrapper::asn_contactInfo);
                if (poi->contactInfo == nullptr )
                {
                    poi->contactInfo = new asn_wrapper::ContactInfo();
                }
                ContactInfo_Encode(p_poi->contactInfo, poi->contactInfo);
            }
            if (p_poi->url_presence)
            {
                if (verifyScope("url", (int64_t)p_poi->url.size(), (int64_t)0, (int64_t)255))
                {
                    poi->optional.setPresence(asn_wrapper::asn_url);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_poi->url = %s.", __FUNCTION__, p_poi->url.c_str());
                    poi->url.copyOctetString(p_poi->url.length(), (asnbyte*)(unsigned char*)(p_poi->url.c_str()));
                }
            }
            if (p_poi->attributes_presence)
            {
                if (verifyScope("attributes", (int64_t)p_poi->attributes.size(), (int64_t)0, (int64_t)15))
                {
                    poi->optional.setPresence(asn_wrapper::asn_attributes);
                    
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_poi->attributes.size() = %d.", __FUNCTION__, p_poi->attributes.size());
                    for (auto p_attribute = p_poi->attributes.begin(); p_attribute != p_poi->attributes.end();) 
                    {
                        asn_wrapper::asncattributess *attribute = new asn_wrapper::asncattributess();
                        poi->attributes.addElement(attribute);

                        if (verifyScope("key", (int64_t)p_attribute->key.size(), (int64_t)0, (int64_t)250))
                        {
                            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_attribute->key = %s.", __FUNCTION__, p_attribute->key.c_str());
                            attribute->key.copyOctetString(p_attribute->key.length(), (asnbyte*)(unsigned char*)(p_attribute->key.c_str()));
                        }
                        if (p_attribute->intVal_presence)
                        {
                            attribute->optional.setPresence(asn_wrapper::asn_intVal);
                            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_attribute->intVal = %d.", __FUNCTION__, p_attribute->intVal);
                            attribute->intVal = p_attribute->intVal;
                        }
                        if (p_attribute->stringVal_presence)
                        {
                            if (verifyScope("stringVal", (int64_t)p_attribute->stringVal.size(), (int64_t)0, (int64_t)65535))
                            {
                                attribute->optional.setPresence(asn_wrapper::asn_ServiceParameter__stringVal);
                                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_attribute->stringVal = %s.", __FUNCTION__, p_attribute->stringVal.c_str());
                                attribute->stringVal.copyOctetString(p_attribute->stringVal.length(), (asnbyte*)(unsigned char*)(p_attribute->stringVal.c_str()));
                            }
                        }
                        if (p_attribute->boolVal_presence)
                        {
                            attribute->optional.setPresence(asn_wrapper::asn_ServiceParameter__boolVal);
                            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_attribute->boolVal = %d.", __FUNCTION__, p_attribute->boolVal);
                            attribute->boolVal = p_attribute->boolVal;
                        }
                        if (p_attribute->timestampVal_presence)
                        {
                            attribute->optional.setPresence(asn_wrapper::asn_ServiceParameter__timestampVal);
                            if (attribute->timestampVal == nullptr )
                            {
                                attribute->timestampVal = new asn_wrapper::TimeStamp();
                            }
                            TimeStamp_Encode(p_attribute->timestampVal, attribute->timestampVal);
                        }
                        if (p_attribute->dataVal_presence)
                        {
                            if (verifyScope("dataVal", (int64_t)p_attribute->dataVal.size(), (int64_t)1, (int64_t)65535))
                            {
                                attribute->optional.setPresence(asn_wrapper::asn_ServiceParameter__dataVal);
                                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_attribute->dataVal = %s.", __FUNCTION__, p_attribute->dataVal.c_str());
                                int dataVal_length = 0;
                                unsigned char* dataVal_ptr = new unsigned char[p_attribute->dataVal.length()];
                                StringToOctet(p_attribute->dataVal,dataVal_ptr,dataVal_length);
                                attribute->dataVal.copyOctetString(dataVal_length,(asnbytep)dataVal_ptr);
                                delete[] dataVal_ptr;
                            }
                        }
                    
                        ++p_attribute;
                    }
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: poi->attributes.getCount() = %d.", __FUNCTION__, poi->attributes.getCount());
                    
                }
            }
        
            ++p_poi;
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->pois.getCount() = %d.", __FUNCTION__, marbenData->pois.getCount());
        
    }
    if (pData.configuration_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_configuration);
        if (marbenData->configuration == nullptr )
        {
            marbenData->configuration = new asn_wrapper::Configuration();
        }
        Configuration_Encode(pData.configuration, marbenData->configuration);
    }
    if (pData.vehicleStatus_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_vehicleStatus);
        if (marbenData->vehicleStatus == nullptr )
        {
            marbenData->vehicleStatus = new asn_wrapper::VehicleStatus();
        }
        VehicleStatus_Encode(pData.vehicleStatus, marbenData->vehicleStatus);
    }
    if (pData.ota_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_ServiceData__ota);
        if (marbenData->ota == nullptr )
        {
            marbenData->ota = new asn_wrapper::OTA();
        }
        OTA_Encode(pData.ota, marbenData->ota);
    }
    if (pData.fota_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_ServiceData__fota);
        if (marbenData->fota == nullptr )
        {
            marbenData->fota = new asn_wrapper::FOTA();
        }
        FOTA_Encode(pData.fota, marbenData->fota);
    }
    if (pData.rvdc_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_rvdc);
        if (marbenData->rvdc == nullptr )
        {
            marbenData->rvdc = new asn_wrapper::RVDC();
        }
        RVDC_Encode(pData.rvdc, marbenData->rvdc);
    }
    if (pData.trip_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_trip);
        if (marbenData->trip == nullptr )
        {
            marbenData->trip = new asn_wrapper::Trip();
        }
        Trip_Encode(pData.trip, marbenData->trip);
    }
    if (pData.tripFragments_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_tripFragments);
        
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.tripFragments.size() = %d.", __FUNCTION__, pData.tripFragments.size());
        for (auto p_tripFragment = pData.tripFragments.begin(); p_tripFragment != pData.tripFragments.end();) 
        {
            asn_wrapper::asnctripFragmentss *tripFragment = new asn_wrapper::asnctripFragmentss();
            marbenData->tripFragments.addElement(tripFragment);

            if (tripFragment->startTime == nullptr )
            {
                tripFragment->startTime = new asn_wrapper::TimeStamp();
            }
            TimeStamp_Encode(p_tripFragment->startTime, tripFragment->startTime);
            if (p_tripFragment->startPosition_presence)
            {
                tripFragment->optional.setPresence(asn_wrapper::asn_startPosition);
                if (tripFragment->startPosition == nullptr )
                {
                    tripFragment->startPosition = new asn_wrapper::Position();
                }
                Position_Encode(p_tripFragment->startPosition, tripFragment->startPosition);
            }
            if (p_tripFragment->startOdometer_presence)
            {
                tripFragment->optional.setPresence(asn_wrapper::asn_TripFragment__startOdometer);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_tripFragment->startOdometer = %d.", __FUNCTION__, p_tripFragment->startOdometer);
                tripFragment->startOdometer = p_tripFragment->startOdometer;
            }
            if (p_tripFragment->startFuelLevel_presence)
            {
                tripFragment->optional.setPresence(asn_wrapper::asn_startFuelLevel);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_tripFragment->startFuelLevel = %d.", __FUNCTION__, p_tripFragment->startFuelLevel);
                tripFragment->startFuelLevel = p_tripFragment->startFuelLevel;
            }
            if (p_tripFragment->startElectricConsumption_presence)
            {
                tripFragment->optional.setPresence(asn_wrapper::asn_startElectricConsumption);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_tripFragment->startElectricConsumption = %d.", __FUNCTION__, p_tripFragment->startElectricConsumption);
                tripFragment->startElectricConsumption = p_tripFragment->startElectricConsumption;
            }
            if (p_tripFragment->startElectricRegeneration_presence)
            {
                tripFragment->optional.setPresence(asn_wrapper::asn_startElectricRegeneration);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_tripFragment->startElectricRegeneration = %d.", __FUNCTION__, p_tripFragment->startElectricRegeneration);
                tripFragment->startElectricRegeneration = p_tripFragment->startElectricRegeneration;
            }
            if (p_tripFragment->endTime_presence)
            {
                tripFragment->optional.setPresence(asn_wrapper::asn_TripFragment__endTime);
                if (tripFragment->endTime == nullptr )
                {
                    tripFragment->endTime = new asn_wrapper::TimeStamp();
                }
                TimeStamp_Encode(p_tripFragment->endTime, tripFragment->endTime);
            }
            if (p_tripFragment->endPosition_presence)
            {
                tripFragment->optional.setPresence(asn_wrapper::asn_endPosition);
                if (tripFragment->endPosition == nullptr )
                {
                    tripFragment->endPosition = new asn_wrapper::Position();
                }
                Position_Encode(p_tripFragment->endPosition, tripFragment->endPosition);
            }
            if (p_tripFragment->endOdometer_presence)
            {
                tripFragment->optional.setPresence(asn_wrapper::asn_TripFragment__endOdometer);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_tripFragment->endOdometer = %d.", __FUNCTION__, p_tripFragment->endOdometer);
                tripFragment->endOdometer = p_tripFragment->endOdometer;
            }
            if (p_tripFragment->endFuelLevel_presence)
            {
                tripFragment->optional.setPresence(asn_wrapper::asn_endFuelLevel);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_tripFragment->endFuelLevel = %d.", __FUNCTION__, p_tripFragment->endFuelLevel);
                tripFragment->endFuelLevel = p_tripFragment->endFuelLevel;
            }
            if (p_tripFragment->endElectricConsumption_presence)
            {
                tripFragment->optional.setPresence(asn_wrapper::asn_endElectricConsumption);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_tripFragment->endElectricConsumption = %d.", __FUNCTION__, p_tripFragment->endElectricConsumption);
                tripFragment->endElectricConsumption = p_tripFragment->endElectricConsumption;
            }
            if (p_tripFragment->endElectricRegeneration_presence)
            {
                tripFragment->optional.setPresence(asn_wrapper::asn_endElectricRegeneration);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_tripFragment->endElectricRegeneration = %d.", __FUNCTION__, p_tripFragment->endElectricRegeneration);
                tripFragment->endElectricRegeneration = p_tripFragment->endElectricRegeneration;
            }
        
            ++p_tripFragment;
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->tripFragments.getCount() = %d.", __FUNCTION__, marbenData->tripFragments.getCount());
        
    }
    if (pData.trackPoints_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_trackPoints);
        
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.trackPoints.size() = %d.", __FUNCTION__, pData.trackPoints.size());
        for (auto p_trackPoint = pData.trackPoints.begin(); p_trackPoint != pData.trackPoints.end();) 
        {
            asn_wrapper::asnctrackPointss *trackPoint = new asn_wrapper::asnctrackPointss();
            marbenData->trackPoints.addElement(trackPoint);

            if (trackPoint->systemTime == nullptr )
            {
                trackPoint->systemTime = new asn_wrapper::TimeStamp();
            }
            TimeStamp_Encode(p_trackPoint->systemTime, trackPoint->systemTime);
            if (trackPoint->position == nullptr )
            {
                trackPoint->position = new asn_wrapper::Position();
            }
            Position_Encode(p_trackPoint->position, trackPoint->position);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_trackPoint->speed = %d.", __FUNCTION__, p_trackPoint->speed);
            trackPoint->speed = p_trackPoint->speed;
            if (p_trackPoint->direction_presence)
            {
                if (verifyScope("direction", (int64_t)p_trackPoint->direction, (int64_t)0, (int64_t)360))
                {
                    trackPoint->optional.setPresence(asn_wrapper::asn_TrackPoint__direction);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_trackPoint->direction = %d.", __FUNCTION__, p_trackPoint->direction);
                    trackPoint->direction = p_trackPoint->direction;
                }
            }
            if (p_trackPoint->isSVT_presence)
            {
                trackPoint->optional.setPresence(asn_wrapper::asn_isSVT);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_trackPoint->isSVT = %d.", __FUNCTION__, p_trackPoint->isSVT);
                trackPoint->isSVT = p_trackPoint->isSVT;
            }
            if (p_trackPoint->odometer_presence)
            {
                trackPoint->optional.setPresence(asn_wrapper::asn_TrackPoint__odometer);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_trackPoint->odometer = %d.", __FUNCTION__, p_trackPoint->odometer);
                trackPoint->odometer = p_trackPoint->odometer;
            }
            if (p_trackPoint->travelDistanceSinceLastWaypoint_presence)
            {
                trackPoint->optional.setPresence(asn_wrapper::asn_travelDistanceSinceLastWaypoint);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_trackPoint->travelDistanceSinceLastWaypoint = %d.", __FUNCTION__, p_trackPoint->travelDistanceSinceLastWaypoint);
                trackPoint->travelDistanceSinceLastWaypoint = p_trackPoint->travelDistanceSinceLastWaypoint;
            }
            if (p_trackPoint->fuelConsumptionSinceLastWaypoint_presence)
            {
                trackPoint->optional.setPresence(asn_wrapper::asn_fuelConsumptionSinceLastWaypoint);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_trackPoint->fuelConsumptionSinceLastWaypoint = %d.", __FUNCTION__, p_trackPoint->fuelConsumptionSinceLastWaypoint);
                trackPoint->fuelConsumptionSinceLastWaypoint = p_trackPoint->fuelConsumptionSinceLastWaypoint;
            }
            if (p_trackPoint->electricConsumptionSinceLastSample_presence)
            {
                trackPoint->optional.setPresence(asn_wrapper::asn_electricConsumptionSinceLastSample);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_trackPoint->electricConsumptionSinceLastSample = %d.", __FUNCTION__, p_trackPoint->electricConsumptionSinceLastSample);
                trackPoint->electricConsumptionSinceLastSample = p_trackPoint->electricConsumptionSinceLastSample;
            }
            if (p_trackPoint->electricRegenerationSinceLastSample_presence)
            {
                trackPoint->optional.setPresence(asn_wrapper::asn_electricRegenerationSinceLastSample);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_trackPoint->electricRegenerationSinceLastSample = %d.", __FUNCTION__, p_trackPoint->electricRegenerationSinceLastSample);
                trackPoint->electricRegenerationSinceLastSample = p_trackPoint->electricRegenerationSinceLastSample;
            }
        
            ++p_trackPoint;
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->trackPoints.getCount() = %d.", __FUNCTION__, marbenData->trackPoints.getCount());
        
    }
    if (pData.nevServiceData_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_nevServiceData);
        if (marbenData->nevServiceData == nullptr )
        {
            marbenData->nevServiceData = new asn_wrapper::NEVServiceData();
        }
        NEVServiceData_Encode(pData.nevServiceData, marbenData->nevServiceData);
    }
    if (pData.eventRule_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_eventRule);
        if (marbenData->eventRule == nullptr )
        {
            marbenData->eventRule = new asn_wrapper::EventRule();
        }
        EventRule_Encode(pData.eventRule, marbenData->eventRule);
    }
    if (pData.timerData_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_timerData);
        if (marbenData->timerData == nullptr )
        {
            marbenData->timerData = new asn_wrapper::TimerData();
        }
        TimerData_Encode(pData.timerData, marbenData->timerData);
    }

    return true;
}

bool VdsMarbenAdaptGen::ServiceData_Decode(const std::string &path, std::shared_ptr<ServiceData_Model> &pData, asn_wrapper::ServiceData* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::ServiceData* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::ServiceData*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_serviceTrigger))
    {
        pData->serviceTrigger_presence = true;
        if (marbenData->serviceTrigger != nullptr )
        {
            std::shared_ptr<ServiceTrigger_Model> p_serviceTrigger = std::make_shared<ServiceTrigger_Model>();
            result = ServiceTrigger_Decode( "" , p_serviceTrigger , marbenData->serviceTrigger);
            if (result)
            {
                pData->serviceTrigger = (*p_serviceTrigger);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_ServiceData__serviceParameters))
    {
        pData->serviceParameters_presence = true;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->serviceParameters.getCount() = %d.", __FUNCTION__, marbenData->serviceParameters.getCount());
        unsigned int serviceParameterCount = marbenData->serviceParameters.getCount();
        asn_wrapper::asncServiceData__serviceParameterss* serviceParameter = (asn_wrapper::asncServiceData__serviceParameterss*)(marbenData->serviceParameters.getFirstElement());
        for (unsigned int i = 0; (i < serviceParameterCount || serviceParameter); i++) 
        {
            ServiceParameter_Model p_serviceParameter;
            p_serviceParameter.key = std::string((const char*)serviceParameter->key.value, serviceParameter->key.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter.key = %s.", __FUNCTION__, p_serviceParameter.key.c_str());
            if (asnTRUE == serviceParameter->optional.getPresence(asn_wrapper::asn_intVal))
            {
                p_serviceParameter.intVal_presence = true;
                p_serviceParameter.intVal = serviceParameter->intVal;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter.intVal = %d.", __FUNCTION__, p_serviceParameter.intVal);
            }
            if (asnTRUE == serviceParameter->optional.getPresence(asn_wrapper::asn_ServiceParameter__stringVal))
            {
                p_serviceParameter.stringVal_presence = true;
                p_serviceParameter.stringVal = std::string((const char*)serviceParameter->stringVal.value, serviceParameter->stringVal.length);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter.stringVal = %s.", __FUNCTION__, p_serviceParameter.stringVal.c_str());
            }
            if (asnTRUE == serviceParameter->optional.getPresence(asn_wrapper::asn_ServiceParameter__boolVal))
            {
                p_serviceParameter.boolVal_presence = true;
                p_serviceParameter.boolVal = serviceParameter->boolVal;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter.boolVal = %d.", __FUNCTION__, p_serviceParameter.boolVal);
            }
            if (asnTRUE == serviceParameter->optional.getPresence(asn_wrapper::asn_ServiceParameter__timestampVal))
            {
                p_serviceParameter.timestampVal_presence = true;
                if (serviceParameter->timestampVal != nullptr )
                {
                    std::shared_ptr<TimeStamp_Model> p_timestampVal = std::make_shared<TimeStamp_Model>();
                    result = TimeStamp_Decode( "" , p_timestampVal , serviceParameter->timestampVal);
                    if (result)
                    {
                        p_serviceParameter.timestampVal = (*p_timestampVal);
                    }
                }

            }
            if (asnTRUE == serviceParameter->optional.getPresence(asn_wrapper::asn_ServiceParameter__dataVal))
            {
                p_serviceParameter.dataVal_presence = true;
                asnbyte* dataVal_ptr;
                asnMAXUINT dataVal_length;
                serviceParameter->dataVal.getOctetString(&dataVal_length,&dataVal_ptr);
                char* dataVal_array = new char[dataVal_length*3-1];
                OctetToString(dataVal_ptr,dataVal_array,dataVal_length);
                p_serviceParameter.dataVal = dataVal_array;
                delete[] dataVal_array;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_serviceParameter.dataVal = %s.", __FUNCTION__, p_serviceParameter.dataVal.c_str());
            }
            pData->serviceParameters.push_back(p_serviceParameter);
            serviceParameter = (asn_wrapper::asncServiceData__serviceParameterss*)(serviceParameter->getNextElement());
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->serviceParameters.size() = %d.", __FUNCTION__, pData->serviceParameters.size());
        
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_serviceCommand))
    {
        pData->serviceCommand_presence = true;
        pData->serviceCommand = (Vds_ServiceCommand)marbenData->serviceCommand;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->serviceCommand = %d.", __FUNCTION__, pData->serviceCommand);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_serviceResult))
    {
        pData->serviceResult_presence = true;
        if (marbenData->serviceResult != nullptr )
        {
            std::shared_ptr<ServiceResult_Model> p_serviceResult = std::make_shared<ServiceResult_Model>();
            result = ServiceResult_Decode( "" , p_serviceResult , marbenData->serviceResult);
            if (result)
            {
                pData->serviceResult = (*p_serviceResult);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_serviceStatus))
    {
        pData->serviceStatus_presence = true;
        if (marbenData->serviceStatus != nullptr )
        {
            std::shared_ptr<ServiceStatus_Model> p_serviceStatus = std::make_shared<ServiceStatus_Model>();
            result = ServiceStatus_Decode( "" , p_serviceStatus , marbenData->serviceStatus);
            if (result)
            {
                pData->serviceStatus = (*p_serviceStatus);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_ServiceData__message))
    {
        pData->message_presence = true;
        if (marbenData->message != nullptr )
        {
            if (marbenData->message->alternative == asn_wrapper::asn_GeneralMessage__message)
            {
                pData->message.message_choice = true;
                pData->message.message = std::string((const char*)((asn_wrapper::asncGeneralMessage__message*)marbenData->message)->message.value, ((asn_wrapper::asncGeneralMessage__message*)marbenData->message)->message.length);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->message.message = %s.", __FUNCTION__, pData->message.message.c_str());
            }
            if (marbenData->message->alternative == asn_wrapper::asn_ocetMessage)
            {
                pData->message.ocetMessage_choice = true;
                asnbyte* ocetMessage_ptr;
                asnMAXUINT ocetMessage_length;
                ((asn_wrapper::asncocetMessage*)marbenData->message)->ocetMessage.getOctetString(&ocetMessage_length,&ocetMessage_ptr);
                char* ocetMessage_array = new char[ocetMessage_length*3-1];
                OctetToString(ocetMessage_ptr,ocetMessage_array,ocetMessage_length);
                pData->message.ocetMessage = ocetMessage_array;
                delete[] ocetMessage_array;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->message.ocetMessage = %s.", __FUNCTION__, pData->message.ocetMessage.c_str());
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_pois))
    {
        pData->pois_presence = true;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->pois.getCount() = %d.", __FUNCTION__, marbenData->pois.getCount());
        unsigned int poiCount = marbenData->pois.getCount();
        asn_wrapper::asncpoiss* poi = (asn_wrapper::asncpoiss*)(marbenData->pois.getFirstElement());
        for (unsigned int i = 0; (i < poiCount || poi); i++) 
        {
            PointOfInterest_Model p_poi;
            p_poi.name = std::string((const char*)poi->name.value, poi->name.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_poi.name = %s.", __FUNCTION__, p_poi.name.c_str());
            if (asnTRUE == poi->optional.getPresence(asn_wrapper::asn_PointOfInterest__position))
            {
                p_poi.position_presence = true;
                if (poi->position != nullptr )
                {
                    std::shared_ptr<Position_Model> p_position = std::make_shared<Position_Model>();
                    result = Position_Decode( "" , p_position , poi->position);
                    if (result)
                    {
                        p_poi.position = (*p_position);
                    }
                }

            }
            if (asnTRUE == poi->optional.getPresence(asn_wrapper::asn_type))
            {
                p_poi.type_presence = true;
                p_poi.type = std::string((const char*)poi->type.value, poi->type.length);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_poi.type = %s.", __FUNCTION__, p_poi.type.c_str());
            }
            if (asnTRUE == poi->optional.getPresence(asn_wrapper::asn_contactInfo))
            {
                p_poi.contactInfo_presence = true;
                if (poi->contactInfo != nullptr )
                {
                    std::shared_ptr<ContactInfo_Model> p_contactInfo = std::make_shared<ContactInfo_Model>();
                    result = ContactInfo_Decode( "" , p_contactInfo , poi->contactInfo);
                    if (result)
                    {
                        p_poi.contactInfo = (*p_contactInfo);
                    }
                }

            }
            if (asnTRUE == poi->optional.getPresence(asn_wrapper::asn_url))
            {
                p_poi.url_presence = true;
                p_poi.url = std::string((const char*)poi->url.value, poi->url.length);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_poi.url = %s.", __FUNCTION__, p_poi.url.c_str());
            }
            if (asnTRUE == poi->optional.getPresence(asn_wrapper::asn_attributes))
            {
                p_poi.attributes_presence = true;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: poi->attributes.getCount() = %d.", __FUNCTION__, poi->attributes.getCount());
                unsigned int attributeCount = poi->attributes.getCount();
                asn_wrapper::asncattributess* attribute = (asn_wrapper::asncattributess*)(poi->attributes.getFirstElement());
                for (unsigned int attributes2 = 0; (attributes2 < attributeCount || attribute); attributes2++) 
                {
                    ServiceParameter_Model p_attribute;
                    p_attribute.key = std::string((const char*)attribute->key.value, attribute->key.length);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_attribute.key = %s.", __FUNCTION__, p_attribute.key.c_str());
                    if (asnTRUE == attribute->optional.getPresence(asn_wrapper::asn_intVal))
                    {
                        p_attribute.intVal_presence = true;
                        p_attribute.intVal = attribute->intVal;
                        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_attribute.intVal = %d.", __FUNCTION__, p_attribute.intVal);
                    }
                    if (asnTRUE == attribute->optional.getPresence(asn_wrapper::asn_ServiceParameter__stringVal))
                    {
                        p_attribute.stringVal_presence = true;
                        p_attribute.stringVal = std::string((const char*)attribute->stringVal.value, attribute->stringVal.length);
                        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_attribute.stringVal = %s.", __FUNCTION__, p_attribute.stringVal.c_str());
                    }
                    if (asnTRUE == attribute->optional.getPresence(asn_wrapper::asn_ServiceParameter__boolVal))
                    {
                        p_attribute.boolVal_presence = true;
                        p_attribute.boolVal = attribute->boolVal;
                        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_attribute.boolVal = %d.", __FUNCTION__, p_attribute.boolVal);
                    }
                    if (asnTRUE == attribute->optional.getPresence(asn_wrapper::asn_ServiceParameter__timestampVal))
                    {
                        p_attribute.timestampVal_presence = true;
                        if (attribute->timestampVal != nullptr )
                        {
                            std::shared_ptr<TimeStamp_Model> p_timestampVal = std::make_shared<TimeStamp_Model>();
                            result = TimeStamp_Decode( "" , p_timestampVal , attribute->timestampVal);
                            if (result)
                            {
                                p_attribute.timestampVal = (*p_timestampVal);
                            }
                        }

                    }
                    if (asnTRUE == attribute->optional.getPresence(asn_wrapper::asn_ServiceParameter__dataVal))
                    {
                        p_attribute.dataVal_presence = true;
                        asnbyte* dataVal_ptr;
                        asnMAXUINT dataVal_length;
                        attribute->dataVal.getOctetString(&dataVal_length,&dataVal_ptr);
                        char* dataVal_array = new char[dataVal_length*3-1];
                        OctetToString(dataVal_ptr,dataVal_array,dataVal_length);
                        p_attribute.dataVal = dataVal_array;
                        delete[] dataVal_array;
                        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_attribute.dataVal = %s.", __FUNCTION__, p_attribute.dataVal.c_str());
                    }
                    p_poi.attributes.push_back(p_attribute);
                    attribute = (asn_wrapper::asncattributess*)(attribute->getNextElement());
                }
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_poi.attributes.size() = %d.", __FUNCTION__, p_poi.attributes.size());
                
            }
            pData->pois.push_back(p_poi);
            poi = (asn_wrapper::asncpoiss*)(poi->getNextElement());
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->pois.size() = %d.", __FUNCTION__, pData->pois.size());
        
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_configuration))
    {
        pData->configuration_presence = true;
        if (marbenData->configuration != nullptr )
        {
            std::shared_ptr<Configuration_Model> p_configuration = std::make_shared<Configuration_Model>();
            result = Configuration_Decode( "" , p_configuration , marbenData->configuration);
            if (result)
            {
                pData->configuration = (*p_configuration);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_vehicleStatus))
    {
        pData->vehicleStatus_presence = true;
        if (marbenData->vehicleStatus != nullptr )
        {
            std::shared_ptr<VehicleStatus_Model> p_vehicleStatus = std::make_shared<VehicleStatus_Model>();
            result = VehicleStatus_Decode( "" , p_vehicleStatus , marbenData->vehicleStatus);
            if (result)
            {
                pData->vehicleStatus = (*p_vehicleStatus);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_ServiceData__ota))
    {
        pData->ota_presence = true;
        if (marbenData->ota != nullptr )
        {
            std::shared_ptr<OTA_Model> p_ota = std::make_shared<OTA_Model>();
            result = OTA_Decode( "" , p_ota , marbenData->ota);
            if (result)
            {
                pData->ota = (*p_ota);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_ServiceData__fota))
    {
        pData->fota_presence = true;
        if (marbenData->fota != nullptr )
        {
            std::shared_ptr<FOTA_Model> p_fota = std::make_shared<FOTA_Model>();
            result = FOTA_Decode( "" , p_fota , marbenData->fota);
            if (result)
            {
                pData->fota = (*p_fota);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_rvdc))
    {
        pData->rvdc_presence = true;
        if (marbenData->rvdc != nullptr )
        {
            std::shared_ptr<RVDC_Model> p_rvdc = std::make_shared<RVDC_Model>();
            result = RVDC_Decode( "" , p_rvdc , marbenData->rvdc);
            if (result)
            {
                pData->rvdc = (*p_rvdc);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_trip))
    {
        pData->trip_presence = true;
        if (marbenData->trip != nullptr )
        {
            std::shared_ptr<Trip_Model> p_trip = std::make_shared<Trip_Model>();
            result = Trip_Decode( "" , p_trip , marbenData->trip);
            if (result)
            {
                pData->trip = (*p_trip);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_tripFragments))
    {
        pData->tripFragments_presence = true;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->tripFragments.getCount() = %d.", __FUNCTION__, marbenData->tripFragments.getCount());
        unsigned int tripFragmentCount = marbenData->tripFragments.getCount();
        asn_wrapper::asnctripFragmentss* tripFragment = (asn_wrapper::asnctripFragmentss*)(marbenData->tripFragments.getFirstElement());
        for (unsigned int i = 0; (i < tripFragmentCount || tripFragment); i++) 
        {
            TripFragment_Model p_tripFragment;
            if (tripFragment->startTime != nullptr )
            {
                std::shared_ptr<TimeStamp_Model> p_startTime = std::make_shared<TimeStamp_Model>();
                result = TimeStamp_Decode( "" , p_startTime , tripFragment->startTime);
                if (result)
                {
                    p_tripFragment.startTime = (*p_startTime);
                }
            }

            if (asnTRUE == tripFragment->optional.getPresence(asn_wrapper::asn_startPosition))
            {
                p_tripFragment.startPosition_presence = true;
                if (tripFragment->startPosition != nullptr )
                {
                    std::shared_ptr<Position_Model> p_startPosition = std::make_shared<Position_Model>();
                    result = Position_Decode( "" , p_startPosition , tripFragment->startPosition);
                    if (result)
                    {
                        p_tripFragment.startPosition = (*p_startPosition);
                    }
                }

            }
            if (asnTRUE == tripFragment->optional.getPresence(asn_wrapper::asn_TripFragment__startOdometer))
            {
                p_tripFragment.startOdometer_presence = true;
                p_tripFragment.startOdometer = tripFragment->startOdometer;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_tripFragment.startOdometer = %d.", __FUNCTION__, p_tripFragment.startOdometer);
            }
            if (asnTRUE == tripFragment->optional.getPresence(asn_wrapper::asn_startFuelLevel))
            {
                p_tripFragment.startFuelLevel_presence = true;
                p_tripFragment.startFuelLevel = tripFragment->startFuelLevel;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_tripFragment.startFuelLevel = %d.", __FUNCTION__, p_tripFragment.startFuelLevel);
            }
            if (asnTRUE == tripFragment->optional.getPresence(asn_wrapper::asn_startElectricConsumption))
            {
                p_tripFragment.startElectricConsumption_presence = true;
                p_tripFragment.startElectricConsumption = tripFragment->startElectricConsumption;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_tripFragment.startElectricConsumption = %d.", __FUNCTION__, p_tripFragment.startElectricConsumption);
            }
            if (asnTRUE == tripFragment->optional.getPresence(asn_wrapper::asn_startElectricRegeneration))
            {
                p_tripFragment.startElectricRegeneration_presence = true;
                p_tripFragment.startElectricRegeneration = tripFragment->startElectricRegeneration;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_tripFragment.startElectricRegeneration = %d.", __FUNCTION__, p_tripFragment.startElectricRegeneration);
            }
            if (asnTRUE == tripFragment->optional.getPresence(asn_wrapper::asn_TripFragment__endTime))
            {
                p_tripFragment.endTime_presence = true;
                if (tripFragment->endTime != nullptr )
                {
                    std::shared_ptr<TimeStamp_Model> p_endTime = std::make_shared<TimeStamp_Model>();
                    result = TimeStamp_Decode( "" , p_endTime , tripFragment->endTime);
                    if (result)
                    {
                        p_tripFragment.endTime = (*p_endTime);
                    }
                }

            }
            if (asnTRUE == tripFragment->optional.getPresence(asn_wrapper::asn_endPosition))
            {
                p_tripFragment.endPosition_presence = true;
                if (tripFragment->endPosition != nullptr )
                {
                    std::shared_ptr<Position_Model> p_endPosition = std::make_shared<Position_Model>();
                    result = Position_Decode( "" , p_endPosition , tripFragment->endPosition);
                    if (result)
                    {
                        p_tripFragment.endPosition = (*p_endPosition);
                    }
                }

            }
            if (asnTRUE == tripFragment->optional.getPresence(asn_wrapper::asn_TripFragment__endOdometer))
            {
                p_tripFragment.endOdometer_presence = true;
                p_tripFragment.endOdometer = tripFragment->endOdometer;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_tripFragment.endOdometer = %d.", __FUNCTION__, p_tripFragment.endOdometer);
            }
            if (asnTRUE == tripFragment->optional.getPresence(asn_wrapper::asn_endFuelLevel))
            {
                p_tripFragment.endFuelLevel_presence = true;
                p_tripFragment.endFuelLevel = tripFragment->endFuelLevel;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_tripFragment.endFuelLevel = %d.", __FUNCTION__, p_tripFragment.endFuelLevel);
            }
            if (asnTRUE == tripFragment->optional.getPresence(asn_wrapper::asn_endElectricConsumption))
            {
                p_tripFragment.endElectricConsumption_presence = true;
                p_tripFragment.endElectricConsumption = tripFragment->endElectricConsumption;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_tripFragment.endElectricConsumption = %d.", __FUNCTION__, p_tripFragment.endElectricConsumption);
            }
            if (asnTRUE == tripFragment->optional.getPresence(asn_wrapper::asn_endElectricRegeneration))
            {
                p_tripFragment.endElectricRegeneration_presence = true;
                p_tripFragment.endElectricRegeneration = tripFragment->endElectricRegeneration;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_tripFragment.endElectricRegeneration = %d.", __FUNCTION__, p_tripFragment.endElectricRegeneration);
            }
            pData->tripFragments.push_back(p_tripFragment);
            tripFragment = (asn_wrapper::asnctripFragmentss*)(tripFragment->getNextElement());
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->tripFragments.size() = %d.", __FUNCTION__, pData->tripFragments.size());
        
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_trackPoints))
    {
        pData->trackPoints_presence = true;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->trackPoints.getCount() = %d.", __FUNCTION__, marbenData->trackPoints.getCount());
        unsigned int trackPointCount = marbenData->trackPoints.getCount();
        asn_wrapper::asnctrackPointss* trackPoint = (asn_wrapper::asnctrackPointss*)(marbenData->trackPoints.getFirstElement());
        for (unsigned int i = 0; (i < trackPointCount || trackPoint); i++) 
        {
            TrackPoint_Model p_trackPoint;
            if (trackPoint->systemTime != nullptr )
            {
                std::shared_ptr<TimeStamp_Model> p_systemTime = std::make_shared<TimeStamp_Model>();
                result = TimeStamp_Decode( "" , p_systemTime , trackPoint->systemTime);
                if (result)
                {
                    p_trackPoint.systemTime = (*p_systemTime);
                }
            }

            if (trackPoint->position != nullptr )
            {
                std::shared_ptr<Position_Model> p_position = std::make_shared<Position_Model>();
                result = Position_Decode( "" , p_position , trackPoint->position);
                if (result)
                {
                    p_trackPoint.position = (*p_position);
                }
            }

            p_trackPoint.speed = trackPoint->speed;
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_trackPoint.speed = %d.", __FUNCTION__, p_trackPoint.speed);
            if (asnTRUE == trackPoint->optional.getPresence(asn_wrapper::asn_TrackPoint__direction))
            {
                p_trackPoint.direction_presence = true;
                p_trackPoint.direction = trackPoint->direction;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_trackPoint.direction = %d.", __FUNCTION__, p_trackPoint.direction);
            }
            if (asnTRUE == trackPoint->optional.getPresence(asn_wrapper::asn_isSVT))
            {
                p_trackPoint.isSVT_presence = true;
                p_trackPoint.isSVT = trackPoint->isSVT;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_trackPoint.isSVT = %d.", __FUNCTION__, p_trackPoint.isSVT);
            }
            if (asnTRUE == trackPoint->optional.getPresence(asn_wrapper::asn_TrackPoint__odometer))
            {
                p_trackPoint.odometer_presence = true;
                p_trackPoint.odometer = trackPoint->odometer;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_trackPoint.odometer = %d.", __FUNCTION__, p_trackPoint.odometer);
            }
            if (asnTRUE == trackPoint->optional.getPresence(asn_wrapper::asn_travelDistanceSinceLastWaypoint))
            {
                p_trackPoint.travelDistanceSinceLastWaypoint_presence = true;
                p_trackPoint.travelDistanceSinceLastWaypoint = trackPoint->travelDistanceSinceLastWaypoint;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_trackPoint.travelDistanceSinceLastWaypoint = %d.", __FUNCTION__, p_trackPoint.travelDistanceSinceLastWaypoint);
            }
            if (asnTRUE == trackPoint->optional.getPresence(asn_wrapper::asn_fuelConsumptionSinceLastWaypoint))
            {
                p_trackPoint.fuelConsumptionSinceLastWaypoint_presence = true;
                p_trackPoint.fuelConsumptionSinceLastWaypoint = trackPoint->fuelConsumptionSinceLastWaypoint;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_trackPoint.fuelConsumptionSinceLastWaypoint = %d.", __FUNCTION__, p_trackPoint.fuelConsumptionSinceLastWaypoint);
            }
            if (asnTRUE == trackPoint->optional.getPresence(asn_wrapper::asn_electricConsumptionSinceLastSample))
            {
                p_trackPoint.electricConsumptionSinceLastSample_presence = true;
                p_trackPoint.electricConsumptionSinceLastSample = trackPoint->electricConsumptionSinceLastSample;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_trackPoint.electricConsumptionSinceLastSample = %d.", __FUNCTION__, p_trackPoint.electricConsumptionSinceLastSample);
            }
            if (asnTRUE == trackPoint->optional.getPresence(asn_wrapper::asn_electricRegenerationSinceLastSample))
            {
                p_trackPoint.electricRegenerationSinceLastSample_presence = true;
                p_trackPoint.electricRegenerationSinceLastSample = trackPoint->electricRegenerationSinceLastSample;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_trackPoint.electricRegenerationSinceLastSample = %d.", __FUNCTION__, p_trackPoint.electricRegenerationSinceLastSample);
            }
            pData->trackPoints.push_back(p_trackPoint);
            trackPoint = (asn_wrapper::asnctrackPointss*)(trackPoint->getNextElement());
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->trackPoints.size() = %d.", __FUNCTION__, pData->trackPoints.size());
        
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_nevServiceData))
    {
        pData->nevServiceData_presence = true;
        if (marbenData->nevServiceData != nullptr )
        {
            std::shared_ptr<NEVServiceData_Model> p_nevServiceData = std::make_shared<NEVServiceData_Model>();
            result = NEVServiceData_Decode( "" , p_nevServiceData , marbenData->nevServiceData);
            if (result)
            {
                pData->nevServiceData = (*p_nevServiceData);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_eventRule))
    {
        pData->eventRule_presence = true;
        if (marbenData->eventRule != nullptr )
        {
            std::shared_ptr<EventRule_Model> p_eventRule = std::make_shared<EventRule_Model>();
            result = EventRule_Decode( "" , p_eventRule , marbenData->eventRule);
            if (result)
            {
                pData->eventRule = (*p_eventRule);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_timerData))
    {
        pData->timerData_presence = true;
        if (marbenData->timerData != nullptr )
        {
            std::shared_ptr<TimerData_Model> p_timerData = std::make_shared<TimerData_Model>();
            result = TimerData_Decode( "" , p_timerData , marbenData->timerData);
            if (result)
            {
                pData->timerData = (*p_timerData);
            }
        }

    }

    return true;
}

bool VdsMarbenAdaptGen::ServiceParameter_Encode(const ServiceParameter_Model &pData, asn_wrapper::ServiceParameter* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::ServiceParameter* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::ServiceParameter*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("key", (int64_t)pData.key.size(), (int64_t)0, (int64_t)250))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.key = %s.", __FUNCTION__, pData.key.c_str());
        marbenData->key.copyOctetString(pData.key.length(), (asnbyte*)(unsigned char*)(pData.key.c_str()));
    }
    if (pData.intVal_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_intVal);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.intVal = %d.", __FUNCTION__, pData.intVal);
        marbenData->intVal = pData.intVal;
    }
    if (pData.stringVal_presence)
    {
        if (verifyScope("stringVal", (int64_t)pData.stringVal.size(), (int64_t)0, (int64_t)65535))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_ServiceParameter__stringVal);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.stringVal = %s.", __FUNCTION__, pData.stringVal.c_str());
            marbenData->stringVal.copyOctetString(pData.stringVal.length(), (asnbyte*)(unsigned char*)(pData.stringVal.c_str()));
        }
    }
    if (pData.boolVal_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_ServiceParameter__boolVal);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.boolVal = %d.", __FUNCTION__, pData.boolVal);
        marbenData->boolVal = pData.boolVal;
    }
    if (pData.timestampVal_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_ServiceParameter__timestampVal);
        if (marbenData->timestampVal == nullptr )
        {
            marbenData->timestampVal = new asn_wrapper::TimeStamp();
        }
        TimeStamp_Encode(pData.timestampVal, marbenData->timestampVal);
    }
    if (pData.dataVal_presence)
    {
        if (verifyScope("dataVal", (int64_t)pData.dataVal.size(), (int64_t)1, (int64_t)65535))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_ServiceParameter__dataVal);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.dataVal = %s.", __FUNCTION__, pData.dataVal.c_str());
            int dataVal_length = 0;
            unsigned char* dataVal_ptr = new unsigned char[pData.dataVal.length()];
            StringToOctet(pData.dataVal,dataVal_ptr,dataVal_length);
            marbenData->dataVal.copyOctetString(dataVal_length,(asnbytep)dataVal_ptr);
            delete[] dataVal_ptr;
        }
    }

    return true;
}

bool VdsMarbenAdaptGen::ServiceParameter_Decode(const std::string &path, std::shared_ptr<ServiceParameter_Model> &pData, asn_wrapper::ServiceParameter* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::ServiceParameter* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::ServiceParameter*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->key = std::string((const char*)marbenData->key.value, marbenData->key.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->key = %s.", __FUNCTION__, pData->key.c_str());
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_intVal))
    {
        pData->intVal_presence = true;
        pData->intVal = marbenData->intVal;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->intVal = %d.", __FUNCTION__, pData->intVal);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_ServiceParameter__stringVal))
    {
        pData->stringVal_presence = true;
        pData->stringVal = std::string((const char*)marbenData->stringVal.value, marbenData->stringVal.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->stringVal = %s.", __FUNCTION__, pData->stringVal.c_str());
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_ServiceParameter__boolVal))
    {
        pData->boolVal_presence = true;
        pData->boolVal = marbenData->boolVal;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->boolVal = %d.", __FUNCTION__, pData->boolVal);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_ServiceParameter__timestampVal))
    {
        pData->timestampVal_presence = true;
        if (marbenData->timestampVal != nullptr )
        {
            std::shared_ptr<TimeStamp_Model> p_timestampVal = std::make_shared<TimeStamp_Model>();
            result = TimeStamp_Decode( "" , p_timestampVal , marbenData->timestampVal);
            if (result)
            {
                pData->timestampVal = (*p_timestampVal);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_ServiceParameter__dataVal))
    {
        pData->dataVal_presence = true;
        asnbyte* dataVal_ptr;
        asnMAXUINT dataVal_length;
        marbenData->dataVal.getOctetString(&dataVal_length,&dataVal_ptr);
        char* dataVal_array = new char[dataVal_length*3-1];
        OctetToString(dataVal_ptr,dataVal_array,dataVal_length);
        pData->dataVal = dataVal_array;
        delete[] dataVal_array;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->dataVal = %s.", __FUNCTION__, pData->dataVal.c_str());
    }

    return true;
}

bool VdsMarbenAdaptGen::ServiceTrigger_Encode(const ServiceTrigger_Model &pData, asn_wrapper::ServiceTrigger* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::ServiceTrigger* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::ServiceTrigger*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (pData.scheduledTime_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_scheduledTime);
        if (marbenData->scheduledTime == nullptr )
        {
            marbenData->scheduledTime = new asn_wrapper::TimeStamp();
        }
        TimeStamp_Encode(pData.scheduledTime, marbenData->scheduledTime);
    }
    if (pData.recurrentOperation_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_recurrentOperation);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.recurrentOperation = %d.", __FUNCTION__, pData.recurrentOperation);
        marbenData->recurrentOperation = pData.recurrentOperation;
    }
    if (pData.duration_presence)
    {
        if (verifyScope("duration", (int64_t)pData.duration, (int64_t)0, (int64_t)3153600))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_ServiceTrigger__duration);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.duration = %d.", __FUNCTION__, pData.duration);
            marbenData->duration = pData.duration;
        }
    }
    if (pData.interval_presence)
    {
        if (verifyScope("interval", (int64_t)pData.interval, (int64_t)0, (int64_t)86400))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_ServiceTrigger__interval);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.interval = %d.", __FUNCTION__, pData.interval);
            marbenData->interval = pData.interval;
        }
    }
    if (pData.occurs_presence)
    {
        if (verifyScope("occurs", (int64_t)pData.occurs, (int64_t)-1, (int64_t)65534))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_occurs);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.occurs = %d.", __FUNCTION__, pData.occurs);
            marbenData->occurs = pData.occurs;
        }
    }
    if (pData.endTime_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_ServiceTrigger__endTime);
        if (marbenData->endTime == nullptr )
        {
            marbenData->endTime = new asn_wrapper::TimeStamp();
        }
        TimeStamp_Encode(pData.endTime, marbenData->endTime);
    }
    if (pData.startTimeofDay_presence)
    {
        if (verifyScope("startTimeofDay", (int64_t)pData.startTimeofDay, (int64_t)0, (int64_t)86400))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_ServiceTrigger__startTimeofDay);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.startTimeofDay = %d.", __FUNCTION__, pData.startTimeofDay);
            marbenData->startTimeofDay = pData.startTimeofDay;
        }
    }

    return true;
}

bool VdsMarbenAdaptGen::ServiceTrigger_Decode(const std::string &path, std::shared_ptr<ServiceTrigger_Model> &pData, asn_wrapper::ServiceTrigger* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::ServiceTrigger* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::ServiceTrigger*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_scheduledTime))
    {
        pData->scheduledTime_presence = true;
        if (marbenData->scheduledTime != nullptr )
        {
            std::shared_ptr<TimeStamp_Model> p_scheduledTime = std::make_shared<TimeStamp_Model>();
            result = TimeStamp_Decode( "" , p_scheduledTime , marbenData->scheduledTime);
            if (result)
            {
                pData->scheduledTime = (*p_scheduledTime);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_recurrentOperation))
    {
        pData->recurrentOperation_presence = true;
        pData->recurrentOperation = marbenData->recurrentOperation;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->recurrentOperation = %d.", __FUNCTION__, pData->recurrentOperation);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_ServiceTrigger__duration))
    {
        pData->duration_presence = true;
        pData->duration = marbenData->duration;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->duration = %d.", __FUNCTION__, pData->duration);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_ServiceTrigger__interval))
    {
        pData->interval_presence = true;
        pData->interval = marbenData->interval;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->interval = %d.", __FUNCTION__, pData->interval);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_occurs))
    {
        pData->occurs_presence = true;
        pData->occurs = marbenData->occurs;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->occurs = %d.", __FUNCTION__, pData->occurs);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_ServiceTrigger__endTime))
    {
        pData->endTime_presence = true;
        if (marbenData->endTime != nullptr )
        {
            std::shared_ptr<TimeStamp_Model> p_endTime = std::make_shared<TimeStamp_Model>();
            result = TimeStamp_Decode( "" , p_endTime , marbenData->endTime);
            if (result)
            {
                pData->endTime = (*p_endTime);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_ServiceTrigger__startTimeofDay))
    {
        pData->startTimeofDay_presence = true;
        pData->startTimeofDay = marbenData->startTimeofDay;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->startTimeofDay = %d.", __FUNCTION__, pData->startTimeofDay);
    }

    return true;
}

bool VdsMarbenAdaptGen::ServiceResult_Encode(const ServiceResult_Model &pData, asn_wrapper::ServiceResult* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::ServiceResult* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::ServiceResult*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.operationSucceeded = %d.", __FUNCTION__, pData.operationSucceeded);
    marbenData->operationSucceeded = pData.operationSucceeded;
    if (pData.error_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_error);
        if (marbenData->error == nullptr )
        {
            marbenData->error = new asn_wrapper::Error();
        }
        Error_Encode(pData.error, marbenData->error);
    }
    if (pData.operationType_presence)
    {
        if (verifyPrintableString("operationType", pData.operationType))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_operationType);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.operationType = %s.", __FUNCTION__, pData.operationType.c_str());
            marbenData->operationType.copyOctetString(pData.operationType.length(), (asnbyte*)(unsigned char*)(pData.operationType.c_str()));
        }
    }

    return true;
}

bool VdsMarbenAdaptGen::ServiceResult_Decode(const std::string &path, std::shared_ptr<ServiceResult_Model> &pData, asn_wrapper::ServiceResult* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::ServiceResult* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::ServiceResult*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->operationSucceeded = marbenData->operationSucceeded;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->operationSucceeded = %d.", __FUNCTION__, pData->operationSucceeded);
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_error))
    {
        pData->error_presence = true;
        if (marbenData->error != nullptr )
        {
            std::shared_ptr<Error_Model> p_error = std::make_shared<Error_Model>();
            result = Error_Decode( "" , p_error , marbenData->error);
            if (result)
            {
                pData->error = (*p_error);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_operationType))
    {
        pData->operationType_presence = true;
        pData->operationType = std::string((const char*)marbenData->operationType.value, marbenData->operationType.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->operationType = %s.", __FUNCTION__, pData->operationType.c_str());
    }

    return true;
}

bool VdsMarbenAdaptGen::ServiceStatus_Encode(const ServiceStatus_Model &pData, asn_wrapper::ServiceStatus* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::ServiceStatus* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::ServiceStatus*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.remoteControlInhibited = %d.", __FUNCTION__, pData.remoteControlInhibited);
    marbenData->remoteControlInhibited = pData.remoteControlInhibited;

    return true;
}

bool VdsMarbenAdaptGen::ServiceStatus_Decode(const std::string &path, std::shared_ptr<ServiceStatus_Model> &pData, asn_wrapper::ServiceStatus* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::ServiceStatus* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::ServiceStatus*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->remoteControlInhibited = marbenData->remoteControlInhibited;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->remoteControlInhibited = %d.", __FUNCTION__, pData->remoteControlInhibited);

    return true;
}

bool VdsMarbenAdaptGen::OTA_Encode(const OTA_Model &pData, asn_wrapper::OTA* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::OTA* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::OTA*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (pData.swModel_presence)
    {
        if (verifyPrintableString("swModel", pData.swModel))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_swModel);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.swModel = %s.", __FUNCTION__, pData.swModel.c_str());
            marbenData->swModel.copyOctetString(pData.swModel.length(), (asnbyte*)(unsigned char*)(pData.swModel.c_str()));
        }
    }
    if (pData.swVersion_presence)
    {
        if (verifyPrintableString("swVersion", pData.swVersion))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_OTA__swVersion);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.swVersion = %s.", __FUNCTION__, pData.swVersion.c_str());
            marbenData->swVersion.copyOctetString(pData.swVersion.length(), (asnbyte*)(unsigned char*)(pData.swVersion.c_str()));
        }
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.downloadUrl = %s.", __FUNCTION__, pData.downloadUrl.c_str());
    marbenData->downloadUrl.copyOctetString(pData.downloadUrl.length(), (asnbyte*)(unsigned char*)(pData.downloadUrl.c_str()));
    if (pData.verificationCode_presence)
    {
        if (verifyPrintableString("verificationCode", pData.verificationCode))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_verificationCode);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.verificationCode = %s.", __FUNCTION__, pData.verificationCode.c_str());
            marbenData->verificationCode.copyOctetString(pData.verificationCode.length(), (asnbyte*)(unsigned char*)(pData.verificationCode.c_str()));
        }
    }

    return true;
}

bool VdsMarbenAdaptGen::OTA_Decode(const std::string &path, std::shared_ptr<OTA_Model> &pData, asn_wrapper::OTA* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::OTA* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::OTA*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_swModel))
    {
        pData->swModel_presence = true;
        pData->swModel = std::string((const char*)marbenData->swModel.value, marbenData->swModel.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->swModel = %s.", __FUNCTION__, pData->swModel.c_str());
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_OTA__swVersion))
    {
        pData->swVersion_presence = true;
        pData->swVersion = std::string((const char*)marbenData->swVersion.value, marbenData->swVersion.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->swVersion = %s.", __FUNCTION__, pData->swVersion.c_str());
    }
    pData->downloadUrl = std::string((const char*)marbenData->downloadUrl.value, marbenData->downloadUrl.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->downloadUrl = %s.", __FUNCTION__, pData->downloadUrl.c_str());
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_verificationCode))
    {
        pData->verificationCode_presence = true;
        pData->verificationCode = std::string((const char*)marbenData->verificationCode.value, marbenData->verificationCode.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->verificationCode = %s.", __FUNCTION__, pData->verificationCode.c_str());
    }

    return true;
}

bool VdsMarbenAdaptGen::Error_Encode(const Error_Model &pData, asn_wrapper::Error* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::Error* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::Error*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.code = %d.", __FUNCTION__, pData.code);
    marbenData->code = (int32_t)pData.code;
    if (pData.vehicleErrorCode_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_vehicleErrorCode);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.vehicleErrorCode = %d.", __FUNCTION__, pData.vehicleErrorCode);
        marbenData->vehicleErrorCode = pData.vehicleErrorCode;
    }
    if (pData.message_presence)
    {
        if (verifyScope("message", (int64_t)pData.message.size(), (int64_t)0, (int64_t)255))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_Error__message);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.message = %s.", __FUNCTION__, pData.message.c_str());
            marbenData->message.copyOctetString(pData.message.length(), (asnbyte*)(unsigned char*)(pData.message.c_str()));
        }
    }

    return true;
}

bool VdsMarbenAdaptGen::Error_Decode(const std::string &path, std::shared_ptr<Error_Model> &pData, asn_wrapper::Error* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::Error* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::Error*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->code = (Vds_ErrorCode)marbenData->code;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->code = %d.", __FUNCTION__, pData->code);
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_vehicleErrorCode))
    {
        pData->vehicleErrorCode_presence = true;
        pData->vehicleErrorCode = marbenData->vehicleErrorCode;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->vehicleErrorCode = %d.", __FUNCTION__, pData->vehicleErrorCode);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_Error__message))
    {
        pData->message_presence = true;
        pData->message = std::string((const char*)marbenData->message.value, marbenData->message.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->message = %s.", __FUNCTION__, pData->message.c_str());
    }

    return true;
}

bool VdsMarbenAdaptGen::Position_Encode(const Position_Model &pData, asn_wrapper::Position* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::Position* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::Position*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (pData.latitude_presence)
    {
        if (verifyScope("latitude", (int64_t)pData.latitude, (int64_t)-2147483648, (int64_t)2147483647))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_latitude);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.latitude = %d.", __FUNCTION__, pData.latitude);
            marbenData->latitude = pData.latitude;
        }
    }
    if (pData.longitude_presence)
    {
        if (verifyScope("longitude", (int64_t)pData.longitude, (int64_t)-2147483648, (int64_t)2147483647))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_longitude);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.longitude = %d.", __FUNCTION__, pData.longitude);
            marbenData->longitude = pData.longitude;
        }
    }
    if (pData.altitude_presence)
    {
        if (verifyScope("altitude", (int64_t)pData.altitude, (int64_t)-100, (int64_t)8091))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_altitude);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.altitude = %d.", __FUNCTION__, pData.altitude);
            marbenData->altitude = pData.altitude;
        }
    }
    if (pData.posCanBeTrusted_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_posCanBeTrusted);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.posCanBeTrusted = %d.", __FUNCTION__, pData.posCanBeTrusted);
        marbenData->posCanBeTrusted = pData.posCanBeTrusted;
    }
    if (pData.carLocatorStatUploadEn_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_carLocatorStatUploadEn);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.carLocatorStatUploadEn = %d.", __FUNCTION__, pData.carLocatorStatUploadEn);
        marbenData->carLocatorStatUploadEn = pData.carLocatorStatUploadEn;
    }
    if (pData.marsCoordinates_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_marsCoordinates);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.marsCoordinates = %d.", __FUNCTION__, pData.marsCoordinates);
        marbenData->marsCoordinates = pData.marsCoordinates;
    }

    return true;
}

bool VdsMarbenAdaptGen::Position_Decode(const std::string &path, std::shared_ptr<Position_Model> &pData, asn_wrapper::Position* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::Position* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::Position*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_latitude))
    {
        pData->latitude_presence = true;
        pData->latitude = marbenData->latitude;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->latitude = %d.", __FUNCTION__, pData->latitude);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_longitude))
    {
        pData->longitude_presence = true;
        pData->longitude = marbenData->longitude;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->longitude = %d.", __FUNCTION__, pData->longitude);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_altitude))
    {
        pData->altitude_presence = true;
        pData->altitude = marbenData->altitude;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->altitude = %d.", __FUNCTION__, pData->altitude);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_posCanBeTrusted))
    {
        pData->posCanBeTrusted_presence = true;
        pData->posCanBeTrusted = marbenData->posCanBeTrusted;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->posCanBeTrusted = %d.", __FUNCTION__, pData->posCanBeTrusted);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_carLocatorStatUploadEn))
    {
        pData->carLocatorStatUploadEn_presence = true;
        pData->carLocatorStatUploadEn = marbenData->carLocatorStatUploadEn;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->carLocatorStatUploadEn = %d.", __FUNCTION__, pData->carLocatorStatUploadEn);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_marsCoordinates))
    {
        pData->marsCoordinates_presence = true;
        pData->marsCoordinates = marbenData->marsCoordinates;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->marsCoordinates = %d.", __FUNCTION__, pData->marsCoordinates);
    }

    return true;
}

bool VdsMarbenAdaptGen::Configuration_Encode(const Configuration_Model &pData, asn_wrapper::Configuration* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::Configuration* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::Configuration*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyPrintableString("version", pData.version))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.version = %s.", __FUNCTION__, pData.version.c_str());
        marbenData->version.copyOctetString(pData.version.length(), (asnbyte*)(unsigned char*)(pData.version.c_str()));
    }
    
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.items.size() = %d.", __FUNCTION__, pData.items.size());
    for (auto p_item = pData.items.begin(); p_item != pData.items.end();) 
    {
        asn_wrapper::asncConfiguration__itemss *item = new asn_wrapper::asncConfiguration__itemss();
        marbenData->items.addElement(item);

        if (verifyPrintableString("name", p_item->name))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_item->name = %s.", __FUNCTION__, p_item->name.c_str());
            item->name.copyOctetString(p_item->name.length(), (asnbyte*)(unsigned char*)(p_item->name.c_str()));
        }
        
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_item->parameters.size() = %d.", __FUNCTION__, p_item->parameters.size());
        for (auto p_parameter = p_item->parameters.begin(); p_parameter != p_item->parameters.end();) 
        {
            asn_wrapper::asncConfigurationItem__parameterss *parameter = new asn_wrapper::asncConfigurationItem__parameterss();
            item->parameters.addElement(parameter);

            if (verifyScope("key", (int64_t)p_parameter->key.size(), (int64_t)0, (int64_t)250))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_parameter->key = %s.", __FUNCTION__, p_parameter->key.c_str());
                parameter->key.copyOctetString(p_parameter->key.length(), (asnbyte*)(unsigned char*)(p_parameter->key.c_str()));
            }
            if (p_parameter->intVal_presence)
            {
                parameter->optional.setPresence(asn_wrapper::asn_intVal);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_parameter->intVal = %d.", __FUNCTION__, p_parameter->intVal);
                parameter->intVal = p_parameter->intVal;
            }
            if (p_parameter->stringVal_presence)
            {
                if (verifyScope("stringVal", (int64_t)p_parameter->stringVal.size(), (int64_t)0, (int64_t)65535))
                {
                    parameter->optional.setPresence(asn_wrapper::asn_ServiceParameter__stringVal);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_parameter->stringVal = %s.", __FUNCTION__, p_parameter->stringVal.c_str());
                    parameter->stringVal.copyOctetString(p_parameter->stringVal.length(), (asnbyte*)(unsigned char*)(p_parameter->stringVal.c_str()));
                }
            }
            if (p_parameter->boolVal_presence)
            {
                parameter->optional.setPresence(asn_wrapper::asn_ServiceParameter__boolVal);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_parameter->boolVal = %d.", __FUNCTION__, p_parameter->boolVal);
                parameter->boolVal = p_parameter->boolVal;
            }
            if (p_parameter->timestampVal_presence)
            {
                parameter->optional.setPresence(asn_wrapper::asn_ServiceParameter__timestampVal);
                if (parameter->timestampVal == nullptr )
                {
                    parameter->timestampVal = new asn_wrapper::TimeStamp();
                }
                TimeStamp_Encode(p_parameter->timestampVal, parameter->timestampVal);
            }
            if (p_parameter->dataVal_presence)
            {
                if (verifyScope("dataVal", (int64_t)p_parameter->dataVal.size(), (int64_t)1, (int64_t)65535))
                {
                    parameter->optional.setPresence(asn_wrapper::asn_ServiceParameter__dataVal);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_parameter->dataVal = %s.", __FUNCTION__, p_parameter->dataVal.c_str());
                    int dataVal_length = 0;
                    unsigned char* dataVal_ptr = new unsigned char[p_parameter->dataVal.length()];
                    StringToOctet(p_parameter->dataVal,dataVal_ptr,dataVal_length);
                    parameter->dataVal.copyOctetString(dataVal_length,(asnbytep)dataVal_ptr);
                    delete[] dataVal_ptr;
                }
            }
        
            ++p_parameter;
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: item->parameters.getCount() = %d.", __FUNCTION__, item->parameters.getCount());
        
    
        ++p_item;
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->items.getCount() = %d.", __FUNCTION__, marbenData->items.getCount());
    

    return true;
}

bool VdsMarbenAdaptGen::Configuration_Decode(const std::string &path, std::shared_ptr<Configuration_Model> &pData, asn_wrapper::Configuration* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::Configuration* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::Configuration*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->version = std::string((const char*)marbenData->version.value, marbenData->version.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->version = %s.", __FUNCTION__, pData->version.c_str());
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->items.getCount() = %d.", __FUNCTION__, marbenData->items.getCount());
    unsigned int itemCount = marbenData->items.getCount();
    asn_wrapper::asncConfiguration__itemss* item = (asn_wrapper::asncConfiguration__itemss*)(marbenData->items.getFirstElement());
    for (unsigned int i = 0; (i < itemCount || item); i++) 
    {
        ConfigurationItem_Model p_item;
        p_item.name = std::string((const char*)item->name.value, item->name.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_item.name = %s.", __FUNCTION__, p_item.name.c_str());
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: item->parameters.getCount() = %d.", __FUNCTION__, item->parameters.getCount());
        unsigned int parameterCount = item->parameters.getCount();
        asn_wrapper::asncConfigurationItem__parameterss* parameter = (asn_wrapper::asncConfigurationItem__parameterss*)(item->parameters.getFirstElement());
        for (unsigned int parameters2 = 0; (parameters2 < parameterCount || parameter); parameters2++) 
        {
            ServiceParameter_Model p_parameter;
            p_parameter.key = std::string((const char*)parameter->key.value, parameter->key.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_parameter.key = %s.", __FUNCTION__, p_parameter.key.c_str());
            if (asnTRUE == parameter->optional.getPresence(asn_wrapper::asn_intVal))
            {
                p_parameter.intVal_presence = true;
                p_parameter.intVal = parameter->intVal;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_parameter.intVal = %d.", __FUNCTION__, p_parameter.intVal);
            }
            if (asnTRUE == parameter->optional.getPresence(asn_wrapper::asn_ServiceParameter__stringVal))
            {
                p_parameter.stringVal_presence = true;
                p_parameter.stringVal = std::string((const char*)parameter->stringVal.value, parameter->stringVal.length);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_parameter.stringVal = %s.", __FUNCTION__, p_parameter.stringVal.c_str());
            }
            if (asnTRUE == parameter->optional.getPresence(asn_wrapper::asn_ServiceParameter__boolVal))
            {
                p_parameter.boolVal_presence = true;
                p_parameter.boolVal = parameter->boolVal;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_parameter.boolVal = %d.", __FUNCTION__, p_parameter.boolVal);
            }
            if (asnTRUE == parameter->optional.getPresence(asn_wrapper::asn_ServiceParameter__timestampVal))
            {
                p_parameter.timestampVal_presence = true;
                if (parameter->timestampVal != nullptr )
                {
                    std::shared_ptr<TimeStamp_Model> p_timestampVal = std::make_shared<TimeStamp_Model>();
                    result = TimeStamp_Decode( "" , p_timestampVal , parameter->timestampVal);
                    if (result)
                    {
                        p_parameter.timestampVal = (*p_timestampVal);
                    }
                }

            }
            if (asnTRUE == parameter->optional.getPresence(asn_wrapper::asn_ServiceParameter__dataVal))
            {
                p_parameter.dataVal_presence = true;
                asnbyte* dataVal_ptr;
                asnMAXUINT dataVal_length;
                parameter->dataVal.getOctetString(&dataVal_length,&dataVal_ptr);
                char* dataVal_array = new char[dataVal_length*3-1];
                OctetToString(dataVal_ptr,dataVal_array,dataVal_length);
                p_parameter.dataVal = dataVal_array;
                delete[] dataVal_array;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_parameter.dataVal = %s.", __FUNCTION__, p_parameter.dataVal.c_str());
            }
            p_item.parameters.push_back(p_parameter);
            parameter = (asn_wrapper::asncConfigurationItem__parameterss*)(parameter->getNextElement());
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_item.parameters.size() = %d.", __FUNCTION__, p_item.parameters.size());
        
        pData->items.push_back(p_item);
        item = (asn_wrapper::asncConfiguration__itemss*)(item->getNextElement());
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->items.size() = %d.", __FUNCTION__, pData->items.size());
    

    return true;
}

bool VdsMarbenAdaptGen::ConfigurationItem_Encode(const ConfigurationItem_Model &pData, asn_wrapper::ConfigurationItem* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::ConfigurationItem* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::ConfigurationItem*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyPrintableString("name", pData.name))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.name = %s.", __FUNCTION__, pData.name.c_str());
        marbenData->name.copyOctetString(pData.name.length(), (asnbyte*)(unsigned char*)(pData.name.c_str()));
    }
    
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.parameters.size() = %d.", __FUNCTION__, pData.parameters.size());
    for (auto p_parameter = pData.parameters.begin(); p_parameter != pData.parameters.end();) 
    {
        asn_wrapper::asncConfigurationItem__parameterss *parameter = new asn_wrapper::asncConfigurationItem__parameterss();
        marbenData->parameters.addElement(parameter);

        if (verifyScope("key", (int64_t)p_parameter->key.size(), (int64_t)0, (int64_t)250))
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_parameter->key = %s.", __FUNCTION__, p_parameter->key.c_str());
            parameter->key.copyOctetString(p_parameter->key.length(), (asnbyte*)(unsigned char*)(p_parameter->key.c_str()));
        }
        if (p_parameter->intVal_presence)
        {
            parameter->optional.setPresence(asn_wrapper::asn_intVal);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_parameter->intVal = %d.", __FUNCTION__, p_parameter->intVal);
            parameter->intVal = p_parameter->intVal;
        }
        if (p_parameter->stringVal_presence)
        {
            if (verifyScope("stringVal", (int64_t)p_parameter->stringVal.size(), (int64_t)0, (int64_t)65535))
            {
                parameter->optional.setPresence(asn_wrapper::asn_ServiceParameter__stringVal);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_parameter->stringVal = %s.", __FUNCTION__, p_parameter->stringVal.c_str());
                parameter->stringVal.copyOctetString(p_parameter->stringVal.length(), (asnbyte*)(unsigned char*)(p_parameter->stringVal.c_str()));
            }
        }
        if (p_parameter->boolVal_presence)
        {
            parameter->optional.setPresence(asn_wrapper::asn_ServiceParameter__boolVal);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_parameter->boolVal = %d.", __FUNCTION__, p_parameter->boolVal);
            parameter->boolVal = p_parameter->boolVal;
        }
        if (p_parameter->timestampVal_presence)
        {
            parameter->optional.setPresence(asn_wrapper::asn_ServiceParameter__timestampVal);
            if (parameter->timestampVal == nullptr )
            {
                parameter->timestampVal = new asn_wrapper::TimeStamp();
            }
            TimeStamp_Encode(p_parameter->timestampVal, parameter->timestampVal);
        }
        if (p_parameter->dataVal_presence)
        {
            if (verifyScope("dataVal", (int64_t)p_parameter->dataVal.size(), (int64_t)1, (int64_t)65535))
            {
                parameter->optional.setPresence(asn_wrapper::asn_ServiceParameter__dataVal);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_parameter->dataVal = %s.", __FUNCTION__, p_parameter->dataVal.c_str());
                int dataVal_length = 0;
                unsigned char* dataVal_ptr = new unsigned char[p_parameter->dataVal.length()];
                StringToOctet(p_parameter->dataVal,dataVal_ptr,dataVal_length);
                parameter->dataVal.copyOctetString(dataVal_length,(asnbytep)dataVal_ptr);
                delete[] dataVal_ptr;
            }
        }
    
        ++p_parameter;
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->parameters.getCount() = %d.", __FUNCTION__, marbenData->parameters.getCount());
    

    return true;
}

bool VdsMarbenAdaptGen::ConfigurationItem_Decode(const std::string &path, std::shared_ptr<ConfigurationItem_Model> &pData, asn_wrapper::ConfigurationItem* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::ConfigurationItem* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::ConfigurationItem*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->name = std::string((const char*)marbenData->name.value, marbenData->name.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->name = %s.", __FUNCTION__, pData->name.c_str());
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->parameters.getCount() = %d.", __FUNCTION__, marbenData->parameters.getCount());
    unsigned int parameterCount = marbenData->parameters.getCount();
    asn_wrapper::asncConfigurationItem__parameterss* parameter = (asn_wrapper::asncConfigurationItem__parameterss*)(marbenData->parameters.getFirstElement());
    for (unsigned int i = 0; (i < parameterCount || parameter); i++) 
    {
        ServiceParameter_Model p_parameter;
        p_parameter.key = std::string((const char*)parameter->key.value, parameter->key.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_parameter.key = %s.", __FUNCTION__, p_parameter.key.c_str());
        if (asnTRUE == parameter->optional.getPresence(asn_wrapper::asn_intVal))
        {
            p_parameter.intVal_presence = true;
            p_parameter.intVal = parameter->intVal;
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_parameter.intVal = %d.", __FUNCTION__, p_parameter.intVal);
        }
        if (asnTRUE == parameter->optional.getPresence(asn_wrapper::asn_ServiceParameter__stringVal))
        {
            p_parameter.stringVal_presence = true;
            p_parameter.stringVal = std::string((const char*)parameter->stringVal.value, parameter->stringVal.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_parameter.stringVal = %s.", __FUNCTION__, p_parameter.stringVal.c_str());
        }
        if (asnTRUE == parameter->optional.getPresence(asn_wrapper::asn_ServiceParameter__boolVal))
        {
            p_parameter.boolVal_presence = true;
            p_parameter.boolVal = parameter->boolVal;
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_parameter.boolVal = %d.", __FUNCTION__, p_parameter.boolVal);
        }
        if (asnTRUE == parameter->optional.getPresence(asn_wrapper::asn_ServiceParameter__timestampVal))
        {
            p_parameter.timestampVal_presence = true;
            if (parameter->timestampVal != nullptr )
            {
                std::shared_ptr<TimeStamp_Model> p_timestampVal = std::make_shared<TimeStamp_Model>();
                result = TimeStamp_Decode( "" , p_timestampVal , parameter->timestampVal);
                if (result)
                {
                    p_parameter.timestampVal = (*p_timestampVal);
                }
            }

        }
        if (asnTRUE == parameter->optional.getPresence(asn_wrapper::asn_ServiceParameter__dataVal))
        {
            p_parameter.dataVal_presence = true;
            asnbyte* dataVal_ptr;
            asnMAXUINT dataVal_length;
            parameter->dataVal.getOctetString(&dataVal_length,&dataVal_ptr);
            char* dataVal_array = new char[dataVal_length*3-1];
            OctetToString(dataVal_ptr,dataVal_array,dataVal_length);
            p_parameter.dataVal = dataVal_array;
            delete[] dataVal_array;
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_parameter.dataVal = %s.", __FUNCTION__, p_parameter.dataVal.c_str());
        }
        pData->parameters.push_back(p_parameter);
        parameter = (asn_wrapper::asncConfigurationItem__parameterss*)(parameter->getNextElement());
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->parameters.size() = %d.", __FUNCTION__, pData->parameters.size());
    

    return true;
}

bool VdsMarbenAdaptGen::Trip_Encode(const Trip_Model &pData, asn_wrapper::Trip* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::Trip* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::Trip*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.tripId = %d.", __FUNCTION__, pData.tripId);
    marbenData->tripId = pData.tripId;
    if (marbenData->startTime == nullptr )
    {
        marbenData->startTime = new asn_wrapper::TimeStamp();
    }
    TimeStamp_Encode(pData.startTime, marbenData->startTime);
    if (pData.startOdometer_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_Trip__startOdometer);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.startOdometer = %d.", __FUNCTION__, pData.startOdometer);
        marbenData->startOdometer = pData.startOdometer;
    }
    if (pData.fuelConsumption_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_fuelConsumption);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.fuelConsumption = %d.", __FUNCTION__, pData.fuelConsumption);
        marbenData->fuelConsumption = pData.fuelConsumption;
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.traveledDistance = %d.", __FUNCTION__, pData.traveledDistance);
    marbenData->traveledDistance = pData.traveledDistance;
    
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.trackpoints.size() = %d.", __FUNCTION__, pData.trackpoints.size());
    for (auto p_trackpoint = pData.trackpoints.begin(); p_trackpoint != pData.trackpoints.end();) 
    {
        asn_wrapper::asnctrackpointss *trackpoint = new asn_wrapper::asnctrackpointss();
        marbenData->trackpoints.addElement(trackpoint);

        if (trackpoint->systemTime == nullptr )
        {
            trackpoint->systemTime = new asn_wrapper::TimeStamp();
        }
        TimeStamp_Encode(p_trackpoint->systemTime, trackpoint->systemTime);
        if (trackpoint->position == nullptr )
        {
            trackpoint->position = new asn_wrapper::Position();
        }
        Position_Encode(p_trackpoint->position, trackpoint->position);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_trackpoint->speed = %d.", __FUNCTION__, p_trackpoint->speed);
        trackpoint->speed = p_trackpoint->speed;
        if (p_trackpoint->direction_presence)
        {
            if (verifyScope("direction", (int64_t)p_trackpoint->direction, (int64_t)0, (int64_t)360))
            {
                trackpoint->optional.setPresence(asn_wrapper::asn_TrackPoint__direction);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_trackpoint->direction = %d.", __FUNCTION__, p_trackpoint->direction);
                trackpoint->direction = p_trackpoint->direction;
            }
        }
        if (p_trackpoint->isSVT_presence)
        {
            trackpoint->optional.setPresence(asn_wrapper::asn_isSVT);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_trackpoint->isSVT = %d.", __FUNCTION__, p_trackpoint->isSVT);
            trackpoint->isSVT = p_trackpoint->isSVT;
        }
        if (p_trackpoint->odometer_presence)
        {
            trackpoint->optional.setPresence(asn_wrapper::asn_TrackPoint__odometer);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_trackpoint->odometer = %d.", __FUNCTION__, p_trackpoint->odometer);
            trackpoint->odometer = p_trackpoint->odometer;
        }
        if (p_trackpoint->travelDistanceSinceLastWaypoint_presence)
        {
            trackpoint->optional.setPresence(asn_wrapper::asn_travelDistanceSinceLastWaypoint);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_trackpoint->travelDistanceSinceLastWaypoint = %d.", __FUNCTION__, p_trackpoint->travelDistanceSinceLastWaypoint);
            trackpoint->travelDistanceSinceLastWaypoint = p_trackpoint->travelDistanceSinceLastWaypoint;
        }
        if (p_trackpoint->fuelConsumptionSinceLastWaypoint_presence)
        {
            trackpoint->optional.setPresence(asn_wrapper::asn_fuelConsumptionSinceLastWaypoint);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_trackpoint->fuelConsumptionSinceLastWaypoint = %d.", __FUNCTION__, p_trackpoint->fuelConsumptionSinceLastWaypoint);
            trackpoint->fuelConsumptionSinceLastWaypoint = p_trackpoint->fuelConsumptionSinceLastWaypoint;
        }
        if (p_trackpoint->electricConsumptionSinceLastSample_presence)
        {
            trackpoint->optional.setPresence(asn_wrapper::asn_electricConsumptionSinceLastSample);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_trackpoint->electricConsumptionSinceLastSample = %d.", __FUNCTION__, p_trackpoint->electricConsumptionSinceLastSample);
            trackpoint->electricConsumptionSinceLastSample = p_trackpoint->electricConsumptionSinceLastSample;
        }
        if (p_trackpoint->electricRegenerationSinceLastSample_presence)
        {
            trackpoint->optional.setPresence(asn_wrapper::asn_electricRegenerationSinceLastSample);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_trackpoint->electricRegenerationSinceLastSample = %d.", __FUNCTION__, p_trackpoint->electricRegenerationSinceLastSample);
            trackpoint->electricRegenerationSinceLastSample = p_trackpoint->electricRegenerationSinceLastSample;
        }
    
        ++p_trackpoint;
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->trackpoints.getCount() = %d.", __FUNCTION__, marbenData->trackpoints.getCount());
    
    if (pData.waypoints_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_waypoints);
        
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.waypoints.size() = %d.", __FUNCTION__, pData.waypoints.size());
        for (auto p_waypoint = pData.waypoints.begin(); p_waypoint != pData.waypoints.end();) 
        {
            asn_wrapper::asncwaypointss *waypoint = new asn_wrapper::asncwaypointss();
            marbenData->waypoints.addElement(waypoint);

            if (p_waypoint->latitude_presence)
            {
                if (verifyScope("latitude", (int64_t)p_waypoint->latitude, (int64_t)-2147483648, (int64_t)2147483647))
                {
                    waypoint->optional.setPresence(asn_wrapper::asn_latitude);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_waypoint->latitude = %d.", __FUNCTION__, p_waypoint->latitude);
                    waypoint->latitude = p_waypoint->latitude;
                }
            }
            if (p_waypoint->longitude_presence)
            {
                if (verifyScope("longitude", (int64_t)p_waypoint->longitude, (int64_t)-2147483648, (int64_t)2147483647))
                {
                    waypoint->optional.setPresence(asn_wrapper::asn_longitude);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_waypoint->longitude = %d.", __FUNCTION__, p_waypoint->longitude);
                    waypoint->longitude = p_waypoint->longitude;
                }
            }
            if (p_waypoint->altitude_presence)
            {
                if (verifyScope("altitude", (int64_t)p_waypoint->altitude, (int64_t)-100, (int64_t)8091))
                {
                    waypoint->optional.setPresence(asn_wrapper::asn_altitude);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_waypoint->altitude = %d.", __FUNCTION__, p_waypoint->altitude);
                    waypoint->altitude = p_waypoint->altitude;
                }
            }
            if (p_waypoint->posCanBeTrusted_presence)
            {
                waypoint->optional.setPresence(asn_wrapper::asn_posCanBeTrusted);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_waypoint->posCanBeTrusted = %d.", __FUNCTION__, p_waypoint->posCanBeTrusted);
                waypoint->posCanBeTrusted = p_waypoint->posCanBeTrusted;
            }
            if (p_waypoint->carLocatorStatUploadEn_presence)
            {
                waypoint->optional.setPresence(asn_wrapper::asn_carLocatorStatUploadEn);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_waypoint->carLocatorStatUploadEn = %d.", __FUNCTION__, p_waypoint->carLocatorStatUploadEn);
                waypoint->carLocatorStatUploadEn = p_waypoint->carLocatorStatUploadEn;
            }
            if (p_waypoint->marsCoordinates_presence)
            {
                waypoint->optional.setPresence(asn_wrapper::asn_marsCoordinates);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_waypoint->marsCoordinates = %d.", __FUNCTION__, p_waypoint->marsCoordinates);
                waypoint->marsCoordinates = p_waypoint->marsCoordinates;
            }
        
            ++p_waypoint;
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->waypoints.getCount() = %d.", __FUNCTION__, marbenData->waypoints.getCount());
        
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.avgSpeed = %d.", __FUNCTION__, pData.avgSpeed);
    marbenData->avgSpeed = pData.avgSpeed;
    if (marbenData->endTime == nullptr )
    {
        marbenData->endTime = new asn_wrapper::TimeStamp();
    }
    TimeStamp_Encode(pData.endTime, marbenData->endTime);
    if (pData.endOdometer_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_Trip__endOdometer);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.endOdometer = %d.", __FUNCTION__, pData.endOdometer);
        marbenData->endOdometer = pData.endOdometer;
    }
    if (pData.electricConsumption_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_electricConsumption);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.electricConsumption = %d.", __FUNCTION__, pData.electricConsumption);
        marbenData->electricConsumption = pData.electricConsumption;
    }
    if (pData.electricRegeneration_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_electricRegeneration);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.electricRegeneration = %d.", __FUNCTION__, pData.electricRegeneration);
        marbenData->electricRegeneration = pData.electricRegeneration;
    }

    return true;
}

bool VdsMarbenAdaptGen::Trip_Decode(const std::string &path, std::shared_ptr<Trip_Model> &pData, asn_wrapper::Trip* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::Trip* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::Trip*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->tripId = marbenData->tripId;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->tripId = %d.", __FUNCTION__, pData->tripId);
    if (marbenData->startTime != nullptr )
    {
        std::shared_ptr<TimeStamp_Model> p_startTime = std::make_shared<TimeStamp_Model>();
        result = TimeStamp_Decode( "" , p_startTime , marbenData->startTime);
        if (result)
        {
            pData->startTime = (*p_startTime);
        }
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_Trip__startOdometer))
    {
        pData->startOdometer_presence = true;
        pData->startOdometer = marbenData->startOdometer;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->startOdometer = %d.", __FUNCTION__, pData->startOdometer);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_fuelConsumption))
    {
        pData->fuelConsumption_presence = true;
        pData->fuelConsumption = marbenData->fuelConsumption;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->fuelConsumption = %d.", __FUNCTION__, pData->fuelConsumption);
    }
    pData->traveledDistance = marbenData->traveledDistance;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->traveledDistance = %d.", __FUNCTION__, pData->traveledDistance);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->trackpoints.getCount() = %d.", __FUNCTION__, marbenData->trackpoints.getCount());
    unsigned int trackpointCount = marbenData->trackpoints.getCount();
    asn_wrapper::asnctrackpointss* trackpoint = (asn_wrapper::asnctrackpointss*)(marbenData->trackpoints.getFirstElement());
    for (unsigned int i = 0; (i < trackpointCount || trackpoint); i++) 
    {
        TrackPoint_Model p_trackpoint;
        if (trackpoint->systemTime != nullptr )
        {
            std::shared_ptr<TimeStamp_Model> p_systemTime = std::make_shared<TimeStamp_Model>();
            result = TimeStamp_Decode( "" , p_systemTime , trackpoint->systemTime);
            if (result)
            {
                p_trackpoint.systemTime = (*p_systemTime);
            }
        }

        if (trackpoint->position != nullptr )
        {
            std::shared_ptr<Position_Model> p_position = std::make_shared<Position_Model>();
            result = Position_Decode( "" , p_position , trackpoint->position);
            if (result)
            {
                p_trackpoint.position = (*p_position);
            }
        }

        p_trackpoint.speed = trackpoint->speed;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_trackpoint.speed = %d.", __FUNCTION__, p_trackpoint.speed);
        if (asnTRUE == trackpoint->optional.getPresence(asn_wrapper::asn_TrackPoint__direction))
        {
            p_trackpoint.direction_presence = true;
            p_trackpoint.direction = trackpoint->direction;
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_trackpoint.direction = %d.", __FUNCTION__, p_trackpoint.direction);
        }
        if (asnTRUE == trackpoint->optional.getPresence(asn_wrapper::asn_isSVT))
        {
            p_trackpoint.isSVT_presence = true;
            p_trackpoint.isSVT = trackpoint->isSVT;
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_trackpoint.isSVT = %d.", __FUNCTION__, p_trackpoint.isSVT);
        }
        if (asnTRUE == trackpoint->optional.getPresence(asn_wrapper::asn_TrackPoint__odometer))
        {
            p_trackpoint.odometer_presence = true;
            p_trackpoint.odometer = trackpoint->odometer;
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_trackpoint.odometer = %d.", __FUNCTION__, p_trackpoint.odometer);
        }
        if (asnTRUE == trackpoint->optional.getPresence(asn_wrapper::asn_travelDistanceSinceLastWaypoint))
        {
            p_trackpoint.travelDistanceSinceLastWaypoint_presence = true;
            p_trackpoint.travelDistanceSinceLastWaypoint = trackpoint->travelDistanceSinceLastWaypoint;
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_trackpoint.travelDistanceSinceLastWaypoint = %d.", __FUNCTION__, p_trackpoint.travelDistanceSinceLastWaypoint);
        }
        if (asnTRUE == trackpoint->optional.getPresence(asn_wrapper::asn_fuelConsumptionSinceLastWaypoint))
        {
            p_trackpoint.fuelConsumptionSinceLastWaypoint_presence = true;
            p_trackpoint.fuelConsumptionSinceLastWaypoint = trackpoint->fuelConsumptionSinceLastWaypoint;
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_trackpoint.fuelConsumptionSinceLastWaypoint = %d.", __FUNCTION__, p_trackpoint.fuelConsumptionSinceLastWaypoint);
        }
        if (asnTRUE == trackpoint->optional.getPresence(asn_wrapper::asn_electricConsumptionSinceLastSample))
        {
            p_trackpoint.electricConsumptionSinceLastSample_presence = true;
            p_trackpoint.electricConsumptionSinceLastSample = trackpoint->electricConsumptionSinceLastSample;
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_trackpoint.electricConsumptionSinceLastSample = %d.", __FUNCTION__, p_trackpoint.electricConsumptionSinceLastSample);
        }
        if (asnTRUE == trackpoint->optional.getPresence(asn_wrapper::asn_electricRegenerationSinceLastSample))
        {
            p_trackpoint.electricRegenerationSinceLastSample_presence = true;
            p_trackpoint.electricRegenerationSinceLastSample = trackpoint->electricRegenerationSinceLastSample;
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_trackpoint.electricRegenerationSinceLastSample = %d.", __FUNCTION__, p_trackpoint.electricRegenerationSinceLastSample);
        }
        pData->trackpoints.push_back(p_trackpoint);
        trackpoint = (asn_wrapper::asnctrackpointss*)(trackpoint->getNextElement());
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->trackpoints.size() = %d.", __FUNCTION__, pData->trackpoints.size());
    
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_waypoints))
    {
        pData->waypoints_presence = true;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->waypoints.getCount() = %d.", __FUNCTION__, marbenData->waypoints.getCount());
        unsigned int waypointCount = marbenData->waypoints.getCount();
        asn_wrapper::asncwaypointss* waypoint = (asn_wrapper::asncwaypointss*)(marbenData->waypoints.getFirstElement());
        for (unsigned int i = 0; (i < waypointCount || waypoint); i++) 
        {
            Position_Model p_waypoint;
            if (asnTRUE == waypoint->optional.getPresence(asn_wrapper::asn_latitude))
            {
                p_waypoint.latitude_presence = true;
                p_waypoint.latitude = waypoint->latitude;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_waypoint.latitude = %d.", __FUNCTION__, p_waypoint.latitude);
            }
            if (asnTRUE == waypoint->optional.getPresence(asn_wrapper::asn_longitude))
            {
                p_waypoint.longitude_presence = true;
                p_waypoint.longitude = waypoint->longitude;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_waypoint.longitude = %d.", __FUNCTION__, p_waypoint.longitude);
            }
            if (asnTRUE == waypoint->optional.getPresence(asn_wrapper::asn_altitude))
            {
                p_waypoint.altitude_presence = true;
                p_waypoint.altitude = waypoint->altitude;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_waypoint.altitude = %d.", __FUNCTION__, p_waypoint.altitude);
            }
            if (asnTRUE == waypoint->optional.getPresence(asn_wrapper::asn_posCanBeTrusted))
            {
                p_waypoint.posCanBeTrusted_presence = true;
                p_waypoint.posCanBeTrusted = waypoint->posCanBeTrusted;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_waypoint.posCanBeTrusted = %d.", __FUNCTION__, p_waypoint.posCanBeTrusted);
            }
            if (asnTRUE == waypoint->optional.getPresence(asn_wrapper::asn_carLocatorStatUploadEn))
            {
                p_waypoint.carLocatorStatUploadEn_presence = true;
                p_waypoint.carLocatorStatUploadEn = waypoint->carLocatorStatUploadEn;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_waypoint.carLocatorStatUploadEn = %d.", __FUNCTION__, p_waypoint.carLocatorStatUploadEn);
            }
            if (asnTRUE == waypoint->optional.getPresence(asn_wrapper::asn_marsCoordinates))
            {
                p_waypoint.marsCoordinates_presence = true;
                p_waypoint.marsCoordinates = waypoint->marsCoordinates;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_waypoint.marsCoordinates = %d.", __FUNCTION__, p_waypoint.marsCoordinates);
            }
            pData->waypoints.push_back(p_waypoint);
            waypoint = (asn_wrapper::asncwaypointss*)(waypoint->getNextElement());
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->waypoints.size() = %d.", __FUNCTION__, pData->waypoints.size());
        
    }
    pData->avgSpeed = marbenData->avgSpeed;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->avgSpeed = %d.", __FUNCTION__, pData->avgSpeed);
    if (marbenData->endTime != nullptr )
    {
        std::shared_ptr<TimeStamp_Model> p_endTime = std::make_shared<TimeStamp_Model>();
        result = TimeStamp_Decode( "" , p_endTime , marbenData->endTime);
        if (result)
        {
            pData->endTime = (*p_endTime);
        }
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_Trip__endOdometer))
    {
        pData->endOdometer_presence = true;
        pData->endOdometer = marbenData->endOdometer;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->endOdometer = %d.", __FUNCTION__, pData->endOdometer);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_electricConsumption))
    {
        pData->electricConsumption_presence = true;
        pData->electricConsumption = marbenData->electricConsumption;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->electricConsumption = %d.", __FUNCTION__, pData->electricConsumption);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_electricRegeneration))
    {
        pData->electricRegeneration_presence = true;
        pData->electricRegeneration = marbenData->electricRegeneration;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->electricRegeneration = %d.", __FUNCTION__, pData->electricRegeneration);
    }

    return true;
}

bool VdsMarbenAdaptGen::TripFragment_Encode(const TripFragment_Model &pData, asn_wrapper::TripFragment* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::TripFragment* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::TripFragment*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (marbenData->startTime == nullptr )
    {
        marbenData->startTime = new asn_wrapper::TimeStamp();
    }
    TimeStamp_Encode(pData.startTime, marbenData->startTime);
    if (pData.startPosition_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_startPosition);
        if (marbenData->startPosition == nullptr )
        {
            marbenData->startPosition = new asn_wrapper::Position();
        }
        Position_Encode(pData.startPosition, marbenData->startPosition);
    }
    if (pData.startOdometer_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_TripFragment__startOdometer);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.startOdometer = %d.", __FUNCTION__, pData.startOdometer);
        marbenData->startOdometer = pData.startOdometer;
    }
    if (pData.startFuelLevel_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_startFuelLevel);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.startFuelLevel = %d.", __FUNCTION__, pData.startFuelLevel);
        marbenData->startFuelLevel = pData.startFuelLevel;
    }
    if (pData.startElectricConsumption_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_startElectricConsumption);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.startElectricConsumption = %d.", __FUNCTION__, pData.startElectricConsumption);
        marbenData->startElectricConsumption = pData.startElectricConsumption;
    }
    if (pData.startElectricRegeneration_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_startElectricRegeneration);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.startElectricRegeneration = %d.", __FUNCTION__, pData.startElectricRegeneration);
        marbenData->startElectricRegeneration = pData.startElectricRegeneration;
    }
    if (pData.endTime_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_TripFragment__endTime);
        if (marbenData->endTime == nullptr )
        {
            marbenData->endTime = new asn_wrapper::TimeStamp();
        }
        TimeStamp_Encode(pData.endTime, marbenData->endTime);
    }
    if (pData.endPosition_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_endPosition);
        if (marbenData->endPosition == nullptr )
        {
            marbenData->endPosition = new asn_wrapper::Position();
        }
        Position_Encode(pData.endPosition, marbenData->endPosition);
    }
    if (pData.endOdometer_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_TripFragment__endOdometer);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.endOdometer = %d.", __FUNCTION__, pData.endOdometer);
        marbenData->endOdometer = pData.endOdometer;
    }
    if (pData.endFuelLevel_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_endFuelLevel);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.endFuelLevel = %d.", __FUNCTION__, pData.endFuelLevel);
        marbenData->endFuelLevel = pData.endFuelLevel;
    }
    if (pData.endElectricConsumption_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_endElectricConsumption);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.endElectricConsumption = %d.", __FUNCTION__, pData.endElectricConsumption);
        marbenData->endElectricConsumption = pData.endElectricConsumption;
    }
    if (pData.endElectricRegeneration_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_endElectricRegeneration);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.endElectricRegeneration = %d.", __FUNCTION__, pData.endElectricRegeneration);
        marbenData->endElectricRegeneration = pData.endElectricRegeneration;
    }

    return true;
}

bool VdsMarbenAdaptGen::TripFragment_Decode(const std::string &path, std::shared_ptr<TripFragment_Model> &pData, asn_wrapper::TripFragment* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::TripFragment* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::TripFragment*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (marbenData->startTime != nullptr )
    {
        std::shared_ptr<TimeStamp_Model> p_startTime = std::make_shared<TimeStamp_Model>();
        result = TimeStamp_Decode( "" , p_startTime , marbenData->startTime);
        if (result)
        {
            pData->startTime = (*p_startTime);
        }
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_startPosition))
    {
        pData->startPosition_presence = true;
        if (marbenData->startPosition != nullptr )
        {
            std::shared_ptr<Position_Model> p_startPosition = std::make_shared<Position_Model>();
            result = Position_Decode( "" , p_startPosition , marbenData->startPosition);
            if (result)
            {
                pData->startPosition = (*p_startPosition);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_TripFragment__startOdometer))
    {
        pData->startOdometer_presence = true;
        pData->startOdometer = marbenData->startOdometer;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->startOdometer = %d.", __FUNCTION__, pData->startOdometer);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_startFuelLevel))
    {
        pData->startFuelLevel_presence = true;
        pData->startFuelLevel = marbenData->startFuelLevel;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->startFuelLevel = %d.", __FUNCTION__, pData->startFuelLevel);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_startElectricConsumption))
    {
        pData->startElectricConsumption_presence = true;
        pData->startElectricConsumption = marbenData->startElectricConsumption;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->startElectricConsumption = %d.", __FUNCTION__, pData->startElectricConsumption);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_startElectricRegeneration))
    {
        pData->startElectricRegeneration_presence = true;
        pData->startElectricRegeneration = marbenData->startElectricRegeneration;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->startElectricRegeneration = %d.", __FUNCTION__, pData->startElectricRegeneration);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_TripFragment__endTime))
    {
        pData->endTime_presence = true;
        if (marbenData->endTime != nullptr )
        {
            std::shared_ptr<TimeStamp_Model> p_endTime = std::make_shared<TimeStamp_Model>();
            result = TimeStamp_Decode( "" , p_endTime , marbenData->endTime);
            if (result)
            {
                pData->endTime = (*p_endTime);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_endPosition))
    {
        pData->endPosition_presence = true;
        if (marbenData->endPosition != nullptr )
        {
            std::shared_ptr<Position_Model> p_endPosition = std::make_shared<Position_Model>();
            result = Position_Decode( "" , p_endPosition , marbenData->endPosition);
            if (result)
            {
                pData->endPosition = (*p_endPosition);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_TripFragment__endOdometer))
    {
        pData->endOdometer_presence = true;
        pData->endOdometer = marbenData->endOdometer;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->endOdometer = %d.", __FUNCTION__, pData->endOdometer);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_endFuelLevel))
    {
        pData->endFuelLevel_presence = true;
        pData->endFuelLevel = marbenData->endFuelLevel;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->endFuelLevel = %d.", __FUNCTION__, pData->endFuelLevel);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_endElectricConsumption))
    {
        pData->endElectricConsumption_presence = true;
        pData->endElectricConsumption = marbenData->endElectricConsumption;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->endElectricConsumption = %d.", __FUNCTION__, pData->endElectricConsumption);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_endElectricRegeneration))
    {
        pData->endElectricRegeneration_presence = true;
        pData->endElectricRegeneration = marbenData->endElectricRegeneration;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->endElectricRegeneration = %d.", __FUNCTION__, pData->endElectricRegeneration);
    }

    return true;
}

bool VdsMarbenAdaptGen::TrackPoint_Encode(const TrackPoint_Model &pData, asn_wrapper::TrackPoint* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::TrackPoint* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::TrackPoint*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (marbenData->systemTime == nullptr )
    {
        marbenData->systemTime = new asn_wrapper::TimeStamp();
    }
    TimeStamp_Encode(pData.systemTime, marbenData->systemTime);
    if (marbenData->position == nullptr )
    {
        marbenData->position = new asn_wrapper::Position();
    }
    Position_Encode(pData.position, marbenData->position);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.speed = %d.", __FUNCTION__, pData.speed);
    marbenData->speed = pData.speed;
    if (pData.direction_presence)
    {
        if (verifyScope("direction", (int64_t)pData.direction, (int64_t)0, (int64_t)360))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_TrackPoint__direction);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.direction = %d.", __FUNCTION__, pData.direction);
            marbenData->direction = pData.direction;
        }
    }
    if (pData.isSVT_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_isSVT);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.isSVT = %d.", __FUNCTION__, pData.isSVT);
        marbenData->isSVT = pData.isSVT;
    }
    if (pData.odometer_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_TrackPoint__odometer);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.odometer = %d.", __FUNCTION__, pData.odometer);
        marbenData->odometer = pData.odometer;
    }
    if (pData.travelDistanceSinceLastWaypoint_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_travelDistanceSinceLastWaypoint);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.travelDistanceSinceLastWaypoint = %d.", __FUNCTION__, pData.travelDistanceSinceLastWaypoint);
        marbenData->travelDistanceSinceLastWaypoint = pData.travelDistanceSinceLastWaypoint;
    }
    if (pData.fuelConsumptionSinceLastWaypoint_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_fuelConsumptionSinceLastWaypoint);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.fuelConsumptionSinceLastWaypoint = %d.", __FUNCTION__, pData.fuelConsumptionSinceLastWaypoint);
        marbenData->fuelConsumptionSinceLastWaypoint = pData.fuelConsumptionSinceLastWaypoint;
    }
    if (pData.electricConsumptionSinceLastSample_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_electricConsumptionSinceLastSample);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.electricConsumptionSinceLastSample = %d.", __FUNCTION__, pData.electricConsumptionSinceLastSample);
        marbenData->electricConsumptionSinceLastSample = pData.electricConsumptionSinceLastSample;
    }
    if (pData.electricRegenerationSinceLastSample_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_electricRegenerationSinceLastSample);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.electricRegenerationSinceLastSample = %d.", __FUNCTION__, pData.electricRegenerationSinceLastSample);
        marbenData->electricRegenerationSinceLastSample = pData.electricRegenerationSinceLastSample;
    }

    return true;
}

bool VdsMarbenAdaptGen::TrackPoint_Decode(const std::string &path, std::shared_ptr<TrackPoint_Model> &pData, asn_wrapper::TrackPoint* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::TrackPoint* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::TrackPoint*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (marbenData->systemTime != nullptr )
    {
        std::shared_ptr<TimeStamp_Model> p_systemTime = std::make_shared<TimeStamp_Model>();
        result = TimeStamp_Decode( "" , p_systemTime , marbenData->systemTime);
        if (result)
        {
            pData->systemTime = (*p_systemTime);
        }
    }

    if (marbenData->position != nullptr )
    {
        std::shared_ptr<Position_Model> p_position = std::make_shared<Position_Model>();
        result = Position_Decode( "" , p_position , marbenData->position);
        if (result)
        {
            pData->position = (*p_position);
        }
    }

    pData->speed = marbenData->speed;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->speed = %d.", __FUNCTION__, pData->speed);
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_TrackPoint__direction))
    {
        pData->direction_presence = true;
        pData->direction = marbenData->direction;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->direction = %d.", __FUNCTION__, pData->direction);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_isSVT))
    {
        pData->isSVT_presence = true;
        pData->isSVT = marbenData->isSVT;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->isSVT = %d.", __FUNCTION__, pData->isSVT);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_TrackPoint__odometer))
    {
        pData->odometer_presence = true;
        pData->odometer = marbenData->odometer;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->odometer = %d.", __FUNCTION__, pData->odometer);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_travelDistanceSinceLastWaypoint))
    {
        pData->travelDistanceSinceLastWaypoint_presence = true;
        pData->travelDistanceSinceLastWaypoint = marbenData->travelDistanceSinceLastWaypoint;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->travelDistanceSinceLastWaypoint = %d.", __FUNCTION__, pData->travelDistanceSinceLastWaypoint);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_fuelConsumptionSinceLastWaypoint))
    {
        pData->fuelConsumptionSinceLastWaypoint_presence = true;
        pData->fuelConsumptionSinceLastWaypoint = marbenData->fuelConsumptionSinceLastWaypoint;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->fuelConsumptionSinceLastWaypoint = %d.", __FUNCTION__, pData->fuelConsumptionSinceLastWaypoint);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_electricConsumptionSinceLastSample))
    {
        pData->electricConsumptionSinceLastSample_presence = true;
        pData->electricConsumptionSinceLastSample = marbenData->electricConsumptionSinceLastSample;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->electricConsumptionSinceLastSample = %d.", __FUNCTION__, pData->electricConsumptionSinceLastSample);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_electricRegenerationSinceLastSample))
    {
        pData->electricRegenerationSinceLastSample_presence = true;
        pData->electricRegenerationSinceLastSample = marbenData->electricRegenerationSinceLastSample;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->electricRegenerationSinceLastSample = %d.", __FUNCTION__, pData->electricRegenerationSinceLastSample);
    }

    return true;
}

bool VdsMarbenAdaptGen::PointOfInterest_Encode(const PointOfInterest_Model &pData, asn_wrapper::PointOfInterest* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::PointOfInterest* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::PointOfInterest*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("name", (int64_t)pData.name.size(), (int64_t)0, (int64_t)100))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.name = %s.", __FUNCTION__, pData.name.c_str());
        marbenData->name.copyOctetString(pData.name.length(), (asnbyte*)(unsigned char*)(pData.name.c_str()));
    }
    if (pData.position_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_PointOfInterest__position);
        if (marbenData->position == nullptr )
        {
            marbenData->position = new asn_wrapper::Position();
        }
        Position_Encode(pData.position, marbenData->position);
    }
    if (pData.type_presence)
    {
        if (verifyScope("type", (int64_t)pData.type.size(), (int64_t)0, (int64_t)255))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_type);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.type = %s.", __FUNCTION__, pData.type.c_str());
            marbenData->type.copyOctetString(pData.type.length(), (asnbyte*)(unsigned char*)(pData.type.c_str()));
        }
    }
    if (pData.contactInfo_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_contactInfo);
        if (marbenData->contactInfo == nullptr )
        {
            marbenData->contactInfo = new asn_wrapper::ContactInfo();
        }
        ContactInfo_Encode(pData.contactInfo, marbenData->contactInfo);
    }
    if (pData.url_presence)
    {
        if (verifyScope("url", (int64_t)pData.url.size(), (int64_t)0, (int64_t)255))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_url);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.url = %s.", __FUNCTION__, pData.url.c_str());
            marbenData->url.copyOctetString(pData.url.length(), (asnbyte*)(unsigned char*)(pData.url.c_str()));
        }
    }
    if (pData.attributes_presence)
    {
        if (verifyScope("attributes", (int64_t)pData.attributes.size(), (int64_t)0, (int64_t)15))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_attributes);
            
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.attributes.size() = %d.", __FUNCTION__, pData.attributes.size());
            for (auto p_attribute = pData.attributes.begin(); p_attribute != pData.attributes.end();) 
            {
                asn_wrapper::asncattributess *attribute = new asn_wrapper::asncattributess();
                marbenData->attributes.addElement(attribute);

                if (verifyScope("key", (int64_t)p_attribute->key.size(), (int64_t)0, (int64_t)250))
                {
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_attribute->key = %s.", __FUNCTION__, p_attribute->key.c_str());
                    attribute->key.copyOctetString(p_attribute->key.length(), (asnbyte*)(unsigned char*)(p_attribute->key.c_str()));
                }
                if (p_attribute->intVal_presence)
                {
                    attribute->optional.setPresence(asn_wrapper::asn_intVal);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_attribute->intVal = %d.", __FUNCTION__, p_attribute->intVal);
                    attribute->intVal = p_attribute->intVal;
                }
                if (p_attribute->stringVal_presence)
                {
                    if (verifyScope("stringVal", (int64_t)p_attribute->stringVal.size(), (int64_t)0, (int64_t)65535))
                    {
                        attribute->optional.setPresence(asn_wrapper::asn_ServiceParameter__stringVal);
                        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_attribute->stringVal = %s.", __FUNCTION__, p_attribute->stringVal.c_str());
                        attribute->stringVal.copyOctetString(p_attribute->stringVal.length(), (asnbyte*)(unsigned char*)(p_attribute->stringVal.c_str()));
                    }
                }
                if (p_attribute->boolVal_presence)
                {
                    attribute->optional.setPresence(asn_wrapper::asn_ServiceParameter__boolVal);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_attribute->boolVal = %d.", __FUNCTION__, p_attribute->boolVal);
                    attribute->boolVal = p_attribute->boolVal;
                }
                if (p_attribute->timestampVal_presence)
                {
                    attribute->optional.setPresence(asn_wrapper::asn_ServiceParameter__timestampVal);
                    if (attribute->timestampVal == nullptr )
                    {
                        attribute->timestampVal = new asn_wrapper::TimeStamp();
                    }
                    TimeStamp_Encode(p_attribute->timestampVal, attribute->timestampVal);
                }
                if (p_attribute->dataVal_presence)
                {
                    if (verifyScope("dataVal", (int64_t)p_attribute->dataVal.size(), (int64_t)1, (int64_t)65535))
                    {
                        attribute->optional.setPresence(asn_wrapper::asn_ServiceParameter__dataVal);
                        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_attribute->dataVal = %s.", __FUNCTION__, p_attribute->dataVal.c_str());
                        int dataVal_length = 0;
                        unsigned char* dataVal_ptr = new unsigned char[p_attribute->dataVal.length()];
                        StringToOctet(p_attribute->dataVal,dataVal_ptr,dataVal_length);
                        attribute->dataVal.copyOctetString(dataVal_length,(asnbytep)dataVal_ptr);
                        delete[] dataVal_ptr;
                    }
                }
            
                ++p_attribute;
            }
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->attributes.getCount() = %d.", __FUNCTION__, marbenData->attributes.getCount());
            
        }
    }

    return true;
}

bool VdsMarbenAdaptGen::PointOfInterest_Decode(const std::string &path, std::shared_ptr<PointOfInterest_Model> &pData, asn_wrapper::PointOfInterest* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::PointOfInterest* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::PointOfInterest*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->name = std::string((const char*)marbenData->name.value, marbenData->name.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->name = %s.", __FUNCTION__, pData->name.c_str());
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_PointOfInterest__position))
    {
        pData->position_presence = true;
        if (marbenData->position != nullptr )
        {
            std::shared_ptr<Position_Model> p_position = std::make_shared<Position_Model>();
            result = Position_Decode( "" , p_position , marbenData->position);
            if (result)
            {
                pData->position = (*p_position);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_type))
    {
        pData->type_presence = true;
        pData->type = std::string((const char*)marbenData->type.value, marbenData->type.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->type = %s.", __FUNCTION__, pData->type.c_str());
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_contactInfo))
    {
        pData->contactInfo_presence = true;
        if (marbenData->contactInfo != nullptr )
        {
            std::shared_ptr<ContactInfo_Model> p_contactInfo = std::make_shared<ContactInfo_Model>();
            result = ContactInfo_Decode( "" , p_contactInfo , marbenData->contactInfo);
            if (result)
            {
                pData->contactInfo = (*p_contactInfo);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_url))
    {
        pData->url_presence = true;
        pData->url = std::string((const char*)marbenData->url.value, marbenData->url.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->url = %s.", __FUNCTION__, pData->url.c_str());
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_attributes))
    {
        pData->attributes_presence = true;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->attributes.getCount() = %d.", __FUNCTION__, marbenData->attributes.getCount());
        unsigned int attributeCount = marbenData->attributes.getCount();
        asn_wrapper::asncattributess* attribute = (asn_wrapper::asncattributess*)(marbenData->attributes.getFirstElement());
        for (unsigned int i = 0; (i < attributeCount || attribute); i++) 
        {
            ServiceParameter_Model p_attribute;
            p_attribute.key = std::string((const char*)attribute->key.value, attribute->key.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_attribute.key = %s.", __FUNCTION__, p_attribute.key.c_str());
            if (asnTRUE == attribute->optional.getPresence(asn_wrapper::asn_intVal))
            {
                p_attribute.intVal_presence = true;
                p_attribute.intVal = attribute->intVal;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_attribute.intVal = %d.", __FUNCTION__, p_attribute.intVal);
            }
            if (asnTRUE == attribute->optional.getPresence(asn_wrapper::asn_ServiceParameter__stringVal))
            {
                p_attribute.stringVal_presence = true;
                p_attribute.stringVal = std::string((const char*)attribute->stringVal.value, attribute->stringVal.length);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_attribute.stringVal = %s.", __FUNCTION__, p_attribute.stringVal.c_str());
            }
            if (asnTRUE == attribute->optional.getPresence(asn_wrapper::asn_ServiceParameter__boolVal))
            {
                p_attribute.boolVal_presence = true;
                p_attribute.boolVal = attribute->boolVal;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_attribute.boolVal = %d.", __FUNCTION__, p_attribute.boolVal);
            }
            if (asnTRUE == attribute->optional.getPresence(asn_wrapper::asn_ServiceParameter__timestampVal))
            {
                p_attribute.timestampVal_presence = true;
                if (attribute->timestampVal != nullptr )
                {
                    std::shared_ptr<TimeStamp_Model> p_timestampVal = std::make_shared<TimeStamp_Model>();
                    result = TimeStamp_Decode( "" , p_timestampVal , attribute->timestampVal);
                    if (result)
                    {
                        p_attribute.timestampVal = (*p_timestampVal);
                    }
                }

            }
            if (asnTRUE == attribute->optional.getPresence(asn_wrapper::asn_ServiceParameter__dataVal))
            {
                p_attribute.dataVal_presence = true;
                asnbyte* dataVal_ptr;
                asnMAXUINT dataVal_length;
                attribute->dataVal.getOctetString(&dataVal_length,&dataVal_ptr);
                char* dataVal_array = new char[dataVal_length*3-1];
                OctetToString(dataVal_ptr,dataVal_array,dataVal_length);
                p_attribute.dataVal = dataVal_array;
                delete[] dataVal_array;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_attribute.dataVal = %s.", __FUNCTION__, p_attribute.dataVal.c_str());
            }
            pData->attributes.push_back(p_attribute);
            attribute = (asn_wrapper::asncattributess*)(attribute->getNextElement());
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->attributes.size() = %d.", __FUNCTION__, pData->attributes.size());
        
    }

    return true;
}

bool VdsMarbenAdaptGen::ContactInfo_Encode(const ContactInfo_Model &pData, asn_wrapper::ContactInfo* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::ContactInfo* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::ContactInfo*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (pData.email_presence)
    {
        if (verifyScope("email", (int64_t)pData.email.size(), (int64_t)0, (int64_t)255))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_email);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.email = %s.", __FUNCTION__, pData.email.c_str());
            marbenData->email.copyOctetString(pData.email.length(), (asnbyte*)(unsigned char*)(pData.email.c_str()));
        }
    }
    if (pData.address_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_address);
        if (marbenData->address == nullptr )
        {
            marbenData->address = new asn_wrapper::PostAddress();
        }
        PostAddress_Encode(pData.address, marbenData->address);
    }
    if (pData.phone1_presence)
    {
        if (verifyScope("phone1", (int64_t)pData.phone1.size(), (int64_t)0, (int64_t)27))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_phone1);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.phone1 = %s.", __FUNCTION__, pData.phone1.c_str());
            marbenData->phone1.copyOctetString(pData.phone1.length(), (asnbyte*)(unsigned char*)(pData.phone1.c_str()));
        }
    }
    if (pData.phone2_presence)
    {
        if (verifyScope("phone2", (int64_t)pData.phone2.size(), (int64_t)0, (int64_t)27))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_phone2);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.phone2 = %s.", __FUNCTION__, pData.phone2.c_str());
            marbenData->phone2.copyOctetString(pData.phone2.length(), (asnbyte*)(unsigned char*)(pData.phone2.c_str()));
        }
    }

    return true;
}

bool VdsMarbenAdaptGen::ContactInfo_Decode(const std::string &path, std::shared_ptr<ContactInfo_Model> &pData, asn_wrapper::ContactInfo* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::ContactInfo* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::ContactInfo*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_email))
    {
        pData->email_presence = true;
        pData->email = std::string((const char*)marbenData->email.value, marbenData->email.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->email = %s.", __FUNCTION__, pData->email.c_str());
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_address))
    {
        pData->address_presence = true;
        if (marbenData->address != nullptr )
        {
            std::shared_ptr<PostAddress_Model> p_address = std::make_shared<PostAddress_Model>();
            result = PostAddress_Decode( "" , p_address , marbenData->address);
            if (result)
            {
                pData->address = (*p_address);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_phone1))
    {
        pData->phone1_presence = true;
        pData->phone1 = std::string((const char*)marbenData->phone1.value, marbenData->phone1.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->phone1 = %s.", __FUNCTION__, pData->phone1.c_str());
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_phone2))
    {
        pData->phone2_presence = true;
        pData->phone2 = std::string((const char*)marbenData->phone2.value, marbenData->phone2.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->phone2 = %s.", __FUNCTION__, pData->phone2.c_str());
    }

    return true;
}

bool VdsMarbenAdaptGen::PostAddress_Encode(const PostAddress_Model &pData, asn_wrapper::PostAddress* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::PostAddress* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::PostAddress*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (pData.street_presence)
    {
        if (verifyScope("street", (int64_t)pData.street.size(), (int64_t)0, (int64_t)255))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_street);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.street = %s.", __FUNCTION__, pData.street.c_str());
            marbenData->street.copyOctetString(pData.street.length(), (asnbyte*)(unsigned char*)(pData.street.c_str()));
        }
    }
    if (pData.houseNumber_presence)
    {
        if (verifyScope("houseNumber", (int64_t)pData.houseNumber.size(), (int64_t)0, (int64_t)63))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_houseNumber);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.houseNumber = %s.", __FUNCTION__, pData.houseNumber.c_str());
            marbenData->houseNumber.copyOctetString(pData.houseNumber.length(), (asnbyte*)(unsigned char*)(pData.houseNumber.c_str()));
        }
    }
    if (pData.city_presence)
    {
        if (verifyScope("city", (int64_t)pData.city.size(), (int64_t)0, (int64_t)255))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_city);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.city = %s.", __FUNCTION__, pData.city.c_str());
            marbenData->city.copyOctetString(pData.city.length(), (asnbyte*)(unsigned char*)(pData.city.c_str()));
        }
    }
    if (pData.region_presence)
    {
        if (verifyScope("region", (int64_t)pData.region.size(), (int64_t)0, (int64_t)255))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_region);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.region = %s.", __FUNCTION__, pData.region.c_str());
            marbenData->region.copyOctetString(pData.region.length(), (asnbyte*)(unsigned char*)(pData.region.c_str()));
        }
    }
    if (pData.postcode_presence)
    {
        if (verifyScope("postcode", (int64_t)pData.postcode.size(), (int64_t)0, (int64_t)255))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_postcode);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.postcode = %s.", __FUNCTION__, pData.postcode.c_str());
            marbenData->postcode.copyOctetString(pData.postcode.length(), (asnbyte*)(unsigned char*)(pData.postcode.c_str()));
        }
    }
    if (pData.country_presence)
    {
        if (verifyScope("country", (int64_t)pData.country.size(), (int64_t)0, (int64_t)255))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_country);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.country = %s.", __FUNCTION__, pData.country.c_str());
            marbenData->country.copyOctetString(pData.country.length(), (asnbyte*)(unsigned char*)(pData.country.c_str()));
        }
    }

    return true;
}

bool VdsMarbenAdaptGen::PostAddress_Decode(const std::string &path, std::shared_ptr<PostAddress_Model> &pData, asn_wrapper::PostAddress* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::PostAddress* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::PostAddress*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_street))
    {
        pData->street_presence = true;
        pData->street = std::string((const char*)marbenData->street.value, marbenData->street.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->street = %s.", __FUNCTION__, pData->street.c_str());
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_houseNumber))
    {
        pData->houseNumber_presence = true;
        pData->houseNumber = std::string((const char*)marbenData->houseNumber.value, marbenData->houseNumber.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->houseNumber = %s.", __FUNCTION__, pData->houseNumber.c_str());
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_city))
    {
        pData->city_presence = true;
        pData->city = std::string((const char*)marbenData->city.value, marbenData->city.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->city = %s.", __FUNCTION__, pData->city.c_str());
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_region))
    {
        pData->region_presence = true;
        pData->region = std::string((const char*)marbenData->region.value, marbenData->region.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->region = %s.", __FUNCTION__, pData->region.c_str());
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_postcode))
    {
        pData->postcode_presence = true;
        pData->postcode = std::string((const char*)marbenData->postcode.value, marbenData->postcode.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->postcode = %s.", __FUNCTION__, pData->postcode.c_str());
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_country))
    {
        pData->country_presence = true;
        pData->country = std::string((const char*)marbenData->country.value, marbenData->country.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->country = %s.", __FUNCTION__, pData->country.c_str());
    }

    return true;
}

bool VdsMarbenAdaptGen::Notification_Encode(const Notification_Model &pData, asn_wrapper::Notification* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::Notification* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::Notification*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.reason = %d.", __FUNCTION__, pData.reason);
    marbenData->reason = (int32_t)pData.reason;
    if (marbenData->time == nullptr )
    {
        marbenData->time = new asn_wrapper::TimeStamp();
    }
    TimeStamp_Encode(pData.time, marbenData->time);
    if (pData.code_presence)
    {
        if (verifyPrintableString("code", pData.code))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_Notification__code);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.code = %s.", __FUNCTION__, pData.code.c_str());
            marbenData->code.copyOctetString(pData.code.length(), (asnbyte*)(unsigned char*)(pData.code.c_str()));
        }
    }
    if (pData.parameters_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_parameters);
        
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.parameters.size() = %d.", __FUNCTION__, pData.parameters.size());
        for (auto p_parameter = pData.parameters.begin(); p_parameter != pData.parameters.end();) 
        {
            asn_wrapper::asncNotification__parameterss *parameter = new asn_wrapper::asncNotification__parameterss();
            marbenData->parameters.addElement(parameter);

            if (verifyScope("key", (int64_t)p_parameter->key.size(), (int64_t)0, (int64_t)250))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_parameter->key = %s.", __FUNCTION__, p_parameter->key.c_str());
                parameter->key.copyOctetString(p_parameter->key.length(), (asnbyte*)(unsigned char*)(p_parameter->key.c_str()));
            }
            if (p_parameter->intVal_presence)
            {
                parameter->optional.setPresence(asn_wrapper::asn_intVal);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_parameter->intVal = %d.", __FUNCTION__, p_parameter->intVal);
                parameter->intVal = p_parameter->intVal;
            }
            if (p_parameter->stringVal_presence)
            {
                if (verifyScope("stringVal", (int64_t)p_parameter->stringVal.size(), (int64_t)0, (int64_t)65535))
                {
                    parameter->optional.setPresence(asn_wrapper::asn_ServiceParameter__stringVal);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_parameter->stringVal = %s.", __FUNCTION__, p_parameter->stringVal.c_str());
                    parameter->stringVal.copyOctetString(p_parameter->stringVal.length(), (asnbyte*)(unsigned char*)(p_parameter->stringVal.c_str()));
                }
            }
            if (p_parameter->boolVal_presence)
            {
                parameter->optional.setPresence(asn_wrapper::asn_ServiceParameter__boolVal);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_parameter->boolVal = %d.", __FUNCTION__, p_parameter->boolVal);
                parameter->boolVal = p_parameter->boolVal;
            }
            if (p_parameter->timestampVal_presence)
            {
                parameter->optional.setPresence(asn_wrapper::asn_ServiceParameter__timestampVal);
                if (parameter->timestampVal == nullptr )
                {
                    parameter->timestampVal = new asn_wrapper::TimeStamp();
                }
                TimeStamp_Encode(p_parameter->timestampVal, parameter->timestampVal);
            }
            if (p_parameter->dataVal_presence)
            {
                if (verifyScope("dataVal", (int64_t)p_parameter->dataVal.size(), (int64_t)1, (int64_t)65535))
                {
                    parameter->optional.setPresence(asn_wrapper::asn_ServiceParameter__dataVal);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_parameter->dataVal = %s.", __FUNCTION__, p_parameter->dataVal.c_str());
                    int dataVal_length = 0;
                    unsigned char* dataVal_ptr = new unsigned char[p_parameter->dataVal.length()];
                    StringToOctet(p_parameter->dataVal,dataVal_ptr,dataVal_length);
                    parameter->dataVal.copyOctetString(dataVal_length,(asnbytep)dataVal_ptr);
                    delete[] dataVal_ptr;
                }
            }
        
            ++p_parameter;
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->parameters.getCount() = %d.", __FUNCTION__, marbenData->parameters.getCount());
        
    }

    return true;
}

bool VdsMarbenAdaptGen::Notification_Decode(const std::string &path, std::shared_ptr<Notification_Model> &pData, asn_wrapper::Notification* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::Notification* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::Notification*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->reason = (Vds_NotificationReason)marbenData->reason;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->reason = %d.", __FUNCTION__, pData->reason);
    if (marbenData->time != nullptr )
    {
        std::shared_ptr<TimeStamp_Model> p_time = std::make_shared<TimeStamp_Model>();
        result = TimeStamp_Decode( "" , p_time , marbenData->time);
        if (result)
        {
            pData->time = (*p_time);
        }
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_Notification__code))
    {
        pData->code_presence = true;
        pData->code = std::string((const char*)marbenData->code.value, marbenData->code.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->code = %s.", __FUNCTION__, pData->code.c_str());
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_parameters))
    {
        pData->parameters_presence = true;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->parameters.getCount() = %d.", __FUNCTION__, marbenData->parameters.getCount());
        unsigned int parameterCount = marbenData->parameters.getCount();
        asn_wrapper::asncNotification__parameterss* parameter = (asn_wrapper::asncNotification__parameterss*)(marbenData->parameters.getFirstElement());
        for (unsigned int i = 0; (i < parameterCount || parameter); i++) 
        {
            ServiceParameter_Model p_parameter;
            p_parameter.key = std::string((const char*)parameter->key.value, parameter->key.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_parameter.key = %s.", __FUNCTION__, p_parameter.key.c_str());
            if (asnTRUE == parameter->optional.getPresence(asn_wrapper::asn_intVal))
            {
                p_parameter.intVal_presence = true;
                p_parameter.intVal = parameter->intVal;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_parameter.intVal = %d.", __FUNCTION__, p_parameter.intVal);
            }
            if (asnTRUE == parameter->optional.getPresence(asn_wrapper::asn_ServiceParameter__stringVal))
            {
                p_parameter.stringVal_presence = true;
                p_parameter.stringVal = std::string((const char*)parameter->stringVal.value, parameter->stringVal.length);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_parameter.stringVal = %s.", __FUNCTION__, p_parameter.stringVal.c_str());
            }
            if (asnTRUE == parameter->optional.getPresence(asn_wrapper::asn_ServiceParameter__boolVal))
            {
                p_parameter.boolVal_presence = true;
                p_parameter.boolVal = parameter->boolVal;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_parameter.boolVal = %d.", __FUNCTION__, p_parameter.boolVal);
            }
            if (asnTRUE == parameter->optional.getPresence(asn_wrapper::asn_ServiceParameter__timestampVal))
            {
                p_parameter.timestampVal_presence = true;
                if (parameter->timestampVal != nullptr )
                {
                    std::shared_ptr<TimeStamp_Model> p_timestampVal = std::make_shared<TimeStamp_Model>();
                    result = TimeStamp_Decode( "" , p_timestampVal , parameter->timestampVal);
                    if (result)
                    {
                        p_parameter.timestampVal = (*p_timestampVal);
                    }
                }

            }
            if (asnTRUE == parameter->optional.getPresence(asn_wrapper::asn_ServiceParameter__dataVal))
            {
                p_parameter.dataVal_presence = true;
                asnbyte* dataVal_ptr;
                asnMAXUINT dataVal_length;
                parameter->dataVal.getOctetString(&dataVal_length,&dataVal_ptr);
                char* dataVal_array = new char[dataVal_length*3-1];
                OctetToString(dataVal_ptr,dataVal_array,dataVal_length);
                p_parameter.dataVal = dataVal_array;
                delete[] dataVal_array;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_parameter.dataVal = %s.", __FUNCTION__, p_parameter.dataVal.c_str());
            }
            pData->parameters.push_back(p_parameter);
            parameter = (asn_wrapper::asncNotification__parameterss*)(parameter->getNextElement());
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->parameters.size() = %d.", __FUNCTION__, pData->parameters.size());
        
    }

    return true;
}

bool VdsMarbenAdaptGen::EventRule_Encode(const EventRule_Model &pData, asn_wrapper::EventRule* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::EventRule* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::EventRule*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.ruleId = %d.", __FUNCTION__, pData.ruleId);
    marbenData->ruleId = pData.ruleId;
    if (pData.startTime_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_startTime);
        if (marbenData->startTime == nullptr )
        {
            marbenData->startTime = new asn_wrapper::TimeStamp();
        }
        TimeStamp_Encode(pData.startTime, marbenData->startTime);
    }
    if (pData.endTime_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_EventRule__endTime);
        if (marbenData->endTime == nullptr )
        {
            marbenData->endTime = new asn_wrapper::TimeStamp();
        }
        TimeStamp_Encode(pData.endTime, marbenData->endTime);
    }
    if (pData.conditions_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_conditions);
        
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.conditions.size() = %d.", __FUNCTION__, pData.conditions.size());
        for (auto p_condition = pData.conditions.begin(); p_condition != pData.conditions.end();) 
        {
            asn_wrapper::asncconditionss *condition = new asn_wrapper::asncconditionss();
            marbenData->conditions.addElement(condition);

            if (verifyScope("condition", (int64_t)p_condition->condition.size(), (int64_t)1, (int64_t)1000))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_condition->condition = %s.", __FUNCTION__, p_condition->condition.c_str());
                condition->condition.copyOctetString(p_condition->condition.length(), (asnbyte*)(unsigned char*)(p_condition->condition.c_str()));
            }
        
            ++p_condition;
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->conditions.getCount() = %d.", __FUNCTION__, marbenData->conditions.getCount());
        
    }
    if (pData.interval_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_EventRule__interval);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.interval = %d.", __FUNCTION__, pData.interval);
        marbenData->interval = pData.interval;
    }
    if (pData.action_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_EventRule__action);
        if (marbenData->action == nullptr )
        {
            marbenData->action = new asn_wrapper::EventAction();
        }
        EventAction_Encode(pData.action, marbenData->action);
    }

    return true;
}

bool VdsMarbenAdaptGen::EventRule_Decode(const std::string &path, std::shared_ptr<EventRule_Model> &pData, asn_wrapper::EventRule* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::EventRule* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::EventRule*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->ruleId = marbenData->ruleId;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->ruleId = %d.", __FUNCTION__, pData->ruleId);
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_startTime))
    {
        pData->startTime_presence = true;
        if (marbenData->startTime != nullptr )
        {
            std::shared_ptr<TimeStamp_Model> p_startTime = std::make_shared<TimeStamp_Model>();
            result = TimeStamp_Decode( "" , p_startTime , marbenData->startTime);
            if (result)
            {
                pData->startTime = (*p_startTime);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_EventRule__endTime))
    {
        pData->endTime_presence = true;
        if (marbenData->endTime != nullptr )
        {
            std::shared_ptr<TimeStamp_Model> p_endTime = std::make_shared<TimeStamp_Model>();
            result = TimeStamp_Decode( "" , p_endTime , marbenData->endTime);
            if (result)
            {
                pData->endTime = (*p_endTime);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_conditions))
    {
        pData->conditions_presence = true;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->conditions.getCount() = %d.", __FUNCTION__, marbenData->conditions.getCount());
        unsigned int conditionCount = marbenData->conditions.getCount();
        asn_wrapper::asncconditionss* condition = (asn_wrapper::asncconditionss*)(marbenData->conditions.getFirstElement());
        for (unsigned int i = 0; (i < conditionCount || condition); i++) 
        {
            RuleCondition_Model p_condition;
            p_condition.condition = std::string((const char*)condition->condition.value, condition->condition.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_condition.condition = %s.", __FUNCTION__, p_condition.condition.c_str());
            pData->conditions.push_back(p_condition);
            condition = (asn_wrapper::asncconditionss*)(condition->getNextElement());
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->conditions.size() = %d.", __FUNCTION__, pData->conditions.size());
        
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_EventRule__interval))
    {
        pData->interval_presence = true;
        pData->interval = marbenData->interval;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->interval = %d.", __FUNCTION__, pData->interval);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_EventRule__action))
    {
        pData->action_presence = true;
        if (marbenData->action != nullptr )
        {
            std::shared_ptr<EventAction_Model> p_action = std::make_shared<EventAction_Model>();
            result = EventAction_Decode( "" , p_action , marbenData->action);
            if (result)
            {
                pData->action = (*p_action);
            }
        }

    }

    return true;
}

bool VdsMarbenAdaptGen::RuleCondition_Encode(const RuleCondition_Model &pData, asn_wrapper::RuleCondition* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::RuleCondition* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::RuleCondition*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("condition", (int64_t)pData.condition.size(), (int64_t)1, (int64_t)1000))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.condition = %s.", __FUNCTION__, pData.condition.c_str());
        marbenData->condition.copyOctetString(pData.condition.length(), (asnbyte*)(unsigned char*)(pData.condition.c_str()));
    }

    return true;
}

bool VdsMarbenAdaptGen::RuleCondition_Decode(const std::string &path, std::shared_ptr<RuleCondition_Model> &pData, asn_wrapper::RuleCondition* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::RuleCondition* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::RuleCondition*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->condition = std::string((const char*)marbenData->condition.value, marbenData->condition.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->condition = %s.", __FUNCTION__, pData->condition.c_str());

    return true;
}

bool VdsMarbenAdaptGen::EventAction_Encode(const EventAction_Model &pData, asn_wrapper::EventAction* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::EventAction* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::EventAction*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (pData.triggerTimes_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_triggerTimes);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.triggerTimes = %d.", __FUNCTION__, pData.triggerTimes);
        marbenData->triggerTimes = pData.triggerTimes;
    }
    if (pData.notifyInterval_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_notifyInterval);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.notifyInterval = %d.", __FUNCTION__, pData.notifyInterval);
        marbenData->notifyInterval = pData.notifyInterval;
    }

    return true;
}

bool VdsMarbenAdaptGen::EventAction_Decode(const std::string &path, std::shared_ptr<EventAction_Model> &pData, asn_wrapper::EventAction* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::EventAction* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::EventAction*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_triggerTimes))
    {
        pData->triggerTimes_presence = true;
        pData->triggerTimes = marbenData->triggerTimes;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->triggerTimes = %d.", __FUNCTION__, pData->triggerTimes);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_notifyInterval))
    {
        pData->notifyInterval_presence = true;
        pData->notifyInterval = marbenData->notifyInterval;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->notifyInterval = %d.", __FUNCTION__, pData->notifyInterval);
    }

    return true;
}

bool VdsMarbenAdaptGen::TimerData_Encode(const TimerData_Model &pData, asn_wrapper::TimerData* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::TimerData* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::TimerData*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("timerId", (int64_t)pData.timerId, (int64_t)0, (int64_t)1024))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.timerId = %d.", __FUNCTION__, pData.timerId);
        marbenData->timerId = pData.timerId;
    }
    if (pData.timers_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_timers);
        
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.timers.size() = %d.", __FUNCTION__, pData.timers.size());
        for (auto p_timer = pData.timers.begin(); p_timer != pData.timers.end();) 
        {
            asn_wrapper::asnctimerss *timer = new asn_wrapper::asnctimerss();
            marbenData->timers.addElement(timer);

            if (verifyScope("timerActivation", (int64_t)p_timer->timerActivation, (int64_t)0, (int64_t)1))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_timer->timerActivation = %d.", __FUNCTION__, p_timer->timerActivation);
                timer->timerActivation = p_timer->timerActivation;
            }
            if (p_timer->duration_presence)
            {
                if (verifyScope("duration", (int64_t)p_timer->duration, (int64_t)0, (int64_t)3153600))
                {
                    timer->optional.setPresence(asn_wrapper::asn_TimerInfo__duration);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_timer->duration = %d.", __FUNCTION__, p_timer->duration);
                    timer->duration = p_timer->duration;
                }
            }
            if (p_timer->dayofWeek_presence)
            {
                if (verifyScope("dayofWeek", (int64_t)p_timer->dayofWeek.size(), (int64_t)1, (int64_t)65535))
                {
                    timer->optional.setPresence(asn_wrapper::asn_dayofWeek);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_timer->dayofWeek = %s.", __FUNCTION__, p_timer->dayofWeek.c_str());
                    int dayofWeek_length = 0;
                    unsigned char* dayofWeek_ptr = new unsigned char[p_timer->dayofWeek.length()];
                    StringToOctet(p_timer->dayofWeek,dayofWeek_ptr,dayofWeek_length);
                    timer->dayofWeek.copyOctetString(dayofWeek_length,(asnbytep)dayofWeek_ptr);
                    delete[] dayofWeek_ptr;
                }
            }
            if (p_timer->startTimeofDay_presence)
            {
                if (verifyScope("startTimeofDay", (int64_t)p_timer->startTimeofDay.size(), (int64_t)1, (int64_t)65535))
                {
                    timer->optional.setPresence(asn_wrapper::asn_TimerInfo__startTimeofDay);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_timer->startTimeofDay = %s.", __FUNCTION__, p_timer->startTimeofDay.c_str());
                    int startTimeofDay_length = 0;
                    unsigned char* startTimeofDay_ptr = new unsigned char[p_timer->startTimeofDay.length()];
                    StringToOctet(p_timer->startTimeofDay,startTimeofDay_ptr,startTimeofDay_length);
                    timer->startTimeofDay.copyOctetString(startTimeofDay_length,(asnbytep)startTimeofDay_ptr);
                    delete[] startTimeofDay_ptr;
                }
            }
            if (p_timer->endtimeofDay_presence)
            {
                if (verifyScope("endtimeofDay", (int64_t)p_timer->endtimeofDay.size(), (int64_t)1, (int64_t)65535))
                {
                    timer->optional.setPresence(asn_wrapper::asn_endtimeofDay);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_timer->endtimeofDay = %s.", __FUNCTION__, p_timer->endtimeofDay.c_str());
                    int endtimeofDay_length = 0;
                    unsigned char* endtimeofDay_ptr = new unsigned char[p_timer->endtimeofDay.length()];
                    StringToOctet(p_timer->endtimeofDay,endtimeofDay_ptr,endtimeofDay_length);
                    timer->endtimeofDay.copyOctetString(endtimeofDay_length,(asnbytep)endtimeofDay_ptr);
                    delete[] endtimeofDay_ptr;
                }
            }
        
            ++p_timer;
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->timers.getCount() = %d.", __FUNCTION__, marbenData->timers.getCount());
        
    }

    return true;
}

bool VdsMarbenAdaptGen::TimerData_Decode(const std::string &path, std::shared_ptr<TimerData_Model> &pData, asn_wrapper::TimerData* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::TimerData* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::TimerData*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->timerId = marbenData->timerId;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->timerId = %d.", __FUNCTION__, pData->timerId);
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_timers))
    {
        pData->timers_presence = true;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->timers.getCount() = %d.", __FUNCTION__, marbenData->timers.getCount());
        unsigned int timerCount = marbenData->timers.getCount();
        asn_wrapper::asnctimerss* timer = (asn_wrapper::asnctimerss*)(marbenData->timers.getFirstElement());
        for (unsigned int i = 0; (i < timerCount || timer); i++) 
        {
            TimerInfo_Model p_timer;
            p_timer.timerActivation = timer->timerActivation;
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_timer.timerActivation = %d.", __FUNCTION__, p_timer.timerActivation);
            if (asnTRUE == timer->optional.getPresence(asn_wrapper::asn_TimerInfo__duration))
            {
                p_timer.duration_presence = true;
                p_timer.duration = timer->duration;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_timer.duration = %d.", __FUNCTION__, p_timer.duration);
            }
            if (asnTRUE == timer->optional.getPresence(asn_wrapper::asn_dayofWeek))
            {
                p_timer.dayofWeek_presence = true;
                asnbyte* dayofWeek_ptr;
                asnMAXUINT dayofWeek_length;
                timer->dayofWeek.getOctetString(&dayofWeek_length,&dayofWeek_ptr);
                char* dayofWeek_array = new char[dayofWeek_length*3-1];
                OctetToString(dayofWeek_ptr,dayofWeek_array,dayofWeek_length);
                p_timer.dayofWeek = dayofWeek_array;
                delete[] dayofWeek_array;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_timer.dayofWeek = %s.", __FUNCTION__, p_timer.dayofWeek.c_str());
            }
            if (asnTRUE == timer->optional.getPresence(asn_wrapper::asn_TimerInfo__startTimeofDay))
            {
                p_timer.startTimeofDay_presence = true;
                asnbyte* startTimeofDay_ptr;
                asnMAXUINT startTimeofDay_length;
                timer->startTimeofDay.getOctetString(&startTimeofDay_length,&startTimeofDay_ptr);
                char* startTimeofDay_array = new char[startTimeofDay_length*3-1];
                OctetToString(startTimeofDay_ptr,startTimeofDay_array,startTimeofDay_length);
                p_timer.startTimeofDay = startTimeofDay_array;
                delete[] startTimeofDay_array;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_timer.startTimeofDay = %s.", __FUNCTION__, p_timer.startTimeofDay.c_str());
            }
            if (asnTRUE == timer->optional.getPresence(asn_wrapper::asn_endtimeofDay))
            {
                p_timer.endtimeofDay_presence = true;
                asnbyte* endtimeofDay_ptr;
                asnMAXUINT endtimeofDay_length;
                timer->endtimeofDay.getOctetString(&endtimeofDay_length,&endtimeofDay_ptr);
                char* endtimeofDay_array = new char[endtimeofDay_length*3-1];
                OctetToString(endtimeofDay_ptr,endtimeofDay_array,endtimeofDay_length);
                p_timer.endtimeofDay = endtimeofDay_array;
                delete[] endtimeofDay_array;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_timer.endtimeofDay = %s.", __FUNCTION__, p_timer.endtimeofDay.c_str());
            }
            pData->timers.push_back(p_timer);
            timer = (asn_wrapper::asnctimerss*)(timer->getNextElement());
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->timers.size() = %d.", __FUNCTION__, pData->timers.size());
        
    }

    return true;
}

bool VdsMarbenAdaptGen::TimerInfo_Encode(const TimerInfo_Model &pData, asn_wrapper::TimerInfo* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::TimerInfo* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::TimerInfo*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("timerActivation", (int64_t)pData.timerActivation, (int64_t)0, (int64_t)1))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.timerActivation = %d.", __FUNCTION__, pData.timerActivation);
        marbenData->timerActivation = pData.timerActivation;
    }
    if (pData.duration_presence)
    {
        if (verifyScope("duration", (int64_t)pData.duration, (int64_t)0, (int64_t)3153600))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_TimerInfo__duration);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.duration = %d.", __FUNCTION__, pData.duration);
            marbenData->duration = pData.duration;
        }
    }
    if (pData.dayofWeek_presence)
    {
        if (verifyScope("dayofWeek", (int64_t)pData.dayofWeek.size(), (int64_t)1, (int64_t)65535))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_dayofWeek);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.dayofWeek = %s.", __FUNCTION__, pData.dayofWeek.c_str());
            int dayofWeek_length = 0;
            unsigned char* dayofWeek_ptr = new unsigned char[pData.dayofWeek.length()];
            StringToOctet(pData.dayofWeek,dayofWeek_ptr,dayofWeek_length);
            marbenData->dayofWeek.copyOctetString(dayofWeek_length,(asnbytep)dayofWeek_ptr);
            delete[] dayofWeek_ptr;
        }
    }
    if (pData.startTimeofDay_presence)
    {
        if (verifyScope("startTimeofDay", (int64_t)pData.startTimeofDay.size(), (int64_t)1, (int64_t)65535))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_TimerInfo__startTimeofDay);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.startTimeofDay = %s.", __FUNCTION__, pData.startTimeofDay.c_str());
            int startTimeofDay_length = 0;
            unsigned char* startTimeofDay_ptr = new unsigned char[pData.startTimeofDay.length()];
            StringToOctet(pData.startTimeofDay,startTimeofDay_ptr,startTimeofDay_length);
            marbenData->startTimeofDay.copyOctetString(startTimeofDay_length,(asnbytep)startTimeofDay_ptr);
            delete[] startTimeofDay_ptr;
        }
    }
    if (pData.endtimeofDay_presence)
    {
        if (verifyScope("endtimeofDay", (int64_t)pData.endtimeofDay.size(), (int64_t)1, (int64_t)65535))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_endtimeofDay);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.endtimeofDay = %s.", __FUNCTION__, pData.endtimeofDay.c_str());
            int endtimeofDay_length = 0;
            unsigned char* endtimeofDay_ptr = new unsigned char[pData.endtimeofDay.length()];
            StringToOctet(pData.endtimeofDay,endtimeofDay_ptr,endtimeofDay_length);
            marbenData->endtimeofDay.copyOctetString(endtimeofDay_length,(asnbytep)endtimeofDay_ptr);
            delete[] endtimeofDay_ptr;
        }
    }

    return true;
}

bool VdsMarbenAdaptGen::TimerInfo_Decode(const std::string &path, std::shared_ptr<TimerInfo_Model> &pData, asn_wrapper::TimerInfo* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::TimerInfo* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::TimerInfo*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->timerActivation = marbenData->timerActivation;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->timerActivation = %d.", __FUNCTION__, pData->timerActivation);
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_TimerInfo__duration))
    {
        pData->duration_presence = true;
        pData->duration = marbenData->duration;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->duration = %d.", __FUNCTION__, pData->duration);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_dayofWeek))
    {
        pData->dayofWeek_presence = true;
        asnbyte* dayofWeek_ptr;
        asnMAXUINT dayofWeek_length;
        marbenData->dayofWeek.getOctetString(&dayofWeek_length,&dayofWeek_ptr);
        char* dayofWeek_array = new char[dayofWeek_length*3-1];
        OctetToString(dayofWeek_ptr,dayofWeek_array,dayofWeek_length);
        pData->dayofWeek = dayofWeek_array;
        delete[] dayofWeek_array;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->dayofWeek = %s.", __FUNCTION__, pData->dayofWeek.c_str());
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_TimerInfo__startTimeofDay))
    {
        pData->startTimeofDay_presence = true;
        asnbyte* startTimeofDay_ptr;
        asnMAXUINT startTimeofDay_length;
        marbenData->startTimeofDay.getOctetString(&startTimeofDay_length,&startTimeofDay_ptr);
        char* startTimeofDay_array = new char[startTimeofDay_length*3-1];
        OctetToString(startTimeofDay_ptr,startTimeofDay_array,startTimeofDay_length);
        pData->startTimeofDay = startTimeofDay_array;
        delete[] startTimeofDay_array;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->startTimeofDay = %s.", __FUNCTION__, pData->startTimeofDay.c_str());
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_endtimeofDay))
    {
        pData->endtimeofDay_presence = true;
        asnbyte* endtimeofDay_ptr;
        asnMAXUINT endtimeofDay_length;
        marbenData->endtimeofDay.getOctetString(&endtimeofDay_length,&endtimeofDay_ptr);
        char* endtimeofDay_array = new char[endtimeofDay_length*3-1];
        OctetToString(endtimeofDay_ptr,endtimeofDay_array,endtimeofDay_length);
        pData->endtimeofDay = endtimeofDay_array;
        delete[] endtimeofDay_array;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->endtimeofDay = %s.", __FUNCTION__, pData->endtimeofDay.c_str());
    }

    return true;
}

bool VdsMarbenAdaptGen::VehicleStatus_Encode(const VehicleStatus_Model &pData, asn_wrapper::VehicleStatus* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::VehicleStatus* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::VehicleStatus*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (pData.basicVehicleStatus_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_basicVehicleStatus);
        if (marbenData->basicVehicleStatus == nullptr )
        {
            marbenData->basicVehicleStatus = new asn_wrapper::BasicVehicleStatus();
        }
        BasicVehicleStatus_Encode(pData.basicVehicleStatus, marbenData->basicVehicleStatus);
    }
    if (pData.lockStatus_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_lockStatus);
        if (marbenData->lockStatus == nullptr )
        {
            marbenData->lockStatus = new asn_wrapper::LockStatus();
        }
        LockStatus_Encode(pData.lockStatus, marbenData->lockStatus);
    }
    if (pData.maintenanceStatus_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_maintenanceStatus);
        if (marbenData->maintenanceStatus == nullptr )
        {
            marbenData->maintenanceStatus = new asn_wrapper::MaintenanceStatus();
        }
        MaintenanceStatus_Encode(pData.maintenanceStatus, marbenData->maintenanceStatus);
    }
    if (pData.runningStatus_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_runningStatus);
        if (marbenData->runningStatus == nullptr )
        {
            marbenData->runningStatus = new asn_wrapper::RunningStatus();
        }
        RunningStatus_Encode(pData.runningStatus, marbenData->runningStatus);
    }
    if (pData.climateStatus_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_climateStatus);
        if (marbenData->climateStatus == nullptr )
        {
            marbenData->climateStatus = new asn_wrapper::ClimateStatus();
        }
        ClimateStatus_Encode(pData.climateStatus, marbenData->climateStatus);
    }
    if (pData.electricStatus_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_electricStatus);
        if (marbenData->electricStatus == nullptr )
        {
            marbenData->electricStatus = new asn_wrapper::ElectricStatus();
        }
        ElectricStatus_Encode(pData.electricStatus, marbenData->electricStatus);
    }
    if (pData.pollutionStatus_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_pollutionStatus);
        if (marbenData->pollutionStatus == nullptr )
        {
            marbenData->pollutionStatus = new asn_wrapper::PollutionStatus();
        }
        PollutionStatus_Encode(pData.pollutionStatus, marbenData->pollutionStatus);
    }
    if (pData.temStatus_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_temStatus);
        if (marbenData->temStatus == nullptr )
        {
            marbenData->temStatus = new asn_wrapper::TEMStatus();
        }
        TEMStatus_Encode(pData.temStatus, marbenData->temStatus);
    }
    if (pData.carConfig_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_carConfig);
        if (marbenData->carConfig == nullptr )
        {
            marbenData->carConfig = new asn_wrapper::CarConfig();
        }
        CarConfig_Encode(pData.carConfig, marbenData->carConfig);
    }
    if (pData.additionalStatus_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_additionalStatus);
        if (marbenData->additionalStatus == nullptr )
        {
            marbenData->additionalStatus = new asn_wrapper::AdditionalStatus();
        }
        AdditionalStatus_Encode(pData.additionalStatus, marbenData->additionalStatus);
    }
    if (pData.msd_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_msd);
        if (marbenData->msd == nullptr )
        {
            marbenData->msd = new asn_wrapper::OEMMSD();
        }
        OEMMSD_Encode(pData.msd, marbenData->msd);
    }
    if (pData.diagnostics_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_VehicleStatus__diagnostics);
        
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.diagnostics.size() = %d.", __FUNCTION__, pData.diagnostics.size());
        for (auto p_diagnostic = pData.diagnostics.begin(); p_diagnostic != pData.diagnostics.end();) 
        {
            asn_wrapper::asncECUDiagnosticss *diagnostic = new asn_wrapper::asncECUDiagnosticss();
            marbenData->diagnostics.addElement(diagnostic);

            if (verifyScope("ecuID", (int64_t)p_diagnostic->ecuID.size(), (int64_t)1, (int64_t)100))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnostic->ecuID = %s.", __FUNCTION__, p_diagnostic->ecuID.c_str());
                diagnostic->ecuID.copyOctetString(p_diagnostic->ecuID.length(), (asnbyte*)(unsigned char*)(p_diagnostic->ecuID.c_str()));
            }
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnostic->diagnosticResult = %d.", __FUNCTION__, p_diagnostic->diagnosticResult);
            diagnostic->diagnosticResult = (int32_t)p_diagnostic->diagnosticResult;
            if (p_diagnostic->dtcs_presence)
            {
                diagnostic->optional.setPresence(asn_wrapper::asn_dtcs);
                
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnostic->dtcs.size() = %d.", __FUNCTION__, p_diagnostic->dtcs.size());
                for (auto p_dtc = p_diagnostic->dtcs.begin(); p_dtc != p_diagnostic->dtcs.end();) 
                {
                    asn_wrapper::asncdtcss *dtc = new asn_wrapper::asncdtcss();
                    diagnostic->dtcs.addElement(dtc);

                    if (verifyScope("dtc", (int64_t)p_dtc->dtc.size(), (int64_t)1, (int64_t)100))
                    {
                        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_dtc->dtc = %s.", __FUNCTION__, p_dtc->dtc.c_str());
                        dtc->dtc.copyOctetString(p_dtc->dtc.length(), (asnbyte*)(unsigned char*)(p_dtc->dtc.c_str()));
                    }
                    //TODO:status;
                    if (p_dtc->failureCount_presence)
                    {
                        if (verifyScope("failureCount", (int64_t)p_dtc->failureCount, (int64_t)0, (int64_t)255))
                        {
                            dtc->optional.setPresence(asn_wrapper::asn_failureCount);
                            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_dtc->failureCount = %d.", __FUNCTION__, p_dtc->failureCount);
                            dtc->failureCount = p_dtc->failureCount;
                        }
                    }
                    if (p_dtc->lastFail_presence)
                    {
                        dtc->optional.setPresence(asn_wrapper::asn_lastFail);
                        if (dtc->lastFail == nullptr )
                        {
                            dtc->lastFail = new asn_wrapper::TimeStamp();
                        }
                        TimeStamp_Encode(p_dtc->lastFail, dtc->lastFail);
                    }
                    if (p_dtc->firtFail_presence)
                    {
                        dtc->optional.setPresence(asn_wrapper::asn_firtFail);
                        if (dtc->firtFail == nullptr )
                        {
                            dtc->firtFail = new asn_wrapper::TimeStamp();
                        }
                        TimeStamp_Encode(p_dtc->firtFail, dtc->firtFail);
                    }
                    if (p_dtc->firstFailureOdometer_presence)
                    {
                        dtc->optional.setPresence(asn_wrapper::asn_firstFailureOdometer);
                        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_dtc->firstFailureOdometer = %d.", __FUNCTION__, p_dtc->firstFailureOdometer);
                        dtc->firstFailureOdometer = p_dtc->firstFailureOdometer;
                    }
                    if (p_dtc->firstFailureBatteryVoltage_presence)
                    {
                        dtc->optional.setPresence(asn_wrapper::asn_firstFailureBatteryVoltage);
                        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_dtc->firstFailureBatteryVoltage = %d.", __FUNCTION__, p_dtc->firstFailureBatteryVoltage);
                        dtc->firstFailureBatteryVoltage = p_dtc->firstFailureBatteryVoltage;
                    }
                    if (p_dtc->firstFailureVehicleSpeed_presence)
                    {
                        dtc->optional.setPresence(asn_wrapper::asn_firstFailureVehicleSpeed);
                        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_dtc->firstFailureVehicleSpeed = %d.", __FUNCTION__, p_dtc->firstFailureVehicleSpeed);
                        dtc->firstFailureVehicleSpeed = p_dtc->firstFailureVehicleSpeed;
                    }
                
                    ++p_dtc;
                }
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: diagnostic->dtcs.getCount() = %d.", __FUNCTION__, diagnostic->dtcs.getCount());
                
            }
            if (p_diagnostic->exceptionCode_presence)
            {
                diagnostic->optional.setPresence(asn_wrapper::asn_exceptionCode);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnostic->exceptionCode = %d.", __FUNCTION__, p_diagnostic->exceptionCode);
                diagnostic->exceptionCode = p_diagnostic->exceptionCode;
            }
        
            ++p_diagnostic;
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->diagnostics.getCount() = %d.", __FUNCTION__, marbenData->diagnostics.getCount());
        
    }
    if (pData.theftNotification_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_theftNotification);
        if (marbenData->theftNotification == nullptr )
        {
            marbenData->theftNotification = new asn_wrapper::TheftNotification();
        }
        TheftNotification_Encode(pData.theftNotification, marbenData->theftNotification);
    }
    if (pData.notification_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_notification);
        if (marbenData->notification == nullptr )
        {
            marbenData->notification = new asn_wrapper::Notification();
        }
        Notification_Encode(pData.notification, marbenData->notification);
    }

    return true;
}

bool VdsMarbenAdaptGen::VehicleStatus_Decode(const std::string &path, std::shared_ptr<VehicleStatus_Model> &pData, asn_wrapper::VehicleStatus* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::VehicleStatus* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::VehicleStatus*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_basicVehicleStatus))
    {
        pData->basicVehicleStatus_presence = true;
        if (marbenData->basicVehicleStatus != nullptr )
        {
            std::shared_ptr<BasicVehicleStatus_Model> p_basicVehicleStatus = std::make_shared<BasicVehicleStatus_Model>();
            result = BasicVehicleStatus_Decode( "" , p_basicVehicleStatus , marbenData->basicVehicleStatus);
            if (result)
            {
                pData->basicVehicleStatus = (*p_basicVehicleStatus);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_lockStatus))
    {
        pData->lockStatus_presence = true;
        if (marbenData->lockStatus != nullptr )
        {
            std::shared_ptr<LockStatus_Model> p_lockStatus = std::make_shared<LockStatus_Model>();
            result = LockStatus_Decode( "" , p_lockStatus , marbenData->lockStatus);
            if (result)
            {
                pData->lockStatus = (*p_lockStatus);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_maintenanceStatus))
    {
        pData->maintenanceStatus_presence = true;
        if (marbenData->maintenanceStatus != nullptr )
        {
            std::shared_ptr<MaintenanceStatus_Model> p_maintenanceStatus = std::make_shared<MaintenanceStatus_Model>();
            result = MaintenanceStatus_Decode( "" , p_maintenanceStatus , marbenData->maintenanceStatus);
            if (result)
            {
                pData->maintenanceStatus = (*p_maintenanceStatus);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_runningStatus))
    {
        pData->runningStatus_presence = true;
        if (marbenData->runningStatus != nullptr )
        {
            std::shared_ptr<RunningStatus_Model> p_runningStatus = std::make_shared<RunningStatus_Model>();
            result = RunningStatus_Decode( "" , p_runningStatus , marbenData->runningStatus);
            if (result)
            {
                pData->runningStatus = (*p_runningStatus);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_climateStatus))
    {
        pData->climateStatus_presence = true;
        if (marbenData->climateStatus != nullptr )
        {
            std::shared_ptr<ClimateStatus_Model> p_climateStatus = std::make_shared<ClimateStatus_Model>();
            result = ClimateStatus_Decode( "" , p_climateStatus , marbenData->climateStatus);
            if (result)
            {
                pData->climateStatus = (*p_climateStatus);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_electricStatus))
    {
        pData->electricStatus_presence = true;
        if (marbenData->electricStatus != nullptr )
        {
            std::shared_ptr<ElectricStatus_Model> p_electricStatus = std::make_shared<ElectricStatus_Model>();
            result = ElectricStatus_Decode( "" , p_electricStatus , marbenData->electricStatus);
            if (result)
            {
                pData->electricStatus = (*p_electricStatus);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_pollutionStatus))
    {
        pData->pollutionStatus_presence = true;
        if (marbenData->pollutionStatus != nullptr )
        {
            std::shared_ptr<PollutionStatus_Model> p_pollutionStatus = std::make_shared<PollutionStatus_Model>();
            result = PollutionStatus_Decode( "" , p_pollutionStatus , marbenData->pollutionStatus);
            if (result)
            {
                pData->pollutionStatus = (*p_pollutionStatus);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_temStatus))
    {
        pData->temStatus_presence = true;
        if (marbenData->temStatus != nullptr )
        {
            std::shared_ptr<TEMStatus_Model> p_temStatus = std::make_shared<TEMStatus_Model>();
            result = TEMStatus_Decode( "" , p_temStatus , marbenData->temStatus);
            if (result)
            {
                pData->temStatus = (*p_temStatus);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_carConfig))
    {
        pData->carConfig_presence = true;
        if (marbenData->carConfig != nullptr )
        {
            std::shared_ptr<CarConfig_Model> p_carConfig = std::make_shared<CarConfig_Model>();
            result = CarConfig_Decode( "" , p_carConfig , marbenData->carConfig);
            if (result)
            {
                pData->carConfig = (*p_carConfig);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_additionalStatus))
    {
        pData->additionalStatus_presence = true;
        if (marbenData->additionalStatus != nullptr )
        {
            std::shared_ptr<AdditionalStatus_Model> p_additionalStatus = std::make_shared<AdditionalStatus_Model>();
            result = AdditionalStatus_Decode( "" , p_additionalStatus , marbenData->additionalStatus);
            if (result)
            {
                pData->additionalStatus = (*p_additionalStatus);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_msd))
    {
        pData->msd_presence = true;
        if (marbenData->msd != nullptr )
        {
            std::shared_ptr<OEMMSD_Model> p_msd = std::make_shared<OEMMSD_Model>();
            result = OEMMSD_Decode( "" , p_msd , marbenData->msd);
            if (result)
            {
                pData->msd = (*p_msd);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_VehicleStatus__diagnostics))
    {
        pData->diagnostics_presence = true;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->diagnostics.getCount() = %d.", __FUNCTION__, marbenData->diagnostics.getCount());
        unsigned int diagnosticCount = marbenData->diagnostics.getCount();
        asn_wrapper::asncECUDiagnosticss* diagnostic = (asn_wrapper::asncECUDiagnosticss*)(marbenData->diagnostics.getFirstElement());
        for (unsigned int i = 0; (i < diagnosticCount || diagnostic); i++) 
        {
            ECUDiagnostic_Model p_diagnostic;
            p_diagnostic.ecuID = std::string((const char*)diagnostic->ecuID.value, diagnostic->ecuID.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnostic.ecuID = %s.", __FUNCTION__, p_diagnostic.ecuID.c_str());
            p_diagnostic.diagnosticResult = (Vds_HealthStatus)diagnostic->diagnosticResult;
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnostic.diagnosticResult = %d.", __FUNCTION__, p_diagnostic.diagnosticResult);
            if (asnTRUE == diagnostic->optional.getPresence(asn_wrapper::asn_dtcs))
            {
                p_diagnostic.dtcs_presence = true;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: diagnostic->dtcs.getCount() = %d.", __FUNCTION__, diagnostic->dtcs.getCount());
                unsigned int dtcCount = diagnostic->dtcs.getCount();
                asn_wrapper::asncdtcss* dtc = (asn_wrapper::asncdtcss*)(diagnostic->dtcs.getFirstElement());
                for (unsigned int dtcs2 = 0; (dtcs2 < dtcCount || dtc); dtcs2++) 
                {
                    DiagnosticTroubleCode_Model p_dtc;
                    p_dtc.dtc = std::string((const char*)dtc->dtc.value, dtc->dtc.length);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_dtc.dtc = %s.", __FUNCTION__, p_dtc.dtc.c_str());
                    //TODO:status;
                    if (asnTRUE == dtc->optional.getPresence(asn_wrapper::asn_failureCount))
                    {
                        p_dtc.failureCount_presence = true;
                        p_dtc.failureCount = dtc->failureCount;
                        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_dtc.failureCount = %d.", __FUNCTION__, p_dtc.failureCount);
                    }
                    if (asnTRUE == dtc->optional.getPresence(asn_wrapper::asn_lastFail))
                    {
                        p_dtc.lastFail_presence = true;
                        if (dtc->lastFail != nullptr )
                        {
                            std::shared_ptr<TimeStamp_Model> p_lastFail = std::make_shared<TimeStamp_Model>();
                            result = TimeStamp_Decode( "" , p_lastFail , dtc->lastFail);
                            if (result)
                            {
                                p_dtc.lastFail = (*p_lastFail);
                            }
                        }

                    }
                    if (asnTRUE == dtc->optional.getPresence(asn_wrapper::asn_firtFail))
                    {
                        p_dtc.firtFail_presence = true;
                        if (dtc->firtFail != nullptr )
                        {
                            std::shared_ptr<TimeStamp_Model> p_firtFail = std::make_shared<TimeStamp_Model>();
                            result = TimeStamp_Decode( "" , p_firtFail , dtc->firtFail);
                            if (result)
                            {
                                p_dtc.firtFail = (*p_firtFail);
                            }
                        }

                    }
                    if (asnTRUE == dtc->optional.getPresence(asn_wrapper::asn_firstFailureOdometer))
                    {
                        p_dtc.firstFailureOdometer_presence = true;
                        p_dtc.firstFailureOdometer = dtc->firstFailureOdometer;
                        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_dtc.firstFailureOdometer = %d.", __FUNCTION__, p_dtc.firstFailureOdometer);
                    }
                    if (asnTRUE == dtc->optional.getPresence(asn_wrapper::asn_firstFailureBatteryVoltage))
                    {
                        p_dtc.firstFailureBatteryVoltage_presence = true;
                        p_dtc.firstFailureBatteryVoltage = dtc->firstFailureBatteryVoltage;
                        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_dtc.firstFailureBatteryVoltage = %d.", __FUNCTION__, p_dtc.firstFailureBatteryVoltage);
                    }
                    if (asnTRUE == dtc->optional.getPresence(asn_wrapper::asn_firstFailureVehicleSpeed))
                    {
                        p_dtc.firstFailureVehicleSpeed_presence = true;
                        p_dtc.firstFailureVehicleSpeed = dtc->firstFailureVehicleSpeed;
                        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_dtc.firstFailureVehicleSpeed = %d.", __FUNCTION__, p_dtc.firstFailureVehicleSpeed);
                    }
                    p_diagnostic.dtcs.push_back(p_dtc);
                    dtc = (asn_wrapper::asncdtcss*)(dtc->getNextElement());
                }
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnostic.dtcs.size() = %d.", __FUNCTION__, p_diagnostic.dtcs.size());
                
            }
            if (asnTRUE == diagnostic->optional.getPresence(asn_wrapper::asn_exceptionCode))
            {
                p_diagnostic.exceptionCode_presence = true;
                p_diagnostic.exceptionCode = diagnostic->exceptionCode;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_diagnostic.exceptionCode = %d.", __FUNCTION__, p_diagnostic.exceptionCode);
            }
            pData->diagnostics.push_back(p_diagnostic);
            diagnostic = (asn_wrapper::asncECUDiagnosticss*)(diagnostic->getNextElement());
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->diagnostics.size() = %d.", __FUNCTION__, pData->diagnostics.size());
        
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_theftNotification))
    {
        pData->theftNotification_presence = true;
        if (marbenData->theftNotification != nullptr )
        {
            std::shared_ptr<TheftNotification_Model> p_theftNotification = std::make_shared<TheftNotification_Model>();
            result = TheftNotification_Decode( "" , p_theftNotification , marbenData->theftNotification);
            if (result)
            {
                pData->theftNotification = (*p_theftNotification);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_notification))
    {
        pData->notification_presence = true;
        if (marbenData->notification != nullptr )
        {
            std::shared_ptr<Notification_Model> p_notification = std::make_shared<Notification_Model>();
            result = Notification_Decode( "" , p_notification , marbenData->notification);
            if (result)
            {
                pData->notification = (*p_notification);
            }
        }

    }

    return true;
}

bool VdsMarbenAdaptGen::BasicVehicleStatus_Encode(const BasicVehicleStatus_Model &pData, asn_wrapper::BasicVehicleStatus* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::BasicVehicleStatus* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::BasicVehicleStatus*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (pData.vin_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_BasicVehicleStatus__vin);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.vin = %s.", __FUNCTION__, pData.vin.c_str());
        marbenData->vin.copyOctetString(pData.vin.length(), (asnbyte*)(unsigned char*)(pData.vin.c_str()));
    }
    if (marbenData->position == nullptr )
    {
        marbenData->position = new asn_wrapper::Position();
    }
    Position_Encode(pData.position, marbenData->position);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.speed = %d.", __FUNCTION__, pData.speed);
    marbenData->speed = pData.speed;
    if (pData.speedUnit_presence)
    {
        if (verifyPrintableString("speedUnit", pData.speedUnit))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_speedUnit);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.speedUnit = %s.", __FUNCTION__, pData.speedUnit.c_str());
            marbenData->speedUnit.copyOctetString(pData.speedUnit.length(), (asnbyte*)(unsigned char*)(pData.speedUnit.c_str()));
        }
    }
    if (pData.speedValidity_presence)
    {
        if (verifyScope("speedValidity", (int64_t)pData.speedValidity, (int64_t)0, (int64_t)1))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_BasicVehicleStatus__speedValidity);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.speedValidity = %d.", __FUNCTION__, pData.speedValidity);
            marbenData->speedValidity = pData.speedValidity;
        }
    }
    if (pData.direction_presence)
    {
        if (verifyScope("direction", (int64_t)pData.direction, (int64_t)0, (int64_t)360))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_BasicVehicleStatus__direction);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.direction = %d.", __FUNCTION__, pData.direction);
            marbenData->direction = pData.direction;
        }
    }
    if (pData.engineStatus_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_engineStatus);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.engineStatus = %d.", __FUNCTION__, pData.engineStatus);
        marbenData->engineStatus = (int32_t)pData.engineStatus;
    }
    if (pData.keyStatus_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_keyStatus);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.keyStatus = %d.", __FUNCTION__, pData.keyStatus);
        marbenData->keyStatus = (int32_t)pData.keyStatus;
    }
    if (pData.usageMode_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_usageMode);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.usageMode = %d.", __FUNCTION__, pData.usageMode);
        marbenData->usageMode = pData.usageMode;
    }

    return true;
}

bool VdsMarbenAdaptGen::BasicVehicleStatus_Decode(const std::string &path, std::shared_ptr<BasicVehicleStatus_Model> &pData, asn_wrapper::BasicVehicleStatus* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::BasicVehicleStatus* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::BasicVehicleStatus*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_BasicVehicleStatus__vin))
    {
        pData->vin_presence = true;
        pData->vin = std::string((const char*)marbenData->vin.value, marbenData->vin.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->vin = %s.", __FUNCTION__, pData->vin.c_str());
    }
    if (marbenData->position != nullptr )
    {
        std::shared_ptr<Position_Model> p_position = std::make_shared<Position_Model>();
        result = Position_Decode( "" , p_position , marbenData->position);
        if (result)
        {
            pData->position = (*p_position);
        }
    }

    pData->speed = marbenData->speed;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->speed = %d.", __FUNCTION__, pData->speed);
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_speedUnit))
    {
        pData->speedUnit_presence = true;
        pData->speedUnit = std::string((const char*)marbenData->speedUnit.value, marbenData->speedUnit.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->speedUnit = %s.", __FUNCTION__, pData->speedUnit.c_str());
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_BasicVehicleStatus__speedValidity))
    {
        pData->speedValidity_presence = true;
        pData->speedValidity = marbenData->speedValidity;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->speedValidity = %d.", __FUNCTION__, pData->speedValidity);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_BasicVehicleStatus__direction))
    {
        pData->direction_presence = true;
        pData->direction = marbenData->direction;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->direction = %d.", __FUNCTION__, pData->direction);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_engineStatus))
    {
        pData->engineStatus_presence = true;
        pData->engineStatus = (Vds_EngineStatus)marbenData->engineStatus;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->engineStatus = %d.", __FUNCTION__, pData->engineStatus);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_keyStatus))
    {
        pData->keyStatus_presence = true;
        pData->keyStatus = (Vds_KeyStatus)marbenData->keyStatus;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->keyStatus = %d.", __FUNCTION__, pData->keyStatus);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_usageMode))
    {
        pData->usageMode_presence = true;
        pData->usageMode = marbenData->usageMode;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->usageMode = %d.", __FUNCTION__, pData->usageMode);
    }

    return true;
}

bool VdsMarbenAdaptGen::LockStatus_Encode(const LockStatus_Model &pData, asn_wrapper::LockStatus* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::LockStatus* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::LockStatus*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (pData.winStatusDriver_presence)
    {
        if (verifyScope("winStatusDriver", (int64_t)pData.winStatusDriver, (int64_t)0, (int64_t)15))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_winStatusDriver);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.winStatusDriver = %d.", __FUNCTION__, pData.winStatusDriver);
            marbenData->winStatusDriver = pData.winStatusDriver;
        }
    }
    if (pData.winStatusPassenger_presence)
    {
        if (verifyScope("winStatusPassenger", (int64_t)pData.winStatusPassenger, (int64_t)0, (int64_t)15))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_winStatusPassenger);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.winStatusPassenger = %d.", __FUNCTION__, pData.winStatusPassenger);
            marbenData->winStatusPassenger = pData.winStatusPassenger;
        }
    }
    if (pData.winStatusDriverRear_presence)
    {
        if (verifyScope("winStatusDriverRear", (int64_t)pData.winStatusDriverRear, (int64_t)0, (int64_t)15))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_winStatusDriverRear);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.winStatusDriverRear = %d.", __FUNCTION__, pData.winStatusDriverRear);
            marbenData->winStatusDriverRear = pData.winStatusDriverRear;
        }
    }
    if (pData.winStatusPassengerRear_presence)
    {
        if (verifyScope("winStatusPassengerRear", (int64_t)pData.winStatusPassengerRear, (int64_t)0, (int64_t)15))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_winStatusPassengerRear);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.winStatusPassengerRear = %d.", __FUNCTION__, pData.winStatusPassengerRear);
            marbenData->winStatusPassengerRear = pData.winStatusPassengerRear;
        }
    }
    if (pData.winStatusDriverWarning_presence)
    {
        if (verifyScope("winStatusDriverWarning", (int64_t)pData.winStatusDriverWarning, (int64_t)0, (int64_t)1))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_winStatusDriverWarning);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.winStatusDriverWarning = %d.", __FUNCTION__, pData.winStatusDriverWarning);
            marbenData->winStatusDriverWarning = pData.winStatusDriverWarning;
        }
    }
    if (pData.winStatusPassengerWarning_presence)
    {
        if (verifyScope("winStatusPassengerWarning", (int64_t)pData.winStatusPassengerWarning, (int64_t)0, (int64_t)1))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_winStatusPassengerWarning);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.winStatusPassengerWarning = %d.", __FUNCTION__, pData.winStatusPassengerWarning);
            marbenData->winStatusPassengerWarning = pData.winStatusPassengerWarning;
        }
    }
    if (pData.winStatusDriverRearWarning_presence)
    {
        if (verifyScope("winStatusDriverRearWarning", (int64_t)pData.winStatusDriverRearWarning, (int64_t)0, (int64_t)1))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_winStatusDriverRearWarning);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.winStatusDriverRearWarning = %d.", __FUNCTION__, pData.winStatusDriverRearWarning);
            marbenData->winStatusDriverRearWarning = pData.winStatusDriverRearWarning;
        }
    }
    if (pData.winStatusPassengerRearWarning_presence)
    {
        if (verifyScope("winStatusPassengerRearWarning", (int64_t)pData.winStatusPassengerRearWarning, (int64_t)0, (int64_t)1))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_winStatusPassengerRearWarning);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.winStatusPassengerRearWarning = %d.", __FUNCTION__, pData.winStatusPassengerRearWarning);
            marbenData->winStatusPassengerRearWarning = pData.winStatusPassengerRearWarning;
        }
    }
    if (pData.winPosDriver_presence)
    {
        if (verifyScope("winPosDriver", (int64_t)pData.winPosDriver, (int64_t)0, (int64_t)1000))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_winPosDriver);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.winPosDriver = %d.", __FUNCTION__, pData.winPosDriver);
            marbenData->winPosDriver = pData.winPosDriver;
        }
    }
    if (pData.winPosPassenger_presence)
    {
        if (verifyScope("winPosPassenger", (int64_t)pData.winPosPassenger, (int64_t)0, (int64_t)1000))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_winPosPassenger);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.winPosPassenger = %d.", __FUNCTION__, pData.winPosPassenger);
            marbenData->winPosPassenger = pData.winPosPassenger;
        }
    }
    if (pData.winPosDriverRear_presence)
    {
        if (verifyScope("winPosDriverRear", (int64_t)pData.winPosDriverRear, (int64_t)0, (int64_t)1000))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_winPosDriverRear);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.winPosDriverRear = %d.", __FUNCTION__, pData.winPosDriverRear);
            marbenData->winPosDriverRear = pData.winPosDriverRear;
        }
    }
    if (pData.winPosPassengerRear_presence)
    {
        if (verifyScope("winPosPassengerRear", (int64_t)pData.winPosPassengerRear, (int64_t)0, (int64_t)1000))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_winPosPassengerRear);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.winPosPassengerRear = %d.", __FUNCTION__, pData.winPosPassengerRear);
            marbenData->winPosPassengerRear = pData.winPosPassengerRear;
        }
    }
    if (pData.sunroofOpenStatus_presence)
    {
        if (verifyScope("sunroofOpenStatus", (int64_t)pData.sunroofOpenStatus, (int64_t)0, (int64_t)15))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_sunroofOpenStatus);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.sunroofOpenStatus = %d.", __FUNCTION__, pData.sunroofOpenStatus);
            marbenData->sunroofOpenStatus = pData.sunroofOpenStatus;
        }
    }
    if (pData.sunroofPos_presence)
    {
        if (verifyScope("sunroofPos", (int64_t)pData.sunroofPos, (int64_t)0, (int64_t)1000))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_sunroofPos);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.sunroofPos = %d.", __FUNCTION__, pData.sunroofPos);
            marbenData->sunroofPos = pData.sunroofPos;
        }
    }
    if (pData.sunroofOpenStatusWarning_presence)
    {
        if (verifyScope("sunroofOpenStatusWarning", (int64_t)pData.sunroofOpenStatusWarning, (int64_t)0, (int64_t)1))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_sunroofOpenStatusWarning);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.sunroofOpenStatusWarning = %d.", __FUNCTION__, pData.sunroofOpenStatusWarning);
            marbenData->sunroofOpenStatusWarning = pData.sunroofOpenStatusWarning;
        }
    }
    if (pData.curtainOpenStatus_presence)
    {
        if (verifyScope("curtainOpenStatus", (int64_t)pData.curtainOpenStatus, (int64_t)0, (int64_t)15))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_curtainOpenStatus);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.curtainOpenStatus = %d.", __FUNCTION__, pData.curtainOpenStatus);
            marbenData->curtainOpenStatus = pData.curtainOpenStatus;
        }
    }
    if (pData.curtainPos_presence)
    {
        if (verifyScope("curtainPos", (int64_t)pData.curtainPos, (int64_t)0, (int64_t)1000))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_curtainPos);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.curtainPos = %d.", __FUNCTION__, pData.curtainPos);
            marbenData->curtainPos = pData.curtainPos;
        }
    }
    if (pData.curtainWarning_presence)
    {
        if (verifyScope("curtainWarning", (int64_t)pData.curtainWarning, (int64_t)0, (int64_t)1))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_curtainWarning);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.curtainWarning = %d.", __FUNCTION__, pData.curtainWarning);
            marbenData->curtainWarning = pData.curtainWarning;
        }
    }
    if (pData.tankFlapStatus_presence)
    {
        if (verifyScope("tankFlapStatus", (int64_t)pData.tankFlapStatus, (int64_t)0, (int64_t)15))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_tankFlapStatus);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.tankFlapStatus = %d.", __FUNCTION__, pData.tankFlapStatus);
            marbenData->tankFlapStatus = pData.tankFlapStatus;
        }
    }
    if (pData.chargeLidRearStatus_presence)
    {
        if (verifyScope("chargeLidRearStatus", (int64_t)pData.chargeLidRearStatus, (int64_t)0, (int64_t)15))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_chargeLidRearStatus);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.chargeLidRearStatus = %d.", __FUNCTION__, pData.chargeLidRearStatus);
            marbenData->chargeLidRearStatus = pData.chargeLidRearStatus;
        }
    }
    if (pData.chargeLidFrontStatus_presence)
    {
        if (verifyScope("chargeLidFrontStatus", (int64_t)pData.chargeLidFrontStatus, (int64_t)0, (int64_t)15))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_chargeLidFrontStatus);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.chargeLidFrontStatus = %d.", __FUNCTION__, pData.chargeLidFrontStatus);
            marbenData->chargeLidFrontStatus = pData.chargeLidFrontStatus;
        }
    }
    if (pData.ventilateStatus_presence)
    {
        if (verifyScope("ventilateStatus", (int64_t)pData.ventilateStatus, (int64_t)0, (int64_t)1))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_ventilateStatus);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.ventilateStatus = %d.", __FUNCTION__, pData.ventilateStatus);
            marbenData->ventilateStatus = pData.ventilateStatus;
        }
    }
    if (pData.doorOpenStatusDriver_presence)
    {
        if (verifyScope("doorOpenStatusDriver", (int64_t)pData.doorOpenStatusDriver, (int64_t)0, (int64_t)15))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_doorOpenStatusDriver);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.doorOpenStatusDriver = %d.", __FUNCTION__, pData.doorOpenStatusDriver);
            marbenData->doorOpenStatusDriver = pData.doorOpenStatusDriver;
        }
    }
    if (pData.doorOpenStatusPassenger_presence)
    {
        if (verifyScope("doorOpenStatusPassenger", (int64_t)pData.doorOpenStatusPassenger, (int64_t)0, (int64_t)15))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_doorOpenStatusPassenger);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.doorOpenStatusPassenger = %d.", __FUNCTION__, pData.doorOpenStatusPassenger);
            marbenData->doorOpenStatusPassenger = pData.doorOpenStatusPassenger;
        }
    }
    if (pData.doorOpenStatusDriverRear_presence)
    {
        if (verifyScope("doorOpenStatusDriverRear", (int64_t)pData.doorOpenStatusDriverRear, (int64_t)0, (int64_t)15))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_doorOpenStatusDriverRear);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.doorOpenStatusDriverRear = %d.", __FUNCTION__, pData.doorOpenStatusDriverRear);
            marbenData->doorOpenStatusDriverRear = pData.doorOpenStatusDriverRear;
        }
    }
    if (pData.doorOpenStatusPassengerRear_presence)
    {
        if (verifyScope("doorOpenStatusPassengerRear", (int64_t)pData.doorOpenStatusPassengerRear, (int64_t)0, (int64_t)15))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_doorOpenStatusPassengerRear);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.doorOpenStatusPassengerRear = %d.", __FUNCTION__, pData.doorOpenStatusPassengerRear);
            marbenData->doorOpenStatusPassengerRear = pData.doorOpenStatusPassengerRear;
        }
    }
    if (pData.doorPosDriver_presence)
    {
        if (verifyScope("doorPosDriver", (int64_t)pData.doorPosDriver, (int64_t)0, (int64_t)1000))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_doorPosDriver);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.doorPosDriver = %d.", __FUNCTION__, pData.doorPosDriver);
            marbenData->doorPosDriver = pData.doorPosDriver;
        }
    }
    if (pData.doorPosPassenger_presence)
    {
        if (verifyScope("doorPosPassenger", (int64_t)pData.doorPosPassenger, (int64_t)0, (int64_t)1000))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_doorPosPassenger);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.doorPosPassenger = %d.", __FUNCTION__, pData.doorPosPassenger);
            marbenData->doorPosPassenger = pData.doorPosPassenger;
        }
    }
    if (pData.doorPosDriverRear_presence)
    {
        if (verifyScope("doorPosDriverRear", (int64_t)pData.doorPosDriverRear, (int64_t)0, (int64_t)1000))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_doorPosDriverRear);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.doorPosDriverRear = %d.", __FUNCTION__, pData.doorPosDriverRear);
            marbenData->doorPosDriverRear = pData.doorPosDriverRear;
        }
    }
    if (pData.doorPosPassengerRear_presence)
    {
        if (verifyScope("doorPosPassengerRear", (int64_t)pData.doorPosPassengerRear, (int64_t)0, (int64_t)1000))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_doorPosPassengerRear);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.doorPosPassengerRear = %d.", __FUNCTION__, pData.doorPosPassengerRear);
            marbenData->doorPosPassengerRear = pData.doorPosPassengerRear;
        }
    }
    if (pData.doorLockStatusDriver_presence)
    {
        if (verifyScope("doorLockStatusDriver", (int64_t)pData.doorLockStatusDriver, (int64_t)0, (int64_t)15))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_doorLockStatusDriver);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.doorLockStatusDriver = %d.", __FUNCTION__, pData.doorLockStatusDriver);
            marbenData->doorLockStatusDriver = pData.doorLockStatusDriver;
        }
    }
    if (pData.doorLockStatusPassenger_presence)
    {
        if (verifyScope("doorLockStatusPassenger", (int64_t)pData.doorLockStatusPassenger, (int64_t)0, (int64_t)15))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_doorLockStatusPassenger);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.doorLockStatusPassenger = %d.", __FUNCTION__, pData.doorLockStatusPassenger);
            marbenData->doorLockStatusPassenger = pData.doorLockStatusPassenger;
        }
    }
    if (pData.doorLockStatusDriverRear_presence)
    {
        if (verifyScope("doorLockStatusDriverRear", (int64_t)pData.doorLockStatusDriverRear, (int64_t)0, (int64_t)15))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_doorLockStatusDriverRear);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.doorLockStatusDriverRear = %d.", __FUNCTION__, pData.doorLockStatusDriverRear);
            marbenData->doorLockStatusDriverRear = pData.doorLockStatusDriverRear;
        }
    }
    if (pData.doorLockStatusPassengerRear_presence)
    {
        if (verifyScope("doorLockStatusPassengerRear", (int64_t)pData.doorLockStatusPassengerRear, (int64_t)0, (int64_t)15))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_doorLockStatusPassengerRear);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.doorLockStatusPassengerRear = %d.", __FUNCTION__, pData.doorLockStatusPassengerRear);
            marbenData->doorLockStatusPassengerRear = pData.doorLockStatusPassengerRear;
        }
    }
    if (pData.doorGripStatusDriver_presence)
    {
        if (verifyScope("doorGripStatusDriver", (int64_t)pData.doorGripStatusDriver, (int64_t)0, (int64_t)15))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_doorGripStatusDriver);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.doorGripStatusDriver = %d.", __FUNCTION__, pData.doorGripStatusDriver);
            marbenData->doorGripStatusDriver = pData.doorGripStatusDriver;
        }
    }
    if (pData.doorGripStatusPassenger_presence)
    {
        if (verifyScope("doorGripStatusPassenger", (int64_t)pData.doorGripStatusPassenger, (int64_t)0, (int64_t)15))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_doorGripStatusPassenger);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.doorGripStatusPassenger = %d.", __FUNCTION__, pData.doorGripStatusPassenger);
            marbenData->doorGripStatusPassenger = pData.doorGripStatusPassenger;
        }
    }
    if (pData.doorGripStatusDriverRear_presence)
    {
        if (verifyScope("doorGripStatusDriverRear", (int64_t)pData.doorGripStatusDriverRear, (int64_t)0, (int64_t)15))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_doorGripStatusDriverRear);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.doorGripStatusDriverRear = %d.", __FUNCTION__, pData.doorGripStatusDriverRear);
            marbenData->doorGripStatusDriverRear = pData.doorGripStatusDriverRear;
        }
    }
    if (pData.doorGripStatusPassengerRear_presence)
    {
        if (verifyScope("doorGripStatusPassengerRear", (int64_t)pData.doorGripStatusPassengerRear, (int64_t)0, (int64_t)15))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_doorGripStatusPassengerRear);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.doorGripStatusPassengerRear = %d.", __FUNCTION__, pData.doorGripStatusPassengerRear);
            marbenData->doorGripStatusPassengerRear = pData.doorGripStatusPassengerRear;
        }
    }
    if (pData.trunkOpenStatus_presence)
    {
        if (verifyScope("trunkOpenStatus", (int64_t)pData.trunkOpenStatus, (int64_t)0, (int64_t)15))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_trunkOpenStatus);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.trunkOpenStatus = %d.", __FUNCTION__, pData.trunkOpenStatus);
            marbenData->trunkOpenStatus = pData.trunkOpenStatus;
        }
    }
    if (pData.trunkLockStatus_presence)
    {
        if (verifyScope("trunkLockStatus", (int64_t)pData.trunkLockStatus, (int64_t)0, (int64_t)1))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_trunkLockStatus);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.trunkLockStatus = %d.", __FUNCTION__, pData.trunkLockStatus);
            marbenData->trunkLockStatus = pData.trunkLockStatus;
        }
    }
    if (pData.engineHoodOpenStatus_presence)
    {
        if (verifyScope("engineHoodOpenStatus", (int64_t)pData.engineHoodOpenStatus, (int64_t)0, (int64_t)15))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_engineHoodOpenStatus);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.engineHoodOpenStatus = %d.", __FUNCTION__, pData.engineHoodOpenStatus);
            marbenData->engineHoodOpenStatus = pData.engineHoodOpenStatus;
        }
    }
    if (pData.engineHoodLockStatus_presence)
    {
        if (verifyScope("engineHoodLockStatus", (int64_t)pData.engineHoodLockStatus, (int64_t)0, (int64_t)15))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_engineHoodLockStatus);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.engineHoodLockStatus = %d.", __FUNCTION__, pData.engineHoodLockStatus);
            marbenData->engineHoodLockStatus = pData.engineHoodLockStatus;
        }
    }
    if (pData.centralLockingStatus_presence)
    {
        if (verifyScope("centralLockingStatus", (int64_t)pData.centralLockingStatus, (int64_t)0, (int64_t)15))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_centralLockingStatus);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.centralLockingStatus = %d.", __FUNCTION__, pData.centralLockingStatus);
            marbenData->centralLockingStatus = pData.centralLockingStatus;
        }
    }
    if (pData.centralLockingDisStatus_presence)
    {
        if (verifyScope("centralLockingDisStatus", (int64_t)pData.centralLockingDisStatus, (int64_t)0, (int64_t)15))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_centralLockingDisStatus);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.centralLockingDisStatus = %d.", __FUNCTION__, pData.centralLockingDisStatus);
            marbenData->centralLockingDisStatus = pData.centralLockingDisStatus;
        }
    }
    if (pData.privateLockStatus_presence)
    {
        if (verifyScope("privateLockStatus", (int64_t)pData.privateLockStatus, (int64_t)0, (int64_t)15))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_privateLockStatus);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.privateLockStatus = %d.", __FUNCTION__, pData.privateLockStatus);
            marbenData->privateLockStatus = pData.privateLockStatus;
        }
    }
    if (pData.vehicleAlarm_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_vehicleAlarm);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.vehicleAlarm = %d.", __FUNCTION__, pData.vehicleAlarm);
        marbenData->vehicleAlarm = pData.vehicleAlarm;
    }
    if (pData.winCloseReminder_presence)
    {
        if (verifyScope("winCloseReminder", (int64_t)pData.winCloseReminder, (int64_t)0, (int64_t)7))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_winCloseReminder);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.winCloseReminder = %d.", __FUNCTION__, pData.winCloseReminder);
            marbenData->winCloseReminder = pData.winCloseReminder;
        }
    }
    if (pData.handBrakeStatus_presence)
    {
        if (verifyScope("handBrakeStatus", (int64_t)pData.handBrakeStatus, (int64_t)0, (int64_t)15))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_handBrakeStatus);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.handBrakeStatus = %d.", __FUNCTION__, pData.handBrakeStatus);
            marbenData->handBrakeStatus = pData.handBrakeStatus;
        }
    }
    if (pData.electricParkBrakeStatus_presence)
    {
        if (verifyScope("electricParkBrakeStatus", (int64_t)pData.electricParkBrakeStatus, (int64_t)0, (int64_t)15))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_electricParkBrakeStatus);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.electricParkBrakeStatus = %d.", __FUNCTION__, pData.electricParkBrakeStatus);
            marbenData->electricParkBrakeStatus = pData.electricParkBrakeStatus;
        }
    }

    return true;
}

bool VdsMarbenAdaptGen::LockStatus_Decode(const std::string &path, std::shared_ptr<LockStatus_Model> &pData, asn_wrapper::LockStatus* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::LockStatus* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::LockStatus*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_winStatusDriver))
    {
        pData->winStatusDriver_presence = true;
        pData->winStatusDriver = marbenData->winStatusDriver;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->winStatusDriver = %d.", __FUNCTION__, pData->winStatusDriver);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_winStatusPassenger))
    {
        pData->winStatusPassenger_presence = true;
        pData->winStatusPassenger = marbenData->winStatusPassenger;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->winStatusPassenger = %d.", __FUNCTION__, pData->winStatusPassenger);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_winStatusDriverRear))
    {
        pData->winStatusDriverRear_presence = true;
        pData->winStatusDriverRear = marbenData->winStatusDriverRear;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->winStatusDriverRear = %d.", __FUNCTION__, pData->winStatusDriverRear);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_winStatusPassengerRear))
    {
        pData->winStatusPassengerRear_presence = true;
        pData->winStatusPassengerRear = marbenData->winStatusPassengerRear;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->winStatusPassengerRear = %d.", __FUNCTION__, pData->winStatusPassengerRear);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_winStatusDriverWarning))
    {
        pData->winStatusDriverWarning_presence = true;
        pData->winStatusDriverWarning = marbenData->winStatusDriverWarning;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->winStatusDriverWarning = %d.", __FUNCTION__, pData->winStatusDriverWarning);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_winStatusPassengerWarning))
    {
        pData->winStatusPassengerWarning_presence = true;
        pData->winStatusPassengerWarning = marbenData->winStatusPassengerWarning;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->winStatusPassengerWarning = %d.", __FUNCTION__, pData->winStatusPassengerWarning);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_winStatusDriverRearWarning))
    {
        pData->winStatusDriverRearWarning_presence = true;
        pData->winStatusDriverRearWarning = marbenData->winStatusDriverRearWarning;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->winStatusDriverRearWarning = %d.", __FUNCTION__, pData->winStatusDriverRearWarning);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_winStatusPassengerRearWarning))
    {
        pData->winStatusPassengerRearWarning_presence = true;
        pData->winStatusPassengerRearWarning = marbenData->winStatusPassengerRearWarning;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->winStatusPassengerRearWarning = %d.", __FUNCTION__, pData->winStatusPassengerRearWarning);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_winPosDriver))
    {
        pData->winPosDriver_presence = true;
        pData->winPosDriver = marbenData->winPosDriver;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->winPosDriver = %d.", __FUNCTION__, pData->winPosDriver);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_winPosPassenger))
    {
        pData->winPosPassenger_presence = true;
        pData->winPosPassenger = marbenData->winPosPassenger;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->winPosPassenger = %d.", __FUNCTION__, pData->winPosPassenger);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_winPosDriverRear))
    {
        pData->winPosDriverRear_presence = true;
        pData->winPosDriverRear = marbenData->winPosDriverRear;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->winPosDriverRear = %d.", __FUNCTION__, pData->winPosDriverRear);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_winPosPassengerRear))
    {
        pData->winPosPassengerRear_presence = true;
        pData->winPosPassengerRear = marbenData->winPosPassengerRear;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->winPosPassengerRear = %d.", __FUNCTION__, pData->winPosPassengerRear);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_sunroofOpenStatus))
    {
        pData->sunroofOpenStatus_presence = true;
        pData->sunroofOpenStatus = marbenData->sunroofOpenStatus;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->sunroofOpenStatus = %d.", __FUNCTION__, pData->sunroofOpenStatus);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_sunroofPos))
    {
        pData->sunroofPos_presence = true;
        pData->sunroofPos = marbenData->sunroofPos;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->sunroofPos = %d.", __FUNCTION__, pData->sunroofPos);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_sunroofOpenStatusWarning))
    {
        pData->sunroofOpenStatusWarning_presence = true;
        pData->sunroofOpenStatusWarning = marbenData->sunroofOpenStatusWarning;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->sunroofOpenStatusWarning = %d.", __FUNCTION__, pData->sunroofOpenStatusWarning);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_curtainOpenStatus))
    {
        pData->curtainOpenStatus_presence = true;
        pData->curtainOpenStatus = marbenData->curtainOpenStatus;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->curtainOpenStatus = %d.", __FUNCTION__, pData->curtainOpenStatus);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_curtainPos))
    {
        pData->curtainPos_presence = true;
        pData->curtainPos = marbenData->curtainPos;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->curtainPos = %d.", __FUNCTION__, pData->curtainPos);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_curtainWarning))
    {
        pData->curtainWarning_presence = true;
        pData->curtainWarning = marbenData->curtainWarning;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->curtainWarning = %d.", __FUNCTION__, pData->curtainWarning);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_tankFlapStatus))
    {
        pData->tankFlapStatus_presence = true;
        pData->tankFlapStatus = marbenData->tankFlapStatus;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->tankFlapStatus = %d.", __FUNCTION__, pData->tankFlapStatus);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_chargeLidRearStatus))
    {
        pData->chargeLidRearStatus_presence = true;
        pData->chargeLidRearStatus = marbenData->chargeLidRearStatus;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->chargeLidRearStatus = %d.", __FUNCTION__, pData->chargeLidRearStatus);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_chargeLidFrontStatus))
    {
        pData->chargeLidFrontStatus_presence = true;
        pData->chargeLidFrontStatus = marbenData->chargeLidFrontStatus;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->chargeLidFrontStatus = %d.", __FUNCTION__, pData->chargeLidFrontStatus);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_ventilateStatus))
    {
        pData->ventilateStatus_presence = true;
        pData->ventilateStatus = marbenData->ventilateStatus;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->ventilateStatus = %d.", __FUNCTION__, pData->ventilateStatus);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_doorOpenStatusDriver))
    {
        pData->doorOpenStatusDriver_presence = true;
        pData->doorOpenStatusDriver = marbenData->doorOpenStatusDriver;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->doorOpenStatusDriver = %d.", __FUNCTION__, pData->doorOpenStatusDriver);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_doorOpenStatusPassenger))
    {
        pData->doorOpenStatusPassenger_presence = true;
        pData->doorOpenStatusPassenger = marbenData->doorOpenStatusPassenger;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->doorOpenStatusPassenger = %d.", __FUNCTION__, pData->doorOpenStatusPassenger);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_doorOpenStatusDriverRear))
    {
        pData->doorOpenStatusDriverRear_presence = true;
        pData->doorOpenStatusDriverRear = marbenData->doorOpenStatusDriverRear;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->doorOpenStatusDriverRear = %d.", __FUNCTION__, pData->doorOpenStatusDriverRear);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_doorOpenStatusPassengerRear))
    {
        pData->doorOpenStatusPassengerRear_presence = true;
        pData->doorOpenStatusPassengerRear = marbenData->doorOpenStatusPassengerRear;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->doorOpenStatusPassengerRear = %d.", __FUNCTION__, pData->doorOpenStatusPassengerRear);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_doorPosDriver))
    {
        pData->doorPosDriver_presence = true;
        pData->doorPosDriver = marbenData->doorPosDriver;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->doorPosDriver = %d.", __FUNCTION__, pData->doorPosDriver);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_doorPosPassenger))
    {
        pData->doorPosPassenger_presence = true;
        pData->doorPosPassenger = marbenData->doorPosPassenger;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->doorPosPassenger = %d.", __FUNCTION__, pData->doorPosPassenger);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_doorPosDriverRear))
    {
        pData->doorPosDriverRear_presence = true;
        pData->doorPosDriverRear = marbenData->doorPosDriverRear;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->doorPosDriverRear = %d.", __FUNCTION__, pData->doorPosDriverRear);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_doorPosPassengerRear))
    {
        pData->doorPosPassengerRear_presence = true;
        pData->doorPosPassengerRear = marbenData->doorPosPassengerRear;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->doorPosPassengerRear = %d.", __FUNCTION__, pData->doorPosPassengerRear);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_doorLockStatusDriver))
    {
        pData->doorLockStatusDriver_presence = true;
        pData->doorLockStatusDriver = marbenData->doorLockStatusDriver;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->doorLockStatusDriver = %d.", __FUNCTION__, pData->doorLockStatusDriver);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_doorLockStatusPassenger))
    {
        pData->doorLockStatusPassenger_presence = true;
        pData->doorLockStatusPassenger = marbenData->doorLockStatusPassenger;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->doorLockStatusPassenger = %d.", __FUNCTION__, pData->doorLockStatusPassenger);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_doorLockStatusDriverRear))
    {
        pData->doorLockStatusDriverRear_presence = true;
        pData->doorLockStatusDriverRear = marbenData->doorLockStatusDriverRear;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->doorLockStatusDriverRear = %d.", __FUNCTION__, pData->doorLockStatusDriverRear);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_doorLockStatusPassengerRear))
    {
        pData->doorLockStatusPassengerRear_presence = true;
        pData->doorLockStatusPassengerRear = marbenData->doorLockStatusPassengerRear;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->doorLockStatusPassengerRear = %d.", __FUNCTION__, pData->doorLockStatusPassengerRear);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_doorGripStatusDriver))
    {
        pData->doorGripStatusDriver_presence = true;
        pData->doorGripStatusDriver = marbenData->doorGripStatusDriver;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->doorGripStatusDriver = %d.", __FUNCTION__, pData->doorGripStatusDriver);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_doorGripStatusPassenger))
    {
        pData->doorGripStatusPassenger_presence = true;
        pData->doorGripStatusPassenger = marbenData->doorGripStatusPassenger;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->doorGripStatusPassenger = %d.", __FUNCTION__, pData->doorGripStatusPassenger);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_doorGripStatusDriverRear))
    {
        pData->doorGripStatusDriverRear_presence = true;
        pData->doorGripStatusDriverRear = marbenData->doorGripStatusDriverRear;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->doorGripStatusDriverRear = %d.", __FUNCTION__, pData->doorGripStatusDriverRear);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_doorGripStatusPassengerRear))
    {
        pData->doorGripStatusPassengerRear_presence = true;
        pData->doorGripStatusPassengerRear = marbenData->doorGripStatusPassengerRear;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->doorGripStatusPassengerRear = %d.", __FUNCTION__, pData->doorGripStatusPassengerRear);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_trunkOpenStatus))
    {
        pData->trunkOpenStatus_presence = true;
        pData->trunkOpenStatus = marbenData->trunkOpenStatus;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->trunkOpenStatus = %d.", __FUNCTION__, pData->trunkOpenStatus);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_trunkLockStatus))
    {
        pData->trunkLockStatus_presence = true;
        pData->trunkLockStatus = marbenData->trunkLockStatus;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->trunkLockStatus = %d.", __FUNCTION__, pData->trunkLockStatus);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_engineHoodOpenStatus))
    {
        pData->engineHoodOpenStatus_presence = true;
        pData->engineHoodOpenStatus = marbenData->engineHoodOpenStatus;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->engineHoodOpenStatus = %d.", __FUNCTION__, pData->engineHoodOpenStatus);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_engineHoodLockStatus))
    {
        pData->engineHoodLockStatus_presence = true;
        pData->engineHoodLockStatus = marbenData->engineHoodLockStatus;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->engineHoodLockStatus = %d.", __FUNCTION__, pData->engineHoodLockStatus);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_centralLockingStatus))
    {
        pData->centralLockingStatus_presence = true;
        pData->centralLockingStatus = marbenData->centralLockingStatus;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->centralLockingStatus = %d.", __FUNCTION__, pData->centralLockingStatus);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_centralLockingDisStatus))
    {
        pData->centralLockingDisStatus_presence = true;
        pData->centralLockingDisStatus = marbenData->centralLockingDisStatus;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->centralLockingDisStatus = %d.", __FUNCTION__, pData->centralLockingDisStatus);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_privateLockStatus))
    {
        pData->privateLockStatus_presence = true;
        pData->privateLockStatus = marbenData->privateLockStatus;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->privateLockStatus = %d.", __FUNCTION__, pData->privateLockStatus);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_vehicleAlarm))
    {
        pData->vehicleAlarm_presence = true;
        pData->vehicleAlarm = marbenData->vehicleAlarm;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->vehicleAlarm = %d.", __FUNCTION__, pData->vehicleAlarm);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_winCloseReminder))
    {
        pData->winCloseReminder_presence = true;
        pData->winCloseReminder = marbenData->winCloseReminder;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->winCloseReminder = %d.", __FUNCTION__, pData->winCloseReminder);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_handBrakeStatus))
    {
        pData->handBrakeStatus_presence = true;
        pData->handBrakeStatus = marbenData->handBrakeStatus;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->handBrakeStatus = %d.", __FUNCTION__, pData->handBrakeStatus);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_electricParkBrakeStatus))
    {
        pData->electricParkBrakeStatus_presence = true;
        pData->electricParkBrakeStatus = marbenData->electricParkBrakeStatus;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->electricParkBrakeStatus = %d.", __FUNCTION__, pData->electricParkBrakeStatus);
    }

    return true;
}

bool VdsMarbenAdaptGen::MaintenanceStatus_Encode(const MaintenanceStatus_Model &pData, asn_wrapper::MaintenanceStatus* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::MaintenanceStatus* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::MaintenanceStatus*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (pData.mainBatteryStatus_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_mainBatteryStatus);
        if (marbenData->mainBatteryStatus == nullptr )
        {
            marbenData->mainBatteryStatus = new asn_wrapper::BatteryStatus();
        }
        BatteryStatus_Encode(pData.mainBatteryStatus, marbenData->mainBatteryStatus);
    }
    if (pData.tyreStatusDriver_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_tyreStatusDriver);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.tyreStatusDriver = %d.", __FUNCTION__, pData.tyreStatusDriver);
        marbenData->tyreStatusDriver = pData.tyreStatusDriver;
    }
    if (pData.tyreStatusPassenger_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_tyreStatusPassenger);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.tyreStatusPassenger = %d.", __FUNCTION__, pData.tyreStatusPassenger);
        marbenData->tyreStatusPassenger = pData.tyreStatusPassenger;
    }
    if (pData.tyreStatusDriverRear_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_tyreStatusDriverRear);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.tyreStatusDriverRear = %d.", __FUNCTION__, pData.tyreStatusDriverRear);
        marbenData->tyreStatusDriverRear = pData.tyreStatusDriverRear;
    }
    if (pData.tyreStatusPassengerRear_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_tyreStatusPassengerRear);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.tyreStatusPassengerRear = %d.", __FUNCTION__, pData.tyreStatusPassengerRear);
        marbenData->tyreStatusPassengerRear = pData.tyreStatusPassengerRear;
    }
    if (pData.tyreTempDriver_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_tyreTempDriver);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.tyreTempDriver = %d.", __FUNCTION__, pData.tyreTempDriver);
        marbenData->tyreTempDriver = pData.tyreTempDriver;
    }
    if (pData.tyreTempPassenger_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_tyreTempPassenger);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.tyreTempPassenger = %d.", __FUNCTION__, pData.tyreTempPassenger);
        marbenData->tyreTempPassenger = pData.tyreTempPassenger;
    }
    if (pData.tyreTempDriverRear_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_tyreTempDriverRear);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.tyreTempDriverRear = %d.", __FUNCTION__, pData.tyreTempDriverRear);
        marbenData->tyreTempDriverRear = pData.tyreTempDriverRear;
    }
    if (pData.tyreTempPassengerRear_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_tyreTempPassengerRear);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.tyreTempPassengerRear = %d.", __FUNCTION__, pData.tyreTempPassengerRear);
        marbenData->tyreTempPassengerRear = pData.tyreTempPassengerRear;
    }
    if (pData.engineHrsToService_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_engineHrsToService);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.engineHrsToService = %d.", __FUNCTION__, pData.engineHrsToService);
        marbenData->engineHrsToService = pData.engineHrsToService;
    }
    if (pData.distanceToService_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_distanceToService);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.distanceToService = %d.", __FUNCTION__, pData.distanceToService);
        marbenData->distanceToService = pData.distanceToService;
    }
    if (pData.daysToService_presence)
    {
        if (verifyScope("daysToService", (int64_t)pData.daysToService, (int64_t)-150, (int64_t)1890))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_daysToService);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.daysToService = %d.", __FUNCTION__, pData.daysToService);
            marbenData->daysToService = pData.daysToService;
        }
    }
    if (pData.serviceWarningStatus_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_serviceWarningStatus);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.serviceWarningStatus = %d.", __FUNCTION__, pData.serviceWarningStatus);
        marbenData->serviceWarningStatus = pData.serviceWarningStatus;
    }
    if (pData.serviceWarningTrigger_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_serviceWarningTrigger);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.serviceWarningTrigger = %d.", __FUNCTION__, pData.serviceWarningTrigger);
        marbenData->serviceWarningTrigger = (int32_t)pData.serviceWarningTrigger;
    }
    if (pData.engineOilLevelStatus_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_engineOilLevelStatus);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.engineOilLevelStatus = %d.", __FUNCTION__, pData.engineOilLevelStatus);
        marbenData->engineOilLevelStatus = pData.engineOilLevelStatus;
    }
    if (pData.engineOilTemperature_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_engineOilTemperature);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.engineOilTemperature = %d.", __FUNCTION__, pData.engineOilTemperature);
        marbenData->engineOilTemperature = pData.engineOilTemperature;
    }
    if (pData.engineOilPressureWarning_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_engineOilPressureWarning);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.engineOilPressureWarning = %d.", __FUNCTION__, pData.engineOilPressureWarning);
        marbenData->engineOilPressureWarning = pData.engineOilPressureWarning;
    }
    if (pData.engineCoolantTemperature_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_engineCoolantTemperature);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.engineCoolantTemperature = %d.", __FUNCTION__, pData.engineCoolantTemperature);
        marbenData->engineCoolantTemperature = pData.engineCoolantTemperature;
    }
    if (pData.engineCoolantLevelStatus_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_engineCoolantLevelStatus);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.engineCoolantLevelStatus = %d.", __FUNCTION__, pData.engineCoolantLevelStatus);
        marbenData->engineCoolantLevelStatus = pData.engineCoolantLevelStatus;
    }
    if (pData.brakeFluidLevelStatus_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_brakeFluidLevelStatus);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.brakeFluidLevelStatus = %d.", __FUNCTION__, pData.brakeFluidLevelStatus);
        marbenData->brakeFluidLevelStatus = pData.brakeFluidLevelStatus;
    }
    if (pData.washerFluidLevelStatus_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_washerFluidLevelStatus);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.washerFluidLevelStatus = %d.", __FUNCTION__, pData.washerFluidLevelStatus);
        marbenData->washerFluidLevelStatus = pData.washerFluidLevelStatus;
    }
    if (pData.indcrTurnLeWarning_presence)
    {
        if (verifyScope("indcrTurnLeWarning", (int64_t)pData.indcrTurnLeWarning, (int64_t)0, (int64_t)1))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_indcrTurnLeWarning);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.indcrTurnLeWarning = %d.", __FUNCTION__, pData.indcrTurnLeWarning);
            marbenData->indcrTurnLeWarning = pData.indcrTurnLeWarning;
        }
    }
    if (pData.indcrTurnRiWarning_presence)
    {
        if (verifyScope("indcrTurnRiWarning", (int64_t)pData.indcrTurnRiWarning, (int64_t)0, (int64_t)1))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_indcrTurnRiWarning);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.indcrTurnRiWarning = %d.", __FUNCTION__, pData.indcrTurnRiWarning);
            marbenData->indcrTurnRiWarning = pData.indcrTurnRiWarning;
        }
    }
    if (pData.indcrTurnOnPassSideWarning_presence)
    {
        if (verifyScope("indcrTurnOnPassSideWarning", (int64_t)pData.indcrTurnOnPassSideWarning, (int64_t)0, (int64_t)1))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_indcrTurnOnPassSideWarning);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.indcrTurnOnPassSideWarning = %d.", __FUNCTION__, pData.indcrTurnOnPassSideWarning);
            marbenData->indcrTurnOnPassSideWarning = pData.indcrTurnOnPassSideWarning;
        }
    }
    if (pData.indcrTurnOnDrvrSideWarning_presence)
    {
        if (verifyScope("indcrTurnOnDrvrSideWarning", (int64_t)pData.indcrTurnOnDrvrSideWarning, (int64_t)0, (int64_t)1))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_indcrTurnOnDrvrSideWarning);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.indcrTurnOnDrvrSideWarning = %d.", __FUNCTION__, pData.indcrTurnOnDrvrSideWarning);
            marbenData->indcrTurnOnDrvrSideWarning = pData.indcrTurnOnDrvrSideWarning;
        }
    }
    if (pData.indcrTurnLeFrntWarning_presence)
    {
        if (verifyScope("indcrTurnLeFrntWarning", (int64_t)pData.indcrTurnLeFrntWarning, (int64_t)0, (int64_t)1))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_indcrTurnLeFrntWarning);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.indcrTurnLeFrntWarning = %d.", __FUNCTION__, pData.indcrTurnLeFrntWarning);
            marbenData->indcrTurnLeFrntWarning = pData.indcrTurnLeFrntWarning;
        }
    }
    if (pData.indcrTurnRiFrntWarning_presence)
    {
        if (verifyScope("indcrTurnRiFrntWarning", (int64_t)pData.indcrTurnRiFrntWarning, (int64_t)0, (int64_t)1))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_indcrTurnRiFrntWarning);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.indcrTurnRiFrntWarning = %d.", __FUNCTION__, pData.indcrTurnRiFrntWarning);
            marbenData->indcrTurnRiFrntWarning = pData.indcrTurnRiFrntWarning;
        }
    }
    if (pData.fogLiReWarning_presence)
    {
        if (verifyScope("fogLiReWarning", (int64_t)pData.fogLiReWarning, (int64_t)0, (int64_t)1))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_fogLiReWarning);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.fogLiReWarning = %d.", __FUNCTION__, pData.fogLiReWarning);
            marbenData->fogLiReWarning = pData.fogLiReWarning;
        }
    }
    if (pData.bulbStatus_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_bulbStatus);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.bulbStatus = %d.", __FUNCTION__, pData.bulbStatus);
        marbenData->bulbStatus = pData.bulbStatus;
    }

    return true;
}

bool VdsMarbenAdaptGen::MaintenanceStatus_Decode(const std::string &path, std::shared_ptr<MaintenanceStatus_Model> &pData, asn_wrapper::MaintenanceStatus* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::MaintenanceStatus* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::MaintenanceStatus*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_mainBatteryStatus))
    {
        pData->mainBatteryStatus_presence = true;
        if (marbenData->mainBatteryStatus != nullptr )
        {
            std::shared_ptr<BatteryStatus_Model> p_mainBatteryStatus = std::make_shared<BatteryStatus_Model>();
            result = BatteryStatus_Decode( "" , p_mainBatteryStatus , marbenData->mainBatteryStatus);
            if (result)
            {
                pData->mainBatteryStatus = (*p_mainBatteryStatus);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_tyreStatusDriver))
    {
        pData->tyreStatusDriver_presence = true;
        pData->tyreStatusDriver = marbenData->tyreStatusDriver;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->tyreStatusDriver = %d.", __FUNCTION__, pData->tyreStatusDriver);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_tyreStatusPassenger))
    {
        pData->tyreStatusPassenger_presence = true;
        pData->tyreStatusPassenger = marbenData->tyreStatusPassenger;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->tyreStatusPassenger = %d.", __FUNCTION__, pData->tyreStatusPassenger);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_tyreStatusDriverRear))
    {
        pData->tyreStatusDriverRear_presence = true;
        pData->tyreStatusDriverRear = marbenData->tyreStatusDriverRear;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->tyreStatusDriverRear = %d.", __FUNCTION__, pData->tyreStatusDriverRear);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_tyreStatusPassengerRear))
    {
        pData->tyreStatusPassengerRear_presence = true;
        pData->tyreStatusPassengerRear = marbenData->tyreStatusPassengerRear;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->tyreStatusPassengerRear = %d.", __FUNCTION__, pData->tyreStatusPassengerRear);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_tyreTempDriver))
    {
        pData->tyreTempDriver_presence = true;
        pData->tyreTempDriver = marbenData->tyreTempDriver;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->tyreTempDriver = %d.", __FUNCTION__, pData->tyreTempDriver);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_tyreTempPassenger))
    {
        pData->tyreTempPassenger_presence = true;
        pData->tyreTempPassenger = marbenData->tyreTempPassenger;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->tyreTempPassenger = %d.", __FUNCTION__, pData->tyreTempPassenger);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_tyreTempDriverRear))
    {
        pData->tyreTempDriverRear_presence = true;
        pData->tyreTempDriverRear = marbenData->tyreTempDriverRear;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->tyreTempDriverRear = %d.", __FUNCTION__, pData->tyreTempDriverRear);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_tyreTempPassengerRear))
    {
        pData->tyreTempPassengerRear_presence = true;
        pData->tyreTempPassengerRear = marbenData->tyreTempPassengerRear;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->tyreTempPassengerRear = %d.", __FUNCTION__, pData->tyreTempPassengerRear);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_engineHrsToService))
    {
        pData->engineHrsToService_presence = true;
        pData->engineHrsToService = marbenData->engineHrsToService;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->engineHrsToService = %d.", __FUNCTION__, pData->engineHrsToService);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_distanceToService))
    {
        pData->distanceToService_presence = true;
        pData->distanceToService = marbenData->distanceToService;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->distanceToService = %d.", __FUNCTION__, pData->distanceToService);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_daysToService))
    {
        pData->daysToService_presence = true;
        pData->daysToService = marbenData->daysToService;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->daysToService = %d.", __FUNCTION__, pData->daysToService);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_serviceWarningStatus))
    {
        pData->serviceWarningStatus_presence = true;
        pData->serviceWarningStatus = marbenData->serviceWarningStatus;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->serviceWarningStatus = %d.", __FUNCTION__, pData->serviceWarningStatus);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_serviceWarningTrigger))
    {
        pData->serviceWarningTrigger_presence = true;
        pData->serviceWarningTrigger = (Vds_ServiceWarningTriggerReason)marbenData->serviceWarningTrigger;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->serviceWarningTrigger = %d.", __FUNCTION__, pData->serviceWarningTrigger);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_engineOilLevelStatus))
    {
        pData->engineOilLevelStatus_presence = true;
        pData->engineOilLevelStatus = marbenData->engineOilLevelStatus;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->engineOilLevelStatus = %d.", __FUNCTION__, pData->engineOilLevelStatus);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_engineOilTemperature))
    {
        pData->engineOilTemperature_presence = true;
        pData->engineOilTemperature = marbenData->engineOilTemperature;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->engineOilTemperature = %d.", __FUNCTION__, pData->engineOilTemperature);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_engineOilPressureWarning))
    {
        pData->engineOilPressureWarning_presence = true;
        pData->engineOilPressureWarning = marbenData->engineOilPressureWarning;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->engineOilPressureWarning = %d.", __FUNCTION__, pData->engineOilPressureWarning);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_engineCoolantTemperature))
    {
        pData->engineCoolantTemperature_presence = true;
        pData->engineCoolantTemperature = marbenData->engineCoolantTemperature;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->engineCoolantTemperature = %d.", __FUNCTION__, pData->engineCoolantTemperature);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_engineCoolantLevelStatus))
    {
        pData->engineCoolantLevelStatus_presence = true;
        pData->engineCoolantLevelStatus = marbenData->engineCoolantLevelStatus;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->engineCoolantLevelStatus = %d.", __FUNCTION__, pData->engineCoolantLevelStatus);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_brakeFluidLevelStatus))
    {
        pData->brakeFluidLevelStatus_presence = true;
        pData->brakeFluidLevelStatus = marbenData->brakeFluidLevelStatus;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->brakeFluidLevelStatus = %d.", __FUNCTION__, pData->brakeFluidLevelStatus);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_washerFluidLevelStatus))
    {
        pData->washerFluidLevelStatus_presence = true;
        pData->washerFluidLevelStatus = marbenData->washerFluidLevelStatus;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->washerFluidLevelStatus = %d.", __FUNCTION__, pData->washerFluidLevelStatus);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_indcrTurnLeWarning))
    {
        pData->indcrTurnLeWarning_presence = true;
        pData->indcrTurnLeWarning = marbenData->indcrTurnLeWarning;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->indcrTurnLeWarning = %d.", __FUNCTION__, pData->indcrTurnLeWarning);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_indcrTurnRiWarning))
    {
        pData->indcrTurnRiWarning_presence = true;
        pData->indcrTurnRiWarning = marbenData->indcrTurnRiWarning;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->indcrTurnRiWarning = %d.", __FUNCTION__, pData->indcrTurnRiWarning);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_indcrTurnOnPassSideWarning))
    {
        pData->indcrTurnOnPassSideWarning_presence = true;
        pData->indcrTurnOnPassSideWarning = marbenData->indcrTurnOnPassSideWarning;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->indcrTurnOnPassSideWarning = %d.", __FUNCTION__, pData->indcrTurnOnPassSideWarning);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_indcrTurnOnDrvrSideWarning))
    {
        pData->indcrTurnOnDrvrSideWarning_presence = true;
        pData->indcrTurnOnDrvrSideWarning = marbenData->indcrTurnOnDrvrSideWarning;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->indcrTurnOnDrvrSideWarning = %d.", __FUNCTION__, pData->indcrTurnOnDrvrSideWarning);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_indcrTurnLeFrntWarning))
    {
        pData->indcrTurnLeFrntWarning_presence = true;
        pData->indcrTurnLeFrntWarning = marbenData->indcrTurnLeFrntWarning;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->indcrTurnLeFrntWarning = %d.", __FUNCTION__, pData->indcrTurnLeFrntWarning);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_indcrTurnRiFrntWarning))
    {
        pData->indcrTurnRiFrntWarning_presence = true;
        pData->indcrTurnRiFrntWarning = marbenData->indcrTurnRiFrntWarning;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->indcrTurnRiFrntWarning = %d.", __FUNCTION__, pData->indcrTurnRiFrntWarning);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_fogLiReWarning))
    {
        pData->fogLiReWarning_presence = true;
        pData->fogLiReWarning = marbenData->fogLiReWarning;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->fogLiReWarning = %d.", __FUNCTION__, pData->fogLiReWarning);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_bulbStatus))
    {
        pData->bulbStatus_presence = true;
        pData->bulbStatus = marbenData->bulbStatus;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->bulbStatus = %d.", __FUNCTION__, pData->bulbStatus);
    }

    return true;
}

bool VdsMarbenAdaptGen::RunningStatus_Encode(const RunningStatus_Model &pData, asn_wrapper::RunningStatus* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::RunningStatus* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::RunningStatus*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (pData.srsStatus_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_srsStatus);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.srsStatus = %d.", __FUNCTION__, pData.srsStatus);
        marbenData->srsStatus = (int32_t)pData.srsStatus;
    }
    if (pData.srsCrashStatus_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_srsCrashStatus);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.srsCrashStatus = %d.", __FUNCTION__, pData.srsCrashStatus);
        marbenData->srsCrashStatus = pData.srsCrashStatus;
    }
    if (pData.odometer_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_RunningStatus__odometer);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.odometer = %d.", __FUNCTION__, pData.odometer);
        marbenData->odometer = pData.odometer;
    }
    if (pData.fuelLevel_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_fuelLevel);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.fuelLevel = %d.", __FUNCTION__, pData.fuelLevel);
        marbenData->fuelLevel = pData.fuelLevel;
    }
    if (pData.fuelLevelStatus_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_fuelLevelStatus);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.fuelLevelStatus = %d.", __FUNCTION__, pData.fuelLevelStatus);
        marbenData->fuelLevelStatus = pData.fuelLevelStatus;
    }
    if (pData.fuelEnLevel_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_fuelEnLevel);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.fuelEnLevel = %d.", __FUNCTION__, pData.fuelEnLevel);
        marbenData->fuelEnLevel = pData.fuelEnLevel;
    }
    if (pData.fuelEnCnsFild_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_fuelEnCnsFild);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.fuelEnCnsFild = %d.", __FUNCTION__, pData.fuelEnCnsFild);
        marbenData->fuelEnCnsFild = pData.fuelEnCnsFild;
    }
    if (pData.fuelEnCns_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_fuelEnCns);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.fuelEnCns = %d.", __FUNCTION__, pData.fuelEnCns);
        marbenData->fuelEnCns = pData.fuelEnCns;
    }
    if (pData.fuelLow1WarningDriver_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_fuelLow1WarningDriver);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.fuelLow1WarningDriver = %d.", __FUNCTION__, pData.fuelLow1WarningDriver);
        marbenData->fuelLow1WarningDriver = pData.fuelLow1WarningDriver;
    }
    if (pData.fuelLow2WarningDriver_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_fuelLow2WarningDriver);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.fuelLow2WarningDriver = %d.", __FUNCTION__, pData.fuelLow2WarningDriver);
        marbenData->fuelLow2WarningDriver = pData.fuelLow2WarningDriver;
    }
    if (pData.distanceToEmpty_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_distanceToEmpty);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.distanceToEmpty = %d.", __FUNCTION__, pData.distanceToEmpty);
        marbenData->distanceToEmpty = pData.distanceToEmpty;
    }
    if (pData.trvlDistance_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_trvlDistance);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.trvlDistance = %d.", __FUNCTION__, pData.trvlDistance);
        marbenData->trvlDistance = pData.trvlDistance;
    }
    if (pData.aveFuelConsumption_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_aveFuelConsumption);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.aveFuelConsumption = %d.", __FUNCTION__, pData.aveFuelConsumption);
        marbenData->aveFuelConsumption = pData.aveFuelConsumption;
    }
    if (pData.aveFuelConsumptionInLatestDrivingCycle_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_aveFuelConsumptionInLatestDrivingCycle);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.aveFuelConsumptionInLatestDrivingCycle = %d.", __FUNCTION__, pData.aveFuelConsumptionInLatestDrivingCycle);
        marbenData->aveFuelConsumptionInLatestDrivingCycle = pData.aveFuelConsumptionInLatestDrivingCycle;
    }
    if (pData.avgSpeed_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_avgSpeed);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.avgSpeed = %d.", __FUNCTION__, pData.avgSpeed);
        marbenData->avgSpeed = pData.avgSpeed;
    }
    if (pData.avgSpeedLatestDrivingCycle_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_avgSpeedLatestDrivingCycle);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.avgSpeedLatestDrivingCycle = %d.", __FUNCTION__, pData.avgSpeedLatestDrivingCycle);
        marbenData->avgSpeedLatestDrivingCycle = pData.avgSpeedLatestDrivingCycle;
    }
    if (pData.aveFuelConsumptionUnit_presence)
    {
        if (verifyScope("aveFuelConsumptionUnit", (int64_t)pData.aveFuelConsumptionUnit.size(), (int64_t)1, (int64_t)10))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_aveFuelConsumptionUnit);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.aveFuelConsumptionUnit = %s.", __FUNCTION__, pData.aveFuelConsumptionUnit.c_str());
            marbenData->aveFuelConsumptionUnit.copyOctetString(pData.aveFuelConsumptionUnit.length(), (asnbyte*)(unsigned char*)(pData.aveFuelConsumptionUnit.c_str()));
        }
    }
    if (pData.indFuelConsumption_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_indFuelConsumption);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.indFuelConsumption = %d.", __FUNCTION__, pData.indFuelConsumption);
        marbenData->indFuelConsumption = pData.indFuelConsumption;
    }
    if (pData.notifForEmgyCallStatus_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_notifForEmgyCallStatus);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.notifForEmgyCallStatus = %d.", __FUNCTION__, pData.notifForEmgyCallStatus);
        marbenData->notifForEmgyCallStatus = pData.notifForEmgyCallStatus;
    }
    if (pData.tyrePreWarningDriver_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_tyrePreWarningDriver);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.tyrePreWarningDriver = %d.", __FUNCTION__, pData.tyrePreWarningDriver);
        marbenData->tyrePreWarningDriver = pData.tyrePreWarningDriver;
    }
    if (pData.tyrePreWarningPassenger_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_tyrePreWarningPassenger);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.tyrePreWarningPassenger = %d.", __FUNCTION__, pData.tyrePreWarningPassenger);
        marbenData->tyrePreWarningPassenger = pData.tyrePreWarningPassenger;
    }
    if (pData.tyrePreWarningDriverRear_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_tyrePreWarningDriverRear);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.tyrePreWarningDriverRear = %d.", __FUNCTION__, pData.tyrePreWarningDriverRear);
        marbenData->tyrePreWarningDriverRear = pData.tyrePreWarningDriverRear;
    }
    if (pData.tyrePreWarningPassengerRear_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_tyrePreWarningPassengerRear);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.tyrePreWarningPassengerRear = %d.", __FUNCTION__, pData.tyrePreWarningPassengerRear);
        marbenData->tyrePreWarningPassengerRear = pData.tyrePreWarningPassengerRear;
    }
    if (pData.tyreTempWarningDriver_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_tyreTempWarningDriver);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.tyreTempWarningDriver = %d.", __FUNCTION__, pData.tyreTempWarningDriver);
        marbenData->tyreTempWarningDriver = pData.tyreTempWarningDriver;
    }
    if (pData.tyreTempWarningPassenger_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_tyreTempWarningPassenger);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.tyreTempWarningPassenger = %d.", __FUNCTION__, pData.tyreTempWarningPassenger);
        marbenData->tyreTempWarningPassenger = pData.tyreTempWarningPassenger;
    }
    if (pData.tyreTempWarningDriverRear_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_tyreTempWarningDriverRear);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.tyreTempWarningDriverRear = %d.", __FUNCTION__, pData.tyreTempWarningDriverRear);
        marbenData->tyreTempWarningDriverRear = pData.tyreTempWarningDriverRear;
    }
    if (pData.tyreTempWarningPassengerRear_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_tyreTempWarningPassengerRear);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.tyreTempWarningPassengerRear = %d.", __FUNCTION__, pData.tyreTempWarningPassengerRear);
        marbenData->tyreTempWarningPassengerRear = pData.tyreTempWarningPassengerRear;
    }
    if (pData.seatBeltStatusDriver_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_seatBeltStatusDriver);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.seatBeltStatusDriver = %d.", __FUNCTION__, pData.seatBeltStatusDriver);
        marbenData->seatBeltStatusDriver = pData.seatBeltStatusDriver;
    }
    if (pData.seatBeltStatusPassenger_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_seatBeltStatusPassenger);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.seatBeltStatusPassenger = %d.", __FUNCTION__, pData.seatBeltStatusPassenger);
        marbenData->seatBeltStatusPassenger = pData.seatBeltStatusPassenger;
    }
    if (pData.seatBeltStatusDriverRear_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_seatBeltStatusDriverRear);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.seatBeltStatusDriverRear = %d.", __FUNCTION__, pData.seatBeltStatusDriverRear);
        marbenData->seatBeltStatusDriverRear = pData.seatBeltStatusDriverRear;
    }
    if (pData.seatBeltStatusPassengerRear_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_seatBeltStatusPassengerRear);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.seatBeltStatusPassengerRear = %d.", __FUNCTION__, pData.seatBeltStatusPassengerRear);
        marbenData->seatBeltStatusPassengerRear = pData.seatBeltStatusPassengerRear;
    }
    if (pData.seatBeltStatusMidRear_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_seatBeltStatusMidRear);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.seatBeltStatusMidRear = %d.", __FUNCTION__, pData.seatBeltStatusMidRear);
        marbenData->seatBeltStatusMidRear = pData.seatBeltStatusMidRear;
    }
    if (pData.seatBeltStatusThDriverRear_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_seatBeltStatusThDriverRear);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.seatBeltStatusThDriverRear = %d.", __FUNCTION__, pData.seatBeltStatusThDriverRear);
        marbenData->seatBeltStatusThDriverRear = pData.seatBeltStatusThDriverRear;
    }
    if (pData.seatBeltStatusThPassengerRear_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_seatBeltStatusThPassengerRear);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.seatBeltStatusThPassengerRear = %d.", __FUNCTION__, pData.seatBeltStatusThPassengerRear);
        marbenData->seatBeltStatusThPassengerRear = pData.seatBeltStatusThPassengerRear;
    }
    if (pData.seatBeltStatusThMidRear_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_seatBeltStatusThMidRear);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.seatBeltStatusThMidRear = %d.", __FUNCTION__, pData.seatBeltStatusThMidRear);
        marbenData->seatBeltStatusThMidRear = pData.seatBeltStatusThMidRear;
    }
    if (pData.brakePedalDepressed_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_brakePedalDepressed);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.brakePedalDepressed = %d.", __FUNCTION__, pData.brakePedalDepressed);
        marbenData->brakePedalDepressed = pData.brakePedalDepressed;
    }
    if (pData.gearManualStatus_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_gearManualStatus);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.gearManualStatus = %d.", __FUNCTION__, pData.gearManualStatus);
        marbenData->gearManualStatus = pData.gearManualStatus;
    }
    if (pData.gearAutoStatus_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_gearAutoStatus);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.gearAutoStatus = %d.", __FUNCTION__, pData.gearAutoStatus);
        marbenData->gearAutoStatus = pData.gearAutoStatus;
    }
    if (pData.engineSpeed_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_engineSpeed);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.engineSpeed = %d.", __FUNCTION__, pData.engineSpeed);
        marbenData->engineSpeed = pData.engineSpeed;
    }
    if (pData.transimissionGearPostion_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_transimissionGearPostion);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.transimissionGearPostion = %d.", __FUNCTION__, pData.transimissionGearPostion);
        marbenData->transimissionGearPostion = pData.transimissionGearPostion;
    }
    if (pData.cruiseControlStatus_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_cruiseControlStatus);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.cruiseControlStatus = %d.", __FUNCTION__, pData.cruiseControlStatus);
        marbenData->cruiseControlStatus = pData.cruiseControlStatus;
    }
    if (pData.engineBlockedStatus_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_engineBlockedStatus);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.engineBlockedStatus = %d.", __FUNCTION__, pData.engineBlockedStatus);
        marbenData->engineBlockedStatus = (int32_t)pData.engineBlockedStatus;
    }
    if (pData.tripMeter1_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_tripMeter1);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.tripMeter1 = %d.", __FUNCTION__, pData.tripMeter1);
        marbenData->tripMeter1 = pData.tripMeter1;
    }
    if (pData.tripMeter2_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_tripMeter2);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.tripMeter2 = %d.", __FUNCTION__, pData.tripMeter2);
        marbenData->tripMeter2 = pData.tripMeter2;
    }

    return true;
}

bool VdsMarbenAdaptGen::RunningStatus_Decode(const std::string &path, std::shared_ptr<RunningStatus_Model> &pData, asn_wrapper::RunningStatus* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::RunningStatus* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::RunningStatus*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_srsStatus))
    {
        pData->srsStatus_presence = true;
        pData->srsStatus = (Vds_SRSStatus)marbenData->srsStatus;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->srsStatus = %d.", __FUNCTION__, pData->srsStatus);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_srsCrashStatus))
    {
        pData->srsCrashStatus_presence = true;
        pData->srsCrashStatus = marbenData->srsCrashStatus;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->srsCrashStatus = %d.", __FUNCTION__, pData->srsCrashStatus);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_RunningStatus__odometer))
    {
        pData->odometer_presence = true;
        pData->odometer = marbenData->odometer;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->odometer = %d.", __FUNCTION__, pData->odometer);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_fuelLevel))
    {
        pData->fuelLevel_presence = true;
        pData->fuelLevel = marbenData->fuelLevel;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->fuelLevel = %d.", __FUNCTION__, pData->fuelLevel);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_fuelLevelStatus))
    {
        pData->fuelLevelStatus_presence = true;
        pData->fuelLevelStatus = marbenData->fuelLevelStatus;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->fuelLevelStatus = %d.", __FUNCTION__, pData->fuelLevelStatus);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_fuelEnLevel))
    {
        pData->fuelEnLevel_presence = true;
        pData->fuelEnLevel = marbenData->fuelEnLevel;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->fuelEnLevel = %d.", __FUNCTION__, pData->fuelEnLevel);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_fuelEnCnsFild))
    {
        pData->fuelEnCnsFild_presence = true;
        pData->fuelEnCnsFild = marbenData->fuelEnCnsFild;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->fuelEnCnsFild = %d.", __FUNCTION__, pData->fuelEnCnsFild);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_fuelEnCns))
    {
        pData->fuelEnCns_presence = true;
        pData->fuelEnCns = marbenData->fuelEnCns;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->fuelEnCns = %d.", __FUNCTION__, pData->fuelEnCns);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_fuelLow1WarningDriver))
    {
        pData->fuelLow1WarningDriver_presence = true;
        pData->fuelLow1WarningDriver = marbenData->fuelLow1WarningDriver;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->fuelLow1WarningDriver = %d.", __FUNCTION__, pData->fuelLow1WarningDriver);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_fuelLow2WarningDriver))
    {
        pData->fuelLow2WarningDriver_presence = true;
        pData->fuelLow2WarningDriver = marbenData->fuelLow2WarningDriver;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->fuelLow2WarningDriver = %d.", __FUNCTION__, pData->fuelLow2WarningDriver);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_distanceToEmpty))
    {
        pData->distanceToEmpty_presence = true;
        pData->distanceToEmpty = marbenData->distanceToEmpty;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->distanceToEmpty = %d.", __FUNCTION__, pData->distanceToEmpty);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_trvlDistance))
    {
        pData->trvlDistance_presence = true;
        pData->trvlDistance = marbenData->trvlDistance;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->trvlDistance = %d.", __FUNCTION__, pData->trvlDistance);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_aveFuelConsumption))
    {
        pData->aveFuelConsumption_presence = true;
        pData->aveFuelConsumption = marbenData->aveFuelConsumption;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->aveFuelConsumption = %d.", __FUNCTION__, pData->aveFuelConsumption);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_aveFuelConsumptionInLatestDrivingCycle))
    {
        pData->aveFuelConsumptionInLatestDrivingCycle_presence = true;
        pData->aveFuelConsumptionInLatestDrivingCycle = marbenData->aveFuelConsumptionInLatestDrivingCycle;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->aveFuelConsumptionInLatestDrivingCycle = %d.", __FUNCTION__, pData->aveFuelConsumptionInLatestDrivingCycle);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_avgSpeed))
    {
        pData->avgSpeed_presence = true;
        pData->avgSpeed = marbenData->avgSpeed;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->avgSpeed = %d.", __FUNCTION__, pData->avgSpeed);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_avgSpeedLatestDrivingCycle))
    {
        pData->avgSpeedLatestDrivingCycle_presence = true;
        pData->avgSpeedLatestDrivingCycle = marbenData->avgSpeedLatestDrivingCycle;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->avgSpeedLatestDrivingCycle = %d.", __FUNCTION__, pData->avgSpeedLatestDrivingCycle);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_aveFuelConsumptionUnit))
    {
        pData->aveFuelConsumptionUnit_presence = true;
        pData->aveFuelConsumptionUnit = std::string((const char*)marbenData->aveFuelConsumptionUnit.value, marbenData->aveFuelConsumptionUnit.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->aveFuelConsumptionUnit = %s.", __FUNCTION__, pData->aveFuelConsumptionUnit.c_str());
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_indFuelConsumption))
    {
        pData->indFuelConsumption_presence = true;
        pData->indFuelConsumption = marbenData->indFuelConsumption;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->indFuelConsumption = %d.", __FUNCTION__, pData->indFuelConsumption);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_notifForEmgyCallStatus))
    {
        pData->notifForEmgyCallStatus_presence = true;
        pData->notifForEmgyCallStatus = marbenData->notifForEmgyCallStatus;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->notifForEmgyCallStatus = %d.", __FUNCTION__, pData->notifForEmgyCallStatus);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_tyrePreWarningDriver))
    {
        pData->tyrePreWarningDriver_presence = true;
        pData->tyrePreWarningDriver = marbenData->tyrePreWarningDriver;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->tyrePreWarningDriver = %d.", __FUNCTION__, pData->tyrePreWarningDriver);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_tyrePreWarningPassenger))
    {
        pData->tyrePreWarningPassenger_presence = true;
        pData->tyrePreWarningPassenger = marbenData->tyrePreWarningPassenger;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->tyrePreWarningPassenger = %d.", __FUNCTION__, pData->tyrePreWarningPassenger);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_tyrePreWarningDriverRear))
    {
        pData->tyrePreWarningDriverRear_presence = true;
        pData->tyrePreWarningDriverRear = marbenData->tyrePreWarningDriverRear;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->tyrePreWarningDriverRear = %d.", __FUNCTION__, pData->tyrePreWarningDriverRear);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_tyrePreWarningPassengerRear))
    {
        pData->tyrePreWarningPassengerRear_presence = true;
        pData->tyrePreWarningPassengerRear = marbenData->tyrePreWarningPassengerRear;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->tyrePreWarningPassengerRear = %d.", __FUNCTION__, pData->tyrePreWarningPassengerRear);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_tyreTempWarningDriver))
    {
        pData->tyreTempWarningDriver_presence = true;
        pData->tyreTempWarningDriver = marbenData->tyreTempWarningDriver;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->tyreTempWarningDriver = %d.", __FUNCTION__, pData->tyreTempWarningDriver);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_tyreTempWarningPassenger))
    {
        pData->tyreTempWarningPassenger_presence = true;
        pData->tyreTempWarningPassenger = marbenData->tyreTempWarningPassenger;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->tyreTempWarningPassenger = %d.", __FUNCTION__, pData->tyreTempWarningPassenger);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_tyreTempWarningDriverRear))
    {
        pData->tyreTempWarningDriverRear_presence = true;
        pData->tyreTempWarningDriverRear = marbenData->tyreTempWarningDriverRear;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->tyreTempWarningDriverRear = %d.", __FUNCTION__, pData->tyreTempWarningDriverRear);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_tyreTempWarningPassengerRear))
    {
        pData->tyreTempWarningPassengerRear_presence = true;
        pData->tyreTempWarningPassengerRear = marbenData->tyreTempWarningPassengerRear;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->tyreTempWarningPassengerRear = %d.", __FUNCTION__, pData->tyreTempWarningPassengerRear);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_seatBeltStatusDriver))
    {
        pData->seatBeltStatusDriver_presence = true;
        pData->seatBeltStatusDriver = marbenData->seatBeltStatusDriver;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->seatBeltStatusDriver = %d.", __FUNCTION__, pData->seatBeltStatusDriver);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_seatBeltStatusPassenger))
    {
        pData->seatBeltStatusPassenger_presence = true;
        pData->seatBeltStatusPassenger = marbenData->seatBeltStatusPassenger;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->seatBeltStatusPassenger = %d.", __FUNCTION__, pData->seatBeltStatusPassenger);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_seatBeltStatusDriverRear))
    {
        pData->seatBeltStatusDriverRear_presence = true;
        pData->seatBeltStatusDriverRear = marbenData->seatBeltStatusDriverRear;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->seatBeltStatusDriverRear = %d.", __FUNCTION__, pData->seatBeltStatusDriverRear);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_seatBeltStatusPassengerRear))
    {
        pData->seatBeltStatusPassengerRear_presence = true;
        pData->seatBeltStatusPassengerRear = marbenData->seatBeltStatusPassengerRear;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->seatBeltStatusPassengerRear = %d.", __FUNCTION__, pData->seatBeltStatusPassengerRear);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_seatBeltStatusMidRear))
    {
        pData->seatBeltStatusMidRear_presence = true;
        pData->seatBeltStatusMidRear = marbenData->seatBeltStatusMidRear;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->seatBeltStatusMidRear = %d.", __FUNCTION__, pData->seatBeltStatusMidRear);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_seatBeltStatusThDriverRear))
    {
        pData->seatBeltStatusThDriverRear_presence = true;
        pData->seatBeltStatusThDriverRear = marbenData->seatBeltStatusThDriverRear;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->seatBeltStatusThDriverRear = %d.", __FUNCTION__, pData->seatBeltStatusThDriverRear);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_seatBeltStatusThPassengerRear))
    {
        pData->seatBeltStatusThPassengerRear_presence = true;
        pData->seatBeltStatusThPassengerRear = marbenData->seatBeltStatusThPassengerRear;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->seatBeltStatusThPassengerRear = %d.", __FUNCTION__, pData->seatBeltStatusThPassengerRear);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_seatBeltStatusThMidRear))
    {
        pData->seatBeltStatusThMidRear_presence = true;
        pData->seatBeltStatusThMidRear = marbenData->seatBeltStatusThMidRear;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->seatBeltStatusThMidRear = %d.", __FUNCTION__, pData->seatBeltStatusThMidRear);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_brakePedalDepressed))
    {
        pData->brakePedalDepressed_presence = true;
        pData->brakePedalDepressed = marbenData->brakePedalDepressed;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->brakePedalDepressed = %d.", __FUNCTION__, pData->brakePedalDepressed);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_gearManualStatus))
    {
        pData->gearManualStatus_presence = true;
        pData->gearManualStatus = marbenData->gearManualStatus;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->gearManualStatus = %d.", __FUNCTION__, pData->gearManualStatus);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_gearAutoStatus))
    {
        pData->gearAutoStatus_presence = true;
        pData->gearAutoStatus = marbenData->gearAutoStatus;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->gearAutoStatus = %d.", __FUNCTION__, pData->gearAutoStatus);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_engineSpeed))
    {
        pData->engineSpeed_presence = true;
        pData->engineSpeed = marbenData->engineSpeed;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->engineSpeed = %d.", __FUNCTION__, pData->engineSpeed);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_transimissionGearPostion))
    {
        pData->transimissionGearPostion_presence = true;
        pData->transimissionGearPostion = marbenData->transimissionGearPostion;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->transimissionGearPostion = %d.", __FUNCTION__, pData->transimissionGearPostion);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_cruiseControlStatus))
    {
        pData->cruiseControlStatus_presence = true;
        pData->cruiseControlStatus = marbenData->cruiseControlStatus;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->cruiseControlStatus = %d.", __FUNCTION__, pData->cruiseControlStatus);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_engineBlockedStatus))
    {
        pData->engineBlockedStatus_presence = true;
        pData->engineBlockedStatus = (Vds_EngineBlockedStatus)marbenData->engineBlockedStatus;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->engineBlockedStatus = %d.", __FUNCTION__, pData->engineBlockedStatus);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_tripMeter1))
    {
        pData->tripMeter1_presence = true;
        pData->tripMeter1 = marbenData->tripMeter1;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->tripMeter1 = %d.", __FUNCTION__, pData->tripMeter1);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_tripMeter2))
    {
        pData->tripMeter2_presence = true;
        pData->tripMeter2 = marbenData->tripMeter2;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->tripMeter2 = %d.", __FUNCTION__, pData->tripMeter2);
    }

    return true;
}

bool VdsMarbenAdaptGen::ClimateStatus_Encode(const ClimateStatus_Model &pData, asn_wrapper::ClimateStatus* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::ClimateStatus* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::ClimateStatus*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (pData.interiorTemp_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_interiorTemp);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.interiorTemp = %d.", __FUNCTION__, pData.interiorTemp);
        marbenData->interiorTemp = pData.interiorTemp;
    }
    if (pData.exteriorTemp_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_exteriorTemp);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.exteriorTemp = %d.", __FUNCTION__, pData.exteriorTemp);
        marbenData->exteriorTemp = pData.exteriorTemp;
    }
    if (pData.preClimateActive_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_preClimateActive);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.preClimateActive = %d.", __FUNCTION__, pData.preClimateActive);
        marbenData->preClimateActive = pData.preClimateActive;
    }
    if (pData.airCleanSts_presence)
    {
        if (verifyScope("airCleanSts", (int64_t)pData.airCleanSts, (int64_t)0, (int64_t)1))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_airCleanSts);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.airCleanSts = %d.", __FUNCTION__, pData.airCleanSts);
            marbenData->airCleanSts = pData.airCleanSts;
        }
    }
    if (pData.drvHeatSts_presence)
    {
        if (verifyScope("drvHeatSts", (int64_t)pData.drvHeatSts, (int64_t)0, (int64_t)7))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_drvHeatSts);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.drvHeatSts = %d.", __FUNCTION__, pData.drvHeatSts);
            marbenData->drvHeatSts = pData.drvHeatSts;
        }
    }
    if (pData.passHeatingSts_presence)
    {
        if (verifyScope("passHeatingSts", (int64_t)pData.passHeatingSts, (int64_t)0, (int64_t)7))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_passHeatingSts);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.passHeatingSts = %d.", __FUNCTION__, pData.passHeatingSts);
            marbenData->passHeatingSts = pData.passHeatingSts;
        }
    }
    if (pData.rlHeatingSts_presence)
    {
        if (verifyScope("rlHeatingSts", (int64_t)pData.rlHeatingSts, (int64_t)0, (int64_t)7))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_rlHeatingSts);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.rlHeatingSts = %d.", __FUNCTION__, pData.rlHeatingSts);
            marbenData->rlHeatingSts = pData.rlHeatingSts;
        }
    }
    if (pData.rrHeatingSts_presence)
    {
        if (verifyScope("rrHeatingSts", (int64_t)pData.rrHeatingSts, (int64_t)0, (int64_t)7))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_rrHeatingSts);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.rrHeatingSts = %d.", __FUNCTION__, pData.rrHeatingSts);
            marbenData->rrHeatingSts = pData.rrHeatingSts;
        }
    }
    if (pData.drvVentSts_presence)
    {
        if (verifyScope("drvVentSts", (int64_t)pData.drvVentSts, (int64_t)0, (int64_t)7))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_drvVentSts);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.drvVentSts = %d.", __FUNCTION__, pData.drvVentSts);
            marbenData->drvVentSts = pData.drvVentSts;
        }
    }
    if (pData.passVentSts_presence)
    {
        if (verifyScope("passVentSts", (int64_t)pData.passVentSts, (int64_t)0, (int64_t)7))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_passVentSts);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.passVentSts = %d.", __FUNCTION__, pData.passVentSts);
            marbenData->passVentSts = pData.passVentSts;
        }
    }
    if (pData.rrVentSts_presence)
    {
        if (verifyScope("rrVentSts", (int64_t)pData.rrVentSts, (int64_t)0, (int64_t)7))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_rrVentSts);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.rrVentSts = %d.", __FUNCTION__, pData.rrVentSts);
            marbenData->rrVentSts = pData.rrVentSts;
        }
    }
    if (pData.rlVentSts_presence)
    {
        if (verifyScope("rlVentSts", (int64_t)pData.rlVentSts, (int64_t)0, (int64_t)7))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_rlVentSts);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.rlVentSts = %d.", __FUNCTION__, pData.rlVentSts);
            marbenData->rlVentSts = pData.rlVentSts;
        }
    }
    if (pData.interCO2Warning_presence)
    {
        if (verifyScope("interCO2Warning", (int64_t)pData.interCO2Warning, (int64_t)0, (int64_t)7))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_interCO2Warning);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.interCO2Warning = %d.", __FUNCTION__, pData.interCO2Warning);
            marbenData->interCO2Warning = pData.interCO2Warning;
        }
    }
    if (pData.fragStrs_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_fragStrs);
        if (marbenData->fragStrs == nullptr )
        {
            marbenData->fragStrs = new asn_wrapper::FragStrs();
        }
        FragStrs_Encode(pData.fragStrs, marbenData->fragStrs);
    }

    return true;
}

bool VdsMarbenAdaptGen::ClimateStatus_Decode(const std::string &path, std::shared_ptr<ClimateStatus_Model> &pData, asn_wrapper::ClimateStatus* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::ClimateStatus* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::ClimateStatus*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_interiorTemp))
    {
        pData->interiorTemp_presence = true;
        pData->interiorTemp = marbenData->interiorTemp;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->interiorTemp = %d.", __FUNCTION__, pData->interiorTemp);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_exteriorTemp))
    {
        pData->exteriorTemp_presence = true;
        pData->exteriorTemp = marbenData->exteriorTemp;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->exteriorTemp = %d.", __FUNCTION__, pData->exteriorTemp);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_preClimateActive))
    {
        pData->preClimateActive_presence = true;
        pData->preClimateActive = marbenData->preClimateActive;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->preClimateActive = %d.", __FUNCTION__, pData->preClimateActive);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_airCleanSts))
    {
        pData->airCleanSts_presence = true;
        pData->airCleanSts = marbenData->airCleanSts;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->airCleanSts = %d.", __FUNCTION__, pData->airCleanSts);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_drvHeatSts))
    {
        pData->drvHeatSts_presence = true;
        pData->drvHeatSts = marbenData->drvHeatSts;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->drvHeatSts = %d.", __FUNCTION__, pData->drvHeatSts);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_passHeatingSts))
    {
        pData->passHeatingSts_presence = true;
        pData->passHeatingSts = marbenData->passHeatingSts;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->passHeatingSts = %d.", __FUNCTION__, pData->passHeatingSts);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_rlHeatingSts))
    {
        pData->rlHeatingSts_presence = true;
        pData->rlHeatingSts = marbenData->rlHeatingSts;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->rlHeatingSts = %d.", __FUNCTION__, pData->rlHeatingSts);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_rrHeatingSts))
    {
        pData->rrHeatingSts_presence = true;
        pData->rrHeatingSts = marbenData->rrHeatingSts;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->rrHeatingSts = %d.", __FUNCTION__, pData->rrHeatingSts);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_drvVentSts))
    {
        pData->drvVentSts_presence = true;
        pData->drvVentSts = marbenData->drvVentSts;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->drvVentSts = %d.", __FUNCTION__, pData->drvVentSts);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_passVentSts))
    {
        pData->passVentSts_presence = true;
        pData->passVentSts = marbenData->passVentSts;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->passVentSts = %d.", __FUNCTION__, pData->passVentSts);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_rrVentSts))
    {
        pData->rrVentSts_presence = true;
        pData->rrVentSts = marbenData->rrVentSts;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->rrVentSts = %d.", __FUNCTION__, pData->rrVentSts);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_rlVentSts))
    {
        pData->rlVentSts_presence = true;
        pData->rlVentSts = marbenData->rlVentSts;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->rlVentSts = %d.", __FUNCTION__, pData->rlVentSts);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_interCO2Warning))
    {
        pData->interCO2Warning_presence = true;
        pData->interCO2Warning = marbenData->interCO2Warning;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->interCO2Warning = %d.", __FUNCTION__, pData->interCO2Warning);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_fragStrs))
    {
        pData->fragStrs_presence = true;
        if (marbenData->fragStrs != nullptr )
        {
            std::shared_ptr<FragStrs_Model> p_fragStrs = std::make_shared<FragStrs_Model>();
            result = FragStrs_Decode( "" , p_fragStrs , marbenData->fragStrs);
            if (result)
            {
                pData->fragStrs = (*p_fragStrs);
            }
        }

    }

    return true;
}

bool VdsMarbenAdaptGen::PollutionStatus_Encode(const PollutionStatus_Model &pData, asn_wrapper::PollutionStatus* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::PollutionStatus* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::PollutionStatus*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (pData.interiorPM25_presence)
    {
        if (verifyScope("interiorPM25", (int64_t)pData.interiorPM25, (int64_t)-1, (int64_t)2048))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_interiorPM25);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.interiorPM25 = %d.", __FUNCTION__, pData.interiorPM25);
            marbenData->interiorPM25 = pData.interiorPM25;
        }
    }
    if (pData.exteriorPM25_presence)
    {
        if (verifyScope("exteriorPM25", (int64_t)pData.exteriorPM25, (int64_t)-1, (int64_t)2048))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_exteriorPM25);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.exteriorPM25 = %d.", __FUNCTION__, pData.exteriorPM25);
            marbenData->exteriorPM25 = pData.exteriorPM25;
        }
    }
    if (pData.interiorPM25Level_presence)
    {
        if (verifyScope("interiorPM25Level", (int64_t)pData.interiorPM25Level, (int64_t)0, (int64_t)20))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_interiorPM25Level);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.interiorPM25Level = %d.", __FUNCTION__, pData.interiorPM25Level);
            marbenData->interiorPM25Level = pData.interiorPM25Level;
        }
    }
    if (pData.exteriorPM25Level_presence)
    {
        if (verifyScope("exteriorPM25Level", (int64_t)pData.exteriorPM25Level, (int64_t)0, (int64_t)20))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_exteriorPM25Level);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.exteriorPM25Level = %d.", __FUNCTION__, pData.exteriorPM25Level);
            marbenData->exteriorPM25Level = pData.exteriorPM25Level;
        }
    }
    if (pData.airQualityIndex_presence)
    {
        if (verifyScope("airQualityIndex", (int64_t)pData.airQualityIndex, (int64_t)0, (int64_t)1023))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_airQualityIndex);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.airQualityIndex = %d.", __FUNCTION__, pData.airQualityIndex);
            marbenData->airQualityIndex = pData.airQualityIndex;
        }
    }
    if (pData.airParticleConcentration_presence)
    {
        if (verifyScope("airParticleConcentration", (int64_t)pData.airParticleConcentration, (int64_t)0, (int64_t)1023))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_airParticleConcentration);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.airParticleConcentration = %d.", __FUNCTION__, pData.airParticleConcentration);
            marbenData->airParticleConcentration = pData.airParticleConcentration;
        }
    }

    return true;
}

bool VdsMarbenAdaptGen::PollutionStatus_Decode(const std::string &path, std::shared_ptr<PollutionStatus_Model> &pData, asn_wrapper::PollutionStatus* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::PollutionStatus* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::PollutionStatus*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_interiorPM25))
    {
        pData->interiorPM25_presence = true;
        pData->interiorPM25 = marbenData->interiorPM25;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->interiorPM25 = %d.", __FUNCTION__, pData->interiorPM25);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_exteriorPM25))
    {
        pData->exteriorPM25_presence = true;
        pData->exteriorPM25 = marbenData->exteriorPM25;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->exteriorPM25 = %d.", __FUNCTION__, pData->exteriorPM25);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_interiorPM25Level))
    {
        pData->interiorPM25Level_presence = true;
        pData->interiorPM25Level = marbenData->interiorPM25Level;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->interiorPM25Level = %d.", __FUNCTION__, pData->interiorPM25Level);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_exteriorPM25Level))
    {
        pData->exteriorPM25Level_presence = true;
        pData->exteriorPM25Level = marbenData->exteriorPM25Level;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->exteriorPM25Level = %d.", __FUNCTION__, pData->exteriorPM25Level);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_airQualityIndex))
    {
        pData->airQualityIndex_presence = true;
        pData->airQualityIndex = marbenData->airQualityIndex;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->airQualityIndex = %d.", __FUNCTION__, pData->airQualityIndex);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_airParticleConcentration))
    {
        pData->airParticleConcentration_presence = true;
        pData->airParticleConcentration = marbenData->airParticleConcentration;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->airParticleConcentration = %d.", __FUNCTION__, pData->airParticleConcentration);
    }

    return true;
}

bool VdsMarbenAdaptGen::ElectricStatus_Encode(const ElectricStatus_Model &pData, asn_wrapper::ElectricStatus* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::ElectricStatus* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::ElectricStatus*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (pData.isCharging_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_isCharging);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.isCharging = %d.", __FUNCTION__, pData.isCharging);
        marbenData->isCharging = pData.isCharging;
    }
    if (pData.isPluggedIn_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_isPluggedIn);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.isPluggedIn = %d.", __FUNCTION__, pData.isPluggedIn);
        marbenData->isPluggedIn = pData.isPluggedIn;
    }
    if (pData.stateOfCharge_presence)
    {
        if (verifyScope("stateOfCharge", (int64_t)pData.stateOfCharge, (int64_t)0, (int64_t)1000))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_ElectricStatus__stateOfCharge);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.stateOfCharge = %d.", __FUNCTION__, pData.stateOfCharge);
            marbenData->stateOfCharge = pData.stateOfCharge;
        }
    }
    if (pData.chargeLevel_presence)
    {
        if (verifyScope("chargeLevel", (int64_t)pData.chargeLevel, (int64_t)0, (int64_t)1000))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_ElectricStatus__chargeLevel);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.chargeLevel = %d.", __FUNCTION__, pData.chargeLevel);
            marbenData->chargeLevel = pData.chargeLevel;
        }
    }
    if (pData.timeToFullyCharged_presence)
    {
        if (verifyScope("timeToFullyCharged", (int64_t)pData.timeToFullyCharged, (int64_t)0, (int64_t)2047))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_timeToFullyCharged);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.timeToFullyCharged = %d.", __FUNCTION__, pData.timeToFullyCharged);
            marbenData->timeToFullyCharged = pData.timeToFullyCharged;
        }
    }
    if (pData.statusOfChargerConnection_presence)
    {
        if (verifyScope("statusOfChargerConnection", (int64_t)pData.statusOfChargerConnection, (int64_t)0, (int64_t)10))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_statusOfChargerConnection);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.statusOfChargerConnection = %d.", __FUNCTION__, pData.statusOfChargerConnection);
            marbenData->statusOfChargerConnection = pData.statusOfChargerConnection;
        }
    }
    if (pData.chargerState_presence)
    {
        if (verifyScope("chargerState", (int64_t)pData.chargerState, (int64_t)0, (int64_t)10))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_chargerState);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.chargerState = %d.", __FUNCTION__, pData.chargerState);
            marbenData->chargerState = pData.chargerState;
        }
    }
    if (pData.distanceToEmptyOnBatteryOnly_presence)
    {
        if (verifyScope("distanceToEmptyOnBatteryOnly", (int64_t)pData.distanceToEmptyOnBatteryOnly, (int64_t)0, (int64_t)1023))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_distanceToEmptyOnBatteryOnly);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.distanceToEmptyOnBatteryOnly = %d.", __FUNCTION__, pData.distanceToEmptyOnBatteryOnly);
            marbenData->distanceToEmptyOnBatteryOnly = pData.distanceToEmptyOnBatteryOnly;
        }
    }
    if (pData.ems48VSOC_presence)
    {
        if (verifyScope("ems48VSOC", (int64_t)pData.ems48VSOC, (int64_t)0, (int64_t)2000))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_ems48VSOC);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.ems48VSOC = %d.", __FUNCTION__, pData.ems48VSOC);
            marbenData->ems48VSOC = pData.ems48VSOC;
        }
    }
    if (pData.ems48VDisSOC_presence)
    {
        if (verifyScope("ems48VDisSOC", (int64_t)pData.ems48VDisSOC, (int64_t)0, (int64_t)2000))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_ems48VDisSOC);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.ems48VDisSOC = %d.", __FUNCTION__, pData.ems48VDisSOC);
            marbenData->ems48VDisSOC = pData.ems48VDisSOC;
        }
    }
    if (pData.emsHVRBSError_presence)
    {
        if (verifyScope("emsHVRBSError", (int64_t)pData.emsHVRBSError, (int64_t)0, (int64_t)1))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_emsHVRBSError);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.emsHVRBSError = %d.", __FUNCTION__, pData.emsHVRBSError);
            marbenData->emsHVRBSError = pData.emsHVRBSError;
        }
    }
    if (pData.emsRBSModeDisplay_presence)
    {
        if (verifyScope("emsRBSModeDisplay", (int64_t)pData.emsRBSModeDisplay, (int64_t)0, (int64_t)7))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_emsRBSModeDisplay);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.emsRBSModeDisplay = %d.", __FUNCTION__, pData.emsRBSModeDisplay);
            marbenData->emsRBSModeDisplay = pData.emsRBSModeDisplay;
        }
    }
    if (pData.emsOVPActive_presence)
    {
        if (verifyScope("emsOVPActive", (int64_t)pData.emsOVPActive, (int64_t)0, (int64_t)1))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_emsOVPActive);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.emsOVPActive = %d.", __FUNCTION__, pData.emsOVPActive);
            marbenData->emsOVPActive = pData.emsOVPActive;
        }
    }
    if (pData.ems48vPackTemp1_presence)
    {
        if (verifyScope("ems48vPackTemp1", (int64_t)pData.ems48vPackTemp1, (int64_t)0, (int64_t)255))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_ems48vPackTemp1);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.ems48vPackTemp1 = %d.", __FUNCTION__, pData.ems48vPackTemp1);
            marbenData->ems48vPackTemp1 = pData.ems48vPackTemp1;
        }
    }
    if (pData.ems48vPackTemp2_presence)
    {
        if (verifyScope("ems48vPackTemp2", (int64_t)pData.ems48vPackTemp2, (int64_t)0, (int64_t)255))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_ems48vPackTemp2);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.ems48vPackTemp2 = %d.", __FUNCTION__, pData.ems48vPackTemp2);
            marbenData->ems48vPackTemp2 = pData.ems48vPackTemp2;
        }
    }
    if (pData.emsBMSLBuildSwVersion_presence)
    {
        if (verifyScope("emsBMSLBuildSwVersion", (int64_t)pData.emsBMSLBuildSwVersion.size(), (int64_t)1, (int64_t)255))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_emsBMSLBuildSwVersion);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.emsBMSLBuildSwVersion = %s.", __FUNCTION__, pData.emsBMSLBuildSwVersion.c_str());
            marbenData->emsBMSLBuildSwVersion.copyOctetString(pData.emsBMSLBuildSwVersion.length(), (asnbyte*)(unsigned char*)(pData.emsBMSLBuildSwVersion.c_str()));
        }
    }
    if (verifyScope("emsCBRemainingLife", (int64_t)pData.emsCBRemainingLife, (int64_t)0, (int64_t)100))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.emsCBRemainingLife = %d.", __FUNCTION__, pData.emsCBRemainingLife);
        marbenData->emsCBRemainingLife = pData.emsCBRemainingLife;
    }
    if (pData.chargeHvSts_presence)
    {
        if (verifyScope("chargeHvSts", (int64_t)pData.chargeHvSts, (int64_t)0, (int64_t)3))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_chargeHvSts);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.chargeHvSts = %d.", __FUNCTION__, pData.chargeHvSts);
            marbenData->chargeHvSts = pData.chargeHvSts;
        }
    }
    if (pData.ptReady_presence)
    {
        if (verifyScope("ptReady", (int64_t)pData.ptReady, (int64_t)0, (int64_t)3))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_ptReady);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.ptReady = %d.", __FUNCTION__, pData.ptReady);
            marbenData->ptReady = pData.ptReady;
        }
    }
    if (pData.averPowerConsumption_presence)
    {
        if (verifyScope("averPowerConsumption", (int64_t)pData.averPowerConsumption, (int64_t)0, (int64_t)5000))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_averPowerConsumption);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.averPowerConsumption = %d.", __FUNCTION__, pData.averPowerConsumption);
            marbenData->averPowerConsumption = pData.averPowerConsumption;
        }
    }
    if (pData.indPowerConsumption_presence)
    {
        if (verifyScope("indPowerConsumption", (int64_t)pData.indPowerConsumption, (int64_t)0, (int64_t)5000))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_indPowerConsumption);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.indPowerConsumption = %d.", __FUNCTION__, pData.indPowerConsumption);
            marbenData->indPowerConsumption = pData.indPowerConsumption;
        }
    }
    if (pData.dcDcActvd_presence)
    {
        if (verifyScope("dcDcActvd", (int64_t)pData.dcDcActvd, (int64_t)0, (int64_t)10))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_dcDcActvd);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.dcDcActvd = %d.", __FUNCTION__, pData.dcDcActvd);
            marbenData->dcDcActvd = pData.dcDcActvd;
        }
    }
    if (pData.dcDcConnectStatus_presence)
    {
        if (verifyScope("dcDcConnectStatus", (int64_t)pData.dcDcConnectStatus, (int64_t)0, (int64_t)20))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_dcDcConnectStatus);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.dcDcConnectStatus = %d.", __FUNCTION__, pData.dcDcConnectStatus);
            marbenData->dcDcConnectStatus = pData.dcDcConnectStatus;
        }
    }
    if (pData.dcChargeIAct_presence)
    {
        if (verifyScope("dcChargeIAct", (int64_t)pData.dcChargeIAct, (int64_t)0, (int64_t)65535))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_dcChargeIAct);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.dcChargeIAct = %d.", __FUNCTION__, pData.dcChargeIAct);
            marbenData->dcChargeIAct = pData.dcChargeIAct;
        }
    }
    if (pData.dcChargeSts_presence)
    {
        if (verifyScope("dcChargeSts", (int64_t)pData.dcChargeSts, (int64_t)0, (int64_t)20))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_dcChargeSts);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.dcChargeSts = %d.", __FUNCTION__, pData.dcChargeSts);
            marbenData->dcChargeSts = pData.dcChargeSts;
        }
    }
    if (pData.wptObjt_presence)
    {
        if (verifyScope("wptObjt", (int64_t)pData.wptObjt, (int64_t)0, (int64_t)1))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_wptObjt);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.wptObjt = %d.", __FUNCTION__, pData.wptObjt);
            marbenData->wptObjt = pData.wptObjt;
        }
    }
    if (pData.wptFineAlignt_presence)
    {
        if (verifyScope("wptFineAlignt", (int64_t)pData.wptFineAlignt, (int64_t)0, (int64_t)1))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_wptFineAlignt);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.wptFineAlignt = %d.", __FUNCTION__, pData.wptFineAlignt);
            marbenData->wptFineAlignt = pData.wptFineAlignt;
        }
    }
    if (pData.wptActived_presence)
    {
        if (verifyScope("wptActived", (int64_t)pData.wptActived, (int64_t)0, (int64_t)1))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_wptActived);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.wptActived = %d.", __FUNCTION__, pData.wptActived);
            marbenData->wptActived = pData.wptActived;
        }
    }
    if (pData.wptChargeIAct_presence)
    {
        if (verifyScope("wptChargeIAct", (int64_t)pData.wptChargeIAct, (int64_t)0, (int64_t)5000))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_wptChargeIAct);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.wptChargeIAct = %d.", __FUNCTION__, pData.wptChargeIAct);
            marbenData->wptChargeIAct = pData.wptChargeIAct;
        }
    }
    if (pData.wptChargeUAct_presence)
    {
        if (verifyScope("wptChargeUAct", (int64_t)pData.wptChargeUAct, (int64_t)0, (int64_t)5000))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_wptChargeUAct);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.wptChargeUAct = %d.", __FUNCTION__, pData.wptChargeUAct);
            marbenData->wptChargeUAct = pData.wptChargeUAct;
        }
    }
    if (pData.wptChargeSts_presence)
    {
        if (verifyScope("wptChargeSts", (int64_t)pData.wptChargeSts, (int64_t)0, (int64_t)20))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_wptChargeSts);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.wptChargeSts = %d.", __FUNCTION__, pData.wptChargeSts);
            marbenData->wptChargeSts = pData.wptChargeSts;
        }
    }
    if (pData.chargeIAct_presence)
    {
        if (verifyScope("chargeIAct", (int64_t)pData.chargeIAct, (int64_t)0, (int64_t)5000))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_chargeIAct);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.chargeIAct = %d.", __FUNCTION__, pData.chargeIAct);
            marbenData->chargeIAct = pData.chargeIAct;
        }
    }
    if (pData.chargeUAct_presence)
    {
        if (verifyScope("chargeUAct", (int64_t)pData.chargeUAct, (int64_t)0, (int64_t)5000))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_chargeUAct);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.chargeUAct = %d.", __FUNCTION__, pData.chargeUAct);
            marbenData->chargeUAct = pData.chargeUAct;
        }
    }
    if (pData.chargeSts_presence)
    {
        if (verifyScope("chargeSts", (int64_t)pData.chargeSts, (int64_t)0, (int64_t)20))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_chargeSts);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.chargeSts = %d.", __FUNCTION__, pData.chargeSts);
            marbenData->chargeSts = pData.chargeSts;
        }
    }
    if (pData.disChargeConnectStatus_presence)
    {
        if (verifyScope("disChargeConnectStatus", (int64_t)pData.disChargeConnectStatus, (int64_t)0, (int64_t)20))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_disChargeConnectStatus);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.disChargeConnectStatus = %d.", __FUNCTION__, pData.disChargeConnectStatus);
            marbenData->disChargeConnectStatus = pData.disChargeConnectStatus;
        }
    }
    if (pData.disChargeIAct_presence)
    {
        if (verifyScope("disChargeIAct", (int64_t)pData.disChargeIAct, (int64_t)0, (int64_t)5000))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_disChargeIAct);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.disChargeIAct = %d.", __FUNCTION__, pData.disChargeIAct);
            marbenData->disChargeIAct = pData.disChargeIAct;
        }
    }
    if (pData.disChargeUAct_presence)
    {
        if (verifyScope("disChargeUAct", (int64_t)pData.disChargeUAct, (int64_t)0, (int64_t)5000))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_disChargeUAct);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.disChargeUAct = %d.", __FUNCTION__, pData.disChargeUAct);
            marbenData->disChargeUAct = pData.disChargeUAct;
        }
    }
    if (pData.disChargeSts_presence)
    {
        if (verifyScope("disChargeSts", (int64_t)pData.disChargeSts, (int64_t)0, (int64_t)20))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_disChargeSts);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.disChargeSts = %d.", __FUNCTION__, pData.disChargeSts);
            marbenData->disChargeSts = pData.disChargeSts;
        }
    }

    return true;
}

bool VdsMarbenAdaptGen::ElectricStatus_Decode(const std::string &path, std::shared_ptr<ElectricStatus_Model> &pData, asn_wrapper::ElectricStatus* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::ElectricStatus* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::ElectricStatus*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_isCharging))
    {
        pData->isCharging_presence = true;
        pData->isCharging = marbenData->isCharging;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->isCharging = %d.", __FUNCTION__, pData->isCharging);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_isPluggedIn))
    {
        pData->isPluggedIn_presence = true;
        pData->isPluggedIn = marbenData->isPluggedIn;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->isPluggedIn = %d.", __FUNCTION__, pData->isPluggedIn);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_ElectricStatus__stateOfCharge))
    {
        pData->stateOfCharge_presence = true;
        pData->stateOfCharge = marbenData->stateOfCharge;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->stateOfCharge = %d.", __FUNCTION__, pData->stateOfCharge);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_ElectricStatus__chargeLevel))
    {
        pData->chargeLevel_presence = true;
        pData->chargeLevel = marbenData->chargeLevel;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->chargeLevel = %d.", __FUNCTION__, pData->chargeLevel);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_timeToFullyCharged))
    {
        pData->timeToFullyCharged_presence = true;
        pData->timeToFullyCharged = marbenData->timeToFullyCharged;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->timeToFullyCharged = %d.", __FUNCTION__, pData->timeToFullyCharged);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_statusOfChargerConnection))
    {
        pData->statusOfChargerConnection_presence = true;
        pData->statusOfChargerConnection = marbenData->statusOfChargerConnection;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->statusOfChargerConnection = %d.", __FUNCTION__, pData->statusOfChargerConnection);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_chargerState))
    {
        pData->chargerState_presence = true;
        pData->chargerState = marbenData->chargerState;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->chargerState = %d.", __FUNCTION__, pData->chargerState);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_distanceToEmptyOnBatteryOnly))
    {
        pData->distanceToEmptyOnBatteryOnly_presence = true;
        pData->distanceToEmptyOnBatteryOnly = marbenData->distanceToEmptyOnBatteryOnly;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->distanceToEmptyOnBatteryOnly = %d.", __FUNCTION__, pData->distanceToEmptyOnBatteryOnly);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_ems48VSOC))
    {
        pData->ems48VSOC_presence = true;
        pData->ems48VSOC = marbenData->ems48VSOC;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->ems48VSOC = %d.", __FUNCTION__, pData->ems48VSOC);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_ems48VDisSOC))
    {
        pData->ems48VDisSOC_presence = true;
        pData->ems48VDisSOC = marbenData->ems48VDisSOC;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->ems48VDisSOC = %d.", __FUNCTION__, pData->ems48VDisSOC);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_emsHVRBSError))
    {
        pData->emsHVRBSError_presence = true;
        pData->emsHVRBSError = marbenData->emsHVRBSError;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->emsHVRBSError = %d.", __FUNCTION__, pData->emsHVRBSError);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_emsRBSModeDisplay))
    {
        pData->emsRBSModeDisplay_presence = true;
        pData->emsRBSModeDisplay = marbenData->emsRBSModeDisplay;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->emsRBSModeDisplay = %d.", __FUNCTION__, pData->emsRBSModeDisplay);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_emsOVPActive))
    {
        pData->emsOVPActive_presence = true;
        pData->emsOVPActive = marbenData->emsOVPActive;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->emsOVPActive = %d.", __FUNCTION__, pData->emsOVPActive);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_ems48vPackTemp1))
    {
        pData->ems48vPackTemp1_presence = true;
        pData->ems48vPackTemp1 = marbenData->ems48vPackTemp1;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->ems48vPackTemp1 = %d.", __FUNCTION__, pData->ems48vPackTemp1);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_ems48vPackTemp2))
    {
        pData->ems48vPackTemp2_presence = true;
        pData->ems48vPackTemp2 = marbenData->ems48vPackTemp2;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->ems48vPackTemp2 = %d.", __FUNCTION__, pData->ems48vPackTemp2);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_emsBMSLBuildSwVersion))
    {
        pData->emsBMSLBuildSwVersion_presence = true;
        pData->emsBMSLBuildSwVersion = std::string((const char*)marbenData->emsBMSLBuildSwVersion.value, marbenData->emsBMSLBuildSwVersion.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->emsBMSLBuildSwVersion = %s.", __FUNCTION__, pData->emsBMSLBuildSwVersion.c_str());
    }
    pData->emsCBRemainingLife = marbenData->emsCBRemainingLife;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->emsCBRemainingLife = %d.", __FUNCTION__, pData->emsCBRemainingLife);
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_chargeHvSts))
    {
        pData->chargeHvSts_presence = true;
        pData->chargeHvSts = marbenData->chargeHvSts;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->chargeHvSts = %d.", __FUNCTION__, pData->chargeHvSts);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_ptReady))
    {
        pData->ptReady_presence = true;
        pData->ptReady = marbenData->ptReady;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->ptReady = %d.", __FUNCTION__, pData->ptReady);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_averPowerConsumption))
    {
        pData->averPowerConsumption_presence = true;
        pData->averPowerConsumption = marbenData->averPowerConsumption;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->averPowerConsumption = %d.", __FUNCTION__, pData->averPowerConsumption);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_indPowerConsumption))
    {
        pData->indPowerConsumption_presence = true;
        pData->indPowerConsumption = marbenData->indPowerConsumption;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->indPowerConsumption = %d.", __FUNCTION__, pData->indPowerConsumption);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_dcDcActvd))
    {
        pData->dcDcActvd_presence = true;
        pData->dcDcActvd = marbenData->dcDcActvd;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->dcDcActvd = %d.", __FUNCTION__, pData->dcDcActvd);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_dcDcConnectStatus))
    {
        pData->dcDcConnectStatus_presence = true;
        pData->dcDcConnectStatus = marbenData->dcDcConnectStatus;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->dcDcConnectStatus = %d.", __FUNCTION__, pData->dcDcConnectStatus);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_dcChargeIAct))
    {
        pData->dcChargeIAct_presence = true;
        pData->dcChargeIAct = marbenData->dcChargeIAct;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->dcChargeIAct = %d.", __FUNCTION__, pData->dcChargeIAct);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_dcChargeSts))
    {
        pData->dcChargeSts_presence = true;
        pData->dcChargeSts = marbenData->dcChargeSts;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->dcChargeSts = %d.", __FUNCTION__, pData->dcChargeSts);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_wptObjt))
    {
        pData->wptObjt_presence = true;
        pData->wptObjt = marbenData->wptObjt;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->wptObjt = %d.", __FUNCTION__, pData->wptObjt);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_wptFineAlignt))
    {
        pData->wptFineAlignt_presence = true;
        pData->wptFineAlignt = marbenData->wptFineAlignt;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->wptFineAlignt = %d.", __FUNCTION__, pData->wptFineAlignt);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_wptActived))
    {
        pData->wptActived_presence = true;
        pData->wptActived = marbenData->wptActived;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->wptActived = %d.", __FUNCTION__, pData->wptActived);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_wptChargeIAct))
    {
        pData->wptChargeIAct_presence = true;
        pData->wptChargeIAct = marbenData->wptChargeIAct;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->wptChargeIAct = %d.", __FUNCTION__, pData->wptChargeIAct);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_wptChargeUAct))
    {
        pData->wptChargeUAct_presence = true;
        pData->wptChargeUAct = marbenData->wptChargeUAct;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->wptChargeUAct = %d.", __FUNCTION__, pData->wptChargeUAct);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_wptChargeSts))
    {
        pData->wptChargeSts_presence = true;
        pData->wptChargeSts = marbenData->wptChargeSts;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->wptChargeSts = %d.", __FUNCTION__, pData->wptChargeSts);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_chargeIAct))
    {
        pData->chargeIAct_presence = true;
        pData->chargeIAct = marbenData->chargeIAct;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->chargeIAct = %d.", __FUNCTION__, pData->chargeIAct);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_chargeUAct))
    {
        pData->chargeUAct_presence = true;
        pData->chargeUAct = marbenData->chargeUAct;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->chargeUAct = %d.", __FUNCTION__, pData->chargeUAct);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_chargeSts))
    {
        pData->chargeSts_presence = true;
        pData->chargeSts = marbenData->chargeSts;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->chargeSts = %d.", __FUNCTION__, pData->chargeSts);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_disChargeConnectStatus))
    {
        pData->disChargeConnectStatus_presence = true;
        pData->disChargeConnectStatus = marbenData->disChargeConnectStatus;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->disChargeConnectStatus = %d.", __FUNCTION__, pData->disChargeConnectStatus);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_disChargeIAct))
    {
        pData->disChargeIAct_presence = true;
        pData->disChargeIAct = marbenData->disChargeIAct;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->disChargeIAct = %d.", __FUNCTION__, pData->disChargeIAct);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_disChargeUAct))
    {
        pData->disChargeUAct_presence = true;
        pData->disChargeUAct = marbenData->disChargeUAct;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->disChargeUAct = %d.", __FUNCTION__, pData->disChargeUAct);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_disChargeSts))
    {
        pData->disChargeSts_presence = true;
        pData->disChargeSts = marbenData->disChargeSts;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->disChargeSts = %d.", __FUNCTION__, pData->disChargeSts);
    }

    return true;
}

bool VdsMarbenAdaptGen::TEMStatus_Encode(const TEMStatus_Model &pData, asn_wrapper::TEMStatus* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::TEMStatus* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::TEMStatus*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (pData.vin_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_TEMStatus__vin);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.vin = %s.", __FUNCTION__, pData.vin.c_str());
        marbenData->vin.copyOctetString(pData.vin.length(), (asnbyte*)(unsigned char*)(pData.vin.c_str()));
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.powerSource = %d.", __FUNCTION__, pData.powerSource);
    marbenData->powerSource = (int32_t)pData.powerSource;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.powerMode = %d.", __FUNCTION__, pData.powerMode);
    marbenData->powerMode = (int32_t)pData.powerMode;
    if (pData.state_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_state);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.state = %d.", __FUNCTION__, pData.state);
        marbenData->state = (int32_t)pData.state;
    }
    if (pData.serviceProvisoned_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_serviceProvisoned);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.serviceProvisoned = %d.", __FUNCTION__, pData.serviceProvisoned);
        marbenData->serviceProvisoned = pData.serviceProvisoned;
    }
    if (pData.healthStatus_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_healthStatus);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.healthStatus = %d.", __FUNCTION__, pData.healthStatus);
        marbenData->healthStatus = (int32_t)pData.healthStatus;
    }
    if (pData.diagnostics_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_TEMStatus__diagnostics);
        if (marbenData->diagnostics == nullptr )
        {
            marbenData->diagnostics = new asn_wrapper::ECUDiagnostic();
        }
        ECUDiagnostic_Encode(pData.diagnostics, marbenData->diagnostics);
    }
    if (pData.backupBattery_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_TEMStatus__backupBattery);
        if (marbenData->backupBattery == nullptr )
        {
            marbenData->backupBattery = new asn_wrapper::BatteryStatus();
        }
        BatteryStatus_Encode(pData.backupBattery, marbenData->backupBattery);
    }
    if (pData.sleepCycleNextWakeupTime_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_sleepCycleNextWakeupTime);
        if (marbenData->sleepCycleNextWakeupTime == nullptr )
        {
            marbenData->sleepCycleNextWakeupTime = new asn_wrapper::TimeStamp();
        }
        TimeStamp_Encode(pData.sleepCycleNextWakeupTime, marbenData->sleepCycleNextWakeupTime);
    }
    if (pData.serialNumber_presence)
    {
        if (verifyPrintableString("serialNumber", pData.serialNumber))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_serialNumber);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.serialNumber = %s.", __FUNCTION__, pData.serialNumber.c_str());
            marbenData->serialNumber.copyOctetString(pData.serialNumber.length(), (asnbyte*)(unsigned char*)(pData.serialNumber.c_str()));
        }
    }
    if (pData.completeECUPartNumbers_presence)
    {
        if (verifyPrintableString("completeECUPartNumbers", pData.completeECUPartNumbers))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_completeECUPartNumbers);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.completeECUPartNumbers = %s.", __FUNCTION__, pData.completeECUPartNumbers.c_str());
            marbenData->completeECUPartNumbers.copyOctetString(pData.completeECUPartNumbers.length(), (asnbyte*)(unsigned char*)(pData.completeECUPartNumbers.c_str()));
        }
    }
    if (pData.networkAccessStatus_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_networkAccessStatus);
        if (marbenData->networkAccessStatus == nullptr )
        {
            marbenData->networkAccessStatus = new asn_wrapper::NetworkAccessStatus();
        }
        NetworkAccessStatus_Encode(pData.networkAccessStatus, marbenData->networkAccessStatus);
    }
    if (pData.imei_presence)
    {
        if (verifyPrintableString("imei", pData.imei))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_imei);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.imei = %s.", __FUNCTION__, pData.imei.c_str());
            marbenData->imei.copyOctetString(pData.imei.length(), (asnbyte*)(unsigned char*)(pData.imei.c_str()));
        }
    }
    if (pData.connectivityStatus_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_connectivityStatus);
        if (marbenData->connectivityStatus == nullptr )
        {
            marbenData->connectivityStatus = new asn_wrapper::ConnectivityStatus();
        }
        ConnectivityStatus_Encode(pData.connectivityStatus, marbenData->connectivityStatus);
    }
    if (pData.hwVersion_presence)
    {
        if (verifyPrintableString("hwVersion", pData.hwVersion))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_hwVersion);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.hwVersion = %s.", __FUNCTION__, pData.hwVersion.c_str());
            marbenData->hwVersion.copyOctetString(pData.hwVersion.length(), (asnbyte*)(unsigned char*)(pData.hwVersion.c_str()));
        }
    }
    if (pData.swVersion_presence)
    {
        if (verifyPrintableString("swVersion", pData.swVersion))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_TEMStatus__swVersion);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.swVersion = %s.", __FUNCTION__, pData.swVersion.c_str());
            marbenData->swVersion.copyOctetString(pData.swVersion.length(), (asnbyte*)(unsigned char*)(pData.swVersion.c_str()));
        }
    }
    if (pData.mpuVersion_presence)
    {
        if (verifyPrintableString("mpuVersion", pData.mpuVersion))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_mpuVersion);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.mpuVersion = %s.", __FUNCTION__, pData.mpuVersion.c_str());
            marbenData->mpuVersion.copyOctetString(pData.mpuVersion.length(), (asnbyte*)(unsigned char*)(pData.mpuVersion.c_str()));
        }
    }
    if (pData.mcuVersion_presence)
    {
        if (verifyPrintableString("mcuVersion", pData.mcuVersion))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_mcuVersion);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.mcuVersion = %s.", __FUNCTION__, pData.mcuVersion.c_str());
            marbenData->mcuVersion.copyOctetString(pData.mcuVersion.length(), (asnbyte*)(unsigned char*)(pData.mcuVersion.c_str()));
        }
    }

    return true;
}

bool VdsMarbenAdaptGen::TEMStatus_Decode(const std::string &path, std::shared_ptr<TEMStatus_Model> &pData, asn_wrapper::TEMStatus* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::TEMStatus* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::TEMStatus*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_TEMStatus__vin))
    {
        pData->vin_presence = true;
        pData->vin = std::string((const char*)marbenData->vin.value, marbenData->vin.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->vin = %s.", __FUNCTION__, pData->vin.c_str());
    }
    pData->powerSource = (Vds_PowerSource)marbenData->powerSource;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->powerSource = %d.", __FUNCTION__, pData->powerSource);
    pData->powerMode = (Vds_TEMPowerMode)marbenData->powerMode;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->powerMode = %d.", __FUNCTION__, pData->powerMode);
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_state))
    {
        pData->state_presence = true;
        pData->state = (Vds_TEMState)marbenData->state;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->state = %d.", __FUNCTION__, pData->state);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_serviceProvisoned))
    {
        pData->serviceProvisoned_presence = true;
        pData->serviceProvisoned = marbenData->serviceProvisoned;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->serviceProvisoned = %d.", __FUNCTION__, pData->serviceProvisoned);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_healthStatus))
    {
        pData->healthStatus_presence = true;
        pData->healthStatus = (Vds_HealthStatus)marbenData->healthStatus;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->healthStatus = %d.", __FUNCTION__, pData->healthStatus);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_TEMStatus__diagnostics))
    {
        pData->diagnostics_presence = true;
        if (marbenData->diagnostics != nullptr )
        {
            std::shared_ptr<ECUDiagnostic_Model> p_diagnostics = std::make_shared<ECUDiagnostic_Model>();
            result = ECUDiagnostic_Decode( "" , p_diagnostics , marbenData->diagnostics);
            if (result)
            {
                pData->diagnostics = (*p_diagnostics);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_TEMStatus__backupBattery))
    {
        pData->backupBattery_presence = true;
        if (marbenData->backupBattery != nullptr )
        {
            std::shared_ptr<BatteryStatus_Model> p_backupBattery = std::make_shared<BatteryStatus_Model>();
            result = BatteryStatus_Decode( "" , p_backupBattery , marbenData->backupBattery);
            if (result)
            {
                pData->backupBattery = (*p_backupBattery);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_sleepCycleNextWakeupTime))
    {
        pData->sleepCycleNextWakeupTime_presence = true;
        if (marbenData->sleepCycleNextWakeupTime != nullptr )
        {
            std::shared_ptr<TimeStamp_Model> p_sleepCycleNextWakeupTime = std::make_shared<TimeStamp_Model>();
            result = TimeStamp_Decode( "" , p_sleepCycleNextWakeupTime , marbenData->sleepCycleNextWakeupTime);
            if (result)
            {
                pData->sleepCycleNextWakeupTime = (*p_sleepCycleNextWakeupTime);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_serialNumber))
    {
        pData->serialNumber_presence = true;
        pData->serialNumber = std::string((const char*)marbenData->serialNumber.value, marbenData->serialNumber.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->serialNumber = %s.", __FUNCTION__, pData->serialNumber.c_str());
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_completeECUPartNumbers))
    {
        pData->completeECUPartNumbers_presence = true;
        pData->completeECUPartNumbers = std::string((const char*)marbenData->completeECUPartNumbers.value, marbenData->completeECUPartNumbers.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->completeECUPartNumbers = %s.", __FUNCTION__, pData->completeECUPartNumbers.c_str());
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_networkAccessStatus))
    {
        pData->networkAccessStatus_presence = true;
        if (marbenData->networkAccessStatus != nullptr )
        {
            std::shared_ptr<NetworkAccessStatus_Model> p_networkAccessStatus = std::make_shared<NetworkAccessStatus_Model>();
            result = NetworkAccessStatus_Decode( "" , p_networkAccessStatus , marbenData->networkAccessStatus);
            if (result)
            {
                pData->networkAccessStatus = (*p_networkAccessStatus);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_imei))
    {
        pData->imei_presence = true;
        pData->imei = std::string((const char*)marbenData->imei.value, marbenData->imei.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->imei = %s.", __FUNCTION__, pData->imei.c_str());
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_connectivityStatus))
    {
        pData->connectivityStatus_presence = true;
        if (marbenData->connectivityStatus != nullptr )
        {
            std::shared_ptr<ConnectivityStatus_Model> p_connectivityStatus = std::make_shared<ConnectivityStatus_Model>();
            result = ConnectivityStatus_Decode( "" , p_connectivityStatus , marbenData->connectivityStatus);
            if (result)
            {
                pData->connectivityStatus = (*p_connectivityStatus);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_hwVersion))
    {
        pData->hwVersion_presence = true;
        pData->hwVersion = std::string((const char*)marbenData->hwVersion.value, marbenData->hwVersion.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->hwVersion = %s.", __FUNCTION__, pData->hwVersion.c_str());
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_TEMStatus__swVersion))
    {
        pData->swVersion_presence = true;
        pData->swVersion = std::string((const char*)marbenData->swVersion.value, marbenData->swVersion.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->swVersion = %s.", __FUNCTION__, pData->swVersion.c_str());
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_mpuVersion))
    {
        pData->mpuVersion_presence = true;
        pData->mpuVersion = std::string((const char*)marbenData->mpuVersion.value, marbenData->mpuVersion.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->mpuVersion = %s.", __FUNCTION__, pData->mpuVersion.c_str());
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_mcuVersion))
    {
        pData->mcuVersion_presence = true;
        pData->mcuVersion = std::string((const char*)marbenData->mcuVersion.value, marbenData->mcuVersion.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->mcuVersion = %s.", __FUNCTION__, pData->mcuVersion.c_str());
    }

    return true;
}

bool VdsMarbenAdaptGen::CarConfig_Encode(const CarConfig_Model &pData, asn_wrapper::CarConfig* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::CarConfig* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::CarConfig*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (pData.heatedFrontSeats_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_heatedFrontSeats);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.heatedFrontSeats = %d.", __FUNCTION__, pData.heatedFrontSeats);
        marbenData->heatedFrontSeats = pData.heatedFrontSeats;
    }
    if (pData.parkingClimateLevel_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_parkingClimateLevel);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.parkingClimateLevel = %d.", __FUNCTION__, pData.parkingClimateLevel);
        marbenData->parkingClimateLevel = pData.parkingClimateLevel;
    }
    if (pData.heatedSteeringWheel_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_heatedSteeringWheel);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.heatedSteeringWheel = %d.", __FUNCTION__, pData.heatedSteeringWheel);
        marbenData->heatedSteeringWheel = pData.heatedSteeringWheel;
    }
    if (pData.items_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_CarConfig__items);
        
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.items.size() = %d.", __FUNCTION__, pData.items.size());
        for (auto p_item = pData.items.begin(); p_item != pData.items.end();) 
        {
            asn_wrapper::asncCarConfig__itemss *item = new asn_wrapper::asncCarConfig__itemss();
            marbenData->items.addElement(item);

            if (verifyScope("key", (int64_t)p_item->key.size(), (int64_t)0, (int64_t)250))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_item->key = %s.", __FUNCTION__, p_item->key.c_str());
                item->key.copyOctetString(p_item->key.length(), (asnbyte*)(unsigned char*)(p_item->key.c_str()));
            }
            if (p_item->intVal_presence)
            {
                item->optional.setPresence(asn_wrapper::asn_intVal);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_item->intVal = %d.", __FUNCTION__, p_item->intVal);
                item->intVal = p_item->intVal;
            }
            if (p_item->stringVal_presence)
            {
                if (verifyScope("stringVal", (int64_t)p_item->stringVal.size(), (int64_t)0, (int64_t)65535))
                {
                    item->optional.setPresence(asn_wrapper::asn_ServiceParameter__stringVal);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_item->stringVal = %s.", __FUNCTION__, p_item->stringVal.c_str());
                    item->stringVal.copyOctetString(p_item->stringVal.length(), (asnbyte*)(unsigned char*)(p_item->stringVal.c_str()));
                }
            }
            if (p_item->boolVal_presence)
            {
                item->optional.setPresence(asn_wrapper::asn_ServiceParameter__boolVal);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_item->boolVal = %d.", __FUNCTION__, p_item->boolVal);
                item->boolVal = p_item->boolVal;
            }
            if (p_item->timestampVal_presence)
            {
                item->optional.setPresence(asn_wrapper::asn_ServiceParameter__timestampVal);
                if (item->timestampVal == nullptr )
                {
                    item->timestampVal = new asn_wrapper::TimeStamp();
                }
                TimeStamp_Encode(p_item->timestampVal, item->timestampVal);
            }
            if (p_item->dataVal_presence)
            {
                if (verifyScope("dataVal", (int64_t)p_item->dataVal.size(), (int64_t)1, (int64_t)65535))
                {
                    item->optional.setPresence(asn_wrapper::asn_ServiceParameter__dataVal);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_item->dataVal = %s.", __FUNCTION__, p_item->dataVal.c_str());
                    int dataVal_length = 0;
                    unsigned char* dataVal_ptr = new unsigned char[p_item->dataVal.length()];
                    StringToOctet(p_item->dataVal,dataVal_ptr,dataVal_length);
                    item->dataVal.copyOctetString(dataVal_length,(asnbytep)dataVal_ptr);
                    delete[] dataVal_ptr;
                }
            }
        
            ++p_item;
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->items.getCount() = %d.", __FUNCTION__, marbenData->items.getCount());
        
    }

    return true;
}

bool VdsMarbenAdaptGen::CarConfig_Decode(const std::string &path, std::shared_ptr<CarConfig_Model> &pData, asn_wrapper::CarConfig* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::CarConfig* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::CarConfig*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_heatedFrontSeats))
    {
        pData->heatedFrontSeats_presence = true;
        pData->heatedFrontSeats = marbenData->heatedFrontSeats;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->heatedFrontSeats = %d.", __FUNCTION__, pData->heatedFrontSeats);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_parkingClimateLevel))
    {
        pData->parkingClimateLevel_presence = true;
        pData->parkingClimateLevel = marbenData->parkingClimateLevel;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->parkingClimateLevel = %d.", __FUNCTION__, pData->parkingClimateLevel);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_heatedSteeringWheel))
    {
        pData->heatedSteeringWheel_presence = true;
        pData->heatedSteeringWheel = marbenData->heatedSteeringWheel;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->heatedSteeringWheel = %d.", __FUNCTION__, pData->heatedSteeringWheel);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_CarConfig__items))
    {
        pData->items_presence = true;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->items.getCount() = %d.", __FUNCTION__, marbenData->items.getCount());
        unsigned int itemCount = marbenData->items.getCount();
        asn_wrapper::asncCarConfig__itemss* item = (asn_wrapper::asncCarConfig__itemss*)(marbenData->items.getFirstElement());
        for (unsigned int i = 0; (i < itemCount || item); i++) 
        {
            ServiceParameter_Model p_item;
            p_item.key = std::string((const char*)item->key.value, item->key.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_item.key = %s.", __FUNCTION__, p_item.key.c_str());
            if (asnTRUE == item->optional.getPresence(asn_wrapper::asn_intVal))
            {
                p_item.intVal_presence = true;
                p_item.intVal = item->intVal;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_item.intVal = %d.", __FUNCTION__, p_item.intVal);
            }
            if (asnTRUE == item->optional.getPresence(asn_wrapper::asn_ServiceParameter__stringVal))
            {
                p_item.stringVal_presence = true;
                p_item.stringVal = std::string((const char*)item->stringVal.value, item->stringVal.length);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_item.stringVal = %s.", __FUNCTION__, p_item.stringVal.c_str());
            }
            if (asnTRUE == item->optional.getPresence(asn_wrapper::asn_ServiceParameter__boolVal))
            {
                p_item.boolVal_presence = true;
                p_item.boolVal = item->boolVal;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_item.boolVal = %d.", __FUNCTION__, p_item.boolVal);
            }
            if (asnTRUE == item->optional.getPresence(asn_wrapper::asn_ServiceParameter__timestampVal))
            {
                p_item.timestampVal_presence = true;
                if (item->timestampVal != nullptr )
                {
                    std::shared_ptr<TimeStamp_Model> p_timestampVal = std::make_shared<TimeStamp_Model>();
                    result = TimeStamp_Decode( "" , p_timestampVal , item->timestampVal);
                    if (result)
                    {
                        p_item.timestampVal = (*p_timestampVal);
                    }
                }

            }
            if (asnTRUE == item->optional.getPresence(asn_wrapper::asn_ServiceParameter__dataVal))
            {
                p_item.dataVal_presence = true;
                asnbyte* dataVal_ptr;
                asnMAXUINT dataVal_length;
                item->dataVal.getOctetString(&dataVal_length,&dataVal_ptr);
                char* dataVal_array = new char[dataVal_length*3-1];
                OctetToString(dataVal_ptr,dataVal_array,dataVal_length);
                p_item.dataVal = dataVal_array;
                delete[] dataVal_array;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_item.dataVal = %s.", __FUNCTION__, p_item.dataVal.c_str());
            }
            pData->items.push_back(p_item);
            item = (asn_wrapper::asncCarConfig__itemss*)(item->getNextElement());
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->items.size() = %d.", __FUNCTION__, pData->items.size());
        
    }

    return true;
}

bool VdsMarbenAdaptGen::AdditionalStatus_Encode(const AdditionalStatus_Model &pData, asn_wrapper::AdditionalStatus* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::AdditionalStatus* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::AdditionalStatus*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (pData.confAndId_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_confAndId);
        if (marbenData->confAndId == nullptr )
        {
            marbenData->confAndId = new asn_wrapper::ConfigurationAndIdentity();
        }
        ConfigurationAndIdentity_Encode(pData.confAndId, marbenData->confAndId);
    }
    if (pData.ecuWarningMessages_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_ecuWarningMessages);
        
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.ecuWarningMessages.size() = %d.", __FUNCTION__, pData.ecuWarningMessages.size());
        for (auto p_ecuWarningMessage = pData.ecuWarningMessages.begin(); p_ecuWarningMessage != pData.ecuWarningMessages.end();) 
        {
            asn_wrapper::asncEcuWarningMessagess *ecuWarningMessage = new asn_wrapper::asncEcuWarningMessagess();
            marbenData->ecuWarningMessages.addElement(ecuWarningMessage);

            if (verifyScope("key", (int64_t)p_ecuWarningMessage->key.size(), (int64_t)1, (int64_t)100))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuWarningMessage->key = %s.", __FUNCTION__, p_ecuWarningMessage->key.c_str());
                ecuWarningMessage->key.copyOctetString(p_ecuWarningMessage->key.length(), (asnbyte*)(unsigned char*)(p_ecuWarningMessage->key.c_str()));
            }
            if (p_ecuWarningMessage->collectTime_presence)
            {
                ecuWarningMessage->optional.setPresence(asn_wrapper::asn_collectTime);
                if (ecuWarningMessage->collectTime == nullptr )
                {
                    ecuWarningMessage->collectTime = new asn_wrapper::TimeStamp();
                }
                TimeStamp_Encode(p_ecuWarningMessage->collectTime, ecuWarningMessage->collectTime);
            }
            if (p_ecuWarningMessage->value_presence)
            {
                ecuWarningMessage->optional.setPresence(asn_wrapper::asn_value);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuWarningMessage->value = %d.", __FUNCTION__, p_ecuWarningMessage->value);
                ecuWarningMessage->value = p_ecuWarningMessage->value;
            }
            if (p_ecuWarningMessage->stringVal_presence)
            {
                if (verifyScope("stringVal", (int64_t)p_ecuWarningMessage->stringVal.size(), (int64_t)0, (int64_t)65535))
                {
                    ecuWarningMessage->optional.setPresence(asn_wrapper::asn_GenericVehicleSignal__stringVal);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuWarningMessage->stringVal = %s.", __FUNCTION__, p_ecuWarningMessage->stringVal.c_str());
                    ecuWarningMessage->stringVal.copyOctetString(p_ecuWarningMessage->stringVal.length(), (asnbyte*)(unsigned char*)(p_ecuWarningMessage->stringVal.c_str()));
                }
            }
            if (p_ecuWarningMessage->boolVal_presence)
            {
                ecuWarningMessage->optional.setPresence(asn_wrapper::asn_GenericVehicleSignal__boolVal);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuWarningMessage->boolVal = %d.", __FUNCTION__, p_ecuWarningMessage->boolVal);
                ecuWarningMessage->boolVal = p_ecuWarningMessage->boolVal;
            }
            if (p_ecuWarningMessage->timestampVal_presence)
            {
                ecuWarningMessage->optional.setPresence(asn_wrapper::asn_GenericVehicleSignal__timestampVal);
                if (ecuWarningMessage->timestampVal == nullptr )
                {
                    ecuWarningMessage->timestampVal = new asn_wrapper::TimeStamp();
                }
                TimeStamp_Encode(p_ecuWarningMessage->timestampVal, ecuWarningMessage->timestampVal);
            }
            if (p_ecuWarningMessage->dataVal_presence)
            {
                if (verifyScope("dataVal", (int64_t)p_ecuWarningMessage->dataVal.size(), (int64_t)1, (int64_t)65535))
                {
                    ecuWarningMessage->optional.setPresence(asn_wrapper::asn_GenericVehicleSignal__dataVal);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuWarningMessage->dataVal = %s.", __FUNCTION__, p_ecuWarningMessage->dataVal.c_str());
                    int dataVal_length = 0;
                    unsigned char* dataVal_ptr = new unsigned char[p_ecuWarningMessage->dataVal.length()];
                    StringToOctet(p_ecuWarningMessage->dataVal,dataVal_ptr,dataVal_length);
                    ecuWarningMessage->dataVal.copyOctetString(dataVal_length,(asnbytep)dataVal_ptr);
                    delete[] dataVal_ptr;
                }
            }
        
            ++p_ecuWarningMessage;
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->ecuWarningMessages.getCount() = %d.", __FUNCTION__, marbenData->ecuWarningMessages.getCount());
        
    }
    if (pData.towStatus_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_towStatus);
        if (marbenData->towStatus == nullptr )
        {
            marbenData->towStatus = new asn_wrapper::TowStatus();
        }
        TowStatus_Encode(pData.towStatus, marbenData->towStatus);
    }
    if (pData.signals_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_AdditionalStatus__signals);
        
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.signals.size() = %d.", __FUNCTION__, pData.signals.size());
        for (auto p_signal = pData.signals.begin(); p_signal != pData.signals.end();) 
        {
            asn_wrapper::asncAdditionalStatus__signalss *signal = new asn_wrapper::asncAdditionalStatus__signalss();
            marbenData->signals.addElement(signal);

            if (verifyScope("key", (int64_t)p_signal->key.size(), (int64_t)1, (int64_t)100))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_signal->key = %s.", __FUNCTION__, p_signal->key.c_str());
                signal->key.copyOctetString(p_signal->key.length(), (asnbyte*)(unsigned char*)(p_signal->key.c_str()));
            }
            if (p_signal->collectTime_presence)
            {
                signal->optional.setPresence(asn_wrapper::asn_collectTime);
                if (signal->collectTime == nullptr )
                {
                    signal->collectTime = new asn_wrapper::TimeStamp();
                }
                TimeStamp_Encode(p_signal->collectTime, signal->collectTime);
            }
            if (p_signal->value_presence)
            {
                signal->optional.setPresence(asn_wrapper::asn_value);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_signal->value = %d.", __FUNCTION__, p_signal->value);
                signal->value = p_signal->value;
            }
            if (p_signal->stringVal_presence)
            {
                if (verifyScope("stringVal", (int64_t)p_signal->stringVal.size(), (int64_t)0, (int64_t)65535))
                {
                    signal->optional.setPresence(asn_wrapper::asn_GenericVehicleSignal__stringVal);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_signal->stringVal = %s.", __FUNCTION__, p_signal->stringVal.c_str());
                    signal->stringVal.copyOctetString(p_signal->stringVal.length(), (asnbyte*)(unsigned char*)(p_signal->stringVal.c_str()));
                }
            }
            if (p_signal->boolVal_presence)
            {
                signal->optional.setPresence(asn_wrapper::asn_GenericVehicleSignal__boolVal);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_signal->boolVal = %d.", __FUNCTION__, p_signal->boolVal);
                signal->boolVal = p_signal->boolVal;
            }
            if (p_signal->timestampVal_presence)
            {
                signal->optional.setPresence(asn_wrapper::asn_GenericVehicleSignal__timestampVal);
                if (signal->timestampVal == nullptr )
                {
                    signal->timestampVal = new asn_wrapper::TimeStamp();
                }
                TimeStamp_Encode(p_signal->timestampVal, signal->timestampVal);
            }
            if (p_signal->dataVal_presence)
            {
                if (verifyScope("dataVal", (int64_t)p_signal->dataVal.size(), (int64_t)1, (int64_t)65535))
                {
                    signal->optional.setPresence(asn_wrapper::asn_GenericVehicleSignal__dataVal);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_signal->dataVal = %s.", __FUNCTION__, p_signal->dataVal.c_str());
                    int dataVal_length = 0;
                    unsigned char* dataVal_ptr = new unsigned char[p_signal->dataVal.length()];
                    StringToOctet(p_signal->dataVal,dataVal_ptr,dataVal_length);
                    signal->dataVal.copyOctetString(dataVal_length,(asnbytep)dataVal_ptr);
                    delete[] dataVal_ptr;
                }
            }
        
            ++p_signal;
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->signals.getCount() = %d.", __FUNCTION__, marbenData->signals.getCount());
        
    }
    if (pData.data_presence)
    {
        if (verifyScope("data", (int64_t)pData.data.size(), (int64_t)1, (int64_t)65535))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_AdditionalStatus__data);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.data = %s.", __FUNCTION__, pData.data.c_str());
            int data_length = 0;
            unsigned char* data_ptr = new unsigned char[pData.data.length()];
            StringToOctet(pData.data,data_ptr,data_length);
            marbenData->data.copyOctetString(data_length,(asnbytep)data_ptr);
            delete[] data_ptr;
        }
    }

    return true;
}

bool VdsMarbenAdaptGen::AdditionalStatus_Decode(const std::string &path, std::shared_ptr<AdditionalStatus_Model> &pData, asn_wrapper::AdditionalStatus* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::AdditionalStatus* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::AdditionalStatus*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_confAndId))
    {
        pData->confAndId_presence = true;
        if (marbenData->confAndId != nullptr )
        {
            std::shared_ptr<ConfigurationAndIdentity_Model> p_confAndId = std::make_shared<ConfigurationAndIdentity_Model>();
            result = ConfigurationAndIdentity_Decode( "" , p_confAndId , marbenData->confAndId);
            if (result)
            {
                pData->confAndId = (*p_confAndId);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_ecuWarningMessages))
    {
        pData->ecuWarningMessages_presence = true;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->ecuWarningMessages.getCount() = %d.", __FUNCTION__, marbenData->ecuWarningMessages.getCount());
        unsigned int ecuWarningMessageCount = marbenData->ecuWarningMessages.getCount();
        asn_wrapper::asncEcuWarningMessagess* ecuWarningMessage = (asn_wrapper::asncEcuWarningMessagess*)(marbenData->ecuWarningMessages.getFirstElement());
        for (unsigned int i = 0; (i < ecuWarningMessageCount || ecuWarningMessage); i++) 
        {
            GenericVehicleSignal_Model p_ecuWarningMessage;
            p_ecuWarningMessage.key = std::string((const char*)ecuWarningMessage->key.value, ecuWarningMessage->key.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuWarningMessage.key = %s.", __FUNCTION__, p_ecuWarningMessage.key.c_str());
            if (asnTRUE == ecuWarningMessage->optional.getPresence(asn_wrapper::asn_collectTime))
            {
                p_ecuWarningMessage.collectTime_presence = true;
                if (ecuWarningMessage->collectTime != nullptr )
                {
                    std::shared_ptr<TimeStamp_Model> p_collectTime = std::make_shared<TimeStamp_Model>();
                    result = TimeStamp_Decode( "" , p_collectTime , ecuWarningMessage->collectTime);
                    if (result)
                    {
                        p_ecuWarningMessage.collectTime = (*p_collectTime);
                    }
                }

            }
            if (asnTRUE == ecuWarningMessage->optional.getPresence(asn_wrapper::asn_value))
            {
                p_ecuWarningMessage.value_presence = true;
                p_ecuWarningMessage.value = ecuWarningMessage->value;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuWarningMessage.value = %d.", __FUNCTION__, p_ecuWarningMessage.value);
            }
            if (asnTRUE == ecuWarningMessage->optional.getPresence(asn_wrapper::asn_GenericVehicleSignal__stringVal))
            {
                p_ecuWarningMessage.stringVal_presence = true;
                p_ecuWarningMessage.stringVal = std::string((const char*)ecuWarningMessage->stringVal.value, ecuWarningMessage->stringVal.length);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuWarningMessage.stringVal = %s.", __FUNCTION__, p_ecuWarningMessage.stringVal.c_str());
            }
            if (asnTRUE == ecuWarningMessage->optional.getPresence(asn_wrapper::asn_GenericVehicleSignal__boolVal))
            {
                p_ecuWarningMessage.boolVal_presence = true;
                p_ecuWarningMessage.boolVal = ecuWarningMessage->boolVal;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuWarningMessage.boolVal = %d.", __FUNCTION__, p_ecuWarningMessage.boolVal);
            }
            if (asnTRUE == ecuWarningMessage->optional.getPresence(asn_wrapper::asn_GenericVehicleSignal__timestampVal))
            {
                p_ecuWarningMessage.timestampVal_presence = true;
                if (ecuWarningMessage->timestampVal != nullptr )
                {
                    std::shared_ptr<TimeStamp_Model> p_timestampVal = std::make_shared<TimeStamp_Model>();
                    result = TimeStamp_Decode( "" , p_timestampVal , ecuWarningMessage->timestampVal);
                    if (result)
                    {
                        p_ecuWarningMessage.timestampVal = (*p_timestampVal);
                    }
                }

            }
            if (asnTRUE == ecuWarningMessage->optional.getPresence(asn_wrapper::asn_GenericVehicleSignal__dataVal))
            {
                p_ecuWarningMessage.dataVal_presence = true;
                asnbyte* dataVal_ptr;
                asnMAXUINT dataVal_length;
                ecuWarningMessage->dataVal.getOctetString(&dataVal_length,&dataVal_ptr);
                char* dataVal_array = new char[dataVal_length*3-1];
                OctetToString(dataVal_ptr,dataVal_array,dataVal_length);
                p_ecuWarningMessage.dataVal = dataVal_array;
                delete[] dataVal_array;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_ecuWarningMessage.dataVal = %s.", __FUNCTION__, p_ecuWarningMessage.dataVal.c_str());
            }
            pData->ecuWarningMessages.push_back(p_ecuWarningMessage);
            ecuWarningMessage = (asn_wrapper::asncEcuWarningMessagess*)(ecuWarningMessage->getNextElement());
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->ecuWarningMessages.size() = %d.", __FUNCTION__, pData->ecuWarningMessages.size());
        
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_towStatus))
    {
        pData->towStatus_presence = true;
        if (marbenData->towStatus != nullptr )
        {
            std::shared_ptr<TowStatus_Model> p_towStatus = std::make_shared<TowStatus_Model>();
            result = TowStatus_Decode( "" , p_towStatus , marbenData->towStatus);
            if (result)
            {
                pData->towStatus = (*p_towStatus);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_AdditionalStatus__signals))
    {
        pData->signals_presence = true;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->signals.getCount() = %d.", __FUNCTION__, marbenData->signals.getCount());
        unsigned int signalCount = marbenData->signals.getCount();
        asn_wrapper::asncAdditionalStatus__signalss* signal = (asn_wrapper::asncAdditionalStatus__signalss*)(marbenData->signals.getFirstElement());
        for (unsigned int i = 0; (i < signalCount || signal); i++) 
        {
            GenericVehicleSignal_Model p_signal;
            p_signal.key = std::string((const char*)signal->key.value, signal->key.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_signal.key = %s.", __FUNCTION__, p_signal.key.c_str());
            if (asnTRUE == signal->optional.getPresence(asn_wrapper::asn_collectTime))
            {
                p_signal.collectTime_presence = true;
                if (signal->collectTime != nullptr )
                {
                    std::shared_ptr<TimeStamp_Model> p_collectTime = std::make_shared<TimeStamp_Model>();
                    result = TimeStamp_Decode( "" , p_collectTime , signal->collectTime);
                    if (result)
                    {
                        p_signal.collectTime = (*p_collectTime);
                    }
                }

            }
            if (asnTRUE == signal->optional.getPresence(asn_wrapper::asn_value))
            {
                p_signal.value_presence = true;
                p_signal.value = signal->value;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_signal.value = %d.", __FUNCTION__, p_signal.value);
            }
            if (asnTRUE == signal->optional.getPresence(asn_wrapper::asn_GenericVehicleSignal__stringVal))
            {
                p_signal.stringVal_presence = true;
                p_signal.stringVal = std::string((const char*)signal->stringVal.value, signal->stringVal.length);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_signal.stringVal = %s.", __FUNCTION__, p_signal.stringVal.c_str());
            }
            if (asnTRUE == signal->optional.getPresence(asn_wrapper::asn_GenericVehicleSignal__boolVal))
            {
                p_signal.boolVal_presence = true;
                p_signal.boolVal = signal->boolVal;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_signal.boolVal = %d.", __FUNCTION__, p_signal.boolVal);
            }
            if (asnTRUE == signal->optional.getPresence(asn_wrapper::asn_GenericVehicleSignal__timestampVal))
            {
                p_signal.timestampVal_presence = true;
                if (signal->timestampVal != nullptr )
                {
                    std::shared_ptr<TimeStamp_Model> p_timestampVal = std::make_shared<TimeStamp_Model>();
                    result = TimeStamp_Decode( "" , p_timestampVal , signal->timestampVal);
                    if (result)
                    {
                        p_signal.timestampVal = (*p_timestampVal);
                    }
                }

            }
            if (asnTRUE == signal->optional.getPresence(asn_wrapper::asn_GenericVehicleSignal__dataVal))
            {
                p_signal.dataVal_presence = true;
                asnbyte* dataVal_ptr;
                asnMAXUINT dataVal_length;
                signal->dataVal.getOctetString(&dataVal_length,&dataVal_ptr);
                char* dataVal_array = new char[dataVal_length*3-1];
                OctetToString(dataVal_ptr,dataVal_array,dataVal_length);
                p_signal.dataVal = dataVal_array;
                delete[] dataVal_array;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_signal.dataVal = %s.", __FUNCTION__, p_signal.dataVal.c_str());
            }
            pData->signals.push_back(p_signal);
            signal = (asn_wrapper::asncAdditionalStatus__signalss*)(signal->getNextElement());
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->signals.size() = %d.", __FUNCTION__, pData->signals.size());
        
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_AdditionalStatus__data))
    {
        pData->data_presence = true;
        asnbyte* data_ptr;
        asnMAXUINT data_length;
        marbenData->data.getOctetString(&data_length,&data_ptr);
        char* data_array = new char[data_length*3-1];
        OctetToString(data_ptr,data_array,data_length);
        pData->data = data_array;
        delete[] data_array;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->data = %s.", __FUNCTION__, pData->data.c_str());
    }

    return true;
}

bool VdsMarbenAdaptGen::OEMMSD_Encode(const OEMMSD_Model &pData, asn_wrapper::OEMMSD* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::OEMMSD* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::OEMMSD*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.automaticActivation = %d.", __FUNCTION__, pData.automaticActivation);
    marbenData->automaticActivation = pData.automaticActivation;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.testCall = %d.", __FUNCTION__, pData.testCall);
    marbenData->testCall = pData.testCall;
    if (marbenData->position == nullptr )
    {
        marbenData->position = new asn_wrapper::Position();
    }
    Position_Encode(pData.position, marbenData->position);
    if (pData.vehicleType_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_vehicleType);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.vehicleType = %d.", __FUNCTION__, pData.vehicleType);
        marbenData->vehicleType = (int32_t)pData.vehicleType;
    }
    if (pData.vin_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_OEMMSD__vin);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.vin = %s.", __FUNCTION__, pData.vin.c_str());
        marbenData->vin.copyOctetString(pData.vin.length(), (asnbyte*)(unsigned char*)(pData.vin.c_str()));
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.fuelType = %d.", __FUNCTION__, pData.fuelType);
    marbenData->fuelType = (int32_t)pData.fuelType;
    if (verifyScope("direction", (int64_t)pData.direction, (int64_t)0, (int64_t)360))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.direction = %d.", __FUNCTION__, pData.direction);
        marbenData->direction = pData.direction;
    }
    if (pData.numberOfPassengers_presence)
    {
        if (verifyScope("numberOfPassengers", (int64_t)pData.numberOfPassengers, (int64_t)0, (int64_t)64))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_numberOfPassengers);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.numberOfPassengers = %d.", __FUNCTION__, pData.numberOfPassengers);
            marbenData->numberOfPassengers = pData.numberOfPassengers;
        }
    }
    if (pData.recentPositions_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_recentPositions);
        
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.recentPositions.size() = %d.", __FUNCTION__, pData.recentPositions.size());
        for (auto p_recentPosition = pData.recentPositions.begin(); p_recentPosition != pData.recentPositions.end();) 
        {
            asn_wrapper::asncrecentPositionss *recentPosition = new asn_wrapper::asncrecentPositionss();
            marbenData->recentPositions.addElement(recentPosition);

            if (p_recentPosition->latitude_presence)
            {
                if (verifyScope("latitude", (int64_t)p_recentPosition->latitude, (int64_t)-2147483648, (int64_t)2147483647))
                {
                    recentPosition->optional.setPresence(asn_wrapper::asn_latitude);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_recentPosition->latitude = %d.", __FUNCTION__, p_recentPosition->latitude);
                    recentPosition->latitude = p_recentPosition->latitude;
                }
            }
            if (p_recentPosition->longitude_presence)
            {
                if (verifyScope("longitude", (int64_t)p_recentPosition->longitude, (int64_t)-2147483648, (int64_t)2147483647))
                {
                    recentPosition->optional.setPresence(asn_wrapper::asn_longitude);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_recentPosition->longitude = %d.", __FUNCTION__, p_recentPosition->longitude);
                    recentPosition->longitude = p_recentPosition->longitude;
                }
            }
            if (p_recentPosition->altitude_presence)
            {
                if (verifyScope("altitude", (int64_t)p_recentPosition->altitude, (int64_t)-100, (int64_t)8091))
                {
                    recentPosition->optional.setPresence(asn_wrapper::asn_altitude);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_recentPosition->altitude = %d.", __FUNCTION__, p_recentPosition->altitude);
                    recentPosition->altitude = p_recentPosition->altitude;
                }
            }
            if (p_recentPosition->posCanBeTrusted_presence)
            {
                recentPosition->optional.setPresence(asn_wrapper::asn_posCanBeTrusted);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_recentPosition->posCanBeTrusted = %d.", __FUNCTION__, p_recentPosition->posCanBeTrusted);
                recentPosition->posCanBeTrusted = p_recentPosition->posCanBeTrusted;
            }
            if (p_recentPosition->carLocatorStatUploadEn_presence)
            {
                recentPosition->optional.setPresence(asn_wrapper::asn_carLocatorStatUploadEn);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_recentPosition->carLocatorStatUploadEn = %d.", __FUNCTION__, p_recentPosition->carLocatorStatUploadEn);
                recentPosition->carLocatorStatUploadEn = p_recentPosition->carLocatorStatUploadEn;
            }
            if (p_recentPosition->marsCoordinates_presence)
            {
                recentPosition->optional.setPresence(asn_wrapper::asn_marsCoordinates);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_recentPosition->marsCoordinates = %d.", __FUNCTION__, p_recentPosition->marsCoordinates);
                recentPosition->marsCoordinates = p_recentPosition->marsCoordinates;
            }
        
            ++p_recentPosition;
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->recentPositions.getCount() = %d.", __FUNCTION__, marbenData->recentPositions.getCount());
        
    }
    if (pData.speed_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_speed);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.speed = %d.", __FUNCTION__, pData.speed);
        marbenData->speed = pData.speed;
    }
    if (pData.speedValidity_presence)
    {
        if (verifyScope("speedValidity", (int64_t)pData.speedValidity, (int64_t)0, (int64_t)1))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_OEMMSD__speedValidity);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.speedValidity = %d.", __FUNCTION__, pData.speedValidity);
            marbenData->speedValidity = pData.speedValidity;
        }
    }
    if (pData.signals_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_OEMMSD__signals);
        
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.signals.size() = %d.", __FUNCTION__, pData.signals.size());
        for (auto p_signal = pData.signals.begin(); p_signal != pData.signals.end();) 
        {
            asn_wrapper::asncOEMMSD__signalss *signal = new asn_wrapper::asncOEMMSD__signalss();
            marbenData->signals.addElement(signal);

            if (verifyScope("key", (int64_t)p_signal->key.size(), (int64_t)1, (int64_t)100))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_signal->key = %s.", __FUNCTION__, p_signal->key.c_str());
                signal->key.copyOctetString(p_signal->key.length(), (asnbyte*)(unsigned char*)(p_signal->key.c_str()));
            }
            if (p_signal->collectTime_presence)
            {
                signal->optional.setPresence(asn_wrapper::asn_collectTime);
                if (signal->collectTime == nullptr )
                {
                    signal->collectTime = new asn_wrapper::TimeStamp();
                }
                TimeStamp_Encode(p_signal->collectTime, signal->collectTime);
            }
            if (p_signal->value_presence)
            {
                signal->optional.setPresence(asn_wrapper::asn_value);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_signal->value = %d.", __FUNCTION__, p_signal->value);
                signal->value = p_signal->value;
            }
            if (p_signal->stringVal_presence)
            {
                if (verifyScope("stringVal", (int64_t)p_signal->stringVal.size(), (int64_t)0, (int64_t)65535))
                {
                    signal->optional.setPresence(asn_wrapper::asn_GenericVehicleSignal__stringVal);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_signal->stringVal = %s.", __FUNCTION__, p_signal->stringVal.c_str());
                    signal->stringVal.copyOctetString(p_signal->stringVal.length(), (asnbyte*)(unsigned char*)(p_signal->stringVal.c_str()));
                }
            }
            if (p_signal->boolVal_presence)
            {
                signal->optional.setPresence(asn_wrapper::asn_GenericVehicleSignal__boolVal);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_signal->boolVal = %d.", __FUNCTION__, p_signal->boolVal);
                signal->boolVal = p_signal->boolVal;
            }
            if (p_signal->timestampVal_presence)
            {
                signal->optional.setPresence(asn_wrapper::asn_GenericVehicleSignal__timestampVal);
                if (signal->timestampVal == nullptr )
                {
                    signal->timestampVal = new asn_wrapper::TimeStamp();
                }
                TimeStamp_Encode(p_signal->timestampVal, signal->timestampVal);
            }
            if (p_signal->dataVal_presence)
            {
                if (verifyScope("dataVal", (int64_t)p_signal->dataVal.size(), (int64_t)1, (int64_t)65535))
                {
                    signal->optional.setPresence(asn_wrapper::asn_GenericVehicleSignal__dataVal);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_signal->dataVal = %s.", __FUNCTION__, p_signal->dataVal.c_str());
                    int dataVal_length = 0;
                    unsigned char* dataVal_ptr = new unsigned char[p_signal->dataVal.length()];
                    StringToOctet(p_signal->dataVal,dataVal_ptr,dataVal_length);
                    signal->dataVal.copyOctetString(dataVal_length,(asnbytep)dataVal_ptr);
                    delete[] dataVal_ptr;
                }
            }
        
            ++p_signal;
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->signals.getCount() = %d.", __FUNCTION__, marbenData->signals.getCount());
        
    }

    return true;
}

bool VdsMarbenAdaptGen::OEMMSD_Decode(const std::string &path, std::shared_ptr<OEMMSD_Model> &pData, asn_wrapper::OEMMSD* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::OEMMSD* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::OEMMSD*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->automaticActivation = marbenData->automaticActivation;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->automaticActivation = %d.", __FUNCTION__, pData->automaticActivation);
    pData->testCall = marbenData->testCall;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->testCall = %d.", __FUNCTION__, pData->testCall);
    if (marbenData->position != nullptr )
    {
        std::shared_ptr<Position_Model> p_position = std::make_shared<Position_Model>();
        result = Position_Decode( "" , p_position , marbenData->position);
        if (result)
        {
            pData->position = (*p_position);
        }
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_vehicleType))
    {
        pData->vehicleType_presence = true;
        pData->vehicleType = (Vds_VehicleType)marbenData->vehicleType;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->vehicleType = %d.", __FUNCTION__, pData->vehicleType);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_OEMMSD__vin))
    {
        pData->vin_presence = true;
        pData->vin = std::string((const char*)marbenData->vin.value, marbenData->vin.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->vin = %s.", __FUNCTION__, pData->vin.c_str());
    }
    pData->fuelType = (Vds_FuelType)marbenData->fuelType;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->fuelType = %d.", __FUNCTION__, pData->fuelType);
    pData->direction = marbenData->direction;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->direction = %d.", __FUNCTION__, pData->direction);
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_numberOfPassengers))
    {
        pData->numberOfPassengers_presence = true;
        pData->numberOfPassengers = marbenData->numberOfPassengers;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->numberOfPassengers = %d.", __FUNCTION__, pData->numberOfPassengers);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_recentPositions))
    {
        pData->recentPositions_presence = true;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->recentPositions.getCount() = %d.", __FUNCTION__, marbenData->recentPositions.getCount());
        unsigned int recentPositionCount = marbenData->recentPositions.getCount();
        asn_wrapper::asncrecentPositionss* recentPosition = (asn_wrapper::asncrecentPositionss*)(marbenData->recentPositions.getFirstElement());
        for (unsigned int i = 0; (i < recentPositionCount || recentPosition); i++) 
        {
            Position_Model p_recentPosition;
            if (asnTRUE == recentPosition->optional.getPresence(asn_wrapper::asn_latitude))
            {
                p_recentPosition.latitude_presence = true;
                p_recentPosition.latitude = recentPosition->latitude;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_recentPosition.latitude = %d.", __FUNCTION__, p_recentPosition.latitude);
            }
            if (asnTRUE == recentPosition->optional.getPresence(asn_wrapper::asn_longitude))
            {
                p_recentPosition.longitude_presence = true;
                p_recentPosition.longitude = recentPosition->longitude;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_recentPosition.longitude = %d.", __FUNCTION__, p_recentPosition.longitude);
            }
            if (asnTRUE == recentPosition->optional.getPresence(asn_wrapper::asn_altitude))
            {
                p_recentPosition.altitude_presence = true;
                p_recentPosition.altitude = recentPosition->altitude;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_recentPosition.altitude = %d.", __FUNCTION__, p_recentPosition.altitude);
            }
            if (asnTRUE == recentPosition->optional.getPresence(asn_wrapper::asn_posCanBeTrusted))
            {
                p_recentPosition.posCanBeTrusted_presence = true;
                p_recentPosition.posCanBeTrusted = recentPosition->posCanBeTrusted;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_recentPosition.posCanBeTrusted = %d.", __FUNCTION__, p_recentPosition.posCanBeTrusted);
            }
            if (asnTRUE == recentPosition->optional.getPresence(asn_wrapper::asn_carLocatorStatUploadEn))
            {
                p_recentPosition.carLocatorStatUploadEn_presence = true;
                p_recentPosition.carLocatorStatUploadEn = recentPosition->carLocatorStatUploadEn;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_recentPosition.carLocatorStatUploadEn = %d.", __FUNCTION__, p_recentPosition.carLocatorStatUploadEn);
            }
            if (asnTRUE == recentPosition->optional.getPresence(asn_wrapper::asn_marsCoordinates))
            {
                p_recentPosition.marsCoordinates_presence = true;
                p_recentPosition.marsCoordinates = recentPosition->marsCoordinates;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_recentPosition.marsCoordinates = %d.", __FUNCTION__, p_recentPosition.marsCoordinates);
            }
            pData->recentPositions.push_back(p_recentPosition);
            recentPosition = (asn_wrapper::asncrecentPositionss*)(recentPosition->getNextElement());
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->recentPositions.size() = %d.", __FUNCTION__, pData->recentPositions.size());
        
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_speed))
    {
        pData->speed_presence = true;
        pData->speed = marbenData->speed;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->speed = %d.", __FUNCTION__, pData->speed);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_OEMMSD__speedValidity))
    {
        pData->speedValidity_presence = true;
        pData->speedValidity = marbenData->speedValidity;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->speedValidity = %d.", __FUNCTION__, pData->speedValidity);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_OEMMSD__signals))
    {
        pData->signals_presence = true;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->signals.getCount() = %d.", __FUNCTION__, marbenData->signals.getCount());
        unsigned int signalCount = marbenData->signals.getCount();
        asn_wrapper::asncOEMMSD__signalss* signal = (asn_wrapper::asncOEMMSD__signalss*)(marbenData->signals.getFirstElement());
        for (unsigned int i = 0; (i < signalCount || signal); i++) 
        {
            GenericVehicleSignal_Model p_signal;
            p_signal.key = std::string((const char*)signal->key.value, signal->key.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_signal.key = %s.", __FUNCTION__, p_signal.key.c_str());
            if (asnTRUE == signal->optional.getPresence(asn_wrapper::asn_collectTime))
            {
                p_signal.collectTime_presence = true;
                if (signal->collectTime != nullptr )
                {
                    std::shared_ptr<TimeStamp_Model> p_collectTime = std::make_shared<TimeStamp_Model>();
                    result = TimeStamp_Decode( "" , p_collectTime , signal->collectTime);
                    if (result)
                    {
                        p_signal.collectTime = (*p_collectTime);
                    }
                }

            }
            if (asnTRUE == signal->optional.getPresence(asn_wrapper::asn_value))
            {
                p_signal.value_presence = true;
                p_signal.value = signal->value;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_signal.value = %d.", __FUNCTION__, p_signal.value);
            }
            if (asnTRUE == signal->optional.getPresence(asn_wrapper::asn_GenericVehicleSignal__stringVal))
            {
                p_signal.stringVal_presence = true;
                p_signal.stringVal = std::string((const char*)signal->stringVal.value, signal->stringVal.length);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_signal.stringVal = %s.", __FUNCTION__, p_signal.stringVal.c_str());
            }
            if (asnTRUE == signal->optional.getPresence(asn_wrapper::asn_GenericVehicleSignal__boolVal))
            {
                p_signal.boolVal_presence = true;
                p_signal.boolVal = signal->boolVal;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_signal.boolVal = %d.", __FUNCTION__, p_signal.boolVal);
            }
            if (asnTRUE == signal->optional.getPresence(asn_wrapper::asn_GenericVehicleSignal__timestampVal))
            {
                p_signal.timestampVal_presence = true;
                if (signal->timestampVal != nullptr )
                {
                    std::shared_ptr<TimeStamp_Model> p_timestampVal = std::make_shared<TimeStamp_Model>();
                    result = TimeStamp_Decode( "" , p_timestampVal , signal->timestampVal);
                    if (result)
                    {
                        p_signal.timestampVal = (*p_timestampVal);
                    }
                }

            }
            if (asnTRUE == signal->optional.getPresence(asn_wrapper::asn_GenericVehicleSignal__dataVal))
            {
                p_signal.dataVal_presence = true;
                asnbyte* dataVal_ptr;
                asnMAXUINT dataVal_length;
                signal->dataVal.getOctetString(&dataVal_length,&dataVal_ptr);
                char* dataVal_array = new char[dataVal_length*3-1];
                OctetToString(dataVal_ptr,dataVal_array,dataVal_length);
                p_signal.dataVal = dataVal_array;
                delete[] dataVal_array;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_signal.dataVal = %s.", __FUNCTION__, p_signal.dataVal.c_str());
            }
            pData->signals.push_back(p_signal);
            signal = (asn_wrapper::asncOEMMSD__signalss*)(signal->getNextElement());
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->signals.size() = %d.", __FUNCTION__, pData->signals.size());
        
    }

    return true;
}

bool VdsMarbenAdaptGen::ConfigurationAndIdentity_Encode(const ConfigurationAndIdentity_Model &pData, asn_wrapper::ConfigurationAndIdentity* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::ConfigurationAndIdentity* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::ConfigurationAndIdentity*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (pData.vin_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_ConfigurationAndIdentity__vin);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.vin = %s.", __FUNCTION__, pData.vin.c_str());
        marbenData->vin.copyOctetString(pData.vin.length(), (asnbyte*)(unsigned char*)(pData.vin.c_str()));
    }
    if (pData.fuelType_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_fuelType);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.fuelType = %d.", __FUNCTION__, pData.fuelType);
        marbenData->fuelType = (int32_t)pData.fuelType;
    }

    return true;
}

bool VdsMarbenAdaptGen::ConfigurationAndIdentity_Decode(const std::string &path, std::shared_ptr<ConfigurationAndIdentity_Model> &pData, asn_wrapper::ConfigurationAndIdentity* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::ConfigurationAndIdentity* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::ConfigurationAndIdentity*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_ConfigurationAndIdentity__vin))
    {
        pData->vin_presence = true;
        pData->vin = std::string((const char*)marbenData->vin.value, marbenData->vin.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->vin = %s.", __FUNCTION__, pData->vin.c_str());
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_fuelType))
    {
        pData->fuelType_presence = true;
        pData->fuelType = (Vds_FuelType)marbenData->fuelType;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->fuelType = %d.", __FUNCTION__, pData->fuelType);
    }

    return true;
}

bool VdsMarbenAdaptGen::GenericVehicleSignal_Encode(const GenericVehicleSignal_Model &pData, asn_wrapper::GenericVehicleSignal* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::GenericVehicleSignal* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::GenericVehicleSignal*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("key", (int64_t)pData.key.size(), (int64_t)1, (int64_t)100))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.key = %s.", __FUNCTION__, pData.key.c_str());
        marbenData->key.copyOctetString(pData.key.length(), (asnbyte*)(unsigned char*)(pData.key.c_str()));
    }
    if (pData.collectTime_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_collectTime);
        if (marbenData->collectTime == nullptr )
        {
            marbenData->collectTime = new asn_wrapper::TimeStamp();
        }
        TimeStamp_Encode(pData.collectTime, marbenData->collectTime);
    }
    if (pData.value_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_value);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.value = %d.", __FUNCTION__, pData.value);
        marbenData->value = pData.value;
    }
    if (pData.stringVal_presence)
    {
        if (verifyScope("stringVal", (int64_t)pData.stringVal.size(), (int64_t)0, (int64_t)65535))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_GenericVehicleSignal__stringVal);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.stringVal = %s.", __FUNCTION__, pData.stringVal.c_str());
            marbenData->stringVal.copyOctetString(pData.stringVal.length(), (asnbyte*)(unsigned char*)(pData.stringVal.c_str()));
        }
    }
    if (pData.boolVal_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_GenericVehicleSignal__boolVal);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.boolVal = %d.", __FUNCTION__, pData.boolVal);
        marbenData->boolVal = pData.boolVal;
    }
    if (pData.timestampVal_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_GenericVehicleSignal__timestampVal);
        if (marbenData->timestampVal == nullptr )
        {
            marbenData->timestampVal = new asn_wrapper::TimeStamp();
        }
        TimeStamp_Encode(pData.timestampVal, marbenData->timestampVal);
    }
    if (pData.dataVal_presence)
    {
        if (verifyScope("dataVal", (int64_t)pData.dataVal.size(), (int64_t)1, (int64_t)65535))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_GenericVehicleSignal__dataVal);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.dataVal = %s.", __FUNCTION__, pData.dataVal.c_str());
            int dataVal_length = 0;
            unsigned char* dataVal_ptr = new unsigned char[pData.dataVal.length()];
            StringToOctet(pData.dataVal,dataVal_ptr,dataVal_length);
            marbenData->dataVal.copyOctetString(dataVal_length,(asnbytep)dataVal_ptr);
            delete[] dataVal_ptr;
        }
    }

    return true;
}

bool VdsMarbenAdaptGen::GenericVehicleSignal_Decode(const std::string &path, std::shared_ptr<GenericVehicleSignal_Model> &pData, asn_wrapper::GenericVehicleSignal* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::GenericVehicleSignal* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::GenericVehicleSignal*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->key = std::string((const char*)marbenData->key.value, marbenData->key.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->key = %s.", __FUNCTION__, pData->key.c_str());
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_collectTime))
    {
        pData->collectTime_presence = true;
        if (marbenData->collectTime != nullptr )
        {
            std::shared_ptr<TimeStamp_Model> p_collectTime = std::make_shared<TimeStamp_Model>();
            result = TimeStamp_Decode( "" , p_collectTime , marbenData->collectTime);
            if (result)
            {
                pData->collectTime = (*p_collectTime);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_value))
    {
        pData->value_presence = true;
        pData->value = marbenData->value;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->value = %d.", __FUNCTION__, pData->value);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_GenericVehicleSignal__stringVal))
    {
        pData->stringVal_presence = true;
        pData->stringVal = std::string((const char*)marbenData->stringVal.value, marbenData->stringVal.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->stringVal = %s.", __FUNCTION__, pData->stringVal.c_str());
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_GenericVehicleSignal__boolVal))
    {
        pData->boolVal_presence = true;
        pData->boolVal = marbenData->boolVal;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->boolVal = %d.", __FUNCTION__, pData->boolVal);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_GenericVehicleSignal__timestampVal))
    {
        pData->timestampVal_presence = true;
        if (marbenData->timestampVal != nullptr )
        {
            std::shared_ptr<TimeStamp_Model> p_timestampVal = std::make_shared<TimeStamp_Model>();
            result = TimeStamp_Decode( "" , p_timestampVal , marbenData->timestampVal);
            if (result)
            {
                pData->timestampVal = (*p_timestampVal);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_GenericVehicleSignal__dataVal))
    {
        pData->dataVal_presence = true;
        asnbyte* dataVal_ptr;
        asnMAXUINT dataVal_length;
        marbenData->dataVal.getOctetString(&dataVal_length,&dataVal_ptr);
        char* dataVal_array = new char[dataVal_length*3-1];
        OctetToString(dataVal_ptr,dataVal_array,dataVal_length);
        pData->dataVal = dataVal_array;
        delete[] dataVal_array;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->dataVal = %s.", __FUNCTION__, pData->dataVal.c_str());
    }

    return true;
}

bool VdsMarbenAdaptGen::NetworkAccessStatus_Encode(const NetworkAccessStatus_Model &pData, asn_wrapper::NetworkAccessStatus* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::NetworkAccessStatus* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::NetworkAccessStatus*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (pData.simInfo_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_simInfo);
        if (marbenData->simInfo == nullptr )
        {
            marbenData->simInfo = new asn_wrapper::SIMInfo();
        }
        SIMInfo_Encode(pData.simInfo, marbenData->simInfo);
    }
    if (pData.mobileNetwork_presence)
    {
        if (verifyScope("mobileNetwork", (int64_t)pData.mobileNetwork.size(), (int64_t)0, (int64_t)127))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_mobileNetwork);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.mobileNetwork = %s.", __FUNCTION__, pData.mobileNetwork.c_str());
            marbenData->mobileNetwork.copyOctetString(pData.mobileNetwork.length(), (asnbyte*)(unsigned char*)(pData.mobileNetwork.c_str()));
        }
    }

    return true;
}

bool VdsMarbenAdaptGen::NetworkAccessStatus_Decode(const std::string &path, std::shared_ptr<NetworkAccessStatus_Model> &pData, asn_wrapper::NetworkAccessStatus* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::NetworkAccessStatus* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::NetworkAccessStatus*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_simInfo))
    {
        pData->simInfo_presence = true;
        if (marbenData->simInfo != nullptr )
        {
            std::shared_ptr<SIMInfo_Model> p_simInfo = std::make_shared<SIMInfo_Model>();
            result = SIMInfo_Decode( "" , p_simInfo , marbenData->simInfo);
            if (result)
            {
                pData->simInfo = (*p_simInfo);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_mobileNetwork))
    {
        pData->mobileNetwork_presence = true;
        pData->mobileNetwork = std::string((const char*)marbenData->mobileNetwork.value, marbenData->mobileNetwork.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->mobileNetwork = %s.", __FUNCTION__, pData->mobileNetwork.c_str());
    }

    return true;
}

bool VdsMarbenAdaptGen::ConnectivityStatus_Encode(const ConnectivityStatus_Model &pData, asn_wrapper::ConnectivityStatus* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::ConnectivityStatus* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::ConnectivityStatus*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (pData.wakeupTimePosition_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_wakeupTimePosition);
        if (marbenData->wakeupTimePosition == nullptr )
        {
            marbenData->wakeupTimePosition = new asn_wrapper::TimePosition();
        }
        TimePosition_Encode(pData.wakeupTimePosition, marbenData->wakeupTimePosition);
    }
    if (pData.connectEstablishedList_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_connectEstablishedList);
        
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.connectEstablishedList.size() = %d.", __FUNCTION__, pData.connectEstablishedList.size());
        for (auto p_connectEstablishedList = pData.connectEstablishedList.begin(); p_connectEstablishedList != pData.connectEstablishedList.end();) 
        {
            asn_wrapper::asncconnectEstablishedLists *connectEstablishedList = new asn_wrapper::asncconnectEstablishedLists();
            marbenData->connectEstablishedList.addElement(connectEstablishedList);

            if (p_connectEstablishedList->connectTime_presence)
            {
                connectEstablishedList->optional.setPresence(asn_wrapper::asn_ConnectivityInfo__connectTime);
                if (connectEstablishedList->connectTime == nullptr )
                {
                    connectEstablishedList->connectTime = new asn_wrapper::TimeStamp();
                }
                TimeStamp_Encode(p_connectEstablishedList->connectTime, connectEstablishedList->connectTime);
            }
            if (p_connectEstablishedList->connectPosition_presence)
            {
                connectEstablishedList->optional.setPresence(asn_wrapper::asn_ConnectivityInfo__connectPosition);
                if (connectEstablishedList->connectPosition == nullptr )
                {
                    connectEstablishedList->connectPosition = new asn_wrapper::Position();
                }
                Position_Encode(p_connectEstablishedList->connectPosition, connectEstablishedList->connectPosition);
            }
            if (p_connectEstablishedList->connectType_presence)
            {
                if (verifyScope("connectType", (int64_t)p_connectEstablishedList->connectType.size(), (int64_t)0, (int64_t)50))
                {
                    connectEstablishedList->optional.setPresence(asn_wrapper::asn_ConnectivityInfo__connectType);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_connectEstablishedList->connectType = %s.", __FUNCTION__, p_connectEstablishedList->connectType.c_str());
                    connectEstablishedList->connectType.copyOctetString(p_connectEstablishedList->connectType.length(), (asnbyte*)(unsigned char*)(p_connectEstablishedList->connectType.c_str()));
                }
            }
            if (p_connectEstablishedList->numRetriesConnect_presence)
            {
                connectEstablishedList->optional.setPresence(asn_wrapper::asn_ConnectivityInfo__numRetriesConnect);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_connectEstablishedList->numRetriesConnect = %d.", __FUNCTION__, p_connectEstablishedList->numRetriesConnect);
                connectEstablishedList->numRetriesConnect = p_connectEstablishedList->numRetriesConnect;
            }
            if (p_connectEstablishedList->retryReason_presence)
            {
                if (verifyScope("retryReason", (int64_t)p_connectEstablishedList->retryReason.size(), (int64_t)0, (int64_t)100))
                {
                    connectEstablishedList->optional.setPresence(asn_wrapper::asn_retryReason);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_connectEstablishedList->retryReason = %s.", __FUNCTION__, p_connectEstablishedList->retryReason.c_str());
                    connectEstablishedList->retryReason.copyOctetString(p_connectEstablishedList->retryReason.length(), (asnbyte*)(unsigned char*)(p_connectEstablishedList->retryReason.c_str()));
                }
            }
        
            ++p_connectEstablishedList;
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->connectEstablishedList.getCount() = %d.", __FUNCTION__, marbenData->connectEstablishedList.getCount());
        
    }
    if (pData.connectTime_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_ConnectivityStatus__connectTime);
        if (marbenData->connectTime == nullptr )
        {
            marbenData->connectTime = new asn_wrapper::TimeStamp();
        }
        TimeStamp_Encode(pData.connectTime, marbenData->connectTime);
    }
    if (pData.connectPosition_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_ConnectivityStatus__connectPosition);
        if (marbenData->connectPosition == nullptr )
        {
            marbenData->connectPosition = new asn_wrapper::Position();
        }
        Position_Encode(pData.connectPosition, marbenData->connectPosition);
    }
    if (pData.connectType_presence)
    {
        if (verifyScope("connectType", (int64_t)pData.connectType.size(), (int64_t)0, (int64_t)50))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_ConnectivityStatus__connectType);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.connectType = %s.", __FUNCTION__, pData.connectType.c_str());
            marbenData->connectType.copyOctetString(pData.connectType.length(), (asnbyte*)(unsigned char*)(pData.connectType.c_str()));
        }
    }
    if (pData.numRetriesConnect_presence)
    {
        if (verifyScope("numRetriesConnect", (int64_t)pData.numRetriesConnect, (int64_t)0, (int64_t)65535))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_ConnectivityStatus__numRetriesConnect);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.numRetriesConnect = %d.", __FUNCTION__, pData.numRetriesConnect);
            marbenData->numRetriesConnect = pData.numRetriesConnect;
        }
    }
    if (verifyScope("retryReason", (int64_t)pData.retryReason.size(), (int64_t)0, (int64_t)255))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.retryReason = %s.", __FUNCTION__, pData.retryReason.c_str());
        marbenData->retryReason.copyOctetString(pData.retryReason.length(), (asnbyte*)(unsigned char*)(pData.retryReason.c_str()));
    }
    if (pData.disconnectType_presence)
    {
        if (verifyScope("disconnectType", (int64_t)pData.disconnectType, (int64_t)0, (int64_t)1))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_disconnectType);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.disconnectType = %d.", __FUNCTION__, pData.disconnectType);
            marbenData->disconnectType = pData.disconnectType;
        }
    }
    if (pData.lostConnectionsList_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_lostConnectionsList);
        
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.lostConnectionsList.size() = %d.", __FUNCTION__, pData.lostConnectionsList.size());
        for (auto p_lostConnectionsList = pData.lostConnectionsList.begin(); p_lostConnectionsList != pData.lostConnectionsList.end();) 
        {
            asn_wrapper::asnclostConnectionsLists *lostConnectionsList = new asn_wrapper::asnclostConnectionsLists();
            marbenData->lostConnectionsList.addElement(lostConnectionsList);

            if (p_lostConnectionsList->connectTime_presence)
            {
                lostConnectionsList->optional.setPresence(asn_wrapper::asn_ConnectivityInfo__connectTime);
                if (lostConnectionsList->connectTime == nullptr )
                {
                    lostConnectionsList->connectTime = new asn_wrapper::TimeStamp();
                }
                TimeStamp_Encode(p_lostConnectionsList->connectTime, lostConnectionsList->connectTime);
            }
            if (p_lostConnectionsList->connectPosition_presence)
            {
                lostConnectionsList->optional.setPresence(asn_wrapper::asn_ConnectivityInfo__connectPosition);
                if (lostConnectionsList->connectPosition == nullptr )
                {
                    lostConnectionsList->connectPosition = new asn_wrapper::Position();
                }
                Position_Encode(p_lostConnectionsList->connectPosition, lostConnectionsList->connectPosition);
            }
            if (p_lostConnectionsList->connectType_presence)
            {
                if (verifyScope("connectType", (int64_t)p_lostConnectionsList->connectType.size(), (int64_t)0, (int64_t)50))
                {
                    lostConnectionsList->optional.setPresence(asn_wrapper::asn_ConnectivityInfo__connectType);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_lostConnectionsList->connectType = %s.", __FUNCTION__, p_lostConnectionsList->connectType.c_str());
                    lostConnectionsList->connectType.copyOctetString(p_lostConnectionsList->connectType.length(), (asnbyte*)(unsigned char*)(p_lostConnectionsList->connectType.c_str()));
                }
            }
            if (p_lostConnectionsList->numRetriesConnect_presence)
            {
                lostConnectionsList->optional.setPresence(asn_wrapper::asn_ConnectivityInfo__numRetriesConnect);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_lostConnectionsList->numRetriesConnect = %d.", __FUNCTION__, p_lostConnectionsList->numRetriesConnect);
                lostConnectionsList->numRetriesConnect = p_lostConnectionsList->numRetriesConnect;
            }
            if (p_lostConnectionsList->retryReason_presence)
            {
                if (verifyScope("retryReason", (int64_t)p_lostConnectionsList->retryReason.size(), (int64_t)0, (int64_t)100))
                {
                    lostConnectionsList->optional.setPresence(asn_wrapper::asn_retryReason);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_lostConnectionsList->retryReason = %s.", __FUNCTION__, p_lostConnectionsList->retryReason.c_str());
                    lostConnectionsList->retryReason.copyOctetString(p_lostConnectionsList->retryReason.length(), (asnbyte*)(unsigned char*)(p_lostConnectionsList->retryReason.c_str()));
                }
            }
        
            ++p_lostConnectionsList;
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->lostConnectionsList.getCount() = %d.", __FUNCTION__, marbenData->lostConnectionsList.getCount());
        
    }
    if (pData.sleeptimePosition_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_sleeptimePosition);
        if (marbenData->sleeptimePosition == nullptr )
        {
            marbenData->sleeptimePosition = new asn_wrapper::TimePosition();
        }
        TimePosition_Encode(pData.sleeptimePosition, marbenData->sleeptimePosition);
    }

    return true;
}

bool VdsMarbenAdaptGen::ConnectivityStatus_Decode(const std::string &path, std::shared_ptr<ConnectivityStatus_Model> &pData, asn_wrapper::ConnectivityStatus* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::ConnectivityStatus* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::ConnectivityStatus*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_wakeupTimePosition))
    {
        pData->wakeupTimePosition_presence = true;
        if (marbenData->wakeupTimePosition != nullptr )
        {
            std::shared_ptr<TimePosition_Model> p_wakeupTimePosition = std::make_shared<TimePosition_Model>();
            result = TimePosition_Decode( "" , p_wakeupTimePosition , marbenData->wakeupTimePosition);
            if (result)
            {
                pData->wakeupTimePosition = (*p_wakeupTimePosition);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_connectEstablishedList))
    {
        pData->connectEstablishedList_presence = true;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->connectEstablishedList.getCount() = %d.", __FUNCTION__, marbenData->connectEstablishedList.getCount());
        unsigned int connectEstablishedListCount = marbenData->connectEstablishedList.getCount();
        asn_wrapper::asncconnectEstablishedLists* connectEstablishedList = (asn_wrapper::asncconnectEstablishedLists*)(marbenData->connectEstablishedList.getFirstElement());
        for (unsigned int i = 0; (i < connectEstablishedListCount || connectEstablishedList); i++) 
        {
            ConnectivityInfo_Model p_connectEstablishedList;
            if (asnTRUE == connectEstablishedList->optional.getPresence(asn_wrapper::asn_ConnectivityInfo__connectTime))
            {
                p_connectEstablishedList.connectTime_presence = true;
                if (connectEstablishedList->connectTime != nullptr )
                {
                    std::shared_ptr<TimeStamp_Model> p_connectTime = std::make_shared<TimeStamp_Model>();
                    result = TimeStamp_Decode( "" , p_connectTime , connectEstablishedList->connectTime);
                    if (result)
                    {
                        p_connectEstablishedList.connectTime = (*p_connectTime);
                    }
                }

            }
            if (asnTRUE == connectEstablishedList->optional.getPresence(asn_wrapper::asn_ConnectivityInfo__connectPosition))
            {
                p_connectEstablishedList.connectPosition_presence = true;
                if (connectEstablishedList->connectPosition != nullptr )
                {
                    std::shared_ptr<Position_Model> p_connectPosition = std::make_shared<Position_Model>();
                    result = Position_Decode( "" , p_connectPosition , connectEstablishedList->connectPosition);
                    if (result)
                    {
                        p_connectEstablishedList.connectPosition = (*p_connectPosition);
                    }
                }

            }
            if (asnTRUE == connectEstablishedList->optional.getPresence(asn_wrapper::asn_ConnectivityInfo__connectType))
            {
                p_connectEstablishedList.connectType_presence = true;
                p_connectEstablishedList.connectType = std::string((const char*)connectEstablishedList->connectType.value, connectEstablishedList->connectType.length);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_connectEstablishedList.connectType = %s.", __FUNCTION__, p_connectEstablishedList.connectType.c_str());
            }
            if (asnTRUE == connectEstablishedList->optional.getPresence(asn_wrapper::asn_ConnectivityInfo__numRetriesConnect))
            {
                p_connectEstablishedList.numRetriesConnect_presence = true;
                p_connectEstablishedList.numRetriesConnect = connectEstablishedList->numRetriesConnect;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_connectEstablishedList.numRetriesConnect = %d.", __FUNCTION__, p_connectEstablishedList.numRetriesConnect);
            }
            if (asnTRUE == connectEstablishedList->optional.getPresence(asn_wrapper::asn_retryReason))
            {
                p_connectEstablishedList.retryReason_presence = true;
                p_connectEstablishedList.retryReason = std::string((const char*)connectEstablishedList->retryReason.value, connectEstablishedList->retryReason.length);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_connectEstablishedList.retryReason = %s.", __FUNCTION__, p_connectEstablishedList.retryReason.c_str());
            }
            pData->connectEstablishedList.push_back(p_connectEstablishedList);
            connectEstablishedList = (asn_wrapper::asncconnectEstablishedLists*)(connectEstablishedList->getNextElement());
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->connectEstablishedList.size() = %d.", __FUNCTION__, pData->connectEstablishedList.size());
        
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_ConnectivityStatus__connectTime))
    {
        pData->connectTime_presence = true;
        if (marbenData->connectTime != nullptr )
        {
            std::shared_ptr<TimeStamp_Model> p_connectTime = std::make_shared<TimeStamp_Model>();
            result = TimeStamp_Decode( "" , p_connectTime , marbenData->connectTime);
            if (result)
            {
                pData->connectTime = (*p_connectTime);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_ConnectivityStatus__connectPosition))
    {
        pData->connectPosition_presence = true;
        if (marbenData->connectPosition != nullptr )
        {
            std::shared_ptr<Position_Model> p_connectPosition = std::make_shared<Position_Model>();
            result = Position_Decode( "" , p_connectPosition , marbenData->connectPosition);
            if (result)
            {
                pData->connectPosition = (*p_connectPosition);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_ConnectivityStatus__connectType))
    {
        pData->connectType_presence = true;
        pData->connectType = std::string((const char*)marbenData->connectType.value, marbenData->connectType.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->connectType = %s.", __FUNCTION__, pData->connectType.c_str());
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_ConnectivityStatus__numRetriesConnect))
    {
        pData->numRetriesConnect_presence = true;
        pData->numRetriesConnect = marbenData->numRetriesConnect;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->numRetriesConnect = %d.", __FUNCTION__, pData->numRetriesConnect);
    }
    pData->retryReason = std::string((const char*)marbenData->retryReason.value, marbenData->retryReason.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->retryReason = %s.", __FUNCTION__, pData->retryReason.c_str());
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_disconnectType))
    {
        pData->disconnectType_presence = true;
        pData->disconnectType = marbenData->disconnectType;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->disconnectType = %d.", __FUNCTION__, pData->disconnectType);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_lostConnectionsList))
    {
        pData->lostConnectionsList_presence = true;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->lostConnectionsList.getCount() = %d.", __FUNCTION__, marbenData->lostConnectionsList.getCount());
        unsigned int lostConnectionsListCount = marbenData->lostConnectionsList.getCount();
        asn_wrapper::asnclostConnectionsLists* lostConnectionsList = (asn_wrapper::asnclostConnectionsLists*)(marbenData->lostConnectionsList.getFirstElement());
        for (unsigned int i = 0; (i < lostConnectionsListCount || lostConnectionsList); i++) 
        {
            ConnectivityInfo_Model p_lostConnectionsList;
            if (asnTRUE == lostConnectionsList->optional.getPresence(asn_wrapper::asn_ConnectivityInfo__connectTime))
            {
                p_lostConnectionsList.connectTime_presence = true;
                if (lostConnectionsList->connectTime != nullptr )
                {
                    std::shared_ptr<TimeStamp_Model> p_connectTime = std::make_shared<TimeStamp_Model>();
                    result = TimeStamp_Decode( "" , p_connectTime , lostConnectionsList->connectTime);
                    if (result)
                    {
                        p_lostConnectionsList.connectTime = (*p_connectTime);
                    }
                }

            }
            if (asnTRUE == lostConnectionsList->optional.getPresence(asn_wrapper::asn_ConnectivityInfo__connectPosition))
            {
                p_lostConnectionsList.connectPosition_presence = true;
                if (lostConnectionsList->connectPosition != nullptr )
                {
                    std::shared_ptr<Position_Model> p_connectPosition = std::make_shared<Position_Model>();
                    result = Position_Decode( "" , p_connectPosition , lostConnectionsList->connectPosition);
                    if (result)
                    {
                        p_lostConnectionsList.connectPosition = (*p_connectPosition);
                    }
                }

            }
            if (asnTRUE == lostConnectionsList->optional.getPresence(asn_wrapper::asn_ConnectivityInfo__connectType))
            {
                p_lostConnectionsList.connectType_presence = true;
                p_lostConnectionsList.connectType = std::string((const char*)lostConnectionsList->connectType.value, lostConnectionsList->connectType.length);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_lostConnectionsList.connectType = %s.", __FUNCTION__, p_lostConnectionsList.connectType.c_str());
            }
            if (asnTRUE == lostConnectionsList->optional.getPresence(asn_wrapper::asn_ConnectivityInfo__numRetriesConnect))
            {
                p_lostConnectionsList.numRetriesConnect_presence = true;
                p_lostConnectionsList.numRetriesConnect = lostConnectionsList->numRetriesConnect;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_lostConnectionsList.numRetriesConnect = %d.", __FUNCTION__, p_lostConnectionsList.numRetriesConnect);
            }
            if (asnTRUE == lostConnectionsList->optional.getPresence(asn_wrapper::asn_retryReason))
            {
                p_lostConnectionsList.retryReason_presence = true;
                p_lostConnectionsList.retryReason = std::string((const char*)lostConnectionsList->retryReason.value, lostConnectionsList->retryReason.length);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_lostConnectionsList.retryReason = %s.", __FUNCTION__, p_lostConnectionsList.retryReason.c_str());
            }
            pData->lostConnectionsList.push_back(p_lostConnectionsList);
            lostConnectionsList = (asn_wrapper::asnclostConnectionsLists*)(lostConnectionsList->getNextElement());
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->lostConnectionsList.size() = %d.", __FUNCTION__, pData->lostConnectionsList.size());
        
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_sleeptimePosition))
    {
        pData->sleeptimePosition_presence = true;
        if (marbenData->sleeptimePosition != nullptr )
        {
            std::shared_ptr<TimePosition_Model> p_sleeptimePosition = std::make_shared<TimePosition_Model>();
            result = TimePosition_Decode( "" , p_sleeptimePosition , marbenData->sleeptimePosition);
            if (result)
            {
                pData->sleeptimePosition = (*p_sleeptimePosition);
            }
        }

    }

    return true;
}

bool VdsMarbenAdaptGen::TimePosition_Encode(const TimePosition_Model &pData, asn_wrapper::TimePosition* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::TimePosition* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::TimePosition*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (pData.time_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_TimePosition__time);
        if (marbenData->time == nullptr )
        {
            marbenData->time = new asn_wrapper::TimeStamp();
        }
        TimeStamp_Encode(pData.time, marbenData->time);
    }
    if (pData.position_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_TimePosition__position);
        if (marbenData->position == nullptr )
        {
            marbenData->position = new asn_wrapper::Position();
        }
        Position_Encode(pData.position, marbenData->position);
    }

    return true;
}

bool VdsMarbenAdaptGen::TimePosition_Decode(const std::string &path, std::shared_ptr<TimePosition_Model> &pData, asn_wrapper::TimePosition* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::TimePosition* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::TimePosition*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_TimePosition__time))
    {
        pData->time_presence = true;
        if (marbenData->time != nullptr )
        {
            std::shared_ptr<TimeStamp_Model> p_time = std::make_shared<TimeStamp_Model>();
            result = TimeStamp_Decode( "" , p_time , marbenData->time);
            if (result)
            {
                pData->time = (*p_time);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_TimePosition__position))
    {
        pData->position_presence = true;
        if (marbenData->position != nullptr )
        {
            std::shared_ptr<Position_Model> p_position = std::make_shared<Position_Model>();
            result = Position_Decode( "" , p_position , marbenData->position);
            if (result)
            {
                pData->position = (*p_position);
            }
        }

    }

    return true;
}

bool VdsMarbenAdaptGen::ConnectivityInfo_Encode(const ConnectivityInfo_Model &pData, asn_wrapper::ConnectivityInfo* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::ConnectivityInfo* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::ConnectivityInfo*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (pData.connectTime_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_ConnectivityInfo__connectTime);
        if (marbenData->connectTime == nullptr )
        {
            marbenData->connectTime = new asn_wrapper::TimeStamp();
        }
        TimeStamp_Encode(pData.connectTime, marbenData->connectTime);
    }
    if (pData.connectPosition_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_ConnectivityInfo__connectPosition);
        if (marbenData->connectPosition == nullptr )
        {
            marbenData->connectPosition = new asn_wrapper::Position();
        }
        Position_Encode(pData.connectPosition, marbenData->connectPosition);
    }
    if (pData.connectType_presence)
    {
        if (verifyScope("connectType", (int64_t)pData.connectType.size(), (int64_t)0, (int64_t)50))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_ConnectivityInfo__connectType);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.connectType = %s.", __FUNCTION__, pData.connectType.c_str());
            marbenData->connectType.copyOctetString(pData.connectType.length(), (asnbyte*)(unsigned char*)(pData.connectType.c_str()));
        }
    }
    if (pData.numRetriesConnect_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_ConnectivityInfo__numRetriesConnect);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.numRetriesConnect = %d.", __FUNCTION__, pData.numRetriesConnect);
        marbenData->numRetriesConnect = pData.numRetriesConnect;
    }
    if (pData.retryReason_presence)
    {
        if (verifyScope("retryReason", (int64_t)pData.retryReason.size(), (int64_t)0, (int64_t)100))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_retryReason);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.retryReason = %s.", __FUNCTION__, pData.retryReason.c_str());
            marbenData->retryReason.copyOctetString(pData.retryReason.length(), (asnbyte*)(unsigned char*)(pData.retryReason.c_str()));
        }
    }

    return true;
}

bool VdsMarbenAdaptGen::ConnectivityInfo_Decode(const std::string &path, std::shared_ptr<ConnectivityInfo_Model> &pData, asn_wrapper::ConnectivityInfo* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::ConnectivityInfo* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::ConnectivityInfo*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_ConnectivityInfo__connectTime))
    {
        pData->connectTime_presence = true;
        if (marbenData->connectTime != nullptr )
        {
            std::shared_ptr<TimeStamp_Model> p_connectTime = std::make_shared<TimeStamp_Model>();
            result = TimeStamp_Decode( "" , p_connectTime , marbenData->connectTime);
            if (result)
            {
                pData->connectTime = (*p_connectTime);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_ConnectivityInfo__connectPosition))
    {
        pData->connectPosition_presence = true;
        if (marbenData->connectPosition != nullptr )
        {
            std::shared_ptr<Position_Model> p_connectPosition = std::make_shared<Position_Model>();
            result = Position_Decode( "" , p_connectPosition , marbenData->connectPosition);
            if (result)
            {
                pData->connectPosition = (*p_connectPosition);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_ConnectivityInfo__connectType))
    {
        pData->connectType_presence = true;
        pData->connectType = std::string((const char*)marbenData->connectType.value, marbenData->connectType.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->connectType = %s.", __FUNCTION__, pData->connectType.c_str());
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_ConnectivityInfo__numRetriesConnect))
    {
        pData->numRetriesConnect_presence = true;
        pData->numRetriesConnect = marbenData->numRetriesConnect;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->numRetriesConnect = %d.", __FUNCTION__, pData->numRetriesConnect);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_retryReason))
    {
        pData->retryReason_presence = true;
        pData->retryReason = std::string((const char*)marbenData->retryReason.value, marbenData->retryReason.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->retryReason = %s.", __FUNCTION__, pData->retryReason.c_str());
    }

    return true;
}

bool VdsMarbenAdaptGen::SIMInfo_Encode(const SIMInfo_Model &pData, asn_wrapper::SIMInfo* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::SIMInfo* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::SIMInfo*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (pData.msisdn_presence)
    {
        if (verifyScope("msisdn", (int64_t)pData.msisdn.size(), (int64_t)1, (int64_t)32))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_msisdn);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.msisdn = %s.", __FUNCTION__, pData.msisdn.c_str());
            marbenData->msisdn.copyOctetString(pData.msisdn.length(), (asnbyte*)(unsigned char*)(pData.msisdn.c_str()));
        }
    }
    if (pData.imsi_presence)
    {
        if (verifyScope("imsi", (int64_t)pData.imsi.size(), (int64_t)1, (int64_t)32))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_imsi);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.imsi = %s.", __FUNCTION__, pData.imsi.c_str());
            marbenData->imsi.copyOctetString(pData.imsi.length(), (asnbyte*)(unsigned char*)(pData.imsi.c_str()));
        }
    }
    if (pData.iccId_presence)
    {
        if (verifyScope("iccId", (int64_t)pData.iccId.size(), (int64_t)1, (int64_t)32))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_iccId);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.iccId = %s.", __FUNCTION__, pData.iccId.c_str());
            marbenData->iccId.copyOctetString(pData.iccId.length(), (asnbyte*)(unsigned char*)(pData.iccId.c_str()));
        }
    }

    return true;
}

bool VdsMarbenAdaptGen::SIMInfo_Decode(const std::string &path, std::shared_ptr<SIMInfo_Model> &pData, asn_wrapper::SIMInfo* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::SIMInfo* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::SIMInfo*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_msisdn))
    {
        pData->msisdn_presence = true;
        pData->msisdn = std::string((const char*)marbenData->msisdn.value, marbenData->msisdn.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->msisdn = %s.", __FUNCTION__, pData->msisdn.c_str());
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_imsi))
    {
        pData->imsi_presence = true;
        pData->imsi = std::string((const char*)marbenData->imsi.value, marbenData->imsi.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->imsi = %s.", __FUNCTION__, pData->imsi.c_str());
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_iccId))
    {
        pData->iccId_presence = true;
        pData->iccId = std::string((const char*)marbenData->iccId.value, marbenData->iccId.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->iccId = %s.", __FUNCTION__, pData->iccId.c_str());
    }

    return true;
}

bool VdsMarbenAdaptGen::BatteryStatus_Encode(const BatteryStatus_Model &pData, asn_wrapper::BatteryStatus* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::BatteryStatus* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::BatteryStatus*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (pData.stateOfCharge_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_BatteryStatus__stateOfCharge);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.stateOfCharge = %d.", __FUNCTION__, pData.stateOfCharge);
        marbenData->stateOfCharge = pData.stateOfCharge;
    }
    if (pData.chargeLevel_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_BatteryStatus__chargeLevel);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.chargeLevel = %d.", __FUNCTION__, pData.chargeLevel);
        marbenData->chargeLevel = pData.chargeLevel;
    }
    if (pData.stateOfHealth_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_stateOfHealth);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.stateOfHealth = %d.", __FUNCTION__, pData.stateOfHealth);
        marbenData->stateOfHealth = pData.stateOfHealth;
    }
    if (pData.powerLevel_presence)
    {
        if (verifyScope("powerLevel", (int64_t)pData.powerLevel, (int64_t)0, (int64_t)15))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_powerLevel);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.powerLevel = %d.", __FUNCTION__, pData.powerLevel);
            marbenData->powerLevel = pData.powerLevel;
        }
    }
    if (pData.energyLevel_presence)
    {
        if (verifyScope("energyLevel", (int64_t)pData.energyLevel, (int64_t)0, (int64_t)15))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_energyLevel);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.energyLevel = %d.", __FUNCTION__, pData.energyLevel);
            marbenData->energyLevel = pData.energyLevel;
        }
    }
    if (pData.voltage_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_voltage);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.voltage = %d.", __FUNCTION__, pData.voltage);
        marbenData->voltage = pData.voltage;
    }

    return true;
}

bool VdsMarbenAdaptGen::BatteryStatus_Decode(const std::string &path, std::shared_ptr<BatteryStatus_Model> &pData, asn_wrapper::BatteryStatus* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::BatteryStatus* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::BatteryStatus*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_BatteryStatus__stateOfCharge))
    {
        pData->stateOfCharge_presence = true;
        pData->stateOfCharge = marbenData->stateOfCharge;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->stateOfCharge = %d.", __FUNCTION__, pData->stateOfCharge);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_BatteryStatus__chargeLevel))
    {
        pData->chargeLevel_presence = true;
        pData->chargeLevel = marbenData->chargeLevel;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->chargeLevel = %d.", __FUNCTION__, pData->chargeLevel);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_stateOfHealth))
    {
        pData->stateOfHealth_presence = true;
        pData->stateOfHealth = marbenData->stateOfHealth;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->stateOfHealth = %d.", __FUNCTION__, pData->stateOfHealth);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_powerLevel))
    {
        pData->powerLevel_presence = true;
        pData->powerLevel = marbenData->powerLevel;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->powerLevel = %d.", __FUNCTION__, pData->powerLevel);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_energyLevel))
    {
        pData->energyLevel_presence = true;
        pData->energyLevel = marbenData->energyLevel;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->energyLevel = %d.", __FUNCTION__, pData->energyLevel);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_voltage))
    {
        pData->voltage_presence = true;
        pData->voltage = marbenData->voltage;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->voltage = %d.", __FUNCTION__, pData->voltage);
    }

    return true;
}

bool VdsMarbenAdaptGen::ECUDiagnostic_Encode(const ECUDiagnostic_Model &pData, asn_wrapper::ECUDiagnostic* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::ECUDiagnostic* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::ECUDiagnostic*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("ecuID", (int64_t)pData.ecuID.size(), (int64_t)1, (int64_t)100))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.ecuID = %s.", __FUNCTION__, pData.ecuID.c_str());
        marbenData->ecuID.copyOctetString(pData.ecuID.length(), (asnbyte*)(unsigned char*)(pData.ecuID.c_str()));
    }
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.diagnosticResult = %d.", __FUNCTION__, pData.diagnosticResult);
    marbenData->diagnosticResult = (int32_t)pData.diagnosticResult;
    if (pData.dtcs_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_dtcs);
        
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.dtcs.size() = %d.", __FUNCTION__, pData.dtcs.size());
        for (auto p_dtc = pData.dtcs.begin(); p_dtc != pData.dtcs.end();) 
        {
            asn_wrapper::asncdtcss *dtc = new asn_wrapper::asncdtcss();
            marbenData->dtcs.addElement(dtc);

            if (verifyScope("dtc", (int64_t)p_dtc->dtc.size(), (int64_t)1, (int64_t)100))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_dtc->dtc = %s.", __FUNCTION__, p_dtc->dtc.c_str());
                dtc->dtc.copyOctetString(p_dtc->dtc.length(), (asnbyte*)(unsigned char*)(p_dtc->dtc.c_str()));
            }
            //TODO:status;
            if (p_dtc->failureCount_presence)
            {
                if (verifyScope("failureCount", (int64_t)p_dtc->failureCount, (int64_t)0, (int64_t)255))
                {
                    dtc->optional.setPresence(asn_wrapper::asn_failureCount);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_dtc->failureCount = %d.", __FUNCTION__, p_dtc->failureCount);
                    dtc->failureCount = p_dtc->failureCount;
                }
            }
            if (p_dtc->lastFail_presence)
            {
                dtc->optional.setPresence(asn_wrapper::asn_lastFail);
                if (dtc->lastFail == nullptr )
                {
                    dtc->lastFail = new asn_wrapper::TimeStamp();
                }
                TimeStamp_Encode(p_dtc->lastFail, dtc->lastFail);
            }
            if (p_dtc->firtFail_presence)
            {
                dtc->optional.setPresence(asn_wrapper::asn_firtFail);
                if (dtc->firtFail == nullptr )
                {
                    dtc->firtFail = new asn_wrapper::TimeStamp();
                }
                TimeStamp_Encode(p_dtc->firtFail, dtc->firtFail);
            }
            if (p_dtc->firstFailureOdometer_presence)
            {
                dtc->optional.setPresence(asn_wrapper::asn_firstFailureOdometer);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_dtc->firstFailureOdometer = %d.", __FUNCTION__, p_dtc->firstFailureOdometer);
                dtc->firstFailureOdometer = p_dtc->firstFailureOdometer;
            }
            if (p_dtc->firstFailureBatteryVoltage_presence)
            {
                dtc->optional.setPresence(asn_wrapper::asn_firstFailureBatteryVoltage);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_dtc->firstFailureBatteryVoltage = %d.", __FUNCTION__, p_dtc->firstFailureBatteryVoltage);
                dtc->firstFailureBatteryVoltage = p_dtc->firstFailureBatteryVoltage;
            }
            if (p_dtc->firstFailureVehicleSpeed_presence)
            {
                dtc->optional.setPresence(asn_wrapper::asn_firstFailureVehicleSpeed);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_dtc->firstFailureVehicleSpeed = %d.", __FUNCTION__, p_dtc->firstFailureVehicleSpeed);
                dtc->firstFailureVehicleSpeed = p_dtc->firstFailureVehicleSpeed;
            }
        
            ++p_dtc;
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->dtcs.getCount() = %d.", __FUNCTION__, marbenData->dtcs.getCount());
        
    }
    if (pData.exceptionCode_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_exceptionCode);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.exceptionCode = %d.", __FUNCTION__, pData.exceptionCode);
        marbenData->exceptionCode = pData.exceptionCode;
    }

    return true;
}

bool VdsMarbenAdaptGen::ECUDiagnostic_Decode(const std::string &path, std::shared_ptr<ECUDiagnostic_Model> &pData, asn_wrapper::ECUDiagnostic* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::ECUDiagnostic* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::ECUDiagnostic*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->ecuID = std::string((const char*)marbenData->ecuID.value, marbenData->ecuID.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->ecuID = %s.", __FUNCTION__, pData->ecuID.c_str());
    pData->diagnosticResult = (Vds_HealthStatus)marbenData->diagnosticResult;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->diagnosticResult = %d.", __FUNCTION__, pData->diagnosticResult);
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_dtcs))
    {
        pData->dtcs_presence = true;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->dtcs.getCount() = %d.", __FUNCTION__, marbenData->dtcs.getCount());
        unsigned int dtcCount = marbenData->dtcs.getCount();
        asn_wrapper::asncdtcss* dtc = (asn_wrapper::asncdtcss*)(marbenData->dtcs.getFirstElement());
        for (unsigned int i = 0; (i < dtcCount || dtc); i++) 
        {
            DiagnosticTroubleCode_Model p_dtc;
            p_dtc.dtc = std::string((const char*)dtc->dtc.value, dtc->dtc.length);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_dtc.dtc = %s.", __FUNCTION__, p_dtc.dtc.c_str());
            //TODO:status;
            if (asnTRUE == dtc->optional.getPresence(asn_wrapper::asn_failureCount))
            {
                p_dtc.failureCount_presence = true;
                p_dtc.failureCount = dtc->failureCount;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_dtc.failureCount = %d.", __FUNCTION__, p_dtc.failureCount);
            }
            if (asnTRUE == dtc->optional.getPresence(asn_wrapper::asn_lastFail))
            {
                p_dtc.lastFail_presence = true;
                if (dtc->lastFail != nullptr )
                {
                    std::shared_ptr<TimeStamp_Model> p_lastFail = std::make_shared<TimeStamp_Model>();
                    result = TimeStamp_Decode( "" , p_lastFail , dtc->lastFail);
                    if (result)
                    {
                        p_dtc.lastFail = (*p_lastFail);
                    }
                }

            }
            if (asnTRUE == dtc->optional.getPresence(asn_wrapper::asn_firtFail))
            {
                p_dtc.firtFail_presence = true;
                if (dtc->firtFail != nullptr )
                {
                    std::shared_ptr<TimeStamp_Model> p_firtFail = std::make_shared<TimeStamp_Model>();
                    result = TimeStamp_Decode( "" , p_firtFail , dtc->firtFail);
                    if (result)
                    {
                        p_dtc.firtFail = (*p_firtFail);
                    }
                }

            }
            if (asnTRUE == dtc->optional.getPresence(asn_wrapper::asn_firstFailureOdometer))
            {
                p_dtc.firstFailureOdometer_presence = true;
                p_dtc.firstFailureOdometer = dtc->firstFailureOdometer;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_dtc.firstFailureOdometer = %d.", __FUNCTION__, p_dtc.firstFailureOdometer);
            }
            if (asnTRUE == dtc->optional.getPresence(asn_wrapper::asn_firstFailureBatteryVoltage))
            {
                p_dtc.firstFailureBatteryVoltage_presence = true;
                p_dtc.firstFailureBatteryVoltage = dtc->firstFailureBatteryVoltage;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_dtc.firstFailureBatteryVoltage = %d.", __FUNCTION__, p_dtc.firstFailureBatteryVoltage);
            }
            if (asnTRUE == dtc->optional.getPresence(asn_wrapper::asn_firstFailureVehicleSpeed))
            {
                p_dtc.firstFailureVehicleSpeed_presence = true;
                p_dtc.firstFailureVehicleSpeed = dtc->firstFailureVehicleSpeed;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_dtc.firstFailureVehicleSpeed = %d.", __FUNCTION__, p_dtc.firstFailureVehicleSpeed);
            }
            pData->dtcs.push_back(p_dtc);
            dtc = (asn_wrapper::asncdtcss*)(dtc->getNextElement());
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->dtcs.size() = %d.", __FUNCTION__, pData->dtcs.size());
        
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_exceptionCode))
    {
        pData->exceptionCode_presence = true;
        pData->exceptionCode = marbenData->exceptionCode;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->exceptionCode = %d.", __FUNCTION__, pData->exceptionCode);
    }

    return true;
}

bool VdsMarbenAdaptGen::DiagnosticTroubleCode_Encode(const DiagnosticTroubleCode_Model &pData, asn_wrapper::DiagnosticTroubleCode* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::DiagnosticTroubleCode* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::DiagnosticTroubleCode*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("dtc", (int64_t)pData.dtc.size(), (int64_t)1, (int64_t)100))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.dtc = %s.", __FUNCTION__, pData.dtc.c_str());
        marbenData->dtc.copyOctetString(pData.dtc.length(), (asnbyte*)(unsigned char*)(pData.dtc.c_str()));
    }
    //TODO:status;
    if (pData.failureCount_presence)
    {
        if (verifyScope("failureCount", (int64_t)pData.failureCount, (int64_t)0, (int64_t)255))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_failureCount);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.failureCount = %d.", __FUNCTION__, pData.failureCount);
            marbenData->failureCount = pData.failureCount;
        }
    }
    if (pData.lastFail_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_lastFail);
        if (marbenData->lastFail == nullptr )
        {
            marbenData->lastFail = new asn_wrapper::TimeStamp();
        }
        TimeStamp_Encode(pData.lastFail, marbenData->lastFail);
    }
    if (pData.firtFail_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_firtFail);
        if (marbenData->firtFail == nullptr )
        {
            marbenData->firtFail = new asn_wrapper::TimeStamp();
        }
        TimeStamp_Encode(pData.firtFail, marbenData->firtFail);
    }
    if (pData.firstFailureOdometer_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_firstFailureOdometer);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.firstFailureOdometer = %d.", __FUNCTION__, pData.firstFailureOdometer);
        marbenData->firstFailureOdometer = pData.firstFailureOdometer;
    }
    if (pData.firstFailureBatteryVoltage_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_firstFailureBatteryVoltage);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.firstFailureBatteryVoltage = %d.", __FUNCTION__, pData.firstFailureBatteryVoltage);
        marbenData->firstFailureBatteryVoltage = pData.firstFailureBatteryVoltage;
    }
    if (pData.firstFailureVehicleSpeed_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_firstFailureVehicleSpeed);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.firstFailureVehicleSpeed = %d.", __FUNCTION__, pData.firstFailureVehicleSpeed);
        marbenData->firstFailureVehicleSpeed = pData.firstFailureVehicleSpeed;
    }

    return true;
}

bool VdsMarbenAdaptGen::DiagnosticTroubleCode_Decode(const std::string &path, std::shared_ptr<DiagnosticTroubleCode_Model> &pData, asn_wrapper::DiagnosticTroubleCode* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::DiagnosticTroubleCode* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::DiagnosticTroubleCode*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->dtc = std::string((const char*)marbenData->dtc.value, marbenData->dtc.length);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->dtc = %s.", __FUNCTION__, pData->dtc.c_str());
    //TODO:status;
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_failureCount))
    {
        pData->failureCount_presence = true;
        pData->failureCount = marbenData->failureCount;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->failureCount = %d.", __FUNCTION__, pData->failureCount);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_lastFail))
    {
        pData->lastFail_presence = true;
        if (marbenData->lastFail != nullptr )
        {
            std::shared_ptr<TimeStamp_Model> p_lastFail = std::make_shared<TimeStamp_Model>();
            result = TimeStamp_Decode( "" , p_lastFail , marbenData->lastFail);
            if (result)
            {
                pData->lastFail = (*p_lastFail);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_firtFail))
    {
        pData->firtFail_presence = true;
        if (marbenData->firtFail != nullptr )
        {
            std::shared_ptr<TimeStamp_Model> p_firtFail = std::make_shared<TimeStamp_Model>();
            result = TimeStamp_Decode( "" , p_firtFail , marbenData->firtFail);
            if (result)
            {
                pData->firtFail = (*p_firtFail);
            }
        }

    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_firstFailureOdometer))
    {
        pData->firstFailureOdometer_presence = true;
        pData->firstFailureOdometer = marbenData->firstFailureOdometer;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->firstFailureOdometer = %d.", __FUNCTION__, pData->firstFailureOdometer);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_firstFailureBatteryVoltage))
    {
        pData->firstFailureBatteryVoltage_presence = true;
        pData->firstFailureBatteryVoltage = marbenData->firstFailureBatteryVoltage;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->firstFailureBatteryVoltage = %d.", __FUNCTION__, pData->firstFailureBatteryVoltage);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_firstFailureVehicleSpeed))
    {
        pData->firstFailureVehicleSpeed_presence = true;
        pData->firstFailureVehicleSpeed = marbenData->firstFailureVehicleSpeed;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->firstFailureVehicleSpeed = %d.", __FUNCTION__, pData->firstFailureVehicleSpeed);
    }

    return true;
}

bool VdsMarbenAdaptGen::TheftNotification_Encode(const TheftNotification_Model &pData, asn_wrapper::TheftNotification* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::TheftNotification* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::TheftNotification*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (marbenData->time == nullptr )
    {
        marbenData->time = new asn_wrapper::TimeStamp();
    }
    TimeStamp_Encode(pData.time, marbenData->time);
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.activated = %d.", __FUNCTION__, pData.activated);
    marbenData->activated = pData.activated;

    return true;
}

bool VdsMarbenAdaptGen::TheftNotification_Decode(const std::string &path, std::shared_ptr<TheftNotification_Model> &pData, asn_wrapper::TheftNotification* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::TheftNotification* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::TheftNotification*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (marbenData->time != nullptr )
    {
        std::shared_ptr<TimeStamp_Model> p_time = std::make_shared<TimeStamp_Model>();
        result = TimeStamp_Decode( "" , p_time , marbenData->time);
        if (result)
        {
            pData->time = (*p_time);
        }
    }

    pData->activated = marbenData->activated;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->activated = %d.", __FUNCTION__, pData->activated);

    return true;
}

bool VdsMarbenAdaptGen::FragStrs_Encode(const FragStrs_Model &pData, asn_wrapper::FragStrs* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::FragStrs* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::FragStrs*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("activated", (int64_t)pData.activated, (int64_t)0, (int64_t)1))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.activated = %d.", __FUNCTION__, pData.activated);
        marbenData->activated = pData.activated;
    }
    if (pData.number_presence)
    {
        if (verifyScope("number", (int64_t)pData.number, (int64_t)0, (int64_t)30))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_number);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.number = %d.", __FUNCTION__, pData.number);
            marbenData->number = pData.number;
        }
    }
    if (pData.items_presence)
    {
        marbenData->optional.setPresence(asn_wrapper::asn_FragStrs__items);
        
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.items.size() = %d.", __FUNCTION__, pData.items.size());
        for (auto p_item = pData.items.begin(); p_item != pData.items.end();) 
        {
            asn_wrapper::asncFragStrs__itemss *item = new asn_wrapper::asncFragStrs__itemss();
            marbenData->items.addElement(item);

            if (verifyScope("id", (int64_t)p_item->id, (int64_t)0, (int64_t)30))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_item->id = %d.", __FUNCTION__, p_item->id);
                item->id = p_item->id;
            }
            if (verifyScope("activated", (int64_t)p_item->activated, (int64_t)0, (int64_t)1))
            {
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_item->activated = %d.", __FUNCTION__, p_item->activated);
                item->activated = p_item->activated;
            }
            if (p_item->level_presence)
            {
                if (verifyScope("level", (int64_t)p_item->level, (int64_t)0, (int64_t)30))
                {
                    item->optional.setPresence(asn_wrapper::asn_level);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_item->level = %d.", __FUNCTION__, p_item->level);
                    item->level = p_item->level;
                }
            }
            if (p_item->code_presence)
            {
                if (verifyScope("code", (int64_t)p_item->code.size(), (int64_t)1, (int64_t)20))
                {
                    item->optional.setPresence(asn_wrapper::asn_FragItem__code);
                    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_item->code = %s.", __FUNCTION__, p_item->code.c_str());
                    item->code.copyOctetString(p_item->code.length(), (asnbyte*)(unsigned char*)(p_item->code.c_str()));
                }
            }
        
            ++p_item;
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->items.getCount() = %d.", __FUNCTION__, marbenData->items.getCount());
        
    }

    return true;
}

bool VdsMarbenAdaptGen::FragStrs_Decode(const std::string &path, std::shared_ptr<FragStrs_Model> &pData, asn_wrapper::FragStrs* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::FragStrs* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::FragStrs*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->activated = marbenData->activated;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->activated = %d.", __FUNCTION__, pData->activated);
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_number))
    {
        pData->number_presence = true;
        pData->number = marbenData->number;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->number = %d.", __FUNCTION__, pData->number);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_FragStrs__items))
    {
        pData->items_presence = true;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: marbenData->items.getCount() = %d.", __FUNCTION__, marbenData->items.getCount());
        unsigned int itemCount = marbenData->items.getCount();
        asn_wrapper::asncFragStrs__itemss* item = (asn_wrapper::asncFragStrs__itemss*)(marbenData->items.getFirstElement());
        for (unsigned int i = 0; (i < itemCount || item); i++) 
        {
            FragItem_Model p_item;
            p_item.id = item->id;
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_item.id = %d.", __FUNCTION__, p_item.id);
            p_item.activated = item->activated;
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_item.activated = %d.", __FUNCTION__, p_item.activated);
            if (asnTRUE == item->optional.getPresence(asn_wrapper::asn_level))
            {
                p_item.level_presence = true;
                p_item.level = item->level;
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_item.level = %d.", __FUNCTION__, p_item.level);
            }
            if (asnTRUE == item->optional.getPresence(asn_wrapper::asn_FragItem__code))
            {
                p_item.code_presence = true;
                p_item.code = std::string((const char*)item->code.value, item->code.length);
                DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: p_item.code = %s.", __FUNCTION__, p_item.code.c_str());
            }
            pData->items.push_back(p_item);
            item = (asn_wrapper::asncFragStrs__itemss*)(item->getNextElement());
        }
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->items.size() = %d.", __FUNCTION__, pData->items.size());
        
    }

    return true;
}

bool VdsMarbenAdaptGen::FragItem_Encode(const FragItem_Model &pData, asn_wrapper::FragItem* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::FragItem* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::FragItem*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (verifyScope("id", (int64_t)pData.id, (int64_t)0, (int64_t)30))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.id = %d.", __FUNCTION__, pData.id);
        marbenData->id = pData.id;
    }
    if (verifyScope("activated", (int64_t)pData.activated, (int64_t)0, (int64_t)1))
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.activated = %d.", __FUNCTION__, pData.activated);
        marbenData->activated = pData.activated;
    }
    if (pData.level_presence)
    {
        if (verifyScope("level", (int64_t)pData.level, (int64_t)0, (int64_t)30))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_level);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.level = %d.", __FUNCTION__, pData.level);
            marbenData->level = pData.level;
        }
    }
    if (pData.code_presence)
    {
        if (verifyScope("code", (int64_t)pData.code.size(), (int64_t)1, (int64_t)20))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_FragItem__code);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.code = %s.", __FUNCTION__, pData.code.c_str());
            marbenData->code.copyOctetString(pData.code.length(), (asnbyte*)(unsigned char*)(pData.code.c_str()));
        }
    }

    return true;
}

bool VdsMarbenAdaptGen::FragItem_Decode(const std::string &path, std::shared_ptr<FragItem_Model> &pData, asn_wrapper::FragItem* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::FragItem* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::FragItem*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    pData->id = marbenData->id;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->id = %d.", __FUNCTION__, pData->id);
    pData->activated = marbenData->activated;
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->activated = %d.", __FUNCTION__, pData->activated);
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_level))
    {
        pData->level_presence = true;
        pData->level = marbenData->level;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->level = %d.", __FUNCTION__, pData->level);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_FragItem__code))
    {
        pData->code_presence = true;
        pData->code = std::string((const char*)marbenData->code.value, marbenData->code.length);
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->code = %s.", __FUNCTION__, pData->code.c_str());
    }

    return true;
}

bool VdsMarbenAdaptGen::TowStatus_Encode(const TowStatus_Model &pData, asn_wrapper::TowStatus* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);

    asn_wrapper::TowStatus* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::TowStatus*)getMarbenEncodeObj(pData.path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr encode failed.", __FUNCTION__);
        return false;
    }

    if (pData.trailerLampActiveChk_presence)
    {
        if (verifyScope("trailerLampActiveChk", (int64_t)pData.trailerLampActiveChk, (int64_t)0, (int64_t)20))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_trailerLampActiveChk);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.trailerLampActiveChk = %d.", __FUNCTION__, pData.trailerLampActiveChk);
            marbenData->trailerLampActiveChk = pData.trailerLampActiveChk;
        }
    }
    if (pData.trailerLampCheckSts_presence)
    {
        if (verifyScope("trailerLampCheckSts", (int64_t)pData.trailerLampCheckSts, (int64_t)0, (int64_t)20))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_trailerLampCheckSts);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.trailerLampCheckSts = %d.", __FUNCTION__, pData.trailerLampCheckSts);
            marbenData->trailerLampCheckSts = pData.trailerLampCheckSts;
        }
    }
    if (pData.trailerBreakLampSts_presence)
    {
        if (verifyScope("trailerBreakLampSts", (int64_t)pData.trailerBreakLampSts, (int64_t)0, (int64_t)20))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_trailerBreakLampSts);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.trailerBreakLampSts = %d.", __FUNCTION__, pData.trailerBreakLampSts);
            marbenData->trailerBreakLampSts = pData.trailerBreakLampSts;
        }
    }
    if (pData.trailerFogLampSts_presence)
    {
        if (verifyScope("trailerFogLampSts", (int64_t)pData.trailerFogLampSts, (int64_t)0, (int64_t)20))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_trailerFogLampSts);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.trailerFogLampSts = %d.", __FUNCTION__, pData.trailerFogLampSts);
            marbenData->trailerFogLampSts = pData.trailerFogLampSts;
        }
    }
    if (pData.trailerPosLampSts_presence)
    {
        if (verifyScope("trailerPosLampSts", (int64_t)pData.trailerPosLampSts, (int64_t)0, (int64_t)20))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_trailerPosLampSts);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.trailerPosLampSts = %d.", __FUNCTION__, pData.trailerPosLampSts);
            marbenData->trailerPosLampSts = pData.trailerPosLampSts;
        }
    }
    if (pData.trailerTurningLampSts_presence)
    {
        if (verifyScope("trailerTurningLampSts", (int64_t)pData.trailerTurningLampSts, (int64_t)0, (int64_t)20))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_trailerTurningLampSts);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.trailerTurningLampSts = %d.", __FUNCTION__, pData.trailerTurningLampSts);
            marbenData->trailerTurningLampSts = pData.trailerTurningLampSts;
        }
    }
    if (pData.trailerReversingLampSts_presence)
    {
        if (verifyScope("trailerReversingLampSts", (int64_t)pData.trailerReversingLampSts, (int64_t)0, (int64_t)20))
        {
            marbenData->optional.setPresence(asn_wrapper::asn_trailerReversingLampSts);
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData.trailerReversingLampSts = %d.", __FUNCTION__, pData.trailerReversingLampSts);
            marbenData->trailerReversingLampSts = pData.trailerReversingLampSts;
        }
    }

    return true;
}

bool VdsMarbenAdaptGen::TowStatus_Decode(const std::string &path, std::shared_ptr<TowStatus_Model> &pData, asn_wrapper::TowStatus* inputObj)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.", __FUNCTION__);
    bool result = false;

    if (!pData)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s pData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    asn_wrapper::TowStatus* marbenData;
    if(inputObj != nullptr)
    {
        marbenData = inputObj;
    }
    else
    {
        marbenData = (asn_wrapper::TowStatus*)getMarbenDecodeObj(path);
    }

    if (marbenData == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s:marbenData == nullptr decode failed.", __FUNCTION__);
        return result;
    }

    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_trailerLampActiveChk))
    {
        pData->trailerLampActiveChk_presence = true;
        pData->trailerLampActiveChk = marbenData->trailerLampActiveChk;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->trailerLampActiveChk = %d.", __FUNCTION__, pData->trailerLampActiveChk);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_trailerLampCheckSts))
    {
        pData->trailerLampCheckSts_presence = true;
        pData->trailerLampCheckSts = marbenData->trailerLampCheckSts;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->trailerLampCheckSts = %d.", __FUNCTION__, pData->trailerLampCheckSts);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_trailerBreakLampSts))
    {
        pData->trailerBreakLampSts_presence = true;
        pData->trailerBreakLampSts = marbenData->trailerBreakLampSts;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->trailerBreakLampSts = %d.", __FUNCTION__, pData->trailerBreakLampSts);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_trailerFogLampSts))
    {
        pData->trailerFogLampSts_presence = true;
        pData->trailerFogLampSts = marbenData->trailerFogLampSts;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->trailerFogLampSts = %d.", __FUNCTION__, pData->trailerFogLampSts);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_trailerPosLampSts))
    {
        pData->trailerPosLampSts_presence = true;
        pData->trailerPosLampSts = marbenData->trailerPosLampSts;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->trailerPosLampSts = %d.", __FUNCTION__, pData->trailerPosLampSts);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_trailerTurningLampSts))
    {
        pData->trailerTurningLampSts_presence = true;
        pData->trailerTurningLampSts = marbenData->trailerTurningLampSts;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->trailerTurningLampSts = %d.", __FUNCTION__, pData->trailerTurningLampSts);
    }
    if (asnTRUE == marbenData->optional.getPresence(asn_wrapper::asn_trailerReversingLampSts))
    {
        pData->trailerReversingLampSts_presence = true;
        pData->trailerReversingLampSts = marbenData->trailerReversingLampSts;
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s: pData->trailerReversingLampSts = %d.", __FUNCTION__, pData->trailerReversingLampSts);
    }

    return true;
}

asntype* VdsMarbenAdaptGen::getMarbenEncodeObj(const std::string &path)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.\n", __FUNCTION__);

    std::string combPath = "root";
    asntype* marbenObj = nullptr;
    std::vector<std::string> vecPath;
    splitString(path, vecPath, ".");
    int32_t vecSize = path.size();

    if(m_vdsObj == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s m_vdsObj == null.\n", __FUNCTION__);
        return nullptr;
    }

    if(vecSize == 0)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s path == root.\n", __FUNCTION__);
        marbenObj = m_vdsObj;
    }

    for (auto it = vecPath.begin(); it !=  vecPath.end();) 
    {
        vecSize --;
        combPath +=  "." + (*it) ;

        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s combPath:%s.\n", __FUNCTION__, combPath.c_str());

        if(combPath == "root")
        {
            //Nothing to do
        }
        else if(combPath == "root.header")
        {
            if (m_vdsObj->header == nullptr )
            {
                m_vdsObj->header = new asn_wrapper::RequestHeader();
            }
            marbenObj = m_vdsObj->header;
        }
        else if(combPath == "root.header.timeStamp")
        {
            if (m_vdsObj->header->timeStamp == nullptr )
            {
                m_vdsObj->header->timeStamp = new asn_wrapper::TimeStamp();
            }
            marbenObj = m_vdsObj->header->timeStamp;
        }
        else if(combPath == "root.header.eventId")
        {
            m_vdsObj->header->optional.setPresence(asn_wrapper::asn_eventId);
            if (m_vdsObj->header->eventId == nullptr )
            {
                m_vdsObj->header->eventId = new asn_wrapper::TimeStamp();
            }
            marbenObj = m_vdsObj->header->eventId;
        }
        else if(combPath == "root.body")
        {
            m_vdsObj->optional.setPresence(asn_wrapper::asn_body);
            if (m_vdsObj->body == nullptr )
            {
                m_vdsObj->body = new asn_wrapper::RequestBody();
            }
            marbenObj = m_vdsObj->body;
        }
        else if(combPath == "root.body.serviceData")
        {
            m_vdsObj->body->optional.setPresence(asn_wrapper::asn_serviceData);
            if (m_vdsObj->body->serviceData == nullptr )
            {
                m_vdsObj->body->serviceData = new asn_wrapper::ServiceData();
            }
            marbenObj = m_vdsObj->body->serviceData;
        }
        else if(combPath == "root.body.serviceData.serviceTrigger")
        {
            m_vdsObj->body->serviceData->optional.setPresence(asn_wrapper::asn_serviceTrigger);
            if (m_vdsObj->body->serviceData->serviceTrigger == nullptr )
            {
                m_vdsObj->body->serviceData->serviceTrigger = new asn_wrapper::ServiceTrigger();
            }
            marbenObj = m_vdsObj->body->serviceData->serviceTrigger;
        }
        else if(combPath == "root.body.serviceData.serviceTrigger.scheduledTime")
        {
            m_vdsObj->body->serviceData->serviceTrigger->optional.setPresence(asn_wrapper::asn_scheduledTime);
            if (m_vdsObj->body->serviceData->serviceTrigger->scheduledTime == nullptr )
            {
                m_vdsObj->body->serviceData->serviceTrigger->scheduledTime = new asn_wrapper::TimeStamp();
            }
            marbenObj = m_vdsObj->body->serviceData->serviceTrigger->scheduledTime;
        }
        else if(combPath == "root.body.serviceData.serviceTrigger.endTime")
        {
            m_vdsObj->body->serviceData->serviceTrigger->optional.setPresence(asn_wrapper::asn_ServiceTrigger__endTime);
            if (m_vdsObj->body->serviceData->serviceTrigger->endTime == nullptr )
            {
                m_vdsObj->body->serviceData->serviceTrigger->endTime = new asn_wrapper::TimeStamp();
            }
            marbenObj = m_vdsObj->body->serviceData->serviceTrigger->endTime;
        }
        else if(combPath == "root.body.serviceData.serviceResult")
        {
            m_vdsObj->body->serviceData->optional.setPresence(asn_wrapper::asn_serviceResult);
            if (m_vdsObj->body->serviceData->serviceResult == nullptr )
            {
                m_vdsObj->body->serviceData->serviceResult = new asn_wrapper::ServiceResult();
            }
            marbenObj = m_vdsObj->body->serviceData->serviceResult;
        }
        else if(combPath == "root.body.serviceData.serviceResult.error")
        {
            m_vdsObj->body->serviceData->serviceResult->optional.setPresence(asn_wrapper::asn_error);
            if (m_vdsObj->body->serviceData->serviceResult->error == nullptr )
            {
                m_vdsObj->body->serviceData->serviceResult->error = new asn_wrapper::Error();
            }
            marbenObj = m_vdsObj->body->serviceData->serviceResult->error;
        }
        else if(combPath == "root.body.serviceData.serviceStatus")
        {
            m_vdsObj->body->serviceData->optional.setPresence(asn_wrapper::asn_serviceStatus);
            if (m_vdsObj->body->serviceData->serviceStatus == nullptr )
            {
                m_vdsObj->body->serviceData->serviceStatus = new asn_wrapper::ServiceStatus();
            }
            marbenObj = m_vdsObj->body->serviceData->serviceStatus;
        }
        else if(combPath == "root.body.serviceData.configuration")
        {
            m_vdsObj->body->serviceData->optional.setPresence(asn_wrapper::asn_configuration);
            if (m_vdsObj->body->serviceData->configuration == nullptr )
            {
                m_vdsObj->body->serviceData->configuration = new asn_wrapper::Configuration();
            }
            marbenObj = m_vdsObj->body->serviceData->configuration;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus")
        {
            m_vdsObj->body->serviceData->optional.setPresence(asn_wrapper::asn_vehicleStatus);
            if (m_vdsObj->body->serviceData->vehicleStatus == nullptr )
            {
                m_vdsObj->body->serviceData->vehicleStatus = new asn_wrapper::VehicleStatus();
            }
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.basicVehicleStatus")
        {
            m_vdsObj->body->serviceData->vehicleStatus->optional.setPresence(asn_wrapper::asn_basicVehicleStatus);
            if (m_vdsObj->body->serviceData->vehicleStatus->basicVehicleStatus == nullptr )
            {
                m_vdsObj->body->serviceData->vehicleStatus->basicVehicleStatus = new asn_wrapper::BasicVehicleStatus();
            }
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->basicVehicleStatus;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.basicVehicleStatus.position")
        {
            if (m_vdsObj->body->serviceData->vehicleStatus->basicVehicleStatus->position == nullptr )
            {
                m_vdsObj->body->serviceData->vehicleStatus->basicVehicleStatus->position = new asn_wrapper::Position();
            }
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->basicVehicleStatus->position;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.lockStatus")
        {
            m_vdsObj->body->serviceData->vehicleStatus->optional.setPresence(asn_wrapper::asn_lockStatus);
            if (m_vdsObj->body->serviceData->vehicleStatus->lockStatus == nullptr )
            {
                m_vdsObj->body->serviceData->vehicleStatus->lockStatus = new asn_wrapper::LockStatus();
            }
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->lockStatus;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.maintenanceStatus")
        {
            m_vdsObj->body->serviceData->vehicleStatus->optional.setPresence(asn_wrapper::asn_maintenanceStatus);
            if (m_vdsObj->body->serviceData->vehicleStatus->maintenanceStatus == nullptr )
            {
                m_vdsObj->body->serviceData->vehicleStatus->maintenanceStatus = new asn_wrapper::MaintenanceStatus();
            }
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->maintenanceStatus;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.maintenanceStatus.mainBatteryStatus")
        {
            m_vdsObj->body->serviceData->vehicleStatus->maintenanceStatus->optional.setPresence(asn_wrapper::asn_mainBatteryStatus);
            if (m_vdsObj->body->serviceData->vehicleStatus->maintenanceStatus->mainBatteryStatus == nullptr )
            {
                m_vdsObj->body->serviceData->vehicleStatus->maintenanceStatus->mainBatteryStatus = new asn_wrapper::BatteryStatus();
            }
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->maintenanceStatus->mainBatteryStatus;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.runningStatus")
        {
            m_vdsObj->body->serviceData->vehicleStatus->optional.setPresence(asn_wrapper::asn_runningStatus);
            if (m_vdsObj->body->serviceData->vehicleStatus->runningStatus == nullptr )
            {
                m_vdsObj->body->serviceData->vehicleStatus->runningStatus = new asn_wrapper::RunningStatus();
            }
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->runningStatus;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.climateStatus")
        {
            m_vdsObj->body->serviceData->vehicleStatus->optional.setPresence(asn_wrapper::asn_climateStatus);
            if (m_vdsObj->body->serviceData->vehicleStatus->climateStatus == nullptr )
            {
                m_vdsObj->body->serviceData->vehicleStatus->climateStatus = new asn_wrapper::ClimateStatus();
            }
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->climateStatus;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.climateStatus.fragStrs")
        {
            m_vdsObj->body->serviceData->vehicleStatus->climateStatus->optional.setPresence(asn_wrapper::asn_fragStrs);
            if (m_vdsObj->body->serviceData->vehicleStatus->climateStatus->fragStrs == nullptr )
            {
                m_vdsObj->body->serviceData->vehicleStatus->climateStatus->fragStrs = new asn_wrapper::FragStrs();
            }
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->climateStatus->fragStrs;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.electricStatus")
        {
            m_vdsObj->body->serviceData->vehicleStatus->optional.setPresence(asn_wrapper::asn_electricStatus);
            if (m_vdsObj->body->serviceData->vehicleStatus->electricStatus == nullptr )
            {
                m_vdsObj->body->serviceData->vehicleStatus->electricStatus = new asn_wrapper::ElectricStatus();
            }
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->electricStatus;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.pollutionStatus")
        {
            m_vdsObj->body->serviceData->vehicleStatus->optional.setPresence(asn_wrapper::asn_pollutionStatus);
            if (m_vdsObj->body->serviceData->vehicleStatus->pollutionStatus == nullptr )
            {
                m_vdsObj->body->serviceData->vehicleStatus->pollutionStatus = new asn_wrapper::PollutionStatus();
            }
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->pollutionStatus;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.temStatus")
        {
            m_vdsObj->body->serviceData->vehicleStatus->optional.setPresence(asn_wrapper::asn_temStatus);
            if (m_vdsObj->body->serviceData->vehicleStatus->temStatus == nullptr )
            {
                m_vdsObj->body->serviceData->vehicleStatus->temStatus = new asn_wrapper::TEMStatus();
            }
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->temStatus;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.temStatus.diagnostics")
        {
            m_vdsObj->body->serviceData->vehicleStatus->temStatus->optional.setPresence(asn_wrapper::asn_TEMStatus__diagnostics);
            if (m_vdsObj->body->serviceData->vehicleStatus->temStatus->diagnostics == nullptr )
            {
                m_vdsObj->body->serviceData->vehicleStatus->temStatus->diagnostics = new asn_wrapper::ECUDiagnostic();
            }
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->temStatus->diagnostics;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.temStatus.backupBattery")
        {
            m_vdsObj->body->serviceData->vehicleStatus->temStatus->optional.setPresence(asn_wrapper::asn_TEMStatus__backupBattery);
            if (m_vdsObj->body->serviceData->vehicleStatus->temStatus->backupBattery == nullptr )
            {
                m_vdsObj->body->serviceData->vehicleStatus->temStatus->backupBattery = new asn_wrapper::BatteryStatus();
            }
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->temStatus->backupBattery;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.temStatus.sleepCycleNextWakeupTime")
        {
            m_vdsObj->body->serviceData->vehicleStatus->temStatus->optional.setPresence(asn_wrapper::asn_sleepCycleNextWakeupTime);
            if (m_vdsObj->body->serviceData->vehicleStatus->temStatus->sleepCycleNextWakeupTime == nullptr )
            {
                m_vdsObj->body->serviceData->vehicleStatus->temStatus->sleepCycleNextWakeupTime = new asn_wrapper::TimeStamp();
            }
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->temStatus->sleepCycleNextWakeupTime;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.temStatus.networkAccessStatus")
        {
            m_vdsObj->body->serviceData->vehicleStatus->temStatus->optional.setPresence(asn_wrapper::asn_networkAccessStatus);
            if (m_vdsObj->body->serviceData->vehicleStatus->temStatus->networkAccessStatus == nullptr )
            {
                m_vdsObj->body->serviceData->vehicleStatus->temStatus->networkAccessStatus = new asn_wrapper::NetworkAccessStatus();
            }
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->temStatus->networkAccessStatus;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.temStatus.networkAccessStatus.simInfo")
        {
            m_vdsObj->body->serviceData->vehicleStatus->temStatus->networkAccessStatus->optional.setPresence(asn_wrapper::asn_simInfo);
            if (m_vdsObj->body->serviceData->vehicleStatus->temStatus->networkAccessStatus->simInfo == nullptr )
            {
                m_vdsObj->body->serviceData->vehicleStatus->temStatus->networkAccessStatus->simInfo = new asn_wrapper::SIMInfo();
            }
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->temStatus->networkAccessStatus->simInfo;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.temStatus.connectivityStatus")
        {
            m_vdsObj->body->serviceData->vehicleStatus->temStatus->optional.setPresence(asn_wrapper::asn_connectivityStatus);
            if (m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus == nullptr )
            {
                m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus = new asn_wrapper::ConnectivityStatus();
            }
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.temStatus.connectivityStatus.wakeupTimePosition")
        {
            m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus->optional.setPresence(asn_wrapper::asn_wakeupTimePosition);
            if (m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus->wakeupTimePosition == nullptr )
            {
                m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus->wakeupTimePosition = new asn_wrapper::TimePosition();
            }
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus->wakeupTimePosition;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.temStatus.connectivityStatus.sleeptimePosition.time")
        {
            m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus->sleeptimePosition->optional.setPresence(asn_wrapper::asn_TimePosition__time);
            if (m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus->sleeptimePosition->time == nullptr )
            {
                m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus->sleeptimePosition->time = new asn_wrapper::TimeStamp();
            }
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus->sleeptimePosition->time;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.temStatus.connectivityStatus.sleeptimePosition.position")
        {
            m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus->sleeptimePosition->optional.setPresence(asn_wrapper::asn_TimePosition__position);
            if (m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus->sleeptimePosition->position == nullptr )
            {
                m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus->sleeptimePosition->position = new asn_wrapper::Position();
            }
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus->sleeptimePosition->position;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.temStatus.connectivityStatus.connectTime")
        {
            m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus->optional.setPresence(asn_wrapper::asn_ConnectivityStatus__connectTime);
            if (m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus->connectTime == nullptr )
            {
                m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus->connectTime = new asn_wrapper::TimeStamp();
            }
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus->connectTime;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.temStatus.connectivityStatus.connectPosition")
        {
            m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus->optional.setPresence(asn_wrapper::asn_ConnectivityStatus__connectPosition);
            if (m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus->connectPosition == nullptr )
            {
                m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus->connectPosition = new asn_wrapper::Position();
            }
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus->connectPosition;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.temStatus.connectivityStatus.sleeptimePosition")
        {
            m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus->optional.setPresence(asn_wrapper::asn_sleeptimePosition);
            if (m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus->sleeptimePosition == nullptr )
            {
                m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus->sleeptimePosition = new asn_wrapper::TimePosition();
            }
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus->sleeptimePosition;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.temStatus.connectivityStatus.sleeptimePosition.time")
        {
            m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus->sleeptimePosition->optional.setPresence(asn_wrapper::asn_TimePosition__time);
            if (m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus->sleeptimePosition->time == nullptr )
            {
                m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus->sleeptimePosition->time = new asn_wrapper::TimeStamp();
            }
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus->sleeptimePosition->time;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.temStatus.connectivityStatus.sleeptimePosition.position")
        {
            m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus->sleeptimePosition->optional.setPresence(asn_wrapper::asn_TimePosition__position);
            if (m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus->sleeptimePosition->position == nullptr )
            {
                m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus->sleeptimePosition->position = new asn_wrapper::Position();
            }
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus->sleeptimePosition->position;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.carConfig")
        {
            m_vdsObj->body->serviceData->vehicleStatus->optional.setPresence(asn_wrapper::asn_carConfig);
            if (m_vdsObj->body->serviceData->vehicleStatus->carConfig == nullptr )
            {
                m_vdsObj->body->serviceData->vehicleStatus->carConfig = new asn_wrapper::CarConfig();
            }
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->carConfig;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.additionalStatus")
        {
            m_vdsObj->body->serviceData->vehicleStatus->optional.setPresence(asn_wrapper::asn_additionalStatus);
            if (m_vdsObj->body->serviceData->vehicleStatus->additionalStatus == nullptr )
            {
                m_vdsObj->body->serviceData->vehicleStatus->additionalStatus = new asn_wrapper::AdditionalStatus();
            }
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->additionalStatus;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.additionalStatus.confAndId")
        {
            m_vdsObj->body->serviceData->vehicleStatus->additionalStatus->optional.setPresence(asn_wrapper::asn_confAndId);
            if (m_vdsObj->body->serviceData->vehicleStatus->additionalStatus->confAndId == nullptr )
            {
                m_vdsObj->body->serviceData->vehicleStatus->additionalStatus->confAndId = new asn_wrapper::ConfigurationAndIdentity();
            }
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->additionalStatus->confAndId;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.additionalStatus.towStatus")
        {
            m_vdsObj->body->serviceData->vehicleStatus->additionalStatus->optional.setPresence(asn_wrapper::asn_towStatus);
            if (m_vdsObj->body->serviceData->vehicleStatus->additionalStatus->towStatus == nullptr )
            {
                m_vdsObj->body->serviceData->vehicleStatus->additionalStatus->towStatus = new asn_wrapper::TowStatus();
            }
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->additionalStatus->towStatus;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.msd")
        {
            m_vdsObj->body->serviceData->vehicleStatus->optional.setPresence(asn_wrapper::asn_msd);
            if (m_vdsObj->body->serviceData->vehicleStatus->msd == nullptr )
            {
                m_vdsObj->body->serviceData->vehicleStatus->msd = new asn_wrapper::OEMMSD();
            }
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->msd;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.msd.position")
        {
            if (m_vdsObj->body->serviceData->vehicleStatus->msd->position == nullptr )
            {
                m_vdsObj->body->serviceData->vehicleStatus->msd->position = new asn_wrapper::Position();
            }
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->msd->position;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.theftNotification")
        {
            m_vdsObj->body->serviceData->vehicleStatus->optional.setPresence(asn_wrapper::asn_theftNotification);
            if (m_vdsObj->body->serviceData->vehicleStatus->theftNotification == nullptr )
            {
                m_vdsObj->body->serviceData->vehicleStatus->theftNotification = new asn_wrapper::TheftNotification();
            }
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->theftNotification;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.theftNotification.time")
        {
            if (m_vdsObj->body->serviceData->vehicleStatus->theftNotification->time == nullptr )
            {
                m_vdsObj->body->serviceData->vehicleStatus->theftNotification->time = new asn_wrapper::TimeStamp();
            }
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->theftNotification->time;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.notification")
        {
            m_vdsObj->body->serviceData->vehicleStatus->optional.setPresence(asn_wrapper::asn_notification);
            if (m_vdsObj->body->serviceData->vehicleStatus->notification == nullptr )
            {
                m_vdsObj->body->serviceData->vehicleStatus->notification = new asn_wrapper::Notification();
            }
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->notification;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.notification.time")
        {
            if (m_vdsObj->body->serviceData->vehicleStatus->notification->time == nullptr )
            {
                m_vdsObj->body->serviceData->vehicleStatus->notification->time = new asn_wrapper::TimeStamp();
            }
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->notification->time;
        }
        else if(combPath == "root.body.serviceData.ota")
        {
            m_vdsObj->body->serviceData->optional.setPresence(asn_wrapper::asn_ServiceData__ota);
            if (m_vdsObj->body->serviceData->ota == nullptr )
            {
                m_vdsObj->body->serviceData->ota = new asn_wrapper::OTA();
            }
            marbenObj = m_vdsObj->body->serviceData->ota;
        }
        else if(combPath == "root.body.serviceData.fota")
        {
            m_vdsObj->body->serviceData->optional.setPresence(asn_wrapper::asn_ServiceData__fota);
            if (m_vdsObj->body->serviceData->fota == nullptr )
            {
                m_vdsObj->body->serviceData->fota = new asn_wrapper::FOTA();
            }
            marbenObj = m_vdsObj->body->serviceData->fota;
        }
        else if(combPath == "root.body.serviceData.fota.clientConfSyncRequest")
        {
            m_vdsObj->body->serviceData->fota->optional.setPresence(asn_wrapper::asn_FOTA__clientConfSyncRequest);
            if (m_vdsObj->body->serviceData->fota->clientConfSyncRequest == nullptr )
            {
                m_vdsObj->body->serviceData->fota->clientConfSyncRequest = new asn_wrapper::ClientConfSyncRequest();
            }
            marbenObj = m_vdsObj->body->serviceData->fota->clientConfSyncRequest;
        }
        else if(combPath == "root.body.serviceData.fota.inventoryInstruction")
        {
            m_vdsObj->body->serviceData->fota->optional.setPresence(asn_wrapper::asn_FOTA__inventoryInstruction);
            if (m_vdsObj->body->serviceData->fota->inventoryInstruction == nullptr )
            {
                m_vdsObj->body->serviceData->fota->inventoryInstruction = new asn_wrapper::InventoryInstruction();
            }
            marbenObj = m_vdsObj->body->serviceData->fota->inventoryInstruction;
        }
        else if(combPath == "root.body.serviceData.fota.availableAssignmentRequest")
        {
            m_vdsObj->body->serviceData->fota->optional.setPresence(asn_wrapper::asn_FOTA__availableAssignmentRequest);
            if (m_vdsObj->body->serviceData->fota->availableAssignmentRequest == nullptr )
            {
                m_vdsObj->body->serviceData->fota->availableAssignmentRequest = new asn_wrapper::AvailableAssignmentRequest();
            }
            marbenObj = m_vdsObj->body->serviceData->fota->availableAssignmentRequest;
        }
        else if(combPath == "root.body.serviceData.fota.availableAssignmentRequest.languageSetting")
        {
            if (m_vdsObj->body->serviceData->fota->availableAssignmentRequest->languageSetting == nullptr )
            {
                m_vdsObj->body->serviceData->fota->availableAssignmentRequest->languageSetting = new asn_wrapper::LanguageSetting();
            }
            marbenObj = m_vdsObj->body->serviceData->fota->availableAssignmentRequest->languageSetting;
        }
        else if(combPath == "root.body.serviceData.fota.availableAssignment")
        {
            m_vdsObj->body->serviceData->fota->optional.setPresence(asn_wrapper::asn_FOTA__availableAssignment);
            if (m_vdsObj->body->serviceData->fota->availableAssignment == nullptr )
            {
                m_vdsObj->body->serviceData->fota->availableAssignment = new asn_wrapper::AvailableAssignment();
            }
            marbenObj = m_vdsObj->body->serviceData->fota->availableAssignment;
        }
        else if(combPath == "root.body.serviceData.fota.installationInstruction")
        {
            m_vdsObj->body->serviceData->fota->optional.setPresence(asn_wrapper::asn_FOTA__installationInstruction);
            if (m_vdsObj->body->serviceData->fota->installationInstruction == nullptr )
            {
                m_vdsObj->body->serviceData->fota->installationInstruction = new asn_wrapper::InstallationInstruction();
            }
            marbenObj = m_vdsObj->body->serviceData->fota->installationInstruction;
        }
        else if(combPath == "root.body.serviceData.fota.installationSummary")
        {
            m_vdsObj->body->serviceData->fota->optional.setPresence(asn_wrapper::asn_FOTA__installationSummary);
            if (m_vdsObj->body->serviceData->fota->installationSummary == nullptr )
            {
                m_vdsObj->body->serviceData->fota->installationSummary = new asn_wrapper::InstallationSummary();
            }
            marbenObj = m_vdsObj->body->serviceData->fota->installationSummary;
        }
        else if(combPath == "root.body.serviceData.fota.ecuExceptionReport")
        {
            m_vdsObj->body->serviceData->fota->optional.setPresence(asn_wrapper::asn_FOTA__ecuExceptionReport);
            if (m_vdsObj->body->serviceData->fota->ecuExceptionReport == nullptr )
            {
                m_vdsObj->body->serviceData->fota->ecuExceptionReport = new asn_wrapper::EcuExceptionReport();
            }
            marbenObj = m_vdsObj->body->serviceData->fota->ecuExceptionReport;
        }
        else if(combPath == "root.body.serviceData.fota.clientHmiVehicleSettings")
        {
            m_vdsObj->body->serviceData->fota->optional.setPresence(asn_wrapper::asn_FOTA__clientHmiVehicleSettings);
            if (m_vdsObj->body->serviceData->fota->clientHmiVehicleSettings == nullptr )
            {
                m_vdsObj->body->serviceData->fota->clientHmiVehicleSettings = new asn_wrapper::ClientHmiVehicleSettings();
            }
            marbenObj = m_vdsObj->body->serviceData->fota->clientHmiVehicleSettings;
        }
        else if(combPath == "root.body.serviceData.fota.assignmentData")
        {
            m_vdsObj->body->serviceData->fota->optional.setPresence(asn_wrapper::asn_FOTA__assignmentData);
            if (m_vdsObj->body->serviceData->fota->assignmentData == nullptr )
            {
                m_vdsObj->body->serviceData->fota->assignmentData = new asn_wrapper::AssignmentData();
            }
            marbenObj = m_vdsObj->body->serviceData->fota->assignmentData;
        }
        else if(combPath == "root.body.serviceData.fota.assignmentNotification")
        {
            m_vdsObj->body->serviceData->fota->optional.setPresence(asn_wrapper::asn_FOTA__assignmentNotification);
            if (m_vdsObj->body->serviceData->fota->assignmentNotification == nullptr )
            {
                m_vdsObj->body->serviceData->fota->assignmentNotification = new asn_wrapper::FotaAssignmentNotification();
            }
            marbenObj = m_vdsObj->body->serviceData->fota->assignmentNotification;
        }
        else if(combPath == "root.body.serviceData.fota.otaAssignmentFileInfo")
        {
            m_vdsObj->body->serviceData->fota->optional.setPresence(asn_wrapper::asn_FOTA__otaAssignmentFileInfo);
            if (m_vdsObj->body->serviceData->fota->otaAssignmentFileInfo == nullptr )
            {
                m_vdsObj->body->serviceData->fota->otaAssignmentFileInfo = new asn_wrapper::OtaAssignmentFileInfo();
            }
            marbenObj = m_vdsObj->body->serviceData->fota->otaAssignmentFileInfo;
        }
        else if(combPath == "root.body.serviceData.rvdc")
        {
            m_vdsObj->body->serviceData->optional.setPresence(asn_wrapper::asn_rvdc);
            if (m_vdsObj->body->serviceData->rvdc == nullptr )
            {
                m_vdsObj->body->serviceData->rvdc = new asn_wrapper::RVDC();
            }
            marbenObj = m_vdsObj->body->serviceData->rvdc;
        }
        else if(combPath == "root.body.serviceData.rvdc.rvdcSetting")
        {
            m_vdsObj->body->serviceData->rvdc->optional.setPresence(asn_wrapper::asn_RVDC__rvdcSetting);
            if (m_vdsObj->body->serviceData->rvdc->rvdcSetting == nullptr )
            {
                m_vdsObj->body->serviceData->rvdc->rvdcSetting = new asn_wrapper::RvdcSetting();
            }
            marbenObj = m_vdsObj->body->serviceData->rvdc->rvdcSetting;
        }
        else if(combPath == "root.body.serviceData.rvdc.rvdcSetting.maSetting")
        {
            m_vdsObj->body->serviceData->rvdc->rvdcSetting->optional.setPresence(asn_wrapper::asn_maSetting);
            if (m_vdsObj->body->serviceData->rvdc->rvdcSetting->maSetting == nullptr )
            {
                m_vdsObj->body->serviceData->rvdc->rvdcSetting->maSetting = new asn_wrapper::MaSetting();
            }
            marbenObj = m_vdsObj->body->serviceData->rvdc->rvdcSetting->maSetting;
        }
        else if(combPath == "root.body.serviceData.rvdc.rvdcSetting.maSetting.authorizationStatus")
        {
            if (m_vdsObj->body->serviceData->rvdc->rvdcSetting->maSetting->authorizationStatus == nullptr )
            {
                m_vdsObj->body->serviceData->rvdc->rvdcSetting->maSetting->authorizationStatus = new asn_wrapper::AuthorizationStatus();
            }
            marbenObj = m_vdsObj->body->serviceData->rvdc->rvdcSetting->maSetting->authorizationStatus;
        }
        else if(combPath == "root.body.serviceData.rvdc.rvdcSetting.vehicleSetting")
        {
            m_vdsObj->body->serviceData->rvdc->rvdcSetting->optional.setPresence(asn_wrapper::asn_vehicleSetting);
            if (m_vdsObj->body->serviceData->rvdc->rvdcSetting->vehicleSetting == nullptr )
            {
                m_vdsObj->body->serviceData->rvdc->rvdcSetting->vehicleSetting = new asn_wrapper::RvdcVehicleSetting();
            }
            marbenObj = m_vdsObj->body->serviceData->rvdc->rvdcSetting->vehicleSetting;
        }
        else if(combPath == "root.body.serviceData.rvdc.rvdcSetting.languageSetting")
        {
            m_vdsObj->body->serviceData->rvdc->rvdcSetting->optional.setPresence(asn_wrapper::asn_languageSetting);
            if (m_vdsObj->body->serviceData->rvdc->rvdcSetting->languageSetting == nullptr )
            {
                m_vdsObj->body->serviceData->rvdc->rvdcSetting->languageSetting = new asn_wrapper::LanguageSetting();
            }
            marbenObj = m_vdsObj->body->serviceData->rvdc->rvdcSetting->languageSetting;
        }
        else if(combPath == "root.body.serviceData.rvdc.rvdcSetting.forcedSetting")
        {
            m_vdsObj->body->serviceData->rvdc->rvdcSetting->optional.setPresence(asn_wrapper::asn_forcedSetting);
            if (m_vdsObj->body->serviceData->rvdc->rvdcSetting->forcedSetting == nullptr )
            {
                m_vdsObj->body->serviceData->rvdc->rvdcSetting->forcedSetting = new asn_wrapper::RvdcForcedSetting();
            }
            marbenObj = m_vdsObj->body->serviceData->rvdc->rvdcSetting->forcedSetting;
        }
        else if(combPath == "root.body.serviceData.rvdc.assignmentNotification")
        {
            m_vdsObj->body->serviceData->rvdc->optional.setPresence(asn_wrapper::asn_RVDC__assignmentNotification);
            if (m_vdsObj->body->serviceData->rvdc->assignmentNotification == nullptr )
            {
                m_vdsObj->body->serviceData->rvdc->assignmentNotification = new asn_wrapper::RvdcAssignmentNotification();
            }
            marbenObj = m_vdsObj->body->serviceData->rvdc->assignmentNotification;
        }
        else if(combPath == "root.body.serviceData.rvdc.maSynchronizationReq")
        {
            m_vdsObj->body->serviceData->rvdc->optional.setPresence(asn_wrapper::asn_RVDC__maSynchronizationReq);
            if (m_vdsObj->body->serviceData->rvdc->maSynchronizationReq == nullptr )
            {
                m_vdsObj->body->serviceData->rvdc->maSynchronizationReq = new asn_wrapper::MaSynchronizationReq();
            }
            marbenObj = m_vdsObj->body->serviceData->rvdc->maSynchronizationReq;
        }
        else if(combPath == "root.body.serviceData.rvdc.maSynchronization")
        {
            m_vdsObj->body->serviceData->rvdc->optional.setPresence(asn_wrapper::asn_RVDC__maSynchronization);
            if (m_vdsObj->body->serviceData->rvdc->maSynchronization == nullptr )
            {
                m_vdsObj->body->serviceData->rvdc->maSynchronization = new asn_wrapper::MaSynchronization();
            }
            marbenObj = m_vdsObj->body->serviceData->rvdc->maSynchronization;
        }
        else if(combPath == "root.body.serviceData.rvdc.exceptionHandling")
        {
            m_vdsObj->body->serviceData->rvdc->optional.setPresence(asn_wrapper::asn_RVDC__exceptionHandling);
            if (m_vdsObj->body->serviceData->rvdc->exceptionHandling == nullptr )
            {
                m_vdsObj->body->serviceData->rvdc->exceptionHandling = new asn_wrapper::RvdcExceptionHandling();
            }
            marbenObj = m_vdsObj->body->serviceData->rvdc->exceptionHandling;
        }
        else if(combPath == "root.body.serviceData.rvdc.measurementDataPackage")
        {
            m_vdsObj->body->serviceData->rvdc->optional.setPresence(asn_wrapper::asn_RVDC__measurementDataPackage);
            if (m_vdsObj->body->serviceData->rvdc->measurementDataPackage == nullptr )
            {
                m_vdsObj->body->serviceData->rvdc->measurementDataPackage = new asn_wrapper::MeasurementDataPackage();
            }
            marbenObj = m_vdsObj->body->serviceData->rvdc->measurementDataPackage;
        }
        else if(combPath == "root.body.serviceData.rvdc.measurementDataPackage.telematicsParameters")
        {
            if (m_vdsObj->body->serviceData->rvdc->measurementDataPackage->telematicsParameters == nullptr )
            {
                m_vdsObj->body->serviceData->rvdc->measurementDataPackage->telematicsParameters = new asn_wrapper::TelematicsParameters();
            }
            marbenObj = m_vdsObj->body->serviceData->rvdc->measurementDataPackage->telematicsParameters;
        }
        else if(combPath == "root.body.serviceData.rvdc.measurementDataPackage.mdp")
        {
            if (m_vdsObj->body->serviceData->rvdc->measurementDataPackage->mdp == nullptr )
            {
                m_vdsObj->body->serviceData->rvdc->measurementDataPackage->mdp = new asn_wrapper::Mdp();
            }
            marbenObj = m_vdsObj->body->serviceData->rvdc->measurementDataPackage->mdp;
        }
        else if(combPath == "root.body.serviceData.rvdc.measurementDataPackage.mdp.ma")
        {
            if (m_vdsObj->body->serviceData->rvdc->measurementDataPackage->mdp->ma == nullptr )
            {
                m_vdsObj->body->serviceData->rvdc->measurementDataPackage->mdp->ma = new asn_wrapper::Ma();
            }
            marbenObj = m_vdsObj->body->serviceData->rvdc->measurementDataPackage->mdp->ma;
        }
        else if(combPath == "root.body.serviceData.trip")
        {
            m_vdsObj->body->serviceData->optional.setPresence(asn_wrapper::asn_trip);
            if (m_vdsObj->body->serviceData->trip == nullptr )
            {
                m_vdsObj->body->serviceData->trip = new asn_wrapper::Trip();
            }
            marbenObj = m_vdsObj->body->serviceData->trip;
        }
        else if(combPath == "root.body.serviceData.trip.startTime")
        {
            if (m_vdsObj->body->serviceData->trip->startTime == nullptr )
            {
                m_vdsObj->body->serviceData->trip->startTime = new asn_wrapper::TimeStamp();
            }
            marbenObj = m_vdsObj->body->serviceData->trip->startTime;
        }
        else if(combPath == "root.body.serviceData.trip.endTime")
        {
            if (m_vdsObj->body->serviceData->trip->endTime == nullptr )
            {
                m_vdsObj->body->serviceData->trip->endTime = new asn_wrapper::TimeStamp();
            }
            marbenObj = m_vdsObj->body->serviceData->trip->endTime;
        }
        else if(combPath == "root.body.serviceData.nevServiceData")
        {
            m_vdsObj->body->serviceData->optional.setPresence(asn_wrapper::asn_nevServiceData);
            if (m_vdsObj->body->serviceData->nevServiceData == nullptr )
            {
                m_vdsObj->body->serviceData->nevServiceData = new asn_wrapper::NEVServiceData();
            }
            marbenObj = m_vdsObj->body->serviceData->nevServiceData;
        }
        else if(combPath == "root.body.serviceData.eventRule")
        {
            m_vdsObj->body->serviceData->optional.setPresence(asn_wrapper::asn_eventRule);
            if (m_vdsObj->body->serviceData->eventRule == nullptr )
            {
                m_vdsObj->body->serviceData->eventRule = new asn_wrapper::EventRule();
            }
            marbenObj = m_vdsObj->body->serviceData->eventRule;
        }
        else if(combPath == "root.body.serviceData.eventRule.startTime")
        {
            m_vdsObj->body->serviceData->eventRule->optional.setPresence(asn_wrapper::asn_startTime);
            if (m_vdsObj->body->serviceData->eventRule->startTime == nullptr )
            {
                m_vdsObj->body->serviceData->eventRule->startTime = new asn_wrapper::TimeStamp();
            }
            marbenObj = m_vdsObj->body->serviceData->eventRule->startTime;
        }
        else if(combPath == "root.body.serviceData.eventRule.endTime")
        {
            m_vdsObj->body->serviceData->eventRule->optional.setPresence(asn_wrapper::asn_EventRule__endTime);
            if (m_vdsObj->body->serviceData->eventRule->endTime == nullptr )
            {
                m_vdsObj->body->serviceData->eventRule->endTime = new asn_wrapper::TimeStamp();
            }
            marbenObj = m_vdsObj->body->serviceData->eventRule->endTime;
        }
        else if(combPath == "root.body.serviceData.eventRule.action")
        {
            m_vdsObj->body->serviceData->eventRule->optional.setPresence(asn_wrapper::asn_EventRule__action);
            if (m_vdsObj->body->serviceData->eventRule->action == nullptr )
            {
                m_vdsObj->body->serviceData->eventRule->action = new asn_wrapper::EventAction();
            }
            marbenObj = m_vdsObj->body->serviceData->eventRule->action;
        }
        else if(combPath == "root.body.serviceData.timerData")
        {
            m_vdsObj->body->serviceData->optional.setPresence(asn_wrapper::asn_timerData);
            if (m_vdsObj->body->serviceData->timerData == nullptr )
            {
                m_vdsObj->body->serviceData->timerData = new asn_wrapper::TimerData();
            }
            marbenObj = m_vdsObj->body->serviceData->timerData;
        }
        else
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s path error:%s.\n", __FUNCTION__, combPath.c_str());
            return nullptr;
        }
        
        if(marbenObj == nullptr)
        {
            return nullptr;
        }

        ++it;
    }

    return marbenObj;
}
asntype* VdsMarbenAdaptGen::getMarbenDecodeObj(const std::string &path)
{
    DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s.\n", __FUNCTION__);

    std::string combPath = "root";
    asntype* marbenObj = nullptr;
    std::vector<std::string> vecPath;
    splitString(path, vecPath, ".");

    if(m_vdsObj == nullptr)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s m_vdsObj == null.\n", __FUNCTION__);
        return nullptr;
    }

    if(path.size() == 0)
    {
        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s path == root.\n", __FUNCTION__);
        marbenObj = m_vdsObj;
    }

    for (auto it = vecPath.begin(); it !=  vecPath.end();) 
    {
        combPath +=  "." + (*it) ;

        DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s combPath:%s.\n", __FUNCTION__, combPath.c_str());

        if(combPath == "root")
        {
            //Nothing to do
        }
        else if(combPath == "root.header")
        {
            marbenObj = m_vdsObj->header;
        }
        else if(combPath == "root.header.timeStamp")
        {
            marbenObj = m_vdsObj->header->timeStamp;
        }
        else if(combPath == "root.header.eventId")
        {
            marbenObj = m_vdsObj->header->eventId;
        }
        else if(combPath == "root.body")
        {
            marbenObj = m_vdsObj->body;
        }
        else if(combPath == "root.body.serviceData")
        {
            marbenObj = m_vdsObj->body->serviceData;
        }
        else if(combPath == "root.body.serviceData.serviceTrigger")
        {
            marbenObj = m_vdsObj->body->serviceData->serviceTrigger;
        }
        else if(combPath == "root.body.serviceData.serviceTrigger.scheduledTime")
        {
            marbenObj = m_vdsObj->body->serviceData->serviceTrigger->scheduledTime;
        }
        else if(combPath == "root.body.serviceData.serviceTrigger.endTime")
        {
            marbenObj = m_vdsObj->body->serviceData->serviceTrigger->endTime;
        }
        else if(combPath == "root.body.serviceData.serviceResult")
        {
            marbenObj = m_vdsObj->body->serviceData->serviceResult;
        }
        else if(combPath == "root.body.serviceData.serviceResult.error")
        {
            marbenObj = m_vdsObj->body->serviceData->serviceResult->error;
        }
        else if(combPath == "root.body.serviceData.serviceStatus")
        {
            marbenObj = m_vdsObj->body->serviceData->serviceStatus;
        }
        else if(combPath == "root.body.serviceData.configuration")
        {
            marbenObj = m_vdsObj->body->serviceData->configuration;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus")
        {
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.basicVehicleStatus")
        {
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->basicVehicleStatus;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.basicVehicleStatus.position")
        {
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->basicVehicleStatus->position;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.lockStatus")
        {
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->lockStatus;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.maintenanceStatus")
        {
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->maintenanceStatus;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.maintenanceStatus.mainBatteryStatus")
        {
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->maintenanceStatus->mainBatteryStatus;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.runningStatus")
        {
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->runningStatus;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.climateStatus")
        {
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->climateStatus;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.climateStatus.fragStrs")
        {
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->climateStatus->fragStrs;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.electricStatus")
        {
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->electricStatus;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.pollutionStatus")
        {
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->pollutionStatus;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.temStatus")
        {
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->temStatus;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.temStatus.diagnostics")
        {
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->temStatus->diagnostics;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.temStatus.backupBattery")
        {
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->temStatus->backupBattery;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.temStatus.sleepCycleNextWakeupTime")
        {
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->temStatus->sleepCycleNextWakeupTime;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.temStatus.networkAccessStatus")
        {
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->temStatus->networkAccessStatus;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.temStatus.networkAccessStatus.simInfo")
        {
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->temStatus->networkAccessStatus->simInfo;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.temStatus.connectivityStatus")
        {
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.temStatus.connectivityStatus.wakeupTimePosition")
        {
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus->wakeupTimePosition;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.temStatus.connectivityStatus.sleeptimePosition.time")
        {
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus->sleeptimePosition->time;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.temStatus.connectivityStatus.sleeptimePosition.position")
        {
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus->sleeptimePosition->position;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.temStatus.connectivityStatus.connectTime")
        {
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus->connectTime;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.temStatus.connectivityStatus.connectPosition")
        {
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus->connectPosition;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.temStatus.connectivityStatus.sleeptimePosition")
        {
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus->sleeptimePosition;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.temStatus.connectivityStatus.sleeptimePosition.time")
        {
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus->sleeptimePosition->time;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.temStatus.connectivityStatus.sleeptimePosition.position")
        {
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->temStatus->connectivityStatus->sleeptimePosition->position;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.carConfig")
        {
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->carConfig;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.additionalStatus")
        {
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->additionalStatus;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.additionalStatus.confAndId")
        {
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->additionalStatus->confAndId;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.additionalStatus.towStatus")
        {
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->additionalStatus->towStatus;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.msd")
        {
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->msd;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.msd.position")
        {
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->msd->position;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.theftNotification")
        {
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->theftNotification;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.theftNotification.time")
        {
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->theftNotification->time;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.notification")
        {
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->notification;
        }
        else if(combPath == "root.body.serviceData.vehicleStatus.notification.time")
        {
            marbenObj = m_vdsObj->body->serviceData->vehicleStatus->notification->time;
        }
        else if(combPath == "root.body.serviceData.ota")
        {
            marbenObj = m_vdsObj->body->serviceData->ota;
        }
        else if(combPath == "root.body.serviceData.fota")
        {
            marbenObj = m_vdsObj->body->serviceData->fota;
        }
        else if(combPath == "root.body.serviceData.fota.clientConfSyncRequest")
        {
            marbenObj = m_vdsObj->body->serviceData->fota->clientConfSyncRequest;
        }
        else if(combPath == "root.body.serviceData.fota.inventoryInstruction")
        {
            marbenObj = m_vdsObj->body->serviceData->fota->inventoryInstruction;
        }
        else if(combPath == "root.body.serviceData.fota.availableAssignmentRequest")
        {
            marbenObj = m_vdsObj->body->serviceData->fota->availableAssignmentRequest;
        }
        else if(combPath == "root.body.serviceData.fota.availableAssignmentRequest.languageSetting")
        {
            marbenObj = m_vdsObj->body->serviceData->fota->availableAssignmentRequest->languageSetting;
        }
        else if(combPath == "root.body.serviceData.fota.availableAssignment")
        {
            marbenObj = m_vdsObj->body->serviceData->fota->availableAssignment;
        }
        else if(combPath == "root.body.serviceData.fota.installationInstruction")
        {
            marbenObj = m_vdsObj->body->serviceData->fota->installationInstruction;
        }
        else if(combPath == "root.body.serviceData.fota.installationSummary")
        {
            marbenObj = m_vdsObj->body->serviceData->fota->installationSummary;
        }
        else if(combPath == "root.body.serviceData.fota.ecuExceptionReport")
        {
            marbenObj = m_vdsObj->body->serviceData->fota->ecuExceptionReport;
        }
        else if(combPath == "root.body.serviceData.fota.clientHmiVehicleSettings")
        {
            marbenObj = m_vdsObj->body->serviceData->fota->clientHmiVehicleSettings;
        }
        else if(combPath == "root.body.serviceData.fota.assignmentData")
        {
            marbenObj = m_vdsObj->body->serviceData->fota->assignmentData;
        }
        else if(combPath == "root.body.serviceData.fota.assignmentNotification")
        {
            marbenObj = m_vdsObj->body->serviceData->fota->assignmentNotification;
        }
        else if(combPath == "root.body.serviceData.fota.otaAssignmentFileInfo")
        {
            marbenObj = m_vdsObj->body->serviceData->fota->otaAssignmentFileInfo;
        }
        else if(combPath == "root.body.serviceData.rvdc")
        {
            marbenObj = m_vdsObj->body->serviceData->rvdc;
        }
        else if(combPath == "root.body.serviceData.rvdc.rvdcSetting")
        {
            marbenObj = m_vdsObj->body->serviceData->rvdc->rvdcSetting;
        }
        else if(combPath == "root.body.serviceData.rvdc.rvdcSetting.maSetting")
        {
            marbenObj = m_vdsObj->body->serviceData->rvdc->rvdcSetting->maSetting;
        }
        else if(combPath == "root.body.serviceData.rvdc.rvdcSetting.maSetting.authorizationStatus")
        {
            marbenObj = m_vdsObj->body->serviceData->rvdc->rvdcSetting->maSetting->authorizationStatus;
        }
        else if(combPath == "root.body.serviceData.rvdc.rvdcSetting.vehicleSetting")
        {
            marbenObj = m_vdsObj->body->serviceData->rvdc->rvdcSetting->vehicleSetting;
        }
        else if(combPath == "root.body.serviceData.rvdc.rvdcSetting.languageSetting")
        {
            marbenObj = m_vdsObj->body->serviceData->rvdc->rvdcSetting->languageSetting;
        }
        else if(combPath == "root.body.serviceData.rvdc.rvdcSetting.forcedSetting")
        {
            marbenObj = m_vdsObj->body->serviceData->rvdc->rvdcSetting->forcedSetting;
        }
        else if(combPath == "root.body.serviceData.rvdc.assignmentNotification")
        {
            marbenObj = m_vdsObj->body->serviceData->rvdc->assignmentNotification;
        }
        else if(combPath == "root.body.serviceData.rvdc.maSynchronizationReq")
        {
            marbenObj = m_vdsObj->body->serviceData->rvdc->maSynchronizationReq;
        }
        else if(combPath == "root.body.serviceData.rvdc.maSynchronization")
        {
            marbenObj = m_vdsObj->body->serviceData->rvdc->maSynchronization;
        }
        else if(combPath == "root.body.serviceData.rvdc.exceptionHandling")
        {
            marbenObj = m_vdsObj->body->serviceData->rvdc->exceptionHandling;
        }
        else if(combPath == "root.body.serviceData.rvdc.measurementDataPackage")
        {
            marbenObj = m_vdsObj->body->serviceData->rvdc->measurementDataPackage;
        }
        else if(combPath == "root.body.serviceData.rvdc.measurementDataPackage.telematicsParameters")
        {
            marbenObj = m_vdsObj->body->serviceData->rvdc->measurementDataPackage->telematicsParameters;
        }
        else if(combPath == "root.body.serviceData.rvdc.measurementDataPackage.mdp")
        {
            marbenObj = m_vdsObj->body->serviceData->rvdc->measurementDataPackage->mdp;
        }
        else if(combPath == "root.body.serviceData.rvdc.measurementDataPackage.mdp.ma")
        {
            marbenObj = m_vdsObj->body->serviceData->rvdc->measurementDataPackage->mdp->ma;
        }
        else if(combPath == "root.body.serviceData.trip")
        {
            marbenObj = m_vdsObj->body->serviceData->trip;
        }
        else if(combPath == "root.body.serviceData.trip.startTime")
        {
            marbenObj = m_vdsObj->body->serviceData->trip->startTime;
        }
        else if(combPath == "root.body.serviceData.trip.endTime")
        {
            marbenObj = m_vdsObj->body->serviceData->trip->endTime;
        }
        else if(combPath == "root.body.serviceData.nevServiceData")
        {
            marbenObj = m_vdsObj->body->serviceData->nevServiceData;
        }
        else if(combPath == "root.body.serviceData.eventRule")
        {
            marbenObj = m_vdsObj->body->serviceData->eventRule;
        }
        else if(combPath == "root.body.serviceData.eventRule.startTime")
        {
            marbenObj = m_vdsObj->body->serviceData->eventRule->startTime;
        }
        else if(combPath == "root.body.serviceData.eventRule.endTime")
        {
            marbenObj = m_vdsObj->body->serviceData->eventRule->endTime;
        }
        else if(combPath == "root.body.serviceData.eventRule.action")
        {
            marbenObj = m_vdsObj->body->serviceData->eventRule->action;
        }
        else if(combPath == "root.body.serviceData.timerData")
        {
            marbenObj = m_vdsObj->body->serviceData->timerData;
        }
        else
        {
            DLT_LOG_STRINGF(dlt_libfsm, DLT_LOG_INFO, "VdsMarbenAdaptGen::%s path error:%s.\n", __FUNCTION__, combPath.c_str());
            return nullptr;
        }
        
        if(marbenObj == nullptr)
        {
            return nullptr;
        }

        ++it;
    }

    return marbenObj;
}

