/*
 * Generated by gdbus-codegen 2.48.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __MYAPP_GENERATED_H__
#define __MYAPP_GENERATED_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for net.corp.exapmle.Manager */

#define EXAPMLE_TYPE_MANAGER (exapmle_manager_get_type ())
#define EXAPMLE_MANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), EXAPMLE_TYPE_MANAGER, exapmleManager))
#define EXAPMLE_IS_MANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), EXAPMLE_TYPE_MANAGER))
#define EXAPMLE_MANAGER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), EXAPMLE_TYPE_MANAGER, exapmleManagerIface))

struct _exapmleManager;
typedef struct _exapmleManager exapmleManager;
typedef struct _exapmleManagerIface exapmleManagerIface;

struct _exapmleManagerIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_say_hello_world) (
    exapmleManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_greeting);

  gboolean  (*get_verbose) (exapmleManager *object);

  void (*notify_info_changed) (
    exapmleManager *object,
    const gchar *arg_icon_blob,
    gint arg_height,
    const gchar *const *arg_messages);

};

GType exapmle_manager_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *exapmle_manager_interface_info (void);
guint exapmle_manager_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void exapmle_manager_complete_say_hello_world (
    exapmleManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *response);



/* D-Bus signal emissions functions: */
void exapmle_manager_emit_notify_info_changed (
    exapmleManager *object,
    const gchar *arg_icon_blob,
    gint arg_height,
    const gchar *const *arg_messages);



/* D-Bus method calls: */
void exapmle_manager_call_say_hello_world (
    exapmleManager *proxy,
    const gchar *arg_greeting,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean exapmle_manager_call_say_hello_world_finish (
    exapmleManager *proxy,
    gchar **out_response,
    GAsyncResult *res,
    GError **error);

gboolean exapmle_manager_call_say_hello_world_sync (
    exapmleManager *proxy,
    const gchar *arg_greeting,
    gchar **out_response,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
gboolean exapmle_manager_get_verbose (exapmleManager *object);
void exapmle_manager_set_verbose (exapmleManager *object, gboolean value);


/* ---- */

#define EXAPMLE_TYPE_MANAGER_PROXY (exapmle_manager_proxy_get_type ())
#define EXAPMLE_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), EXAPMLE_TYPE_MANAGER_PROXY, exapmleManagerProxy))
#define EXAPMLE_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), EXAPMLE_TYPE_MANAGER_PROXY, exapmleManagerProxyClass))
#define EXAPMLE_MANAGER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), EXAPMLE_TYPE_MANAGER_PROXY, exapmleManagerProxyClass))
#define EXAPMLE_IS_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), EXAPMLE_TYPE_MANAGER_PROXY))
#define EXAPMLE_IS_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), EXAPMLE_TYPE_MANAGER_PROXY))

typedef struct _exapmleManagerProxy exapmleManagerProxy;
typedef struct _exapmleManagerProxyClass exapmleManagerProxyClass;
typedef struct _exapmleManagerProxyPrivate exapmleManagerProxyPrivate;

struct _exapmleManagerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  exapmleManagerProxyPrivate *priv;
};

struct _exapmleManagerProxyClass
{
  GDBusProxyClass parent_class;
};

GType exapmle_manager_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (exapmleManagerProxy, g_object_unref)
#endif

void exapmle_manager_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
exapmleManager *exapmle_manager_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
exapmleManager *exapmle_manager_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void exapmle_manager_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
exapmleManager *exapmle_manager_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
exapmleManager *exapmle_manager_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define EXAPMLE_TYPE_MANAGER_SKELETON (exapmle_manager_skeleton_get_type ())
#define EXAPMLE_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), EXAPMLE_TYPE_MANAGER_SKELETON, exapmleManagerSkeleton))
#define EXAPMLE_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), EXAPMLE_TYPE_MANAGER_SKELETON, exapmleManagerSkeletonClass))
#define EXAPMLE_MANAGER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), EXAPMLE_TYPE_MANAGER_SKELETON, exapmleManagerSkeletonClass))
#define EXAPMLE_IS_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), EXAPMLE_TYPE_MANAGER_SKELETON))
#define EXAPMLE_IS_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), EXAPMLE_TYPE_MANAGER_SKELETON))

typedef struct _exapmleManagerSkeleton exapmleManagerSkeleton;
typedef struct _exapmleManagerSkeletonClass exapmleManagerSkeletonClass;
typedef struct _exapmleManagerSkeletonPrivate exapmleManagerSkeletonPrivate;

struct _exapmleManagerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  exapmleManagerSkeletonPrivate *priv;
};

struct _exapmleManagerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType exapmle_manager_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (exapmleManagerSkeleton, g_object_unref)
#endif

exapmleManager *exapmle_manager_skeleton_new (void);


/* ---- */

#define EXAPMLE_TYPE_OBJECT (exapmle_object_get_type ())
#define EXAPMLE_OBJECT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), EXAPMLE_TYPE_OBJECT, exapmleObject))
#define EXAPMLE_IS_OBJECT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), EXAPMLE_TYPE_OBJECT))
#define EXAPMLE_OBJECT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), EXAPMLE_TYPE_OBJECT, exapmleObject))

struct _exapmleObject;
typedef struct _exapmleObject exapmleObject;
typedef struct _exapmleObjectIface exapmleObjectIface;

struct _exapmleObjectIface
{
  GTypeInterface parent_iface;
};

GType exapmle_object_get_type (void) G_GNUC_CONST;

exapmleManager *exapmle_object_get_manager (exapmleObject *object);
exapmleManager *exapmle_object_peek_manager (exapmleObject *object);

#define EXAPMLE_TYPE_OBJECT_PROXY (exapmle_object_proxy_get_type ())
#define EXAPMLE_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), EXAPMLE_TYPE_OBJECT_PROXY, exapmleObjectProxy))
#define EXAPMLE_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), EXAPMLE_TYPE_OBJECT_PROXY, exapmleObjectProxyClass))
#define EXAPMLE_OBJECT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), EXAPMLE_TYPE_OBJECT_PROXY, exapmleObjectProxyClass))
#define EXAPMLE_IS_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), EXAPMLE_TYPE_OBJECT_PROXY))
#define EXAPMLE_IS_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), EXAPMLE_TYPE_OBJECT_PROXY))

typedef struct _exapmleObjectProxy exapmleObjectProxy;
typedef struct _exapmleObjectProxyClass exapmleObjectProxyClass;
typedef struct _exapmleObjectProxyPrivate exapmleObjectProxyPrivate;

struct _exapmleObjectProxy
{
  /*< private >*/
  GDBusObjectProxy parent_instance;
  exapmleObjectProxyPrivate *priv;
};

struct _exapmleObjectProxyClass
{
  GDBusObjectProxyClass parent_class;
};

GType exapmle_object_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (exapmleObjectProxy, g_object_unref)
#endif

exapmleObjectProxy *exapmle_object_proxy_new (GDBusConnection *connection, const gchar *object_path);

#define EXAPMLE_TYPE_OBJECT_SKELETON (exapmle_object_skeleton_get_type ())
#define EXAPMLE_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), EXAPMLE_TYPE_OBJECT_SKELETON, exapmleObjectSkeleton))
#define EXAPMLE_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), EXAPMLE_TYPE_OBJECT_SKELETON, exapmleObjectSkeletonClass))
#define EXAPMLE_OBJECT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), EXAPMLE_TYPE_OBJECT_SKELETON, exapmleObjectSkeletonClass))
#define EXAPMLE_IS_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), EXAPMLE_TYPE_OBJECT_SKELETON))
#define EXAPMLE_IS_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), EXAPMLE_TYPE_OBJECT_SKELETON))

typedef struct _exapmleObjectSkeleton exapmleObjectSkeleton;
typedef struct _exapmleObjectSkeletonClass exapmleObjectSkeletonClass;
typedef struct _exapmleObjectSkeletonPrivate exapmleObjectSkeletonPrivate;

struct _exapmleObjectSkeleton
{
  /*< private >*/
  GDBusObjectSkeleton parent_instance;
  exapmleObjectSkeletonPrivate *priv;
};

struct _exapmleObjectSkeletonClass
{
  GDBusObjectSkeletonClass parent_class;
};

GType exapmle_object_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (exapmleObjectSkeleton, g_object_unref)
#endif

exapmleObjectSkeleton *exapmle_object_skeleton_new (const gchar *object_path);
void exapmle_object_skeleton_set_manager (exapmleObjectSkeleton *object, exapmleManager *interface_);

/* ---- */

#define EXAPMLE_TYPE_OBJECT_MANAGER_CLIENT (exapmle_object_manager_client_get_type ())
#define EXAPMLE_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), EXAPMLE_TYPE_OBJECT_MANAGER_CLIENT, exapmleObjectManagerClient))
#define EXAPMLE_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), EXAPMLE_TYPE_OBJECT_MANAGER_CLIENT, exapmleObjectManagerClientClass))
#define EXAPMLE_OBJECT_MANAGER_CLIENT_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), EXAPMLE_TYPE_OBJECT_MANAGER_CLIENT, exapmleObjectManagerClientClass))
#define EXAPMLE_IS_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), EXAPMLE_TYPE_OBJECT_MANAGER_CLIENT))
#define EXAPMLE_IS_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), EXAPMLE_TYPE_OBJECT_MANAGER_CLIENT))

typedef struct _exapmleObjectManagerClient exapmleObjectManagerClient;
typedef struct _exapmleObjectManagerClientClass exapmleObjectManagerClientClass;
typedef struct _exapmleObjectManagerClientPrivate exapmleObjectManagerClientPrivate;

struct _exapmleObjectManagerClient
{
  /*< private >*/
  GDBusObjectManagerClient parent_instance;
  exapmleObjectManagerClientPrivate *priv;
};

struct _exapmleObjectManagerClientClass
{
  GDBusObjectManagerClientClass parent_class;
};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (exapmleObjectManagerClient, g_object_unref)
#endif

GType exapmle_object_manager_client_get_type (void) G_GNUC_CONST;

GType exapmle_object_manager_client_get_proxy_type (GDBusObjectManagerClient *manager, const gchar *object_path, const gchar *interface_name, gpointer user_data);

void exapmle_object_manager_client_new (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *exapmle_object_manager_client_new_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *exapmle_object_manager_client_new_sync (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);

void exapmle_object_manager_client_new_for_bus (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *exapmle_object_manager_client_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *exapmle_object_manager_client_new_for_bus_sync (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);


G_END_DECLS

#endif /* __MYAPP_GENERATED_H__ */
